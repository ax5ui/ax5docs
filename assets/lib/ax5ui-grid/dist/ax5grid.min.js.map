{"version":3,"sources":["ax5grid.js","ax5grid-body.js","ax5grid-collector.js","ax5grid-data.js","ax5grid-excel.js","ax5grid-formatter.js","ax5grid-header.js","ax5grid-inline-editor.js","ax5grid-page.js","ax5grid-scroller.js","ax5grid-tmpl.js","ax5grid-util.js"],"names":["UI","ax5","ui","U","util","GRID","addClass","className","version","ax5grid","self","this","cfg","ctrlKeys","33","34","35","36","37","38","39","40","instanceId","getGuid","config","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","frozenColumnIndex","frozenRowIndex","showLineNumber","showRowSelector","multipleSelect","height","columnMinWidth","lineNumberColumnWidth","rowSelectorColumnWidth","sortable","undefined","remoteSort","header","align","columnHeight","columnPadding","columnBorderWidth","body","grouping","mergeCells","rightSum","footSum","page","display","navigationItemCount","scroller","size","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","xvar","bodyTrHeight","scrollContentWidth","scrollContentHeight","columns","colGroup","footSumColumns","bodyGrouping","list","selectedDataIndexs","deletedList","sortInfo","focusedColumn","selectedColumn","isInlineEditing","inlineEditing","headerTable","leftHeaderData","headerData","rightHeaderData","bodyRowTable","leftBodyRowData","bodyRowData","rightBodyRowData","bodyRowMap","bodyGroupingTable","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","footSumTable","leftFootSumData","footSumData","needToPaintSum","initGrid","data","id","$target","html","tmpl","get","$","container","hidden","find","root","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","right-body","right-body-scroll","bottom-aside-body","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","horizontal-bar","corner","navigation","status","form","clipboard","resizer","css","_height","initColumns","_columns","deepCopy","makeHeaderTable","call","length","makeBodyRowTable","makeBodyRowMap","rows","colGroupMap","r","rl","row","c","cl","cols","colIndex","jQuery","extend","k","push","onResetColumns","resetColGroupWidth","initFootSum","initBodyGroup","alignGrid","repaint","resize","CT_WIDTH","width","totalWidth","computedWidth","autoWidthColgroupIndexs","i","l","isNumber","_width","right","left","_footSum","isArray","makeFootSumTable","_grouping","by","makeBodyGroupingTable","kl","orderBy","seq","fixed","key","sort","sortFixed","_isFirst","Math","min","innerWidth","innerHeight","CT_HEIGHT","CT_INNER_WIDTH","CT_INNER_HEIGHT","asidePanelWidth","frozenPanelWidth","endIndex","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","rightPanelWidth","frozenRowHeight","footSumHeight","headerHeight","pageHeight","totalColGroupWidth","bodyWidth","panelDisplayProcess","vPosition","hPosition","containerType","isHide","hide","scrollerDisplayProcess","scrollerWidth","scrollerHeight","show","sortColumns","_sortInfo","isFunction","that","a","b","initData","clearGroupingData","init","_config","target","console","log","info","getError","onStateChanged","onClick","onLoad","onDataChanged","isObject","error","parseJson","attr","grid","window","bind","document","on","e","isPickerClick","findParentNode","_target","getAttribute","focused","blur","which","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","UP","shiftKey","DOWN","metaKey","ctrlKey","copySelect","SPACE","Object","keys","setTimeout","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","_e","inlineEdit","active","test","keydown","activeEditLength","columnKey","_act","_data","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_colIndex","_dindex","_di","_column","dindex","rowIndex","originalColumn","__isGrouping","forEach","join","innerText","select","execCommand","setData","set","navigationUpdate","scrollTo","top","getList","_type","setHeight","offsetParent","addRow","_row","_options","add","appendToList","_list","append","removeRow","remove","updateRow","update","repaintRow","deleteRow","setValue","_key","_value","repaintCell","_panelName","_rows","__dindex","__key","__value","addColumn","first","concat","last","_cindex","splice","removeColumn","updateColumn","setColumnWidth","columnResizerIndex","getColumnSortInfo","setColumnSort","applySortStatus","_selectObject","selectedClear","clearSelect","updateRowState","selectAll","updateRowStateAll","exportExcel","_fileName","table","getExcelString","excel","export","focus","_pos","selectedIndex","HOME","END","destroy","empty","grid_instance","filter","main","arguments","setConfig","apply","columnSelect","focusClear","panelName","removeAttr","clear","column","editKey","colspan","selectedRange","start","end","deActive","trl","range","s","max","_panels","columnSelector","cell","Number","off","_states","si","cellChecked","checked","_state","col","targetClick","default","item","value","editor","type","getValue","newValue","trueValue","falseValue","editorConfig","rowSelector","internalCall","lineNumber","targetDBLClick","onDBLClick","touchmoved","resetFrozenColumn","dividedBodyRowObj","divideTableByFrozenColumnIndex","asideBodyRowData","dataTable","label","rowspan","_col","columnAttr","leftData","rightData","dividedBodyGroupingObj","asideBodyGroupingData","dividedFootSumObj","getFieldValue","_item","_index","_returnPlainText","tagsToReplace","<",">","_editor","inlineEditor","editMode","disabled","getHtml","formatter","returnValue","replace","tag","getGroupingValue","_label","__groupingList","groupBy","__groupingBy","collector","getSumFieldValue","_reset","paintStartRowIndex","floor","abs","position","dataRowCount","isFirstPaint","bodyAlign","paintRowCount","ceil","addEventListener","supportTouch","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","cgl","di","dl","tri","ci","cellHeight","colAlign","isScrolled","len","isGroupingRow","rowTable","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","index","_cellHeight","lineHeight","multiLine","innerHTML","repaintSum","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","ri","tableTrTds","trMaps","childNodes","tdObj","text","_loop","prevTokenColIndexs","_loop2","search","hasFalse","ti","scrollConfig","asideColGroup","slice","leftHeaderColGroup","headerColGroup","statusUpdate","_newValue","updateCell","updateWith","updateColumnKey","findPanelByColumnIndex","updateWithCell","replaceGroupTr","replaceTr","noRepaint","_position","UD","_dy","moveResult","while_i","nPanelInfo","LR","_dx","isScrollPanel","containerPanelName","$column","newLeft","outerWidth","INDEX","LEFT","RIGHT","_initValue","useReturnToSave","originalValue","initValue","__editor","isNothing","number","money","$inlineEditorCell","$inlineEditor","_msg","editorValue","tagName","val","action","CANCEL","__clear","bindedAx5ui","ax5picker","ax5select","getBody","getSum","po","sum","avg","listLength","round","returnList","appendIndex","dataRealRowCount","groupingKeys","map","compareString","gi","gl","appendRow","ari","appendRowItem","labels","ki","lastIndex","Function","getRealPathForDataItem","_selected","sortInfoArray","getKeyValue","order","_a_val","_b_val","_a","_b","_typeof","_callback","appendIdle","clearTimeout","base64","btoa","unescape","encodeURIComponent","uri","getExcelTmpl","tableToExcel","fileName","output","tables","mustache","render","worksheet","arr","t","name","isChrome","navigator","userAgent","indexOf","isSafari","isIE","documentMode","blob1","blankWindow","$iframe","iframe","anchor","msSaveOrOpenBlob","Blob","open","write","close","appendChild","createElement","download","href","click","removeChild","columnResizerEvent","_columnResizer","$columnResizer","columnResizerPositionLeft","offset","gridTargetOffsetLeft","resizeRange","ENM","mouseObj","getMousePosition","__da","clientX","mousePosition","columnResizerLived","removeClass","unbind","toggleSort","dividedHeaderObj","asideHeaderData","headerAlign","repaintHeader","tableWidth","trCSS_class","_SS","enableFilter","resizerHeight","resizerLeft","AS","sortOrder","multiSort","getHeader","edit_text","_root","_columnKey","_$parent","$el","bindUI","_$el","edit_money","ax5formatter","pattern","edit_number","edit_date","direction","content","state","activePicker","edit_select","eConfig","optionValue","optionText","optionSelected","options","n","activeSelectOptionGroup","edit_checkbox","marginTop","date","checkbox","onclickPageMove","callback","_pageNo","currentPage","selectPage","onChange","prev","pageNo","next","totalPages","hasPage","pageSize","totalElements","firstIcon","prevIcon","nextIcon","lastIcon","returns","startI","endI","p","act","fromRowIndex","toRowIndex","progress","convertScrollPosition","_var","_content_height","_panel_height","_scroller_height","_vertical_scroller_height","verticalScrollBarHeight","_content_width","_panel_width","_scroller_width","_horizontal_scroller_width","horizontalScrollBarWidth","convertScrollBarPosition","_top","scrollPositon","_left","scrollBarMover","track","bar","Date","getTime","moveout_timer","trackOffset","barBox","outerHeight","trackBox","getScrollerPosition","newTop","clientY","barOffset","scrollContentMover","wheel","delta","_body_scroll_position","isNaN","_top_is_end","_left_is_end","x","y","getContentPosition","__x_da","__y_da","margin","E","detail","deltaY","wheelDelta","deltaX","page_navigation","page_status","tmplName","_table","_frozenColumnIndex","tempTable_l","tempTable_r","colStartIndex","colEndIndex","leftCol","rightCol","changedTouches","pageX","pageY","mousedown","mousemove","mouseup","maekRows","depth","parentField","field","selfMakeRow","__columns","_footSumColumns","footSumRow","addC","_bodyGroupingColumns","_containerPanelName","_isScrollPanel","_dataPath","path","_path","split"],"mappings":"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","file":"ax5grid.min.js","sourcesContent":["/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid\n(function () {\n\n    let UI = ax5.ui,\n        U = ax5.util,\n        GRID;\n\n    UI.addClass({\n        className: \"grid\",\n        version: \"${VERSION}\"\n    }, (function () {\n        /**\n         * @class ax5grid\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var myGrid = new ax5.ui.grid();\n         * ```\n         */\n        let ax5grid = function () {\n            let self = this,\n                cfg,\n                ctrlKeys = {\n                    \"33\": \"KEY_PAGEUP\",\n                    \"34\": \"KEY_PAGEDOWN\",\n                    \"35\": \"KEY_END\",\n                    \"36\": \"KEY_HOME\",\n                    \"37\": \"KEY_LEFT\",\n                    \"38\": \"KEY_UP\",\n                    \"39\": \"KEY_RIGHT\",\n                    \"40\": \"KEY_DOWN\"\n                };\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                debounceTime: 250,\n                appendDebouncer: null,\n                appendDebounceTimes: 0,\n                appendProgressIcon: '...',\n                appendProgress: false,\n\n                // 틀고정 속성\n                frozenColumnIndex: 0,\n                frozenRowIndex: 0,\n                showLineNumber: false,\n                showRowSelector: false,\n                multipleSelect: true,\n\n                height: 0,\n                columnMinWidth: 100,\n                lineNumberColumnWidth: 30,\n                rowSelectorColumnWidth: 26,\n                sortable: undefined,\n                remoteSort: false,\n\n                header: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1\n                },\n                body: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1,\n                    grouping: false,\n                    mergeCells: false\n                },\n                rightSum: false,\n                footSum: false,\n                page: {\n                    height: 25,\n                    display: true,\n                    navigationItemCount: 5\n                },\n                scroller: {\n                    size: 15,\n                    barMinSize: 15,\n                    trackPadding: 4\n                },\n                columnKeys: {\n                    selected: '__selected__',\n                    modified: '__modified__',\n                    deleted: '__deleted__',\n                    disableSelection: '__disable_selection__'\n                }\n            };\n            this.xvar = {\n                bodyTrHeight: 0, // 한줄의 높이\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n                scrollContentHeight: 0 // 스크롤 된 내용물의 높이\n            };\n\n            // 그리드 데이터셋\n            this.columns = []; // config.columns에서 복제된 오브젝트\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n            this.footSumColumns = [];\n            this.bodyGrouping = {};\n\n            this.list = []; // 그리드의 데이터\n            this.page = {}; // 그리드의 페이지 정보\n            this.selectedDataIndexs = [];\n            this.deletedList = [];\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n            this.isInlineEditing = false;\n            this.inlineEditing = {};\n\n            // header\n            this.headerTable = {};\n            this.leftHeaderData = {};\n            this.headerData = {};\n            this.rightHeaderData = {};\n\n            // body\n            this.bodyRowTable = {};\n            this.leftBodyRowData = {};\n            this.bodyRowData = {};\n            this.rightBodyRowData = {};\n            this.bodyRowMap = {};\n\n            this.bodyGroupingTable = {};\n            this.leftBodyGroupingData = {};\n            this.bodyGroupingData = {};\n            this.rightBodyGroupingData = {};\n\n            // footSum\n            this.footSumTable = {}; // footSum의 출력레이아웃\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n            cfg = this.config;\n\n            const onStateChanged = function (_opts, _that) {\n                if (_opts && _opts.onStateChanged) {\n                    _opts.onStateChanged.call(_that, _that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(_that, _that);\n                }\n                return true;\n            };\n            const initGrid = function () {\n                // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n                let data = {\n                    instanceId: this.id\n                };\n\n                this.$target.html(GRID.tmpl.get(\"main\", data));\n\n                // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n                this.$ = {\n                    \"container\": {\n                        \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\n                        \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\n                        \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\n                        \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\n                    },\n                    \"panel\": {\n                        \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\n                        \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\n                        \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\n                        \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\n                        \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\n                        \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\n                        \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\n                        \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\n                        \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\n                        \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\n                        \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\n                        \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\n                        \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\n                        \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\n                        \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\n                        \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\n                        \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\n                        \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\n                        \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\n                        \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\n                        \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\n                    },\n                    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n                    \"scroller\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\n                        \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\n                        \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\n                        \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\n                    },\n                    \"page\": {\n                        \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\n                        \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\n                    },\n                    \"form\": {\n                        \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\n                    },\n                    \"resizer\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\n                    }\n                };\n\n                this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\n\n                return this;\n            };\n            const initColumns = function (_columns) {\n                this.columns = U.deepCopy(_columns);\n                this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\n                this.xvar.frozenColumnIndex = (cfg.frozenColumnIndex > this.columns.length) ? this.columns.length : cfg.frozenColumnIndex;\n\n                this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\n                this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\n                // 바디에 표현될 한줄의 높이를 계산합니다.\n                this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n                let colGroupMap = {};\n                for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n                    let row = this.headerTable.rows[r];\n                    for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                        colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n                    }\n                }\n\n                this.colGroup = [];\n                for (var k in colGroupMap) {\n                    this.colGroup.push(colGroupMap[k]);\n                }\n\n                return this;\n            };\n            const onResetColumns = function () {\n                initColumns.call(this, this.config.columns);\n                resetColGroupWidth.call(this);\n                if (this.config.footSum) {\n                    initFootSum.call(this, this.config.footSum);\n                    this.needToPaintSum = true;\n                }\n                if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n                alignGrid.call(this, true);\n                GRID.header.repaint.call(this, true);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n            };\n            const resetColGroupWidth = function () {\n                /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (function () {\n                            let width = 0;\n                            if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                            if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                            return width;\n                        })(),\n                    totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\n                    colGroup = this.colGroup,\n                    i, l;\n\n                for (i = 0, l = colGroup.length; i < l; i++) {\n                    if (U.isNumber(colGroup[i].width)) {\n                        totalWidth += colGroup[i]._width = colGroup[i].width;\n                    } else if (colGroup[i].width === \"*\") {\n                        autoWidthColgroupIndexs.push(i);\n                    } else if (U.right(colGroup[i].width, 1) === \"%\") {\n                        totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n                    }\n                }\n                if (autoWidthColgroupIndexs.length > 0) {\n                    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n                    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n                        colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n                    }\n                }\n            };\n            const initFootSum = function (_footSum) {\n                if (U.isArray(_footSum)) {\n                    this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n                } else {\n                    this.footSumColumns = [];\n                    this.footSumTable = {};\n                }\n            };\n            const initBodyGroup = function (_grouping) {\n                let grouping = jQuery.extend({}, _grouping);\n                if (\"by\" in grouping && \"columns\" in grouping) {\n                    this.bodyGrouping = {\n                        by: grouping.by,\n                        columns: grouping.columns\n                    };\n                    this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n                    this.sortInfo = (function () {\n                        let sortInfo = {};\n                        for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                            sortInfo[this.bodyGrouping.by[k]] = {\n                                orderBy: \"asc\",\n                                seq: k,\n                                fixed: true\n                            };\n                            for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\n                                if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                                    this.colGroup[c].sort = \"asc\";\n                                    this.colGroup[c].sortFixed = true;\n                                }\n                            }\n                        }\n                        return sortInfo;\n                    }).call(this);\n                } else {\n                    cfg.body.grouping = false;\n                }\n            };\n            const alignGrid = function (_isFirst) {\n                // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n                if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n                    return false;\n                }\n\n                if (!this.config.height) {\n                    this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\n                }\n\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n                    CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n                    CT_INNER_WIDTH = CT_WIDTH,\n                    CT_INNER_HEIGHT = CT_HEIGHT,\n                    asidePanelWidth = cfg.asidePanelWidth = (function () {\n                        let width = 0;\n                        if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                        if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                        return width;\n                    })(),\n                    frozenPanelWidth = cfg.frozenPanelWidth = (function (colGroup, endIndex) {\n                        let width = 0;\n                        for (let i = 0, l = endIndex; i < l; i++) {\n                            width += colGroup[i]._width;\n                        }\n                        return width;\n                    })(this.colGroup, cfg.frozenColumnIndex),\n                    verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\n\n                // todo : 우측 함계컬럼 넘비 계산\n                let rightPanelWidth = 0,\n                    frozenRowHeight = (function (bodyTrHeight) {\n                        return cfg.frozenRowIndex * bodyTrHeight;\n                    })(this.xvar.bodyTrHeight),\n                    footSumHeight = (function (bodyTrHeight) {\n                        return this.footSumColumns.length * bodyTrHeight;\n                    }).call(this, this.xvar.bodyTrHeight),\n                    headerHeight = this.headerTable.rows.length * cfg.header.columnHeight,\n                    pageHeight = (cfg.page.display) ? cfg.page.height : 0;\n\n                (function () {\n                    verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n                    horizontalScrollerHeight = (function () {\n                        let totalColGroupWidth = 0;\n                        // aside 빼고 너비\n                        // 수직 스크롤이 있으면 또 빼고 비교\n                        let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n                        for (let i = 0, l = this.colGroup.length; i < l; i++) {\n                            totalColGroupWidth += this.colGroup[i]._width;\n                        }\n                        return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n                    }).call(this);\n\n                    if (horizontalScrollerHeight > 0) {\n                        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    }\n                }).call(this);\n\n                // 수평 너비 결정\n                CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n                // 수직 스크롤러의 높이 결정.\n                CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n                bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n                let panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (hPosition) {\n                        case \"aside\":\n                            if (asidePanelWidth === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = 0;\n                                css[\"width\"] = asidePanelWidth;\n                            }\n                            break;\n                        case \"left\":\n                            if (cfg.frozenColumnIndex === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = asidePanelWidth;\n                                css[\"width\"] = frozenPanelWidth;\n                            }\n                            break;\n                        case \"right\":\n                            if (!cfg.rightSum) {\n                                isHide = true;\n                            } else {\n\n                            }\n                            break;\n                        default:\n                            if (containerType !== \"page\") {\n                                if (cfg.frozenColumnIndex === 0) {\n                                    css[\"left\"] = asidePanelWidth;\n                                } else {\n                                    css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                                }\n                                css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    if (containerType === \"body\") {\n                        switch (vPosition) {\n                            case \"top\":\n                                if (cfg.frozenRowIndex == 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = 0;\n                                    css[\"height\"] = frozenRowHeight;\n                                }\n                                break;\n                            case \"bottom\":\n                                if (!cfg.footSum) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = bodyHeight - footSumHeight;\n                                    css[\"height\"] = footSumHeight; // footSum height\n                                }\n                                break;\n                            default:\n                                css[\"top\"] = frozenRowHeight;\n                                css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                                break;\n                        }\n                    } else if (containerType === \"header\") {\n                        css[\"height\"] = headerHeight;\n                    } else if (containerType === \"page\") {\n                        if (pageHeight == 0) {\n                            isHide = true;\n                        } else {\n                            css[\"height\"] = pageHeight;\n                        }\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.css(css);\n                    return this;\n                };\n                let scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (containerType) {\n                        case \"vertical\":\n                            if (scrollerWidth > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = CT_INNER_HEIGHT;\n                                css[\"bottom\"] = scrollerHeight + pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"horizontal\":\n                            if (scrollerHeight > 0) {\n                                css[\"width\"] = CT_INNER_WIDTH;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"right\"] = scrollerWidth;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"corner\":\n                            if (scrollerWidth > 0 && scrollerHeight > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                };\n\n                this.$[\"container\"][\"header\"].css({height: headerHeight});\n                this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n                // 각 패널들의 크기 표시여부를 결정합니다\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n                panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n                return true;\n            };\n            const sortColumns = function (_sortInfo) {\n                GRID.header.repaint.call(this);\n\n                if (U.isFunction(this.config.remoteSort)) {\n                    let that = {sortInfo: []};\n                    for (let k in _sortInfo) {\n                        that.sortInfo.push({\n                            key: k,\n                            orderBy: _sortInfo[k].orderBy,\n                            seq: _sortInfo[k].seq\n                        });\n                    }\n                    that.sortInfo.sort(function (a, b) {\n                        return a.seq > b.seq;\n                    });\n                    this.config.remoteSort.call(that, that);\n                } else {\n                    if (this.config.body.grouping) {\n                        this.list = GRID.data.initData.call(this,\n                            GRID.data.sort.call(this,\n                                _sortInfo,\n                                GRID.data.clearGroupingData.call(this,\n                                    this.list\n                                )\n                            )\n                        );\n                    }\n                    else {\n                        this.list = GRID.data.sort.call(this, _sortInfo,\n                            GRID.data.clearGroupingData.call(this,\n                                this.list\n                            )\n                        );\n                    }\n                    GRID.body.repaint.call(this, true);\n                    GRID.scroller.resize.call(this);\n                }\n            };\n            /// private end\n\n            /**\n             * Preferences of grid UI\n             * @method ax5grid.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Number} [_config.frozenColumnIndex=0]\n             * @param {Number} [_config.frozenRowIndex=0]\n             * @param {Boolean} [_config.showLineNumber=false]\n             * @param {Boolean} [_config.showRowSelector=false]\n             * @param {Boolean} [_config.multipleSelect=true]\n             * @param {Number} [_config.columnMinWidth=100]\n             * @param {Number} [_config.lineNumberColumnWidth=30]\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\n             * @param {Boolean} [_config.sortable=false]\n             * @param {Boolean} [_config.multiSort=false]\n             * @param {Function} [_config.remoteSort=false]\n             * @param {Object} [_config.header]\n             * @param {String} [_config.header.align]\n             * @param {Number} [_config.header.columnHeight=25]\n             * @param {Number} [_config.header.columnPadding=3]\n             * @param {Number} [_config.header.columnBorderWidth=1]\n             * @param {Object} [_config.body]\n             * @param {Function} [_config.onClick]\n             * @param {Function} [_config.onDBLClick]\n             * @param {String|Array} [_config.body.mergeCells=false] -\n             * @param {String} [_config.body.align]\n             * @param {Number} [_config.body.columnHeight=25]\n             * @param {Number} [_config.body.columnPadding=3]\n             * @param {Number} [_config.body.columnBorderWidth=1]\n             * @param {Object} [_config.body.grouping]\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\n             * @param {Object} [_config.page]\n             * @param {Number} [_config.page.height=25]\n             * @param {Boolean} [_config.page.display=true]\n             * @param {Number} [_config.page.navigationItemCount=5]\n             * @param {Object} [_config.scroller]\n             * @param {Number} [_config.scroller.size=15]\n             * @param {Number} [_config.scroller.barMinSize=15]\n             * @param {Number} [_config.scroller.trackPadding=4]\n             * @param {Object} [_config.columnKeys]\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\n             * @param {Object[]} _config.columns\n             * @param {String} _config.columns[].key\n             * @param {String} _config.columns[].label\n             * @param {Number} _config.columns[].width\n             * @param {(String|Function)} _config.columns[].styleClass\n             * @param {Boolean} _config.columns[].enableFilter\n             * @param {Boolean} _config.columns[].sortable\n             * @param {String} _config.columns[].align\n             * @param {(String|Function)} _config.columns[].formatter\n             * @param {Object} _config.columns[].editor\n             * @param {String} _config.columns[].editor.type - text,number,money,date\n             * @param {Object} _config.columns[].editor.config\n             * @param {Array} _config.columns[].editor.updateWith\n             * @param {Function} _config.columns[].editor.disabled - disable editor\n             * @param {Boolean} [_config.columns[].multiLine=false]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * var firstGrid = new ax5.ui.grid();\n             *\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\n             *     return (''+this.value).toUpperCase();\n             * };\n             *\n             * ax5.ui.grid.collector[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             *\n             * var sampleData = [\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\n             * ];\n             *\n             * var gridView = {\n             *     initView: function () {\n             *         firstGrid.setConfig({\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\n             *             columns: [\n             *                 {\n             *                     key: \"companyJson['대표자명']\",\n             *                     label: \"필드A\",\n             *                     width: 80,\n             *                     styleClass: function () {\n             *                         return \"ABC\";\n             *                     },\n             *                     enableFilter: true,\n             *                     align: \"center\",\n             *                     editor: {type:\"text\"}\n             *                 },\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\n             *                 {\n             *                     key: undefined, label: \"필드C\", columns: [\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\n             *                     ]\n             *                 },\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\n             *                 {key: \"customer\", label: \"고객명\"},\n             *                 {key: \"saleType\", label: \"판매타입\"}\n             *             ]\n             *         });\n             *         return this;\n             *     },\n             *     setData: function (_pageNo) {\n             *         firstGrid.setData(sampleData);\n             *         return this;\n             *     }\n             * };\n             *\n             * // onClick, onDBLClick, onDataChanged\n             * firstGrid.setConfig({\n             *      target: $('[data-ax5grid=\"first-grid\"]'),\n             *      columns: [...],\n             *      body: {\n             *          onClick: function(){\n             *              console.log(this);\n             *          },\n             *          onDBLClick: function(){\n             *              console.log(this);\n             *              // If the column does not have an editor attribute, an event is raised.\n             *          },\n             *          onDataChanged: function(){\n             *              console.log(this);\n             *              // If change Data\n             *          }\n             *      }\n             * });\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\n                    return this;\n                }\n\n                // 그리드의 이벤트 정의 구간\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.body.onDataChanged;\n                // todo event에 대한 추가 정의 필요\n\n                this.$target = jQuery(cfg.target);\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\n\n                let grid = this.config = cfg;\n\n                if (!this.config.height) {\n                    this.config._height = this.$target.height();\n                }\n\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\n                if (!this.id) {\n                    //this.id = 'ax5grid-' + ax5.getGuid();\n                    this.id = 'ax5grid-' + this.instanceId;\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\n                }\n\n                ///========\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n                initGrid.call(this);\n\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n                initColumns.call(this, grid.columns);\n                resetColGroupWidth.call(this);\n\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\n\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\n\n                // 그리드의 각 요소의 크기를 맞춤니다.\n                alignGrid.call(this, true);\n\n                // columns의 데이터로 header데이터를 만들고\n                GRID.header.init.call(this);\n                // header를 출력합니다.\n                GRID.header.repaint.call(this);\n\n                // columns의 데이터로 body데이터를 만들고\n                GRID.body.init.call(this);\n                // body를 출력합니다.\n                GRID.body.repaint.call(this);\n\n                // scroller\n                GRID.scroller.init.call(this);\n                GRID.scroller.resize.call(this);\n\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\n                    alignGrid.call(this);\n                    GRID.scroller.resize.call(this);\n                }.bind(this));\n\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, (function (e) {\n                    let isPickerClick = false,\n                        target = U.findParentNode(e.target, function (_target) {\n                            if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\n                                return true;\n                            }\n                            return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\n                        });\n\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\n                        self.focused = true;\n                    } else {\n                        self.focused = false;\n                        GRID.body.blur.call(this);\n                    }\n                }).bind(this));\n\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\n                    if (self.focused) {\n                        if (self.isInlineEditing) {\n\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                self.keyDown(\"ESC\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.RETURN) {\n                                self.keyDown(\"RETURN\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.TAB) {\n                                self.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.UP) {\n                                self.keyDown(\"RETURN\", {shiftKey: true});\n                            }\n                            else if (e.which == ax5.info.eventKeys.DOWN) {\n                                self.keyDown(\"RETURN\", {});\n                            }\n\n                        }\n                        else {\n\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) { // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                                    U.stopEvent(e);\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\n                                    if (self.focused) {\n                                        GRID.body.blur.call(self);\n                                    }\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                    self.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n\n                        }\n                    }\n                });\n\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n                setTimeout((function () {\n                    if (this.onLoad) {\n                        this.onLoad.call({\n                            self: this\n                        })\n                    }\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * align grid size\n             * @method ax5grid.align\n             * @returns {ax5grid}\n             */\n            this.align = function () {\n                if (alignGrid.call(this)) {\n                    GRID.scroller.resize.call(this);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.keyDown\n             * @param {String} _keyName\n             * @param {Event|Object} _data\n             * @return {ax5grid}\n             */\n            this.keyDown = (function () {\n                let processor = {\n                    \"KEY_UP\": function () {\n                        GRID.body.moveFocus.call(this, \"UP\");\n                    },\n                    \"KEY_DOWN\": function () {\n                        GRID.body.moveFocus.call(this, \"DOWN\");\n                    },\n                    \"KEY_LEFT\": function () {\n                        GRID.body.moveFocus.call(this, \"LEFT\");\n                    },\n                    \"KEY_RIGHT\": function () {\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\n                    },\n                    \"KEY_HOME\": function () {\n                        GRID.body.moveFocus.call(this, \"HOME\");\n                    },\n                    \"KEY_END\": function () {\n                        GRID.body.moveFocus.call(this, \"END\");\n                    },\n                    \"INLINE_EDIT\": function (_e) {\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                            U.stopEvent(_e);\n                        }\n                    },\n                    \"ESC\": function (_e) {\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\n                    },\n                    \"RETURN\": function (_e) {\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey);\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                                }\n                            }\n                        }\n                        if (activeEditLength == 0) {\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                            U.stopEvent(_e);\n                        } else {\n\n                        }\n                    },\n                    \"TAB\": function (_e) {\n\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n                                }\n                            }\n                        }\n                    }\n                };\n                return function (_act, _data) {\n                    if (_act in processor) processor[_act].call(this, _data);\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.copySelect\n             * @returns {Boolean} copysuccess\n             */\n            this.copySelect = function () {\n                let copysuccess,\n                    $clipBoard = this.$[\"form\"][\"clipboard\"],\n                    copyTextArray = [], copyText = \"\",\n                    _rowIndex, _colIndex, _dindex, _di = 0;\n\n                for (let c in this.selectedColumn) {\n                    let _column = this.selectedColumn[c];\n\n                    if (_column) {\n                        if (typeof _dindex === \"undefined\") {\n                            _dindex = _column.dindex;\n                            _rowIndex = _column.rowIndex;\n                            _colIndex = _column.rowIndex;\n                        }\n\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                            _di++;\n                        }\n\n                        if (!copyTextArray[_di]) {\n                            copyTextArray[_di] = [];\n                        }\n                        let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                        if (originalColumn) {\n                            if (this.list[_column.dindex].__isGrouping) {\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                            } else {\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                            }\n                        } else {\n                            copyTextArray[_di].push(\"\");\n                        }\n\n                        _dindex = _column.dindex;\n                        _rowIndex = _column.rowIndex;\n                    }\n                }\n\n                copyTextArray.forEach(function (r) {\n                    copyText += r.join('\\t') + \"\\n\";\n                });\n\n                $clipBoard.get(0).innerText = copyText;\n                $clipBoard.select();\n\n                try {\n                    copysuccess = document.execCommand(\"copy\");\n                } catch (e) {\n                    copysuccess = false;\n                }\n                return copysuccess;\n            };\n\n            /**\n             * @method ax5grid.setData\n             * @param {Array} _data\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setData({\n             *  list: [],\n             *  page: {\n             *      currentPage: 0,\n             *      pageSize: 50,\n             *      totalElements: 500,\n             *      totalPages: 100\n             *  }\n             * });\n             *\n             * // onlyList\n             * ax5Grid.setData([]);\n             * ```\n             */\n            this.setData = function (_data) {\n                GRID.data.set.call(this, _data);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this);\n                GRID.scroller.resize.call(this);\n                GRID.page.navigationUpdate.call(this);\n                GRID.body.scrollTo.call(this, {top: 0});\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getList\n             * @param {String} _type\n             * @returns {Array}\n             * @example\n             * ```js\n             * ax5Grid.getList();\n             * ax5Grid.getList(\"modified\");\n             * ax5Grid.getList(\"deleted\");\n             * ```\n             */\n            this.getList = function (_type) {\n                return GRID.data.getList.call(this, _type);\n            };\n\n            /**\n             * @method ax5grid.setHeight\n             * @param {Number} _height\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setHeight(height);\n             * ```\n             */\n            this.setHeight = function (_height) {\n                //console.log(this.$target);\n                if (_height == \"100%\") {\n                    _height = this.$target.offsetParent().innerHeight();\n                }\n                this.$target.css({height: _height});\n                this.$[\"container\"][\"root\"].css({height: _height});\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addRow\n             * @param {Object} _row\n             * @param {Number|String} [_dindex=last]\n             * @param {Object} [_options] - options of addRow\n             * @param {Boolean} [_options.sort] - sortData\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\n             * ```\n             */\n            this.addRow = function (_row, _dindex, _options) {\n                GRID.data.add.call(this, _row, _dindex, _options);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.appendToList\n             * @param _list\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.appendToList([{},{},{}]);\n             * ax5Grid.appendToList([{},{},{}]);\n             * ```\n             */\n            this.appendToList = function (_list) {\n                GRID.data.append.call(this, _list, (function () {\n                    alignGrid.call(this);\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * @method ax5grid.removeRow\n             * @param {Number|String} [_dindex=last]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.removeRow();\n             * ax5Grid.removeRow(\"first\");\n             * ax5Grid.removeRow(\"last\");\n             * ax5Grid.removeRow(1);\n             * ```\n             */\n            this.removeRow = function (_dindex) {\n                GRID.data.remove.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateRow\n             * @param {Object} _row\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.updateRow = function (_row, _dindex) {\n                GRID.data.update.call(this, _row, _dindex);\n                // todo : mergeCells 옵션에 따라 예외처리\n\n                GRID.body.repaintRow.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.deleteRow\n             * @param {Number|String} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.deleteRow(\"first\");\n             * ax5Grid.deleteRow(\"last\");\n             * ax5Grid.deleteRow(1);\n             * ax5Grid.deleteRow(\"selected\");\n             * ```\n             */\n            this.deleteRow = function (_dindex) {\n                GRID.data.deleteRow.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                // 삭제시엔 포커스 ?\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setValue\n             * @param _dindex\n             * @param _key\n             * @param _value\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setValue(0, \"price\", 100);\n             * ```\n             */\n            this.setValue = function (_dindex, _key, _value) {\n                // getPanelname;\n                if (GRID.data.setValue.call(this, _dindex, _key, _value)) {\n                    let repaintCell = function (_panelName, _rows, __dindex, __key, __value) {\n                        for (let r = 0, rl = _rows.length; r < rl; r++) {\n                            for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n                                if (_rows[r].cols[c].key == __key) {\n                                    if (this.xvar.frozenRowIndex > __dindex) {\n                                        GRID.body.repaintCell.call(this, \"top-\" + _panelName, __dindex, r, c, __value);\n                                    } else {\n                                        GRID.body.repaintCell.call(this, _panelName + \"-scroll\", __dindex, r, c, __value);\n                                    }\n                                }\n                            }\n                        }\n                    };\n\n                    repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, _key, _value);\n                    repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, _key, _value);\n\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addColumn\n             * @param {Object} _column\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.addColumn = (function () {\n                let processor = {\n                    \"first\": function (_column) {\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\n                    },\n                    \"last\": function (_column) {\n                        this.config.columns = this.config.columns.concat([].concat(_column));\n                    }\n                };\n\n                return function (_column, _cindex) {\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _column);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        this.config.columns.splice(_cindex, [].concat(_column))\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.removeCloumn\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.removeColumn = (function () {\n                let processor = {\n                    \"first\": function (_cindex) {\n                        this.config.columns.splice(_cindex, 1);\n                    },\n                    \"last\": function () {\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\n                    }\n                };\n                return function (_cindex) {\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _cindex);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        //\n                        this.config.columns.splice(_cindex, 1);\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.updateColumn\n             * @param {Object} _column\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.updateColumn = function (_column, _cindex) {\n                if (!U.isNumber(_cindex)) {\n                    throw 'invalid argument _cindex';\n                }\n                //\n                this.config.columns.splice(_cindex, 1, _column);\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setColumnWidth\n             * @param {Number} _width\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.setColumnWidth = function (_width, _cindex) {\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n                this.needToPaintSum = true;\n\n                // 컬럼너비 변경사항 적용.\n                GRID.header.repaint.call(this);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n\n                alignGrid.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getColumnSortInfo\n             * @returns {Object} sortInfo\n             */\n            this.getColumnSortInfo = function () {\n                let that = {sortInfo: []};\n                for (let k in this.sortInfo) {\n                    that.sortInfo.push({\n                        key: k,\n                        orderBy: this.sortInfo[k].orderBy,\n                        seq: this.sortInfo[k].seq\n                    });\n                }\n                that.sortInfo.sort(function (a, b) {\n                    return a.seq > b.seq;\n                });\n                return that.sortInfo;\n            };\n\n            /**\n             * @method ax5grid.setColumnSort\n             * @param {Object} _sortInfo\n             * @param {Object} _sortInfo.key\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n             * ```\n             */\n            this.setColumnSort = function (_sortInfo) {\n                if (typeof _sortInfo !== \"undefined\") {\n                    this.sortInfo = _sortInfo;\n                    GRID.header.applySortStatus.call(this, _sortInfo);\n                }\n\n                sortColumns.call(this, _sortInfo || this.sortInfo);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.select\n             * @param {Number|Object} _selectObject\n             * @param {Number} _selectObject.index - index of row\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\n             * @param {Number} _selectObject.conIndex - colIndex of columns\n             * @param {Object} _options\n             * @param {Boolean} _options.selectedClear\n             * @param {Boolean} _options.selected\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.select(0);\n             * firstGrid.select(0, {selected: true});\n             * firstGrid.select(0, {selected: false});\n             * firstGrid.select(0, {selectedClear: true});\n             * ```\n             */\n            this.select = function (_selectObject, _options) {\n                if (U.isNumber(_selectObject)) {\n                    let dindex = _selectObject;\n\n                    if (!this.config.multipleSelect) {\n                        this.clearSelect();\n                    } else {\n                        if (_options && _options.selectedClear) {\n                            this.clearSelect();\n                        }\n                    }\n\n                    GRID.data.select.call(this, dindex, _options && _options.selected);\n                    GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.clearSelect\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.clearSelect();\n             * ```\n             */\n            this.clearSelect = function () {\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\n                GRID.data.clearSelect.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.selectAll\n             * @param {Object} _options\n             * @param {Boolean} _options.selected\n             * @param {Function} _options.filter\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.selectAll();\n             * firstGrid.selectAll({selected: true});\n             * firstGrid.selectAll({selected: false});\n             * firstGrid.selectAll({filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * firstGrid.selectAll({selected: true, filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * ```\n             */\n            this.selectAll = function (_options) {\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.exportExcel\n             * @param {String} _fileName\n             * @returns {ax5grid|String}\n             * @example\n             * ```js\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\n             * console.log(firstGrid.exportExcel());\n             * ```\n             */\n            this.exportExcel = function (_fileName) {\n                let table = [];\n                table.push('<table border=\"1\">');\n                table.push(GRID.header.getExcelString.call(this));\n                table.push(GRID.body.getExcelString.call(this));\n                table.push('</table>');\n\n                if (typeof _fileName === \"undefined\") {\n                    return table.join('');\n                }\n                else {\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.focus\n             * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.focus(\"UP\");\n             * firstGrid.focus(\"DOWN\");\n             * firstGrid.focus(\"HOME\");\n             * firstGrid.focus(\"END\");\n             * ```\n             */\n            this.focus = function (_pos) {\n                if (GRID.body.moveFocus.call(this, _pos)) {\n                    let focusedColumn;\n                    for (let c in this.focusedColumn) {\n                        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                        break;\n                    }\n                    if (focusedColumn) {\n                        this.select(focusedColumn.dindex, {selectedClear: true});\n                    }\n                }\n                else {\n                    if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n                        this.select(0);\n                    } else {\n                        let selectedIndex = this.selectedDataIndexs[0];\n                        let processor = {\n                            \"UP\": function () {\n                                if (selectedIndex > 0) {\n                                    this.select(selectedIndex - 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex - 1);\n                                }\n                            },\n                            \"DOWN\": function () {\n                                if (selectedIndex < this.list.length - 1) {\n                                    this.select(selectedIndex + 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex + 1);\n                                }\n                            },\n                            \"HOME\": function () {\n                                this.select(0, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, 0);\n                            },\n                            \"END\": function () {\n                                this.select(this.list.length - 1, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, this.list.length - 1);\n                            }\n                        };\n\n                        if (_pos in processor) {\n                            processor[_pos].call(this);\n                        }\n                    }\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.destroy\n             * @returns {null}\n             */\n            this.destroy = function () {\n                const instanceId = this.instanceId;\n                this.$target.empty();\n                this.list = [];\n                UI.grid_instance = ax5.util.filter(UI.grid_instance, function () {\n                    return this.instanceId != instanceId;\n                });\n                return null;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.grid_instance = UI.grid_instance || [];\n                UI.grid_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n        return ax5grid;\n    })());\n\n    GRID = ax5.ui.grid;\n})();\n\n// todo : destroy\n// todo : body menu\n// todo : filter\n// todo : column reorder\n// todo : editor 필수값 속성 지정","// ax5.ui.grid.body\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let columnSelect = {\n        focusClear: function () {\n            let self = this, _column;\n            for (let c in self.focusedColumn) {\n                _column = self.focusedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-focused');\n                }\n            }\n            self.focusedColumn = {};\n        },\n        clear: function () {\n            let self = this, _column;\n            for (let c in self.selectedColumn) {\n                _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-selected');\n                }\n            }\n            self.selectedColumn = {};\n        },\n        init: function (column) {\n            let self = this;\n            if (this.isInlineEditing) {\n                for (let editKey in this.inlineEditing) {\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                        return this;\n                    }\n                }\n            }\n\n            // focus\n            columnSelect.focusClear.call(self);\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n                panelName: column.panelName,\n                dindex: column.dindex,\n                rowIndex: column.rowIndex,\n                colIndex: column.colIndex,\n                colspan: column.colspan\n            };\n\n            // select\n            columnSelect.clear.call(self);\n            self.xvar.selectedRange = {\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n                end: null\n            };\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n                if (data) {\n                    return false;\n                } else {\n                    return {\n                        panelName: column.panelName,\n                        dindex: column.dindex,\n                        rowIndex: column.rowIndex,\n                        colIndex: column.colIndex,\n                        colspan: column.colspan\n                    }\n                }\n            })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n            this.$.panel[column.panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]')\n                .attr('data-ax5grid-column-focused', \"true\")\n                .attr('data-ax5grid-column-selected', \"true\");\n\n            if (this.isInlineEditing) {\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\n            }\n        },\n        update: function (column) {\n            var self = this;\n            var dindex, colIndex, rowIndex, trl;\n\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n            columnSelect.clear.call(self);\n\n            var range = {\n                r: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n                },\n                c: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n                }\n            };\n\n            dindex = range.r.s;\n            for (; dindex <= range.r.e; dindex++) {\n\n\n                trl = this.bodyRowTable.rows.length;\n                rowIndex = 0;\n                for (; rowIndex < trl; rowIndex++) {\n                    colIndex = range.c.s;\n                    for (; colIndex <= range.c.e; colIndex++) {\n                        var _panels = [],\n                            panelName = \"\";\n\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        panelName = _panels.join(\"-\");\n\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                            panelName: panelName,\n                            dindex: dindex,\n                            rowIndex: rowIndex,\n                            colIndex: colIndex,\n                            colspan: column.colspan\n                        };\n\n                        _panels = null;\n                        panelName = null;\n                    }\n                }\n            }\n            dindex = null;\n            colIndex = null;\n            rowIndex = null;\n\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .attr('data-ax5grid-column-selected', 'true');\n                }\n            }\n\n        }\n    };\n\n    let columnSelector = {\n        \"on\": function (cell) {\n            let self = this;\n\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n                return;\n            }\n\n            columnSelect.init.call(self, cell);\n\n            this.$[\"container\"][\"body\"]\n                .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                    if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                        columnSelect.update.call(self, {\n                            panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                            dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                            rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                            colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                            colspan: Number(this.getAttribute(\"colspan\"))\n                        });\n                        U.stopEvent(e);\n                    }\n                })\n                .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                })\n                .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            this.$[\"container\"][\"body\"]\n                .off(\"mousemove.ax5grid-\" + this.instanceId)\n                .off(\"mouseup.ax5grid-\" + this.instanceId)\n                .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    let updateRowState = function (_states, _dindex, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex) {\n                    if (this.list[_dindex]) {\n                        var i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", this.list[_dindex][cfg.columnKeys.selected]);\n\n                        }\n                    }\n                },\n                \"selectedClear\": function () {\n                    var si = this.selectedDataIndexs.length;\n                    while (si--) {\n                        var dindex = this.selectedDataIndexs[si];\n                        var i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", false);\n                            this.list[dindex][cfg.columnKeys.selected] = false;\n                        }\n                    }\n                },\n                \"cellChecked\": function (_dindex, _data) {\n                    var key = _data.key;\n                    var rowIndex = _data.rowIndex;\n                    var colIndex = _data.colIndex;\n\n                    var panelName = (function () {\n                        var _panels = [];\n                        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                        if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        return _panels.join(\"-\");\n                    }).call(this);\n\n                    this.$.panel[panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                        .find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]')\n                        .find('[data-ax5grid-editor=\"checkbox\"]')\n                        .attr(\"data-ax5grid-checked\", '' + _data.checked);\n                }\n            };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _dindex, _data);\n        });\n    };\n\n    let updateRowStateAll = function (_states, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex) {\n                    GRID.body.repaint.call(this, true);\n                }\n            };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _data);\n        });\n    };\n\n    let init = function () {\n        let self = this;\n\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, rowIndex, colIndex, disableSelection,\n                targetClick = {\n                    \"default\": function (_column) {\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n\n                        if (column.editor && column.editor.type == \"checkbox\") { // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\n                            let value = GRID.data.getValue.call(self, _column.dindex, column.key),\n                                checked, newValue;\n\n                            if (column.editor.config && column.editor.config.trueValue) {\n                                if (checked = !(value == column.editor.config.trueValue)) {\n                                    newValue = column.editor.config.trueValue;\n                                } else {\n                                    newValue = column.editor.config.falseValue;\n                                }\n                            } else {\n                                newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                            }\n\n                            GRID.data.setValue.call(self, _column.dindex, column.key, newValue);\n\n                            updateRowState.call(self, [\"cellChecked\"], _column.dindex, {\n                                key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                editorConfig: column.editor.config, checked: checked\n                            });\n                        } else {\n                            if (self.config.body.onClick) {\n                                self.config.body.onClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n                        if (self.list[_column.dindex][self.config.columnKeys.disableSelection]) {\n                            return false;\n                        }\n\n                        if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.dindex) {\n                            GRID.body.updateRowState.call(self, [\"selectedClear\"]);\n                            GRID.data.clearSelect.call(self);\n                        }\n\n                        GRID.data.select.call(self, _column.dindex, undefined, {\n                            internalCall: true\n                        });\n                        updateRowState.call(self, [\"selected\"], _column.dindex);\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, rowIndex, colIndex,\n                targetDBLClick = {\n                    \"default\": function (_column) {\n                        if (self.isInlineEditing) {\n                            for (let columnKey in self.inlineEditing) {\n                                if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                    return this;\n                                }\n                            }\n                        }\n\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                        if (column) {\n                            if (!self.list[dindex].__isGrouping) {\n                                value = GRID.data.getValue.call(self, dindex, column.key);\n                            }\n                        }\n\n                        let editor = self.colGroup[_column.colIndex].editor;\n                        if (U.isObject(editor)) {\n                            GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\n                        } else {\n                            // 더블클릭 실행\n                            if (self.config.body.onDBLClick) {\n                                let that = {\n                                    self: self,\n                                    page: self.page,\n                                    list: self.list,\n                                    item: self.list[_column.dindex],\n                                    dindex: _column.dindex,\n                                    rowIndex: _column.rowIndex,\n                                    colIndex: _column.colIndex,\n                                    column: column,\n                                    value: self.list[_column.dindex][column.key]\n                                };\n                                self.config.body.onDBLClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetDBLClick) {\n                targetDBLClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n\n        /* 사용안함. 나중을 위해 그냥 두자\n         this.$[\"container\"][\"body\"].on(\"mouseover\", \"tr\", function () {\n         let dindex = this.getAttribute(\"data-ax5grid-tr-data-index\"),\n         i = self.$.livePanelKeys.length;\n         while (i--) {\n         if (typeof self.xvar.dataHoveredIndex !== \"undefined\") self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + self.xvar.dataHoveredIndex + '\"]').removeClass(\"hover\");\n         self.$.panel[self.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').addClass(\"hover\");\n         }\n         self.xvar.dataHoveredIndex = dindex;\n         });\n         */\n        this.$[\"container\"][\"body\"]\n            .on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                if (self.xvar.touchmoved) return false;\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                    columnSelector.on.call(self, {\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                }\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    let resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n        this.asideBodyRowData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyRowTable);\n        this.leftBodyRowData = dividedBodyRowObj.leftData;\n        this.bodyRowData = dividedBodyRowObj.rightData;\n\n        if (cfg.body.grouping) {\n            let dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n            this.asideBodyGroupingData = (function (dataTable) {\n                let data = {rows: []};\n                for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                    data.rows[i] = {cols: []};\n                    if (i === 0) {\n                        let col = {\n                            label: \"\",\n                            colspan: 1,\n                            rowspan: dataTable.rows.length,\n                            colIndex: null\n                        }, _col = {};\n\n                        if (cfg.showLineNumber) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.lineNumberColumnWidth,\n                                _width: cfg.lineNumberColumnWidth,\n                                columnAttr: \"lineNumber\",\n                                label: \"&nbsp;\", key: \"__d-index__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                        if (cfg.showRowSelector) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.rowSelectorColumnWidth,\n                                _width: cfg.rowSelectorColumnWidth,\n                                columnAttr: \"rowSelector\",\n                                label: \"\", key: \"__d-checkbox__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                    }\n                }\n\n                return data;\n            }).call(this, this.bodyGroupingTable);\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n        }\n\n        this.leftFootSumData = {};\n        this.footSumData = {};\n        if (this.config.footSum) {\n            let dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n            this.leftFootSumData = dividedFootSumObj.leftData;\n            this.footSumData = dividedFootSumObj.rightData;\n        }\n    };\n\n    let getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n        let _key = _col.key, tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__d-index__\") {\n            return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n        }\n        else {\n            if (_col.editor && (function (_editor) {\n                    if (_editor.type in GRID.inlineEditor) {\n                        return (GRID.inlineEditor[_editor.type].editMode == \"inline\");\n                    }\n                    return false;\n                })(_col.editor)) {\n\n                _value = _value || GRID.data.getValue.call(this, _index, _key);\n\n                if (U.isFunction(_col.editor.disabled)) {\n                    if (_col.editor.disabled.call({\n                            list: _list,\n                            dindex: _index,\n                            item: _list[_index],\n                            key: _key,\n                            value: _value\n                        })) {\n                        return _value;\n                    }\n                }\n\n                // print editor\n                return _returnPlainText ? _value : GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\n            }\n            if (_col.formatter) {\n                let that = {\n                    key: _key,\n                    value: _value || GRID.data.getValue.call(this, _index, _key),\n                    dindex: _index,\n                    item: _item,\n                    list: _list\n                };\n                if (U.isFunction(_col.formatter)) {\n                    return _col.formatter.call(that);\n                } else {\n                    return GRID.formatter[_col.formatter].call(that);\n                }\n            }\n            else {\n                let returnValue = \"\";\n\n                if (typeof _value !== \"undefined\") {\n                    returnValue = _value;\n                } else {\n                    _value = GRID.data.getValue.call(this, _index, _key);\n                    if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                }\n\n                // 키값이 Boolean일때 오류 발생하여 수정.\n                return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                        return tagsToReplace[tag] || tag;\n                    });\n            }\n        }\n\n    };\n\n    let getGroupingValue = function (_item, _index, _col) {\n        let value, that, _key = _col.key, _label = _col.label;\n\n        if (typeof _key === \"undefined\") {\n            that = {\n                key: _key,\n                list: _item.__groupingList,\n                groupBy: _item.__groupingBy\n            };\n            if (U.isFunction(_label)) {\n                value = _label.call(that);\n            } else {\n                value = _label;\n            }\n            _item[_col.colIndex] = value;\n            return value;\n        }\n        else if (_key === \"__d-index__\") {\n            return '';\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return '';\n        }\n        else {\n            if (_col.collector) {\n                that = {\n                    key: _key,\n                    list: _item.__groupingList\n                };\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n                _item[_col.colIndex] = value;\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    let getSumFieldValue = function (_list, _col) {\n        let _key = _col.key, _label = _col.label;\n        //, _collector, _formatter\n        if (typeof _key === \"undefined\") {\n            return _label;\n        }\n        else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n            return '&nbsp;';\n        }\n        else {\n            if (_col.collector) {\n                let that = {\n                        key: _key,\n                        list: _list\n                    },\n                    value;\n\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    let repaint = function (_reset) {\n        let cfg = this.config,\n            list = this.list;\n\n        /// repaint reset 타입이면 고정컬럼을 재조정\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n            this.xvar.paintStartRowIndex = undefined;\n        }\n\n        /// 출력시작 인덱스\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n        if (this.xvar.dataRowCount === list.length && this.xvar.paintStartRowIndex === paintStartRowIndex) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n        let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1;\n\n        if (document.addEventListener && ax5.info.supportTouch) {\n            paintRowCount = paintRowCount * 2;\n        }\n\n        /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n        /// 사용된 패널들의 키 모음\n        this.$.livePanelKeys = [];\n\n        // 그리드 바디 영역 페인트 함수\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _groupRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [],\n                cgi, cgl, di, dl, tri, trl, ci, cl, col, cellHeight, colAlign,\n                isScrolled = (function () {\n                    // 스크롤값이 변경되거나 처음 호출되었습니까?\n                    if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                        _scrollConfig = {\n                            paintStartRowIndex: 0,\n                            paintRowCount: _list.length\n                        };\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })();\n\n            if (isScrolled) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n\n                let isGroupingRow = false, rowTable;\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                    SS.push('<tr class=\"tr-' + (di % 4) + '\"',\n                        (isGroupingRow) ? ' data-ax5grid-grouping-tr=\"true\"' : '',\n                        ' data-ax5grid-tr-data-index=\"' + di + '\"',\n                        ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                        ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                        '>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n                        cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                        colAlign = col.align || bodyAlign;\n\n                        SS.push('<td ',\n                            'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-row=\"' + tri + '\" ',\n                            'data-ax5grid-column-col=\"' + ci + '\" ',\n                            'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                            'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                            'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                            (function (_focusedColumn, _selectedColumn) {\n                                let attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            'class=\"' + (function (_col) {\n                                let tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                                column: _col,\n                                                key: _col.key,\n                                                item: _list[di],\n                                                index: di\n                                            }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }).call(this, col) + '\" ',\n                            'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                        SS.push((function (_cellHeight) {\n                            let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                            if (!col.multiLine) {\n                                _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                            }\n\n                            return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                        })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                        SS.push('</td>');\n                    }\n                    SS.push('<td ',\n                        'data-ax5grid-column-row=\"null\" ',\n                        'data-ax5grid-column-col=\"null\" ',\n                        'data-ax5grid-data-index=\"' + di + '\" ',\n                        'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                        'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                        '></td>');\n                    SS.push('</tr>');\n                }\n            }\n            SS.push('</table>');\n\n            if (isScrolled && _list.length) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let tblRowMaps = [];\n            let _elTarget = this.$.panel[_elTargetKey];\n            let token = {}, hasMergeTd;\n            //console.log(_elTarget);\n\n            // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n            let tableTrs = _elTarget.find(\"tr\");\n            for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n                let tableTrTds, trMaps;\n\n                if (!tableTrs[ri].getAttribute(\"data-ax5grid-grouping-tr\")) {\n                    tableTrTds = tableTrs[ri].childNodes;\n                    trMaps = [];\n                    for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                        let tdObj = {\n                            \"$\": jQuery(tableTrTds[ci])\n                        };\n\n                        if (tdObj[\"$\"].attr(\"data-ax5grid-column-col\") != \"null\") {\n                            tdObj.dindex = tdObj[\"$\"].attr(\"data-ax5grid-data-index\");\n                            tdObj.tri = tdObj[\"$\"].attr(\"data-ax5grid-column-row\");\n                            tdObj.ci = tdObj[\"$\"].attr(\"data-ax5grid-column-col\");\n                            tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-rowIndex\");\n                            tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-colIndex\");\n                            tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                            tdObj.text = tdObj[\"$\"].text();\n                            trMaps.push(tdObj);\n                        }\n\n                        tdObj = null;\n                    }\n                    tblRowMaps.push(trMaps);\n                }\n\n            }\n\n\n            // 두줄이상 일 때 의미가 있으니.\n            if (tblRowMaps.length > 1) {\n                hasMergeTd = false;\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    let prevTokenColIndexs = [];\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n                        if (!_colGroup[ci].editor && (() => {\n                                if (U.isArray(cfg.body.mergeCells)) {\n                                    return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                                } else {\n                                    return true;\n                                }\n                            })()) {\n\n                            // 앞줄과 값이 같다면.\n                            if (token[ci] && (() => {\n                                    if (prevTokenColIndexs.length > 0) {\n                                        let hasFalse = true;\n                                        prevTokenColIndexs.forEach(function (ti) {\n                                            if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                                hasFalse = false;\n                                            }\n                                        });\n                                        return hasFalse;\n                                    } else {\n                                        return true;\n                                    }\n                                })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                                tblRowMaps[ri][ci].rowspan = 0;\n                                tblRowMaps[token[ci].ri][ci].rowspan++;\n                                hasMergeTd = true;\n                            } else {\n                                token[ci] = {\n                                    ri: ri,\n                                    ci: ci,\n                                    text: tblRowMaps[ri][ci].text\n                                };\n                            }\n\n                            prevTokenColIndexs.push(ci);\n                        }\n                    }\n                }\n\n                // rowspan을 다 구했으면 적용합니다.\n                if (hasMergeTd) {\n                    for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                            if (tblRowMaps[ri][ci].rowspan == 0) {\n                                tblRowMaps[ri][ci][\"$\"].remove();\n                            } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                                tblRowMaps[ri][ci][\"$\"]\n                                    .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                    .addClass(\"merged\");\n                            }\n                        }\n                    }\n                }\n            }\n\n        };\n        let scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        // aside\n        if (cfg.asidePanelWidth > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum) {\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\n                //repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n            }\n        }\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n        }\n\n        repaintBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n        // 바닥 요약\n        if (cfg.footSum && this.needToPaintSum) {\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        /// mergeCells\n        if (cfg.body.mergeCells && this.list.length) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                    // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                    mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n        }\n\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\n        this.xvar.paintRowCount = paintRowCount;\n        this.xvar.dataRowCount = list.length;\n        this.needToPaintSum = false;\n        GRID.page.statusUpdate.call(this);\n    };\n\n    let repaintCell = function (_panelName, _dindex, _rowIndex, _colIndex, _newValue) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n\n        let updateCell = this.$[\"panel\"][_panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]')\n                .find('[data-ax5grid-cellholder]'),\n            colGroup = this.colGroup,\n            col = colGroup[_colIndex];\n\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n        if (col.editor && col.editor.updateWith) {\n            col.editor.updateWith.forEach(function (updateColumnKey) {\n                colGroup.forEach(function (col) {\n                    if (col.key == updateColumnKey) {\n                        let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                            panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                            updateWithCell = self.$[\"panel\"][panelName]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                                .find('[data-ax5grid-cellholder]');\n\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                    }\n                });\n            });\n        }\n\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl,\n                col, cellHeight, colAlign;\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                        paintStartRowIndex: 0,\n                        paintRowCount: this.xvar.frozenRowIndex,\n                        bodyTrHeight: this.xvar.bodyTrHeight\n                    });\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    let repaintRow = function (_dindex) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                _scrollConfig = {\n                    paintStartRowIndex: 0,\n                    paintRowCount: _list.length\n                };\n            }\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n        let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow;\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-data-index=\"' + di + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            let attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-data-index=\"' + di + '\" ',\n                    'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n            }\n\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        };\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n            } else {\n                replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n            }\n\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n        }\n\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > _dindex) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n                } else {\n                    replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n                }\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            } else {\n                replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    let scrollTo = function (css, noRepaint) {\n        let cfg = this.config;\n\n        if (this.isInlineEditing) {\n            for (var key in this.inlineEditing) {\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\n            }\n        }\n\n        if (cfg.asidePanelWidth > 0 && \"top\" in css) {\n            this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n            this.$.panel[\"left-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n            this.$.panel[\"top-body-scroll\"].css({left: css.left});\n        }\n\n        this.$.panel[\"body-scroll\"].css(css);\n\n        if (cfg.footSum && \"left\" in css) {\n            this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n        }\n\n        if (!noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else {\n\n        }\n    };\n\n    let blur = function () {\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this);\n        }\n    };\n\n    let moveFocus = function (_position) {\n        let focus = {\n            \"UD\": function (_dy) {\n                let moveResult = true,\n                    focusedColumn, originalColumn, while_i,\n                    nPanelInfo;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dy > 0) {\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = 0;\n                        if (focusedColumn.dindex > this.list.length - 1) {\n                            focusedColumn.dindex = this.list.length - 1;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n                else {\n                    if (focusedColumn.rowIndex + _dy < 0) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                        if (focusedColumn.dindex < 0) {\n                            focusedColumn.dindex = 0;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        if (_dy > 0) {\n                            focusedColumn.dindex++;\n                        } else {\n                            focusedColumn.dindex--;\n                        }\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex <= this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n\n            },\n            \"LR\": function (_dx) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dx < 0) {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex < 0) {\n                        focusedColumn.colIndex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.colIndex = focusedColumn.colIndex + (originalColumn.colspan - 1) + _dx;\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                        focusedColumn.colIndex = this.colGroup.length - 1;\n                        moveResult = false;\n                    }\n                }\n\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.rowIndex = 0;\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.colIndex--;\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        focusedColumn.dindex--;\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n                containerPanelName = nPanelInfo.containerPanelName;\n                isScrollPanel = nPanelInfo.isScrollPanel;\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n                var $column = this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n\n                if ($column && isScrollPanel) {// 스크롤 패널 이라면~\n                    var newLeft = (function () {\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                            return $column.position().left;\n                        } else {\n                            return;\n                        }\n                    }).call(this);\n\n                    //console.log(newLeft);\n\n                    if (typeof newLeft !== \"undefined\") {\n                        GRID.header.scrollTo.call(this, {left: -newLeft});\n                        scrollTo.call(this, {left: -newLeft});\n                        GRID.scroller.resize.call(this);\n                    }\n                }\n\n                return moveResult;\n            },\n            \"INDEX\": function (_dindex) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) {\n                    focusedColumn = {\n                        rowIndex: 0,\n                        colIndex: 0\n                    }\n                }\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n\n                if (_dindex == \"end\") {\n                    _dindex = this.list.length - 1;\n                }\n\n                focusedColumn.dindex = _dindex;\n                focusedColumn.rowIndex = 0;\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        break;\n                    }\n                    while_i++;\n                }\n\n                let nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex < this.xvar.paintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.paintStartRowIndex + (this.xvar.paintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.paintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            }\n        };\n\n        let processor = {\n            \"UP\": function () {\n                return focus[\"UD\"].call(this, -1);\n            },\n            \"DOWN\": function () {\n                return focus[\"UD\"].call(this, 1);\n            },\n            \"LEFT\": function () {\n                return focus[\"LR\"].call(this, -1);\n            },\n            \"RIGHT\": function () {\n                return focus[\"LR\"].call(this, 1);\n            },\n            \"HOME\": function () {\n                return focus[\"INDEX\"].call(this, 0);\n            },\n            \"END\": function () {\n                return focus[\"INDEX\"].call(this, \"end\");\n            },\n            \"position\": function (_position) {\n                return focus[\"INDEX\"].call(this, _position);\n            }\n        };\n\n        if (_position in processor) {\n            return processor[_position].call(this);\n        } else {\n            return processor[\"position\"].call(this, _position);\n        }\n    };\n\n    const inlineEdit = {\n        active(_focusedColumn, _e, _initValue) {\n            var self = this,\n                dindex, colIndex, rowIndex, panelName, colspan,\n                col, editor;\n\n            // this.inlineEditing = {};\n            for (var key in _focusedColumn) {\n                panelName = _focusedColumn[key].panelName;\n                dindex = _focusedColumn[key].dindex;\n                colIndex = _focusedColumn[key].colIndex;\n                rowIndex = _focusedColumn[key].rowIndex;\n                colspan = _focusedColumn[key].colspan;\n\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\n                col = this.colGroup[colIndex];\n                if (!(editor = col.editor)) return this;\n\n                // editor disabled 체크\n                if (U.isFunction(editor.disabled)) {\n                    if (editor.disabled.call({\n                            list: this.list,\n                            dindex: dindex,\n                            item: this.list[dindex],\n                            key: col.key,\n                            value: _initValue\n                        })) {\n                        return this;\n                    }\n                }\n\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n                if (!(function (_editor, _type) {\n                        if (_editor.type in GRID.inlineEditor) {\n                            return (GRID.inlineEditor[_editor.type].editMode == \"popup\");\n                        }\n                    })(editor)) {\n                    // 체크 박스 타입이면 값 변경 시도\n                    if (editor.type == \"checkbox\") {\n                        var checked, newValue;\n                        if (editor.config && editor.config.trueValue) {\n                            if (checked = !(_initValue == editor.config.trueValue)) {\n                                newValue = editor.config.trueValue;\n                            } else {\n                                newValue = editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, dindex, col.key, newValue);\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                            editorConfig: col.editor.config, checked: checked\n                        });\n                    }\n                    return this;\n                }\n\n                if (this.list[dindex].__isGrouping) {\n                    return false;\n                }\n                if (key in this.inlineEditing) {\n                    return false;\n                }\n                this.inlineEditing[key] = {\n                    editor: editor,\n                    panelName: panelName,\n                    columnKey: key,\n                    column: _focusedColumn[key],\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\n                };\n                this.isInlineEditing = true;\n            }\n            if (this.isInlineEditing) {\n\n                let originalValue = GRID.data.getValue.call(self, dindex, col.key),\n                    initValue = (function (__value, __editor) {\n                        if (U.isNothing(__value)) {\n                            __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                        }\n\n                        if (__editor.type == \"money\") {\n                            return U.number(__value, {\"money\": true});\n                        }\n                        else {\n                            return __value;\n                        }\n                    }).call(this, _initValue, editor);\n\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                    .find('[data-ax5grid-cellholder]');\n\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n                return true;\n            }\n        },\n        deActive(_msg, _key, _value) {\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n            if (!this.inlineEditing[_key]) return this;\n\n            let panelName = this.inlineEditing[_key].panelName,\n                dindex = this.inlineEditing[_key].column.dindex,\n                rowIndex = this.inlineEditing[_key].column.rowIndex,\n                colIndex = this.inlineEditing[_key].column.colIndex,\n                column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n                editorValue = (function ($inlineEditor) {\n                    if (typeof _value === \"undefined\") {\n                        if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                            return $inlineEditor.val();\n                        } else {\n                            _msg = \"CANCEL\";\n                            return false;\n                        }\n                    } else {\n                        return _value;\n                    }\n                })(this.inlineEditing[_key].$inlineEditor),\n                newValue = (function (__value, __editor) {\n                    if (__editor.type == \"money\") {\n                        return U.number(__value);\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, editorValue, column.editor);\n\n            let action = {\n                \"CANCEL\"(_dindex, _column, _newValue) {\n                    action[\"__clear\"].call(this);\n                },\n                \"RETURN\"(_dindex, _column, _newValue) {\n                    if (GRID.data.setValue.call(this, _dindex, _column.key, _newValue)) {\n                        action[\"__clear\"].call(this);\n                        GRID.body.repaintCell.call(this, panelName, dindex, rowIndex, colIndex, _newValue);\n                    } else {\n                        action[\"__clear\"].call(this);\n                    }\n                },\n                \"__clear\"() {\n                    this.isInlineEditing = false;\n                    let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                    if (bindedAx5ui == \"ax5picker\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                    } else if (bindedAx5ui == \"ax5select\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                    }\n\n                    this.inlineEditing[_key].$inlineEditor.remove();\n                    this.inlineEditing[_key].$inlineEditor = null;\n                    this.inlineEditing[_key].$inlineEditorCell = null;\n                    this.inlineEditing[_key] = undefined;\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n                }\n            };\n\n            if (_msg in action) {\n                action[_msg || \"RETURN\"].call(this, dindex, column, newValue);\n            } else {\n                action[\"__clear\"].call(this);\n            }\n        },\n        keydown(key, columnKey, _options) {\n            let processor = {\n                \"ESC\"() {\n                    for (var columnKey in this.inlineEditing) {\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                    }\n                },\n                \"RETURN\"() {\n                    if (this.isInlineEditing) {\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                        }\n                    } else {\n\n                        for (var k in this.focusedColumn) {\n                            let _column = this.focusedColumn[k],\n                                column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                                dindex = _column.dindex,\n                                value = \"\",\n                                col = this.colGroup[_column.colIndex];\n                            ;\n\n                            if (column) {\n                                if (!this.list[dindex].__isGrouping) {\n                                    value = GRID.data.getValue.call(this, dindex, column.key);\n                                }\n                            }\n\n                            if (col.editor && GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\n                                if (_options && _options.moveFocus) {\n\n                                }\n                                else {\n                                    if (column.editor && column.editor.type == \"checkbox\") {\n                                        value = GRID.data.getValue.call(this, dindex, column.key);\n\n                                        let checked, newValue;\n                                        if (column.editor.config && column.editor.config.trueValue) {\n                                            if (checked = !(value == column.editor.config.trueValue)) {\n                                                newValue = column.editor.config.trueValue;\n                                            } else {\n                                                newValue = column.editor.config.falseValue;\n                                            }\n                                        } else {\n                                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                        }\n\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\n                                        updateRowState.call(this, [\"cellChecked\"], dindex, {\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                            editorConfig: column.editor.config, checked: checked\n                                        });\n                                    }\n                                }\n                            } else {\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\n                            }\n                        }\n                    }\n                }\n            };\n\n            if (key in processor) {\n                processor[key].call(this, key, columnKey, _options);\n            }\n        }\n    };\n\n    const getExcelString = function () {\n        let cfg = this.config,\n            list = this.list,\n            bodyRowData = this.bodyRowTable,\n            footSumData = this.footSumTable,\n            bodyGroupingData = this.bodyGroupingTable;\n\n        // body-scroll 의 포지션에 의존적이므로..\n        let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n            let SS = [],\n                di, dl,\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (di = 0, dl = _list.length; di < dl; di++) {\n                let isGroupingRow = false, rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    SS.push('\\n<tr>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, undefined, \"text\"), '&nbsp;</td>');\n                    }\n                    SS.push('\\n</tr>');\n                }\n            }\n            //SS.push('</table>');\n            return SS.join('');\n        };\n        let getSum = function (_colGroup, _bodyRow, _list) {\n            let SS = [],\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', getSumFieldValue.call(this, _list, col), '</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        let po = [];\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n        if (cfg.footSum) {\n            // 바닥 요약\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n        }\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        return po.join('');\n    };\n\n    GRID.body = {\n        init: init,\n        repaint: repaint,\n        repaintCell: repaintCell,\n        repaintRow: repaintRow,\n        updateRowState: updateRowState,\n        updateRowStateAll: updateRowStateAll,\n        scrollTo: scrollTo,\n        blur: blur,\n        moveFocus: moveFocus,\n        inlineEdit: inlineEdit,\n        getExcelString: getExcelString\n    };\n})();","// ax5.ui.grid.collector\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let sum = function () {\n        let value = 0,\n            i = this.list.length;\n        while (i--) {\n            if(!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n            }\n        }\n        return value;\n    };\n    let avg = function () {\n        let value = 0,\n            i = this.list.length, listLength = 0;\n        while (i--) {\n            if(!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n                listLength++;\n            }\n        }\n        return U.number(value / (listLength || 1), {\"round\": 2});\n    };\n\n    GRID.collector = {\n        sum: sum,\n        avg: avg\n    };\n\n})();","// ax5.ui.grid.layout\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let init = function () {\n\n    };\n\n    let clearGroupingData = function (_list) {\n        let i = 0, l = _list.length, returnList = [];\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n                returnList.push(jQuery.extend({}, _list[i]));\n            }\n        }\n        return returnList;\n    };\n\n    let initData = function (_list) {\n        this.selectedDataIndexs = [];\n        let i = 0, l = _list.length,\n            returnList = [],\n            appendIndex = 0,\n            dataRealRowCount = 0;\n\n        if (this.config.body.grouping) {\n            let groupingKeys = U.map(this.bodyGrouping.by, function () {\n                return {\n                    key: this,\n                    compareString: \"\",\n                    grouping: false,\n                    list: []\n                }\n            });\n            let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n            for (; i < l + 1; i++) {\n                gi = 0;\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else {\n                    compareString = \"\";\n                    appendRow = [];\n                    for (; gi < gl; gi++) {\n                        if (_list[i]) {\n                            compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                        }\n                        if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                            var appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n                            for (var ki = 0; ki < gi + 1; ki++) {\n                                appendRowItem.keys.push(groupingKeys[ki].key);\n                                appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                            }\n                            appendRow.push(appendRowItem);\n                            groupingKeys[gi].list = [];\n                        }\n                        groupingKeys[gi].list.push(_list[i]);\n                        groupingKeys[gi].compareString = compareString;\n                    }\n\n                    ari = appendRow.length;\n                    while (ari--) {\n                        returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n                    }\n\n                    if (_list[i]) {\n                        if (_list[i][this.config.columnKeys.selected]) {\n                            this.selectedDataIndexs.push(i);\n                        }\n                        dataRealRowCount = _list[i][\"__index\"] = i;\n                        returnList.push(_list[i]);\n                        appendIndex++;\n                    }\n                }\n            }\n        }\n        else {\n            for (; i < l; i++) {\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                } else if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // __index변수를 추가하여 lineNumber 에 출력합니다. (body getFieldValue 에서 출력함)\n                    _list[i][\"__index\"] = i;\n                    dataRealRowCount++;\n                    returnList.push(_list[i]);\n                }\n            }\n        }\n\n        // 원본 데이터의 갯수\n        // grouping은 제외하고 수집됨.\n        this.xvar.dataRealRowCount = dataRealRowCount;\n        return returnList;\n    };\n\n    let set = function (data) {\n        let self = this;\n\n        if (U.isArray(data)) {\n            this.page = null;\n            this.list = initData.call(this,\n                (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data) : data\n            );\n            this.deletedList = [];\n        } else if (\"page\" in data) {\n            this.page = jQuery.extend({}, data.page);\n            this.list = initData.call(this,\n                (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, data.list) : data.list\n            );\n            this.deletedList = [];\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n\n        if (this.config.body.grouping) {\n\n        }\n        return this;\n    };\n\n    let get = function (_type) {\n        return {\n            list: this.list,\n            page: this.page\n        };\n    };\n\n    let getList = function (_type) {\n        let returnList = [];\n        let i = 0, l = this.list.length;\n        switch (_type) {\n            case \"modified\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.modified]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"selected\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.selected]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"deleted\":\n                //_list = GRID.data.clearGroupingData(this.list);\n                returnList = [].concat(this.deletedList);\n                break;\n            default:\n                returnList = GRID.data.clearGroupingData.call(this, this.list);\n        }\n        return returnList;\n    };\n\n    let add = function (_row, _dindex, _options) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                list = [].concat(_row).concat(list);\n            },\n            \"last\": function () {\n                list = list.concat([].concat(_row));\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            _row[this.config.columnKeys.modified] = true;\n            processor[_dindex].call(this, _row);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list = list.splice(_dindex, [].concat(_row));\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 완전 제거 하는 경우 사용.\n     * ax5grid.data.remove\n     */\n    let remove = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                list.splice(_dindex, 1);\n            },\n            \"last\": function () {\n                var lastIndex = list.length - 1;\n                list.splice(lastIndex, 1);\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            //\n            list.splice(_dindex, 1);\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n\n    /**\n     * list에서 deleted 처리 repaint\n     * ax5grid.data.deleteRow\n     */\n    let deleteRow = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                list[0][this.config.columnKeys.deleted] = true;\n            },\n            \"last\": function () {\n                list[list.length - 1][this.config.columnKeys.deleted] = true;\n            },\n            \"selected\": function () {\n                var i = list.length;\n                while (i--) {\n                    if (list[i][this.config.columnKeys.selected]) {\n                        list[i][this.config.columnKeys.deleted] = true;\n                    }\n                }\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            list[_dindex][this.config.columnKeys.deleted] = true;\n        }\n\n        if (this.config.body.grouping) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else if (Object.keys(this.sortInfo).length) {\n            list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    list\n                )\n            );\n        } else {\n            list = initData.call(this, list);\n        }\n\n        this.list = list;\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    let update = function (_row, _dindex) {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        //\n        this.needToPaintSum = true;\n        this.list.splice(_dindex, 1, _row);\n\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\n        }\n    };\n\n    let setValue = function (_dindex, _key, _value) {\n        let originalValue = getValue.call(this, _dindex, _key);\n        this.needToPaintSum = true;\n\n        if (originalValue !== _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\n                    (Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\")).call(this.list[_dindex], _value);\n                } catch (e) {\n\n                }\n            } else {\n                this.list[_dindex][this.config.columnKeys.modified] = true;\n                this.list[_dindex][_key] = _value;\n            }\n\n            if (this.onDataChanged) {\n                this.onDataChanged.call({\n                    self: this,\n                    list: this.list,\n                    dindex: _dindex,\n                    item: this.list[_dindex],\n                    key: _key,\n                    value: _value\n                });\n            }\n        }\n\n        return true;\n    };\n\n    let getValue = function (_dindex, _key, _value) {\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(this.list[_dindex]);\n            } catch (e) {\n\n            }\n        } else {\n            _value = this.list[_dindex][_key];\n        }\n        return _value;\n    };\n\n    let clearSelect = function () {\n        this.selectedDataIndexs = [];\n    };\n\n    let select = function (_dindex, _selected, _options) {\n        let cfg = this.config;\n\n        if (!this.list[_dindex]) return false;\n        if (this.list[_dindex].__isGrouping) return false;\n        if (this.list[_dindex][cfg.columnKeys.disableSelection]) return false;\n\n        if (typeof _selected === \"undefined\") {\n            if (this.list[_dindex][cfg.columnKeys.selected] = !this.list[_dindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        } else {\n            if (this.list[_dindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                item: this.list[_dindex],\n                key: cfg.columnKeys.selected,\n                value: this.list[_dindex][cfg.columnKeys.selected]\n            });\n        }\n\n        return this.list[_dindex][cfg.columnKeys.selected];\n    };\n\n    let selectAll = function (_selected, _options) {\n        let cfg = this.config,\n            dindex = this.list.length;\n\n        if (typeof _selected === \"undefined\") {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        } else {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list\n            });\n        }\n\n        return this.list;\n    };\n\n    let sort = function (_sortInfo, _list) {\n        let self = this, list = _list || this.list, sortInfoArray = [];\n        let getKeyValue = function (_item, _key, _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(_item);\n                } catch (e) {\n                }\n            } else {\n                _value = _item[_key];\n            }\n            return _value;\n        };\n\n        for (let k in _sortInfo) {\n            sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n        }\n        sortInfoArray = U.filter(sortInfoArray, function () {\n            return typeof this !== \"undefined\";\n        });\n\n        let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n        list.sort(function (_a, _b) {\n            for (i = 0; i < l; i++) {\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n                if (typeof _a_val !== typeof _b_val) {\n                    _a_val = '' + _a_val;\n                    _b_val = '' + _b_val;\n                }\n                if (_a_val < _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n                } else if (_a_val > _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n                }\n            }\n        });\n\n        if (_list) {\n            return list;\n        } else {\n            this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            GRID.page.navigationUpdate.call(this);\n            return this;\n        }\n    };\n\n    let append = function (_list, _callback) {\n        let self = this;\n        this.list = this.list.concat([].concat(_list));\n\n        this.appendProgress = true;\n        GRID.page.statusUpdate.call(this);\n\n\n        if (this.appendDebouncer) {\n            if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n                clearTimeout(this.appendDebouncer);\n                self.appendDebounceTimes++;\n            } else {\n                self.appendDebounceTimes = 0;\n                appendIdle.call(self);\n                _callback();\n                return false;\n            }\n        }\n\n        this.appendDebouncer = setTimeout(function () {\n            self.appendDebounceTimes = 0;\n            appendIdle.call(self);\n            _callback();\n        }, this.config.debounceTime);\n\n        // todo : append bounce animation\n    };\n\n    let appendIdle = function () {\n        this.appendProgress = false;\n        if (this.config.body.grouping) {\n            this.list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    this.list\n                )\n            );\n        } else {\n            this.list = initData.call(this, this.list);\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n    };\n\n    GRID.data = {\n        init: init,\n        set: set,\n        get: get,\n        getList: getList,\n        setValue: setValue,\n        getValue: getValue,\n        clearSelect: clearSelect,\n        select: select,\n        selectAll: selectAll,\n        add: add,\n        remove: remove,\n        deleteRow: deleteRow,\n        update: update,\n        sort: sort,\n        initData: initData,\n        clearGroupingData: clearGroupingData,\n        append: append\n    };\n})();","/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid.excel\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let base64 = function (s) {\n            return window.btoa(unescape(encodeURIComponent(s)));\n        },\n        uri = \"data:application/vnd.ms-excel;base64,\",\n        getExcelTmpl = function () {\n            return `\\ufeff\n{{#tables}}{{{body}}}{{/tables}}\n`;\n        };\n\n    var tableToExcel = function (table, fileName) {\n        let link, a, output,\n            tables = [].concat(table);\n\n        output = ax5.mustache.render(getExcelTmpl(), {\n            worksheet: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({name: \"Sheet\" + (ti + 1)});\n                });\n                return arr;\n            })(),\n            tables: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({body: t});\n                });\n                return arr;\n            })()\n        });\n\n        let isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1,\n            isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1,\n            isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\n\n        let blob1, blankWindow, $iframe, iframe, anchor;\n\n        if (navigator.msSaveOrOpenBlob) {\n            blob1 = new Blob([output], {type: \"text/html\"});\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\n        }\n        else if (isSafari) {\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\n            //tables\n            blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\n            blankWindow.document.write(output);\n            blankWindow = null;\n        }\n        else {\n            if (isIE && typeof Blob === \"undefined\") {\n                //otherwise use the iframe and save\n                //requires a blank iframe on page called txtArea1\n                $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\n                jQuery(document.body).append($iframe);\n\n                iframe = window[this.id + '-excel-export'];\n                iframe.document.open(\"text/html\", \"replace\");\n                iframe.document.write(output);\n                iframe.document.close();\n                iframe.focus();\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\n                $iframe.remove();\n            } else {\n                // Attempt to use an alternative method\n                anchor = document.body.appendChild(\n                    document.createElement(\"a\")\n                );\n\n                // If the [download] attribute is supported, try to use it\n                if (\"download\" in anchor) {\n                    anchor.download = fileName;\n                    //anchor.href = URL.createObjectURL( blob );\n                    anchor.href = uri + base64(output);\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                }\n            }\n        }\n\n        return true;\n    };\n\n    GRID.excel = {\n        export: tableToExcel\n    };\n})();","// ax5.ui.grid.formatter\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    let money = function () {\n        return U.number(this.value, {\"money\":true});\n    };\n\n    GRID.formatter = {\n        money: money\n    };\n\n})();","// ax5.ui.grid.header\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    var columnResizerEvent = {\n        \"on\": function (_columnResizer, _colIndex) {\n            var self = this;\n            var $columnResizer = $(_columnResizer);\n            var columnResizerPositionLeft = $columnResizer.offset().left;\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\n            self.xvar.columnResizerIndex = _colIndex;\n            var resizeRange = {\n                min: -self.colGroup[_colIndex]._width + 2,\n                max: (self.colGroup[_colIndex + 1]) ? self.colGroup[_colIndex + 1]._width : self.$[\"container\"][\"root\"].width() - 2,\n            };\n            //console.log(resizeRange);\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n\n                    if (resizeRange.min > self.xvar.__da) {\n                        self.xvar.__da = resizeRange.min;\n                    } else if (resizeRange.max < self.xvar.__da) {\n                        self.xvar.__da = resizeRange.max;\n                    }\n\n                    if (!self.xvar.columnResizerLived) {\n                        self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\n                    }\n                    self.xvar.columnResizerLived = true;\n                    self.$[\"resizer\"][\"horizontal\"].css({\n                        left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\n                    });\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\n            this.xvar.columnResizerLived = false;\n\n            if (typeof this.xvar.__da === \"undefined\") {\n\n            }\n            else {\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\n            }\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    var init = function () {\n        // 헤더 초기화\n        var self = this;\n\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let key = this.getAttribute(\"data-ax5grid-column-key\"),\n                colIndex = this.getAttribute(\"data-ax5grid-column-colindex\"),\n                rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\"),\n                col = self.colGroup[colIndex];\n\n            if (key === \"__checkbox_header__\") {\n                var selected = this.getAttribute(\"data-ax5grid-selected\");\n                selected = (U.isNothing(selected)) ? true : (selected === \"true\") ? false : true;\n\n                $(this).attr(\"data-ax5grid-selected\", selected);\n                self.selectAll({selected: selected});\n            }\n            else {\n                if (key && col) {\n                    if ((col.sortable === true || self.config.sortable === true) && col.sortable !== false) {\n                        if (!col.sortFixed) toggleSort.call(self, col.key);\n                    }\n                }\n            }\n\n            GRID.body.blur.call(self);\n        });\n        this.$[\"container\"][\"header\"]\n            .on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\n                var colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                columnResizerEvent.on.call(self, this, Number(colIndex));\n                U.stopEvent(e);\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    var resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.config.frozenColumnIndex);\n        this.asideHeaderData = (function (dataTable) {\n            var colGroup = [];\n            var data = {rows: []};\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            key: \"__index_header__\", label: \"&nbsp;\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            key: \"__checkbox_header__\", label: \"\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            this.asideColGroup = colGroup;\n            return data;\n        }).call(this, this.headerTable);\n        this.leftHeaderData = dividedHeaderObj.leftData;\n        this.headerData = dividedHeaderObj.rightData;\n    };\n\n    var getFieldValue = function (_col) {\n        let cfg = this.config,\n            colGroup = this.colGroup,\n            _key = _col.key,\n            tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__checkbox_header__\") {\n            return '<div class=\"checkBox\"></div>';\n\n        } else {\n            return (_col.label || \"&nbsp;\");\n        }\n    };\n\n    var repaint = function (_reset) {\n        let cfg = this.config,\n            colGroup = this.colGroup;\n\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n        }\n        let asideHeaderData = this.asideHeaderData,\n            leftHeaderData = this.leftHeaderData,\n            headerData = this.headerData,\n            headerAlign = cfg.header.align;\n\n        // this.asideColGroup : asideHeaderData에서 처리 함.\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\n\n        var repaintHeader = function (_elTarget, _colGroup, _bodyRow) {\n            let tableWidth = 0,\n                SS = [];\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n                tableWidth += _colGroup[cgi]._width;\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                var trCSS_class = \"\";\n                SS.push('<tr class=\"' + trCSS_class + '\">');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\n                    var colAlign = headerAlign || col.align;\n                    SS.push('<td ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        (function () {\n                            return (typeof col.key !== \"undefined\") ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\n                        })(),\n                        'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function () {\n                        var lineHeight = (cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth);\n                        return '<span data-ax5grid-cellHolder=\"\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\n                    })(), (function () {\n                        var _SS = \"\";\n\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\n                        }\n                        return _SS;\n                    })(), getFieldValue.call(this, col), '</span>');\n\n                    if (!U.isNothing(col.colIndex)) {\n                        if (cfg.enableFilter) {\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\n                        }\n                    }\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'style=\"height: ' + (cfg.header.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n            SS.push('</table>');\n            _elTarget.html(SS.join(''));\n\n            /// append column-resizer\n            (function () {\n                let resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth,\n                    resizerLeft = 0,\n                    AS = [];\n\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                    var col = _colGroup[cgi];\n                    if (!U.isNothing(col.colIndex)) {\n                        //_colGroup[cgi]._width\n                        resizerLeft += col._width;\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\n                    }\n                }\n                _elTarget.append(AS);\n            }).call(this);\n\n\n            return tableWidth;\n        };\n\n        if (cfg.asidePanelWidth > 0) {\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\n        }\n        if (cfg.frozenColumnIndex > 0) {\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\n        }\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\n\n        if (cfg.rightSum) {\n\n        }\n    };\n\n    var scrollTo = function (css) {\n        this.$.panel[\"header-scroll\"].css(css);\n        return this;\n    };\n\n    var toggleSort = function (_key) {\n        let sortOrder = \"\",\n            sortInfo = {},\n            seq = 0;\n\n        for (var k in this.sortInfo) {\n            if (this.sortInfo[k].fixed) {\n                sortInfo[k] = this.sortInfo[k];\n                seq++;\n            }\n        }\n\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            if (this.colGroup[i].key == _key) {\n                if (sortOrder == \"\") {\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\n                        sortOrder = \"desc\";\n                    }\n                    else if (this.colGroup[i].sort === \"desc\") {\n                        sortOrder = \"asc\";\n                    }\n                    else {\n                        sortOrder = undefined;\n                    }\n                }\n                this.colGroup[i].sort = sortOrder;\n            } else if (!this.config.multiSort) {\n                this.colGroup[i].sort = undefined;\n            }\n\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\n                if (!sortInfo[this.colGroup[i].key]) {\n                    sortInfo[this.colGroup[i].key] = {\n                        seq: seq++,\n                        orderBy: this.colGroup[i].sort\n                    };\n                }\n            }\n        }\n\n        this.setColumnSort(sortInfo);\n        return this;\n    };\n\n    var applySortStatus = function (_sortInfo) {\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            for (var _key in _sortInfo) {\n                if (this.colGroup[i].key == _key) {\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\n                }\n            }\n        }\n        return this;\n    };\n\n    var select = function (_options) {\n        GRID.data.select.call(this, dindex, _options && _options.selected);\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n    };\n\n    var getExcelString = function () {\n        let cfg = this.config,\n            colGroup = this.colGroup,\n            headerData = this.headerTable,\n            getHeader = function (_colGroup, _bodyRow) {\n                var SS = [];\n                //SS.push('<table border=\"1\">');\n                for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                    SS.push('<tr>');\n                    for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                        var col = _bodyRow.rows[tri].cols[ci];\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', getFieldValue.call(this, col), '</td>');\n                    }\n                    SS.push('</tr>');\n                }\n                //SS.push('</table>');\n\n                return SS.join('');\n            };\n\n        return getHeader.call(this, colGroup, headerData);\n    };\n\n    GRID.header = {\n        init: init,\n        repaint: repaint,\n        scrollTo: scrollTo,\n        toggleSort: toggleSort,\n        applySortStatus: applySortStatus,\n        getExcelString: getExcelString\n    };\n\n})();","// ax5.ui.grid.inlineEditor\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var edit_text = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"text\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.focus().select();\n        }\n    };\n\n    var edit_money = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"money\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_number = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"number\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_date = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\n            _$el.ax5picker({\n                direction: \"auto\",\n                content: {\n                    type: 'date',\n                    formatter: {\n                        pattern: 'date'\n                    }\n                },\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\n                    }\n                }\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_select = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            var po = [];\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\n            po.push('</div>');\n\n            return po.join('');\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var eConfig = {\n                columnKeys: {\n                    optionValue: \"value\",\n                    optionText: \"text\",\n                    optionSelected: \"selected\"\n                }\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n\n            eConfig.options.forEach(function (n) {\n                if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\n            });\n\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\n            _$el.ax5select({\n                direction: \"auto\",\n                columnKeys: eConfig.columnKeys,\n                options: eConfig.options,\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\n                    } else if (this.state == \"changeValue\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\n                    }\n                }\n            });\n            _$el.ax5select(\"open\");\n            _$el.ax5select(\"setValue\", _value);\n            _$el.find(\"a\").focus();\n        }\n    };\n\n    var edit_checkbox = {\n        editMode: \"inline\",\n        getHtml: function (_root, _editor, _value) {\n\n            var lineHeight = (_root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth);\n            var checked;\n            if (_editor.config && _editor.config.trueValue) {\n                checked = (_value == _editor.config.trueValue) ? \"true\" : \"false\";\n            } else {\n                checked = (_value == false || _value == \"false\" || _value < \"1\") ? \"false\" : \"true\";\n            }\n\n            var eConfig = {\n                marginTop: 2,\n                height: lineHeight - 4\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\n\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\n        }\n    };\n\n    GRID.inlineEditor = {\n        \"text\": edit_text,\n        \"money\": edit_money,\n        \"number\": edit_number,\n        \"date\": edit_date,\n        \"select\": edit_select,\n        \"checkbox\": edit_checkbox\n    };\n\n})();","// ax5.ui.grid.page\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    var onclickPageMove = function (_act) {\n        var callback = function (_pageNo) {\n            if (this.page.currentPage != _pageNo) {\n                this.page.selectPage = _pageNo;\n                if (this.config.page.onChange) {\n                    this.config.page.onChange.call({\n                        self: this,\n                        page: this.page,\n                        data: this.data\n                    });\n                }\n            }\n        };\n        var processor = {\n            \"first\": function () {\n                callback.call(this, 0);\n            },\n            \"prev\": function () {\n                var pageNo = this.page.currentPage - 1;\n                if (pageNo < 0) pageNo = 0;\n                callback.call(this, pageNo);\n            },\n            \"next\": function () {\n                var pageNo = this.page.currentPage + 1;\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\n                callback.call(this, pageNo);\n            },\n            \"last\": function () {\n                callback.call(this, this.page.totalPages - 1);\n            }\n        };\n\n        if (_act in processor) {\n            processor[_act].call(this);\n        }\n        else {\n            callback.call(this, _act-1);\n        }\n    };\n\n    var navigationUpdate = function () {\n        var self = this;\n        if (this.page) {\n            var page = {\n                hasPage: false,\n                currentPage: this.page.currentPage,\n                pageSize: this.page.pageSize,\n                totalElements: this.page.totalElements,\n                totalPages: this.page.totalPages,\n                firstIcon: this.config.page.firstIcon,\n                prevIcon: this.config.page.prevIcon || \"«\",\n                nextIcon: this.config.page.nextIcon || \"»\",\n                lastIcon: this.config.page.lastIcon,\n            };\n            var navigationItemCount = this.config.page.navigationItemCount;\n\n\n            page[\"@paging\"] = (function () {\n                var returns = [];\n\n                var startI = page.currentPage - Math.floor(navigationItemCount / 2);\n                if (startI < 0) startI = 0;\n                var endI = page.currentPage + navigationItemCount;\n                if (endI > page.totalPages) endI = page.totalPages;\n\n                if (endI - startI > navigationItemCount) {\n                    endI = startI + navigationItemCount;\n                }\n\n                if(endI - startI < navigationItemCount){\n                    startI = endI - navigationItemCount;\n                }\n                if (startI < 0) startI = 0;\n\n                for (var p = startI, l = endI; p < l; p++) {\n                    returns.push({'pageNo': (p + 1), 'selected': page.currentPage == p});\n                }\n                return returns;\n            })();\n\n            if(page[\"@paging\"].length > 0){\n                page.hasPage = true;\n            }\n\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\n                var act = this.getAttribute(\"data-ax5grid-page-move\");\n                onclickPageMove.call(self, act);\n            });\n        } else {\n            this.$[\"page\"][\"navigation\"].empty();\n        }\n    };\n\n    var statusUpdate = function () {\n        var fromRowIndex = this.xvar.paintStartRowIndex;\n        var toRowIndex = this.xvar.paintStartRowIndex + this.xvar.paintRowCount - 1;\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\n        var totalElements = this.xvar.dataRowCount;\n        if (toRowIndex > totalElements) {\n            toRowIndex = totalElements;\n        }\n\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\n            fromRowIndex: U.number(fromRowIndex + 1, {\"money\": true}),\n            toRowIndex: U.number(toRowIndex, {\"money\": true}),\n            totalElements: U.number(totalElements, {\"money\": true}),\n            dataRowCount: (totalElements !== this.xvar.dataRealRowCount) ? U.number(this.xvar.dataRealRowCount, {\"money\": true}) : false,\n            progress: (this.appendProgress) ? this.config.appendProgressIcon : \"\"\n        }));\n    };\n\n    GRID.page = {\n        navigationUpdate: navigationUpdate,\n        statusUpdate: statusUpdate\n    };\n\n})();","// ax5.ui.grid.scroller\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n    var convertScrollPosition = {\n        \"vertical\": function (css, _var) {\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = (_content_height * css.top) / _scroller_height;\n            if (top < 0) top = 0;\n            else if (_content_height < top) {\n                top = _content_height;\n            }\n            return {\n                top: -top\n            }\n        },\n        \"horizontal\": function (css, _var) {\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = (_content_width * css.left) / _scroller_width;\n            if (left < 0) left = 0;\n            else if (_content_width < left) {\n                left = _content_width;\n            }\n            return {\n                left: -left\n            }\n        }\n    };\n    var convertScrollBarPosition = {\n        \"vertical\": function (_top, _var) {\n\n            var type = \"vertical\";\n            var _content_height = _var._content_height - _var._panel_height;\n            var _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight;\n            var top = (_scroller_height * _top) / _content_height;\n\n            if (-top > _scroller_height) {\n                top = -_scroller_height;\n\n                var scrollPositon = convertScrollPosition[type].call(this, {top: -top}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -top\n        },\n        \"horizontal\": function (_left, _var) {\n            var type = \"horizontal\";\n            var _content_width = _var._content_width - _var._panel_width;\n            var _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth;\n            var left = (_scroller_width * _left) / _content_width;\n\n            if (-left > _scroller_width) {\n                left = -_scroller_width;\n                var scrollPositon = convertScrollPosition[type].call(this, {left: -left}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.header.scrollTo.call(this, scrollPositon);\n                GRID.body.scrollTo.call(this, scrollPositon);\n            }\n\n            return -left\n        }\n    };\n    var scrollBarMover = {\n        \"click\": function (track, bar, type, e) {\n\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n            if ((new Date()).getTime() - GRID.scroller.moveout_timer < 20) {\n                return false;\n            }\n\n            var self = this,\n                trackOffset = track.offset(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = mouseObj.clientY - trackOffset.top;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = mouseObj.clientX - trackOffset.left;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            var css = getScrollerPosition[type](e);\n            bar.css(css);\n\n            var scrollPositon = convertScrollPosition[type].call(self, css, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            });\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n            GRID.body.scrollTo.call(self, scrollPositon);\n        },\n        \"on\": function (track, bar, type, e) {\n            var self = this,\n                barOffset = bar.position(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = barOffset.top + self.xvar.__da;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = barOffset.left + self.xvar.__da;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var css = getScrollerPosition[type](e);\n                    bar.css(css);\n\n                    var scrollPositon = convertScrollPosition[type].call(self, css, {\n                        _content_width: _content_width,\n                        _content_height: _content_height,\n                        _panel_width: _panel_width,\n                        _panel_height: _panel_height,\n                        _horizontal_scroller_width: _horizontal_scroller_width,\n                        _vertical_scroller_height: _vertical_scroller_height,\n                        verticalScrollBarHeight: verticalScrollBarHeight,\n                        horizontalScrollBarWidth: horizontalScrollBarWidth\n                    });\n\n                    if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n                    GRID.body.scrollTo.call(self, scrollPositon);\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            GRID.scroller.moveout_timer = (new Date()).getTime();\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n    var scrollContentMover = {\n        \"wheel\": function (delta) {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth;\n\n            if (isNaN(_content_height) || isNaN(_content_width)) {\n                return false;\n            }\n\n            let newLeft, newTop,\n                _top_is_end = false,\n                _left_is_end = false;\n\n            newLeft = _body_scroll_position.left - delta.x;\n            newTop = _body_scroll_position.top - delta.y;\n\n            // newTop이 범위를 넘었는지 체크\n            if (newTop >= 0) {\n                newTop = 0;\n                _top_is_end = true;\n            } else if (newTop <= _panel_height - _content_height) {\n                newTop = _panel_height - _content_height;\n                if (newTop >= 0) newTop = 0;\n                _top_is_end = true;\n            } else {\n                if (delta.y == 0) _top_is_end = true;\n            }\n\n\n            // newLeft이 범위를 넘었는지 체크\n            if (newLeft >= 0) {\n                newLeft = 0;\n                _left_is_end = true;\n            } else if (newLeft <= _panel_width - _content_width) {\n                newLeft = _panel_width - _content_width;\n                if (newLeft >= 0) newLeft = 0;\n                _left_is_end = true;\n            } else {\n                if (delta.x == 0) _left_is_end = true;\n            }\n\n            //self.$[\"panel\"][\"body-scroll\"].css({left: newLeft, top: newTop});\n            GRID.header.scrollTo.call(this, {left: newLeft});\n            GRID.body.scrollTo.call(this, {left: newLeft, top: newTop});\n            resize.call(this);\n\n            return !_top_is_end || !_left_is_end;\n        },\n        \"on\": function () {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                getContentPosition = function (e) {\n                    let mouseObj = GRID.util.getMousePosition(e), newLeft, newTop;\n\n                    self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                    newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                    newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                    // newTop이 범위를 넘었는지 체크\n                    if (newTop >= 0) {\n                        newTop = 0;\n                    } else if (newTop <= _panel_height - _content_height) {\n                        newTop = _panel_height - _content_height;\n                        if (newTop >= 0) newTop = 0;\n                    }\n\n                    // newLeft이 범위를 넘었는지 체크\n                    if (newLeft >= 0) {\n                        newLeft = 0;\n                    } else if (newLeft <= _panel_width - _content_width) {\n                        newLeft = _panel_width - _content_width;\n                        if (newLeft >= 0) newLeft = 0;\n                    }\n\n                    return {\n                        left: newLeft, top: newTop\n                    }\n                };\n\n\n            this.xvar.__x_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n            this.xvar.__y_da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n            this.xvar.touchmoved = false;\n\n            jQuery(document.body)\n                .on(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    let css = getContentPosition(e);\n                    GRID.header.scrollTo.call(self, {left: css.left});\n                    GRID.body.scrollTo.call(self, css, \"noRepaint\");\n                    resize.call(self);\n                    U.stopEvent(e.originalEvent);\n                    self.xvar.touchmoved = true;\n                })\n                .on(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    if(self.xvar.touchmoved) {\n                        let css = getContentPosition(e);\n                        GRID.header.scrollTo.call(self, {left: css.left});\n                        GRID.body.scrollTo.call(self, css);\n                        resize.call(self);\n                        U.stopEvent(e.originalEvent);\n                        scrollContentMover.off.call(self);\n                    }\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            jQuery(document.body)\n                .off(\"touchmove\" + \".ax5grid-\" + this.instanceId)\n                .off(\"touchend\" + \".ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    var init = function () {\n        let self = this,\n            margin = this.config.scroller.trackPadding;\n\n        if (margin == 0) {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size, left: -1});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size, top: -1});\n        } else {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size - (margin + 1), left: margin / 2});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size - (margin + 1), top: margin / 2});\n        }\n\n        this.$[\"scroller\"][\"vertical-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"vertical\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n                }\n            }).bind(this));\n\n        this.$[\"scroller\"][\"horizontal-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"horizontal\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n                }\n            }).bind(this));\n\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', (function (e) {\n            let E = e.originalEvent, delta = {x: 0, y: 0};\n\n            if (E.detail) {\n                delta.y = E.detail * 10;\n            } else {\n                if (typeof E.deltaY === \"undefined\") {\n                    delta.y = -E.wheelDelta;\n                    delta.x = 0;\n                } else {\n                    delta.y = E.deltaY;\n                    delta.x = E.deltaX;\n                }\n            }\n\n            if (scrollContentMover.wheel.call(this, delta)) {\n                U.stopEvent(e);\n            }\n        }).bind(this));\n\n        if (ax5.info.supportTouch) {\n            this.$[\"container\"][\"body\"]\n                .on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\n                    self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                    scrollContentMover.on.call(self);\n                });\n        }\n    };\n\n    var resize = function () {\n        var _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\n            _content_height = this.xvar.scrollContentHeight,\n            _content_width = this.xvar.scrollContentWidth,\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            height: verticalScrollBarHeight\n        });\n\n        //console.log(horizontalScrollBarWidth);\n\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            width: horizontalScrollBarWidth\n        });\n\n        _vertical_scroller_height = null;\n        _horizontal_scroller_width = null;\n        _panel_height = null;\n        _panel_width = null;\n        _content_height = null;\n        _content_width = null;\n        verticalScrollBarHeight = null;\n        horizontalScrollBarWidth = null;\n    };\n\n    GRID.scroller = {\n        // 타이머\n        moveout_timer: (new Date()).getTime(),\n        init: init,\n        resize: resize\n    };\n\n})();","// ax5.ui.grid.tmpl\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var main = function () {\n        return `<div data-ax5grid-container=\"root\" data-ax5grid-instance=\"{{instanceId}}\">\n            <div data-ax5grid-container=\"hidden\">\n                <textarea data-ax5grid-form=\"clipboard\"></textarea>\n            </div>\n            <div data-ax5grid-container=\"header\">\n                <div data-ax5grid-panel=\"aside-header\"></div>\n                <div data-ax5grid-panel=\"left-header\"></div>\n                <div data-ax5grid-panel=\"header\">\n                    <div data-ax5grid-panel-scroll=\"header\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-header\"></div>\n            </div>\n            <div data-ax5grid-container=\"body\">\n                <div data-ax5grid-panel=\"top-aside-body\"></div>\n                <div data-ax5grid-panel=\"top-left-body\"></div>\n                <div data-ax5grid-panel=\"top-body\">\n                    <div data-ax5grid-panel-scroll=\"top-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"top-right-body\"></div>\n                <div data-ax5grid-panel=\"aside-body\">\n                    <div data-ax5grid-panel-scroll=\"aside-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"left-body\">\n                    <div data-ax5grid-panel-scroll=\"left-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"body\">\n                    <div data-ax5grid-panel-scroll=\"body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-body\">\n                  <div data-ax5grid-panel-scroll=\"right-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-aside-body\"></div>\n                <div data-ax5grid-panel=\"bottom-left-body\"></div>\n                <div data-ax5grid-panel=\"bottom-body\">\n                    <div data-ax5grid-panel-scroll=\"bottom-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-right-body\"></div>\n            </div>\n            <div data-ax5grid-container=\"page\">\n                <div data-ax5grid-page=\"holder\">\n                    <div data-ax5grid-page=\"navigation\"></div>\n                    <div data-ax5grid-page=\"status\"></div>\n                </div>\n            </div>\n            <div data-ax5grid-container=\"scroller\">\n                <div data-ax5grid-scroller=\"vertical\">\n                    <div data-ax5grid-scroller=\"vertical-bar\"></div>    \n                </div>\n                <div data-ax5grid-scroller=\"horizontal\">\n                    <div data-ax5grid-scroller=\"horizontal-bar\"></div>\n                </div>\n                <div data-ax5grid-scroller=\"corner\"></div>\n            </div>\n            <div data-ax5grid-resizer=\"vertical\"></div>\n            <div data-ax5grid-resizer=\"horizontal\"></div>\n        </div>`;\n    };\n\n\n    var page_navigation = function(){\n        return `<div data-ax5grid-page-navigation=\"holder\">\n            {{#hasPage}}\n            <div data-ax5grid-page-navigation=\"cell\">    \n                {{#firstIcon}}<button data-ax5grid-page-move=\"first\">{{{firstIcon}}}</button>{{/firstIcon}}\n                <button data-ax5grid-page-move=\"prev\">{{{prevIcon}}}</button>\n            </div>\n            <div data-ax5grid-page-navigation=\"cell-paging\">\n                {{#@paging}}\n                <button data-ax5grid-page-move=\"{{pageNo}}\" data-ax5grid-page-selected=\"{{selected}}\">{{pageNo}}</button>\n                {{/@paging}}\n            </div>\n            <div data-ax5grid-page-navigation=\"cell\">\n                <button data-ax5grid-page-move=\"next\">{{{nextIcon}}}</button>\n                {{#lastIcon}}<button data-ax5grid-page-move=\"last\">{{{lastIcon}}}</button>{{/lastIcon}}\n            </div>\n            {{/hasPage}}\n        </div>`;\n    };\n\n\n    var page_status = function(){\n        return `<span>{{{progress}}} {{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>`;\n    };\n\n\n    GRID.tmpl = {\n        \"main\": main,\n        \"page_navigation\": page_navigation,\n        \"page_status\": page_status,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(GRID.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();","// ax5.ui.grid.util\n(function () {\n\n    var GRID = ax5.ui.grid;\n    var U = ax5.util;\n\n\n\n    /**\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\n     * @param _table\n     * @param _frozenColumnIndex\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\n     */\n\n    var divideTableByFrozenColumnIndex = function (_table, _frozenColumnIndex) {\n        var tempTable_l = {rows: []};\n        var tempTable_r = {rows: []};\n        for (var r = 0, rl = _table.rows.length; r < rl; r++) {\n            var row = _table.rows[r];\n\n            tempTable_l.rows[r] = {cols: []};\n            tempTable_r.rows[r] = {cols: []};\n\n            for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                var col = jQuery.extend({}, row.cols[c]);\n                var colStartIndex = col.colIndex, colEndIndex = col.colIndex + col.colspan;\n\n                if (colStartIndex < _frozenColumnIndex) {\n                    if (colEndIndex <= _frozenColumnIndex) {\n                        // 좌측편에 변형없이 추가\n                        tempTable_l.rows[r].cols.push(col);\n                    } else {\n                        var leftCol = jQuery.extend({}, col);\n                        var rightCol = jQuery.extend({}, leftCol);\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\n                        rightCol.colIndex = _frozenColumnIndex;\n                        rightCol.colspan = col.colspan - leftCol.colspan;\n\n                        tempTable_l.rows[r].cols.push(leftCol);\n                        tempTable_r.rows[r].cols.push(rightCol);\n                    }\n                }\n                else {\n                    // 오른편\n                    tempTable_r.rows[r].cols.push(col);\n                }\n            }\n        }\n\n        return {\n            leftData: tempTable_l,\n            rightData: tempTable_r\n        }\n    };\n\n    var getMousePosition = function (e) {\n        var mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n        mouseObj = ('changedTouches' in originalEvent) ? originalEvent.changedTouches[0] : originalEvent;\n        // clientX, Y 쓰면 스크롤에서 문제 발생\n        return {\n            clientX: mouseObj.pageX,\n            clientY: mouseObj.pageY\n        }\n    };\n\n    var ENM = {\n        \"mousedown\": (ax5.info.supportTouch) ? \"touchstart\" : \"mousedown\",\n        \"mousemove\": (ax5.info.supportTouch) ? \"touchmove\" : \"mousemove\",\n        \"mouseup\": (ax5.info.supportTouch) ? \"touchend\" : \"mouseup\"\n    };\n\n    var makeHeaderTable = function (_columns) {\n        var columns = U.deepCopy(_columns);\n        var cfg = this.config;\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function (_columns, depth, parentField) {\n            var row = {cols: []};\n            var i = 0, l = _columns.length;\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n                    field.colspan = 1;\n                    field.rowspan = 1;\n\n                    field.rowIndex = depth;\n                    field.colIndex = (function () {\n                        if (!parentField) {\n                            return colIndex++;\n                        } else {\n                            colIndex = parentField.colIndex + i + 1;\n                            return parentField.colIndex + i;\n                        }\n                    })();\n\n                    row.cols.push(field);\n\n                    if ('columns' in field) {\n                        colspan = maekRows(field.columns, depth + 1, field);\n                    } else {\n                        field.width = ('width' in field) ? field.width : cfg.columnMinWidth;\n                    }\n                    field.colspan = colspan;\n                } else {\n\n\n                }\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = {cols: []};\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return (row.cols.length - 1) + colspan;\n            } else {\n                return colspan;\n            }\n\n        };\n        maekRows(columns, 0);\n\n        // set rowspan\n        for (var r = 0, rl = table.rows.length; r < rl; r++) {\n            for (var c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\n                if (!('columns' in table.rows[r].cols[c])) {\n                    table.rows[r].cols[c].rowspan = rl - r;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    var makeBodyRowTable = function (_columns) {\n        var columns = U.deepCopy(_columns);\n        var table = {\n            rows: []\n        };\n        var colIndex = 0;\n        var maekRows = function (_columns, depth, parentField) {\n            var row = {cols: []};\n            var i = 0, l = _columns.length;\n\n            var selfMakeRow = function (__columns) {\n                var i = 0, l = __columns.length;\n                for (; i < l; i++) {\n                    var field = __columns[i];\n                    var colspan = 1;\n\n                    if (!field.hidden) {\n\n                        if ('key' in field) {\n                            field.colspan = 1;\n                            field.rowspan = 1;\n\n                            field.rowIndex = depth;\n                            field.colIndex = (function () {\n                                if (!parentField) {\n                                    return colIndex++;\n                                } else {\n                                    colIndex = parentField.colIndex + i + 1;\n                                    return parentField.colIndex + i;\n                                }\n                            })();\n\n                            row.cols.push(field);\n                            if ('columns' in field) {\n                                colspan = maekRows(field.columns, depth + 1, field);\n                            }\n                            field.colspan = colspan;\n                        }\n                        else {\n                            if ('columns' in field) {\n                                selfMakeRow(field.columns, depth);\n                            }\n                        }\n                    } else {\n\n                    }\n                }\n            };\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n\n                    if ('key' in field) {\n                        field.colspan = 1;\n                        field.rowspan = 1;\n\n                        field.rowIndex = depth;\n                        field.colIndex = (function () {\n                            if (!parentField) {\n                                return colIndex++;\n                            } else {\n                                colIndex = parentField.colIndex + i + 1;\n                                return parentField.colIndex + i;\n                            }\n                        })();\n\n                        row.cols.push(field);\n                        if ('columns' in field) {\n                            colspan = maekRows(field.columns, depth + 1, field);\n                        }\n                        field.colspan = colspan;\n                    }\n                    else {\n                        if ('columns' in field) {\n                            selfMakeRow(field.columns, depth);\n                        }\n                    }\n                } else {\n\n                }\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = {cols: []};\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return (row.cols.length - 1) + colspan;\n            } else {\n                return colspan;\n            }\n\n        };\n        maekRows(columns, 0);\n\n        (function (table) {\n            // set rowspan\n            for (var r = 0, rl = table.rows.length; r < rl; r++) {\n                var row = table.rows[r];\n                for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                    var col = row.cols[c];\n                    if (!('columns' in col)) {\n                        col.rowspan = rl - r;\n                    }\n                }\n            }\n        })(table);\n\n        return table;\n    };\n\n    var makeBodyRowMap = function (_table) {\n        var map = {};\n        _table.rows.forEach(function (row) {\n            row.cols.forEach(function (col) {\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\n            });\n        });\n        return map;\n    };\n\n    let makeFootSumTable = function (_footSumColumns) {\n        let table = {\n            rows: []\n        };\n\n        for (var r = 0, rl = _footSumColumns.length; r < rl; r++) {\n            var footSumRow = _footSumColumns[r];\n            table.rows[r] = {cols: []};\n            var addC = 0;\n            for (var c = 0, cl = footSumRow.length; c < cl; c++) {\n                if (addC > this.columns.length) break;\n                var colspan = footSumRow[c].colspan || 1;\n                if (footSumRow[c].label || footSumRow[c].key) {\n                    table.rows[r].cols.push({\n                        colspan: colspan,\n                        rowspan: 1,\n                        colIndex: addC,\n                        columnAttr: \"sum\",\n                        align: footSumRow[c].align,\n                        label: footSumRow[c].label,\n                        key: footSumRow[c].key,\n                        collector: footSumRow[c].collector,\n                        formatter: footSumRow[c].formatter\n                    });\n                } else {\n                    table.rows[r].cols.push({\n                        colIndex: addC,\n                        colspan: colspan,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n                addC += colspan;\n            }\n\n            if (addC < this.columns.length + 1) {\n                for (var c = addC; c < this.colGroup.length; c++) {\n                    table.rows[r].cols.push({\n                        colIndex: (c + 1),\n                        colspan: 1,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n            }\n        }\n        return table;\n    };\n\n    let makeBodyGroupingTable = function (_bodyGroupingColumns) {\n        let table = {\n            rows: []\n        }, r = 0, addC = 0;\n\n        table.rows[r] = {cols: []};\n        for (let c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {\n            if (addC > this.columns.length) break;\n            let colspan = _bodyGroupingColumns[c].colspan || 1;\n            if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {\n                table.rows[r].cols.push({\n                    colspan: colspan,\n                    rowspan: 1,\n                    rowIndex: 0,\n                    colIndex: addC,\n                    columnAttr: \"default\",\n                    align: _bodyGroupingColumns[c].align,\n                    label: _bodyGroupingColumns[c].label,\n                    key: _bodyGroupingColumns[c].key,\n                    collector: _bodyGroupingColumns[c].collector,\n                    formatter: _bodyGroupingColumns[c].formatter\n                });\n            } else {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: addC,\n                    colspan: colspan,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n            addC += colspan;\n        }\n\n        if (addC < this.colGroup.length) {\n            for (var c = addC; c < this.colGroup.length; c++) {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: (c + 1),\n                    colspan: 1,\n                    rowspan: 1,\n                    label: \"&nbsp;\",\n                });\n            }\n        }\n\n        return table;\n    };\n\n    let findPanelByColumnIndex = function (_dindex, _colIndex, _rowIndex) {\n        let _containerPanelName,\n            _isScrollPanel = false,\n            _panels = [];\n\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\n        _panels.push(\"body\");\n\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\n            _containerPanelName = _panels.join(\"-\");\n            _panels.push(\"scroll\");\n            _isScrollPanel = true;\n        }\n\n        return {\n            panelName: _panels.join(\"-\"),\n            containerPanelName : _containerPanelName,\n            isScrollPanel: _isScrollPanel\n        }\n    };\n\n    let getRealPathForDataItem = function (_dataPath) {\n        let path = [],\n            _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\n\n        _path.forEach(function (n) {\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n        });\n        _path = null;\n        return path.join(\"\");\n    };\n\n\n    GRID.util = {\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\n        getMousePosition: getMousePosition,\n        ENM: ENM,\n        makeHeaderTable: makeHeaderTable,\n        makeBodyRowTable: makeBodyRowTable,\n        makeBodyRowMap: makeBodyRowMap,\n        makeFootSumTable: makeFootSumTable,\n        makeBodyGroupingTable: makeBodyGroupingTable,\n        findPanelByColumnIndex: findPanelByColumnIndex,\n        getRealPathForDataItem: getRealPathForDataItem\n    };\n\n})();"]}