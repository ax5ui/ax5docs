{"version":3,"sources":["ax5grid.min.js","ax5grid.js","ax5grid-body.js","ax5grid-collector.js","ax5grid-data.js","ax5grid-excel.js","ax5grid-formatter.js","ax5grid-header.js","ax5grid-inline-editor.js","ax5grid-page.js","ax5grid-scroller.js","ax5grid-tmpl.js","ax5grid-util.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","UI","ax5","ui","U","util","GRID","addClass","className","self","this","cfg","ctrlKeys","33","34","35","36","37","38","39","40","instanceId","getGuid","config","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","frozenColumnIndex","frozenRowIndex","showLineNumber","showRowSelector","multipleSelect","virtualScrollY","virtualScrollX","virtualScrollYCountMargin","virtualScrollAccelerated","height","columnMinWidth","lineNumberColumnWidth","rowSelectorColumnWidth","sortable","undefined","remoteSort","header","display","align","columnHeight","columnPadding","columnBorderWidth","body","grouping","mergeCells","rightSum","footSum","page","statusDisplay","navigationItemCount","scroller","size","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","tree","use","hashDigit","indentWidth","arrowWidth","iconWidth","icons","openedArrow","collapsedArrow","groupIcon","collapsedGroupIcon","itemIcon","parentKey","selfKey","collapse","hidden","parentHash","selfHash","children","depth","xvar","bodyTrHeight","scrollContentWidth","scrollContentHeight","scrollTimer","columns","colGroup","footSumColumns","bodyGrouping","list","proxyList","selectedDataIndexs","deletedList","sortInfo","focusedColumn","selectedColumn","isInlineEditing","inlineEditing","listIndexMap","gridContextMenu","headerTable","leftHeaderData","headerData","rightHeaderData","bodyRowTable","leftBodyRowData","bodyRowData","rightBodyRowData","bodyRowMap","bodyGroupingTable","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","bodyGroupingMap","footSumTable","leftFootSumData","footSumData","needToPaintSum","initGrid","data","id","$target","html","tmpl","get","$","container","find","root","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","right-body","right-body-scroll","bottom-aside-body","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","horizontal-bar","corner","navigation","status","form","clipboard","resizer","css","_height","initColumns","_columns","deepCopy","makeHeaderTable","call","makeBodyRowTable","makeBodyRowMap","rows","length","colGroupMap","r","rl","row","c","cl","cols","colIndex","jQuery","extend","k","push","onResetColumns","resetColGroupWidth","initFootSum","initBodyGroup","alignGrid","repaint","resize","CT_WIDTH","width","totalWidth","computedWidth","autoWidthColgroupIndexs","i","l","isNumber","_width","right","left","_footSum","isArray","makeFootSumTable","_grouping","by","makeBodyGroupingTable","kl","orderBy","seq","fixed","key","sort","sortFixed","_isFirst","Math","min","innerWidth","innerHeight","CT_HEIGHT","CT_INNER_WIDTH","CT_INNER_HEIGHT","asidePanelWidth","frozenPanelWidth","endIndex","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","rightPanelWidth","frozenRowHeight","footSumHeight","headerHeight","pageHeight","totalColGroupWidth","bodyWidth","panelDisplayProcess","vPosition","hPosition","containerType","isHide","hide","show","scrollerDisplayProcess","scrollerWidth","scrollerHeight","sortColumns","_sortInfo","isFunction","that","a","b","initData","clearGroupingData","resetLineNumber","init","_config","target","console","log","info","getError","onStateChanged","onClick","onLoad","onDataChanged","isObject","error","parseJson","attr","grid","window","bind","document","on","e","isPickerClick","findParentNode","_target","getAttribute","focused","blur","which","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","UP","shiftKey","DOWN","metaKey","ctrlKey","copySelect","SPACE","Object","keys","setTimeout","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","_e","inlineEdit","active","test","keydown","activeEditLength","columnKey","_act","_data","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_colIndex","_dindex","_di","_column","dindex","rowIndex","originalColumn","__isGrouping","forEach","join","innerText","select","execCommand","setData","isFirstPaint","paintStartRowIndex","set","navigationUpdate","scrollTo","top","getList","_type","setHeight","offsetParent","addRow","_row","_options","add","focus","appendToList","_list","append","removeRow","remove","updateRow","update","repaintRow","updateChildRows","_updateData","updateChild","paintStartColumnIndex","deleteRow","setValue","_key","_value","repaintCell","_panelName","_rows","__dindex","__key","__value","addColumn","first","concat","last","_cindex","_i","_l","splice","removeColumn","updateColumn","setColumnWidth","columnResizerIndex","getColumnSortInfo","setColumnSort","applySortStatus","_selectObject","selectedClear","clearSelect","updateRowState","clickBody","click","DBLClickBody","dblClick","selectAll","updateRowStateAll","exportExcel","_fileName","table","getExcelString","excel","_pos","selectedIndex","HOME","END","destroy","empty","grid_instance","filter","main","arguments","setConfig","apply","columnSelect","focusClear","panelName","removeAttr","clear","column","editKey","colspan","selectedRange","start","end","deActive","trl","range","s","max","_panels","columnSelector","cell","Number","off","_states","si","cellChecked","checked","_state","col","targetClick","default","item","value","editor","type","getValue","newValue","trueValue","falseValue","editorConfig","rowSelector","internalCall","lineNumber","tree-control","_el","toggleCollapse","targetDBLClick","onDBLClick","contextMenu","param","t","menu","element","gridSelf","popup","popupFilter","touchmoved","resetFrozenColumn","paintRowCountMargin","paintRowCountTopMargin","floor","dividedBodyRowObj","divideTableByFrozenColumnIndex","asideBodyRowData","dataTable","label","rowspan","_col","columnAttr","leftData","rightData","dividedBodyGroupingObj","asideBodyGroupingData","dividedFootSumObj","getFieldValue","_item","_index","_returnPlainText","tagsToReplace","<",">","_editor","inlineEditor","editMode","__origin_index__","disabled","getHtml","valueProcessor","formatter","returnValue","replace","tag","treeControl","indentNodeHtml","getGroupingValue","_label","__groupingList","groupBy","__groupingBy","collector","getSumFieldValue","_reset","virtualPaintStartRowIndex","position","isNaN","paintEndColumnIndex","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","bodyScrollLeft","ci","_sx","_ex","padding-left","padding-right","headerColGroup","bodyAlign","paintRowCount","virtualPaintRowCount","ceil","abs","dataRowCount","getTableByStartEndColumnIndex","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","cgl","di","dl","tri","cellHeight","colAlign","isScrolled","len","isGroupingRow","rowTable","odi","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","index","_cellHeight","lineHeight","multiLine","innerHTML","repaintSum","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","ri","tableTrTds","trMaps","childNodes","tdObj","text","_loop","prevTokenColIndexs","_loop2","search","hasFalse","ti","scrollConfig","asideColGroup","slice","leftHeaderColGroup","statusUpdate","_newValue","updateCell","updateWith","updateColumnKey","findPanelByColumnIndex","updateWithCell","replaceGroupTr","replaceTr","noRepaint","_position","UD","_dy","moveResult","while_i","nPanelInfo","LR","_dx","isScrollPanel","containerPanelName","isScrollTo","scrollLeft","$column","newLeft","outerWidth","INDEX","LEFT","RIGHT","_initValue","useReturnToSave","originalValue","initValue","__editor","isNothing","number","money","$inlineEditorCell","$inlineEditor","_msg","editorValue","tagName","val","action","CANCEL","__clear","bindedAx5ui","ax5picker","ax5select","getBody","getSum","po","_collapse","getProxyList","sum","avg","listLength","round","returnList","appendIndex","dataRealRowCount","groupingKeys","map","compareString","gi","gl","appendRow","ari","appendRowItem","labels","ki","arrangeData4tree","li","setDigit","_parent","_parentHash","treeKeys","substr","ii","originIndex","_k","Function","getRealPathForDataItem","_selected","sortInfoArray","getKeyValue","order","_a_val","_b_val","_a","_b","_callback","appendIdle","clearTimeout","base64","btoa","unescape","encodeURIComponent","uri","getExcelTmpl","tableToExcel","fileName","output","tables","mustache","render","worksheet","arr","name","isChrome","navigator","userAgent","indexOf","isSafari","isIE","documentMode","blob1","blankWindow","$iframe","iframe","anchor","msSaveOrOpenBlob","Blob","open","write","close","appendChild","createElement","download","href","removeChild","export","columnResizerEvent","_columnResizer","$columnResizer","columnResizerPositionLeft","offset","gridTargetOffsetLeft","resizeRange","ENM","mouseObj","getMousePosition","__da","clientX","mousePosition","columnResizerLived","removeClass","unbind","toggleSort","dividedHeaderObj","asideHeaderData","headerAlign","repaintHeader","tableWidth","trCSS_class","headerStyleClass","_SS","enableFilter","resizerHeight","resizerLeft","AS","sortOrder","multiSort","getHeader","edit_text","_root","_columnKey","attributes","attributesText","_$parent","$el","bindUI","_$el","edit_money","ax5formatter","pattern","edit_number","edit_date","direction","content","state","activePicker","edit_select","eConfig","optionValue","optionText","optionSelected","options","n","activeSelectOptionGroup","edit_checkbox","marginTop","edit_textarea","_getHtml","_bindUI","box","editorHeight","buttonHeight","$newDiv","$newTextarea","date","checkbox","textarea","onclickPageMove","callback","_pageNo","currentPage","selectPage","onChange","prev","pageNo","next","totalPages","hasPage","pageSize","totalElements","firstIcon","prevIcon","nextIcon","lastIcon","returns","startI","endI","p","fromRowIndex","toRowIndex","progress","convertScrollPosition","_var","_content_height","_panel_height","_scroller_height","_vertical_scroller_height","verticalScrollBarHeight","_content_width","_panel_width","_scroller_width","_horizontal_scroller_width","horizontalScrollBarWidth","convertScrollBarPosition","_top","scrollPositon","_left","scrollBarMover","track","bar","Date","getTime","moveout_timer","trackOffset","barBox","outerHeight","trackBox","getScrollerPosition","newTop","clientY","barOffset","scrollContentMover","wheel","delta","_body_scroll_position","_top_is_end","_left_is_end","x","y","getContentPosition","__x_da","__y_da","margin","E","detail","deltaY","wheelDelta","deltaX","supportTouch","page_navigation","page_status","tmplName","_table","_frozenColumnIndex","tempTable_l","tempTable_r","colStartIndex","colEndIndex","leftCol","rightCol","_startColumnIndex","_endColumnIndex","tempTable","changedTouches","pageX","pageY","mousedown","mousemove","mouseup","maekRows","parentField","field","selfMakeRow","__columns","_footSumColumns","footSumRow","addC","_bodyGroupingColumns","_containerPanelName","_isScrollPanel","_dataPath","path","_path","split"],"mappings":"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","file":"ax5grid.min.js","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\r\n * Copyright (c) 2016. tom@axisj.com\r\n * - github.com/thomasjang\r\n * - www.axisj.com\r\n */\n\n// ax5.ui.grid\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var GRID = void 0;\n\n    UI.addClass({\n        className: \"grid\"\n    }, function () {\n        /**\r\n         * @class ax5grid\r\n         * @classdesc\r\n         * @author tom@axisj.com\r\n         * @example\r\n         * ```\r\n         * var myGrid = new ax5.ui.grid();\r\n         * ```\r\n         */\n        return function () {\n            var self = this,\n                cfg = void 0,\n                ctrlKeys = {\n                \"33\": \"KEY_PAGEUP\",\n                \"34\": \"KEY_PAGEDOWN\",\n                \"35\": \"KEY_END\",\n                \"36\": \"KEY_HOME\",\n                \"37\": \"KEY_LEFT\",\n                \"38\": \"KEY_UP\",\n                \"39\": \"KEY_RIGHT\",\n                \"40\": \"KEY_DOWN\"\n            };\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                debounceTime: 250,\n                appendDebouncer: null,\n                appendDebounceTimes: 0,\n                appendProgressIcon: '...',\n                appendProgress: false,\n\n                // 틀고정 속성\n                frozenColumnIndex: 0,\n                frozenRowIndex: 0,\n                showLineNumber: false,\n                showRowSelector: false,\n                multipleSelect: true,\n                virtualScrollY: true,\n                virtualScrollX: true,\n                virtualScrollYCountMargin: 0,\n                virtualScrollAccelerated: false,\n                height: 0,\n                columnMinWidth: 100,\n                lineNumberColumnWidth: 30,\n                rowSelectorColumnWidth: 26,\n                sortable: undefined,\n                remoteSort: false,\n\n                header: {\n                    display: true,\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1\n                },\n                body: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1,\n                    grouping: false,\n                    mergeCells: false\n                },\n                rightSum: false,\n                footSum: false,\n                page: {\n                    height: 25,\n                    display: true,\n                    statusDisplay: true,\n                    navigationItemCount: 5\n                },\n                scroller: {\n                    size: 15,\n                    barMinSize: 15,\n                    trackPadding: 4\n                },\n                columnKeys: {\n                    selected: '__selected__',\n                    modified: '__modified__',\n                    deleted: '__deleted__',\n                    disableSelection: '__disable_selection__'\n                },\n                tree: {\n                    use: false,\n                    hashDigit: 8,\n                    indentWidth: 10,\n                    arrowWidth: 15,\n                    iconWidth: 18,\n                    icons: {\n                        openedArrow: '▾',\n                        collapsedArrow: '▸',\n                        groupIcon: '⊚',\n                        collapsedGroupIcon: '⊚',\n                        itemIcon: '⊙'\n                    },\n                    columnKeys: {\n                        parentKey: \"pid\",\n                        selfKey: \"id\",\n                        collapse: \"collapse\",\n                        hidden: \"hidden\",\n                        parentHash: \"__hp__\",\n                        selfHash: \"__hs__\",\n                        children: \"__children__\",\n                        depth: \"__depth__\"\n                    }\n                }\n            };\n            this.xvar = {\n                bodyTrHeight: 0, // 한줄의 높이\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n                scrollContentHeight: 0, // 스크롤 된 내용물의 높이\n                scrollTimer: null\n            };\n\n            // 그리드 데이터셋\n            this.columns = []; // config.columns에서 복제된 오브젝트\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n            this.footSumColumns = [];\n            this.bodyGrouping = {};\n\n            this.list = []; // 그리드의 데이터\n            this.proxyList = null; // 그리드 데이터의 대리자\n            this.page = {}; // 그리드의 페이지 정보\n            this.selectedDataIndexs = [];\n            this.deletedList = [];\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n            this.isInlineEditing = false;\n            this.inlineEditing = {};\n            this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵\n            this.gridContextMenu = null; // contentMenu 의 인스턴스\n\n            // header\n            this.headerTable = {};\n            this.leftHeaderData = {};\n            this.headerData = {};\n            this.rightHeaderData = {};\n\n            // body\n            this.bodyRowTable = {};\n            this.leftBodyRowData = {};\n            this.bodyRowData = {};\n            this.rightBodyRowData = {};\n            this.bodyRowMap = {};\n\n            this.bodyGroupingTable = {};\n            this.leftBodyGroupingData = {};\n            this.bodyGroupingData = {};\n            this.rightBodyGroupingData = {};\n            this.bodyGroupingMap = {};\n\n            // footSum\n            this.footSumTable = {}; // footSum의 출력레이아웃\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n            cfg = this.config;\n\n            var initGrid = function initGrid() {\n                // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n                var data = {\n                    instanceId: this.id\n                };\n\n                this.$target.html(GRID.tmpl.get(\"main\", data));\n\n                // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n                this.$ = {\n                    \"container\": {\n                        \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\n                        \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\n                        \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\n                        \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\n                    },\n                    \"panel\": {\n                        \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\n                        \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\n                        \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\n                        \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\n                        \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\n                        \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\n                        \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\n                        \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\n                        \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\n                        \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\n                        \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\n                        \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\n                        \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\n                        \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\n                        \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\n                        \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\n                        \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\n                        \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\n                        \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\n                        \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\n                        \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\n                    },\n                    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n                    \"scroller\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\n                        \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\n                        \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\n                        \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\n                    },\n                    \"page\": {\n                        \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\n                        \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\n                    },\n                    \"form\": {\n                        \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\n                    },\n                    \"resizer\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\n                    }\n                };\n\n                this.$[\"container\"][\"root\"].css({ height: this.config.height || this.config._height });\n\n                return this;\n            };\n            var initColumns = function initColumns(_columns) {\n                this.columns = U.deepCopy(_columns);\n                this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\n                this.xvar.frozenColumnIndex = cfg.frozenColumnIndex || 0;\n\n                this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\n                this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\n                // 바디에 표현될 한줄의 높이를 계산합니다.\n                this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n                var colGroupMap = {};\n                for (var r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n                    var row = this.headerTable.rows[r];\n                    for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                        colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n                    }\n                }\n\n                this.colGroup = [];\n                for (var k in colGroupMap) {\n                    this.colGroup.push(colGroupMap[k]);\n                }\n\n                return this;\n            };\n            var onResetColumns = function onResetColumns() {\n                initColumns.call(this, this.config.columns);\n                resetColGroupWidth.call(this);\n                if (this.config.footSum) {\n                    initFootSum.call(this, this.config.footSum);\n                    this.needToPaintSum = true;\n                }\n                if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n                alignGrid.call(this, true);\n                GRID.header.repaint.call(this, true);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n            };\n            var resetColGroupWidth = function resetColGroupWidth() {\n                /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n                var CT_WIDTH = this.$[\"container\"][\"root\"].width() - function () {\n                    var width = 0;\n                    if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                    if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                    width += cfg.scroller.size;\n                    return width;\n                }(),\n                    totalWidth = 0,\n                    computedWidth = void 0,\n                    autoWidthColgroupIndexs = [],\n                    colGroup = this.colGroup,\n                    i = void 0,\n                    l = void 0;\n\n                for (i = 0, l = colGroup.length; i < l; i++) {\n                    if (U.isNumber(colGroup[i].width)) {\n                        totalWidth += colGroup[i]._width = colGroup[i].width;\n                    } else if (colGroup[i].width === \"*\") {\n                        autoWidthColgroupIndexs.push(i);\n                    } else if (U.right(colGroup[i].width, 1) === \"%\") {\n                        totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n                    }\n                }\n                if (autoWidthColgroupIndexs.length > 0) {\n                    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n                    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n                        colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n                    }\n                }\n            };\n            var initFootSum = function initFootSum(_footSum) {\n                if (U.isArray(_footSum)) {\n                    this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n                } else {\n                    this.footSumColumns = [];\n                    this.footSumTable = {};\n                }\n            };\n            var initBodyGroup = function initBodyGroup(_grouping) {\n                var grouping = jQuery.extend({}, _grouping);\n                if (\"by\" in grouping && \"columns\" in grouping) {\n                    this.bodyGrouping = {\n                        by: grouping.by,\n                        columns: grouping.columns\n                    };\n                    this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n                    this.sortInfo = function () {\n                        var sortInfo = {};\n                        for (var k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                            sortInfo[this.bodyGrouping.by[k]] = {\n                                orderBy: \"asc\",\n                                seq: k,\n                                fixed: true\n                            };\n                            for (var c = 0, cl = this.colGroup.length; c < cl; c++) {\n                                if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                                    this.colGroup[c].sort = \"asc\";\n                                    this.colGroup[c].sortFixed = true;\n                                }\n                            }\n                        }\n                        return sortInfo;\n                    }.call(this);\n                } else {\n                    cfg.body.grouping = false;\n                }\n            };\n            var alignGrid = function alignGrid(_isFirst) {\n                // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n                if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n                    return false;\n                }\n\n                if (!this.config.height) {\n                    this.$[\"container\"][\"root\"].css({ height: this.config._height = this.$target.height() });\n                }\n\n                var CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n                    CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n                    CT_INNER_WIDTH = CT_WIDTH,\n                    CT_INNER_HEIGHT = CT_HEIGHT,\n                    asidePanelWidth = cfg.asidePanelWidth = function () {\n                    var width = 0;\n                    if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                    if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                    return width;\n                }(),\n                    frozenPanelWidth = cfg.frozenPanelWidth = function (colGroup, endIndex) {\n                    var width = 0;\n                    for (var i = 0, l = endIndex; i < l; i++) {\n                        width += colGroup[i]._width;\n                    }\n                    return width;\n                }(this.colGroup, cfg.frozenColumnIndex),\n                    verticalScrollerWidth = void 0,\n                    horizontalScrollerHeight = void 0,\n                    bodyHeight = void 0;\n\n                // todo : 우측 함계컬럼 너비 계산\n                var rightPanelWidth = 0,\n                    frozenRowHeight = function (bodyTrHeight) {\n                    return cfg.frozenRowIndex * bodyTrHeight;\n                }(this.xvar.bodyTrHeight),\n                    footSumHeight = function (bodyTrHeight) {\n                    return this.footSumColumns.length * bodyTrHeight;\n                }.call(this, this.xvar.bodyTrHeight),\n                    headerHeight = cfg.header.display ? this.headerTable.rows.length * cfg.header.columnHeight : 0,\n                    pageHeight = cfg.page.display ? cfg.page.height : 0;\n\n                (function () {\n                    verticalScrollerWidth = CT_HEIGHT - headerHeight - pageHeight - footSumHeight < this.list.length * this.xvar.bodyTrHeight ? this.config.scroller.size : 0;\n                    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n                    horizontalScrollerHeight = function () {\n                        var totalColGroupWidth = 0;\n                        // aside 빼고 너비\n                        // 수직 스크롤이 있으면 또 빼고 비교\n                        var bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n                        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n                            totalColGroupWidth += this.colGroup[i]._width;\n                        }\n                        return totalColGroupWidth > bodyWidth ? this.config.scroller.size : 0;\n                    }.call(this);\n\n                    if (horizontalScrollerHeight > 0) {\n                        verticalScrollerWidth = CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight < this.list.length * this.xvar.bodyTrHeight ? this.config.scroller.size : 0;\n                    }\n                }).call(this);\n\n                // 수평 너비 결정\n                CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n                // 수직 스크롤러의 높이 결정.\n                CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n                bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n                var panelDisplayProcess = function panelDisplayProcess(panel, vPosition, hPosition, containerType) {\n                    var css = {},\n                        isHide = false;\n\n                    switch (hPosition) {\n                        case \"aside\":\n                            if (asidePanelWidth === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = 0;\n                                css[\"width\"] = asidePanelWidth;\n                            }\n                            break;\n                        case \"left\":\n                            if (cfg.frozenColumnIndex === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = asidePanelWidth;\n                                css[\"width\"] = frozenPanelWidth;\n                            }\n                            break;\n                        case \"right\":\n                            if (!cfg.rightSum) {\n                                isHide = true;\n                            } else {}\n                            break;\n                        default:\n                            if (containerType !== \"page\") {\n                                if (cfg.frozenColumnIndex === 0) {\n                                    css[\"left\"] = asidePanelWidth;\n                                } else {\n                                    css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                                }\n                                css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    if (containerType === \"body\") {\n                        switch (vPosition) {\n                            case \"top\":\n                                if (cfg.frozenRowIndex == 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = 0;\n                                    css[\"height\"] = frozenRowHeight;\n                                }\n                                break;\n                            case \"bottom\":\n                                if (!cfg.footSum) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = bodyHeight - footSumHeight;\n                                    css[\"height\"] = footSumHeight; // footSum height\n                                }\n                                break;\n                            default:\n                                css[\"top\"] = frozenRowHeight;\n                                css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                                break;\n                        }\n                    } else if (containerType === \"header\") {\n                        css[\"height\"] = headerHeight;\n                    } else if (containerType === \"page\") {\n                        if (pageHeight == 0) {\n                            isHide = true;\n                        } else {\n                            css[\"height\"] = pageHeight;\n                        }\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                    return this;\n                };\n                var scrollerDisplayProcess = function scrollerDisplayProcess(panel, scrollerWidth, scrollerHeight, containerType) {\n                    var css = {},\n                        isHide = false;\n\n                    switch (containerType) {\n                        case \"vertical\":\n                            if (scrollerWidth > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = CT_INNER_HEIGHT;\n                                css[\"bottom\"] = scrollerHeight + pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"horizontal\":\n                            if (scrollerHeight > 0) {\n                                css[\"width\"] = CT_INNER_WIDTH;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"right\"] = scrollerWidth;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"corner\":\n                            if (scrollerWidth > 0 && scrollerHeight > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                };\n\n                this.$[\"container\"][\"header\"].css({ height: headerHeight });\n                this.$[\"container\"][\"body\"].css({ height: bodyHeight });\n\n                // 각 패널들의 크기 표시여부를 결정합니다\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n                panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n                // 각 패널의 사이즈 결정\n                /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\n                this.xvar.bodyHeight = this.$.panel[\"body\"].height();\n                this.xvar.bodyWidth = this.$.panel[\"body\"].width();\n                // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\n\n                return true;\n            };\n            var sortColumns = function sortColumns(_sortInfo) {\n                GRID.header.repaint.call(this);\n\n                if (U.isFunction(this.config.remoteSort)) {\n                    var that = { sortInfo: [] };\n                    for (var k in _sortInfo) {\n                        that.sortInfo.push({\n                            key: k,\n                            orderBy: _sortInfo[k].orderBy,\n                            seq: _sortInfo[k].seq\n                        });\n                    }\n                    that.sortInfo.sort(function (a, b) {\n                        return a.seq > b.seq;\n                    });\n                    this.config.remoteSort.call(that, that);\n                } else {\n                    if (this.config.body.grouping) {\n                        this.list = GRID.data.initData.call(this, GRID.data.sort.call(this, _sortInfo, GRID.data.clearGroupingData.call(this, this.list)));\n                    } else {\n                        this.list = GRID.data.sort.call(this, _sortInfo, GRID.data.clearGroupingData.call(this, this.list), { resetLineNumber: true });\n                    }\n                    GRID.body.repaint.call(this, true);\n                    GRID.scroller.resize.call(this);\n                }\n            };\n            /// private end\n\n            /**\r\n            /**\r\n             * Preferences of grid UI\r\n             * @method ax5grid.setConfig\r\n             * @param {Object} _config - 클래스 속성값\r\n             * @param {Element} _config.target\r\n             * @param {Number} [_config.frozenColumnIndex=0]\r\n             * @param {Number} [_config.frozenRowIndex=0]\r\n             * @param {Boolean} [_config.showLineNumber=false]\r\n             * @param {Boolean} [_config.showRowSelector=false]\r\n             * @param {Boolean} [_config.multipleSelect=true]\r\n             * @param {Number} [_config.columnMinWidth=100]\r\n             * @param {Number} [_config.lineNumberColumnWidth=30]\r\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\r\n             * @param {Boolean} [_config.sortable=false]\r\n             * @param {Boolean} [_config.multiSort=false]\r\n             * @param {Function} [_config.remoteSort=false]\r\n             * @param {Boolean} [_config.virtualScrollY=true] - 세로축 가상스크롤 처리여부\r\n             * @param {Boolean} [_config.virtualScrollX=true] - 가로축 가상스크롤 처리여부\r\n             * @param {Object} [_config.header]\r\n             * @param {String} [_config.header.align]\r\n             * @param {Number} [_config.header.columnHeight=25]\r\n             * @param {Number} [_config.header.columnPadding=3]\r\n             * @param {Number} [_config.header.columnBorderWidth=1]\r\n             * @param {Object} [_config.body]\r\n             * @param {Function} [_config.onClick]\r\n             * @param {Function} [_config.onDBLClick]\r\n             * @param {String|Array} [_config.body.mergeCells=false] -\r\n             * @param {String} [_config.body.align]\r\n             * @param {Number} [_config.body.columnHeight=25]\r\n             * @param {Number} [_config.body.columnPadding=3]\r\n             * @param {Number} [_config.body.columnBorderWidth=1]\r\n             * @param {Object} [_config.body.grouping]\r\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\r\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\r\n             * @param {Object} [_config.page]\r\n             * @param {Number} [_config.page.height=25]\r\n             * @param {Boolean} [_config.page.display=true] - grid page display\r\n             * @param {Boolean} [_config.page.statusDisplay=true] - grid status display\r\n             * @param {Number} [_config.page.navigationItemCount=5]\r\n             * @param {Object} [_config.scroller]\r\n             * @param {Number} [_config.scroller.size=15]\r\n             * @param {Number} [_config.scroller.barMinSize=15]\r\n             * @param {Number} [_config.scroller.trackPadding=4]\r\n             * @param {Object} [_config.columnKeys]\r\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\r\n             * @param {Object[]} _config.columns\r\n             * @param {String} _config.columns[].key\r\n             * @param {String} _config.columns[].label\r\n             * @param {Number} _config.columns[].width\r\n             * @param {(String|Function)} _config.columns[].styleClass\r\n             * @param {(String|Function)} _config.columns[].headerStyleClass\r\n             * @param {Boolean} _config.columns[].enableFilter\r\n             * @param {Boolean} _config.columns[].sortable\r\n             * @param {String} _config.columns[].align\r\n             * @param {(String|Function)} _config.columns[].formatter\r\n             * @param {Object} _config.columns[].editor\r\n             * @param {String} _config.columns[].editor.type - text,number,money,date\r\n             * @param {Object} _config.columns[].editor.config\r\n             * @param {Array} _config.columns[].editor.updateWith\r\n             * @param {Function} _config.columns[].editor.disabled - disable editor\r\n             * @param {Boolean} [_config.columns[].multiLine=false]\r\n             * @param {Object} [_config.tree]\r\n             * @param {Boolean} [_config.tree.use=false] - Whether tree-type data is used\r\n             * @param {Number} [_config.tree.hashDigit=8]\r\n             * @param {Number} [_config.tree.indentWidth=10]\r\n             * @param {Number} [_config.tree.arrowWidth=15]\r\n             * @param {Number} [_config.tree.iconWidth=18]\r\n             * @param {Object} [_config.tree.icons]\r\n             * @param {String} [_config.tree.icons.openedArrow='▾']\r\n             * @param {String} [_config.tree.icons.collapsedArrow='▸']\r\n             * @param {String} [_config.tree.icons.groupIcon='⊚']\r\n             * @param {String} [_config.tree.icons.collapsedGroupIcon='⊚']\r\n             * @param {String} [_config.tree.icons.itemIcon='⊙']\r\n             * @param {Object} [_config.tree.columnKeys]\r\n             * @param {String} [_config.tree.columnKeys.parentKey=\"pid\"]\r\n             * @param {String} [_config.tree.columnKeys.selfKey=\"id\"]\r\n             * @param {String} [_config.tree.columnKeys.collapse=\"collapse\"]\r\n             * @param {String} [_config.tree.columnKeys.hidden=\"hidden\"]\r\n             * @param {String} [_config.tree.columnKeys.parentHash=\"__hp__\"]\r\n             * @param {String} [_config.tree.columnKeys.selfHash=\"__hs__\"]\r\n             * @param {String} [_config.tree.columnKeys.children=\"__children__\"]\r\n             * @param {String} [_config.tree.columnKeys.depth=\"__depth__\"]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * var firstGrid = new ax5.ui.grid();\r\n             *\r\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\r\n             *     return \"myType\" + (this.value || \"\");\r\n             * };\r\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\r\n             *     return (''+this.value).toUpperCase();\r\n             * };\r\n             *\r\n             * ax5.ui.grid.collector[\"myType\"] = function () {\r\n             *     return \"myType\" + (this.value || \"\");\r\n             * };\r\n             *\r\n             * var sampleData = [\r\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\r\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\r\n             * ];\r\n             *\r\n             * var gridView = {\r\n             *     initView: function () {\r\n             *         firstGrid.setConfig({\r\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\r\n             *             columns: [\r\n             *                 {\r\n             *                     key: \"companyJson['대표자명']\",\r\n             *                     label: \"필드A\",\r\n             *                     width: 80,\r\n             *                     styleClass: function () {\r\n             *                         return \"ABC\";\r\n             *                     },\r\n             *                     enableFilter: true,\r\n             *                     align: \"center\",\r\n             *                     editor: {type:\"text\"}\r\n             *                 },\r\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\r\n             *                 {\r\n             *                     key: undefined, label: \"필드C\", columns: [\r\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\r\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\r\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\r\n             *                     ]\r\n             *                 },\r\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\r\n             *                 {key: \"customer\", label: \"고객명\"},\r\n             *                 {key: \"saleType\", label: \"판매타입\"}\r\n             *             ]\r\n             *         });\r\n             *         return this;\r\n             *     },\r\n             *     setData: function (_pageNo) {\r\n             *         firstGrid.setData(sampleData);\r\n             *         return this;\r\n             *     }\r\n             * };\r\n             *\r\n             * // onClick, onDBLClick, onDataChanged\r\n             * firstGrid.setConfig({\r\n             *      target: $('[data-ax5grid=\"first-grid\"]'),\r\n             *      columns: [...],\r\n             *      body: {\r\n             *          onClick: function(){\r\n             *              console.log(this);\r\n             *          },\r\n             *          onDBLClick: function(){\r\n             *              console.log(this);\r\n             *              // If the column does not have an editor attribute, an event is raised.\r\n             *          },\r\n             *          onDataChanged: function(){\r\n             *              console.log(this);\r\n             *              // If change Data\r\n             *          }\r\n             *      }\r\n             * });\r\n             * ```\r\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\n                    return this;\n                }\n\n                // 그리드의 이벤트 정의 구간\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.body.onDataChanged;\n                // todo event에 대한 추가 정의 필요\n\n                this.$target = jQuery(cfg.target);\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\n\n                var grid = this.config = cfg;\n\n                if (!this.config.height) {\n                    this.config._height = this.$target.height();\n                }\n\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\n                if (!this.id) {\n                    //this.id = 'ax5grid-' + ax5.getGuid();\n                    this.id = 'ax5grid-' + this.instanceId;\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\n                }\n\n                GRID.data.init.call(this);\n\n                if (this.config.tree.use) {\n                    // 트리라면\n                    this.sortInfo = {};\n                    this.sortInfo[this.config.tree.columnKeys.selfHash] = { orderBy: \"asc\", seq: 0, fixed: true };\n                }\n\n                ///========\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n                initGrid.call(this);\n\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n                initColumns.call(this, grid.columns);\n                resetColGroupWidth.call(this);\n\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\n\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\n\n                // 그리드의 각 요소의 크기를 맞춤니다.\n                alignGrid.call(this, true);\n\n                // columns의 데이터로 header데이터를 만들고\n                GRID.header.init.call(this);\n                // header를 출력합니다.\n                GRID.header.repaint.call(this);\n\n                // columns의 데이터로 body데이터를 만들고\n                GRID.body.init.call(this);\n                // body를 출력합니다.\n                GRID.body.repaint.call(this);\n\n                // scroller\n                GRID.scroller.init.call(this);\n                GRID.scroller.resize.call(this);\n\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\n                    alignGrid.call(self);\n                    GRID.scroller.resize.call(self);\n                    GRID.body.repaint.call(self); // window resize시 repaint 함수 호출\n                });\n\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, function (e) {\n                    var isPickerClick = false,\n                        target = U.findParentNode(e.target, function (_target) {\n                        if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\n                            return true;\n                        }\n                        return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\n                    });\n\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\n                        self.focused = true;\n                    } else {\n                        self.focused = false;\n                        GRID.body.blur.call(this);\n                    }\n                }.bind(this));\n\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\n                    if (self.focused) {\n                        if (self.isInlineEditing) {\n\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                self.keyDown(\"ESC\", e.originalEvent);\n                            } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                self.keyDown(\"RETURN\", e.originalEvent);\n                            } else if (e.which == ax5.info.eventKeys.TAB) {\n                                self.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            } else if (e.which == ax5.info.eventKeys.UP) {\n                                self.keyDown(\"RETURN\", { shiftKey: true });\n                            } else if (e.which == ax5.info.eventKeys.DOWN) {\n                                self.keyDown(\"RETURN\", {});\n                            }\n                        } else {\n\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) {\n                                    // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                                    U.stopEvent(e);\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\n                                    if (self.focused) {\n                                        GRID.body.blur.call(self);\n                                    }\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                    self.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n                        }\n                    }\n                });\n\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n                setTimeout(function () {\n                    if (this.onLoad) {\n                        this.onLoad.call({\n                            self: this\n                        });\n                    }\n                }.bind(this));\n                return this;\n            };\n\n            /**\r\n             * align grid size\r\n             * @method ax5grid.align\r\n             * @returns {ax5grid}\r\n             */\n            this.align = function () {\n                if (alignGrid.call(this)) {\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.keyDown\r\n             * @param {String} _keyName\r\n             * @param {Event|Object} _data\r\n             * @return {ax5grid}\r\n             */\n            this.keyDown = function () {\n                var processor = {\n                    \"KEY_UP\": function KEY_UP() {\n                        GRID.body.moveFocus.call(this, \"UP\");\n                    },\n                    \"KEY_DOWN\": function KEY_DOWN() {\n                        GRID.body.moveFocus.call(this, \"DOWN\");\n                    },\n                    \"KEY_LEFT\": function KEY_LEFT() {\n                        GRID.body.moveFocus.call(this, \"LEFT\");\n                    },\n                    \"KEY_RIGHT\": function KEY_RIGHT() {\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\n                    },\n                    \"KEY_HOME\": function KEY_HOME() {\n                        GRID.body.moveFocus.call(this, \"HOME\");\n                    },\n                    \"KEY_END\": function KEY_END() {\n                        GRID.body.moveFocus.call(this, \"END\");\n                    },\n                    \"INLINE_EDIT\": function INLINE_EDIT(_e) {\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                            U.stopEvent(_e);\n                        }\n                    },\n                    \"ESC\": function ESC(_e) {\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\n                    },\n                    \"RETURN\": function RETURN(_e) {\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            if (!GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey)) {\n                                return false;\n                                U.stopEvent(_e);\n                            }\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, _e.shiftKey ? \"UP\" : \"DOWN\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                                }\n                            }\n                        }\n                        if (activeEditLength == 0) {\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                            U.stopEvent(_e);\n                        } else {}\n                    },\n                    \"TAB\": function TAB(_e) {\n\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, { moveFocus: true });\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, _e.shiftKey ? \"LEFT\" : \"RIGHT\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, { moveFocus: true });\n                                }\n                            }\n                        }\n                    }\n                };\n                return function (_act, _data) {\n                    if (_act in processor) processor[_act].call(this, _data);\n                    return this;\n                };\n            }();\n\n            /**\r\n             * @method ax5grid.copySelect\r\n             * @returns {Boolean} copysuccess\r\n             */\n            this.copySelect = function () {\n                var copysuccess = void 0,\n                    $clipBoard = this.$[\"form\"][\"clipboard\"],\n                    copyTextArray = [],\n                    copyText = \"\",\n                    _rowIndex = void 0,\n                    _colIndex = void 0,\n                    _dindex = void 0,\n                    _di = 0;\n\n                for (var c in this.selectedColumn) {\n                    var _column = this.selectedColumn[c];\n\n                    if (_column) {\n                        if (typeof _dindex === \"undefined\") {\n                            _dindex = _column.dindex;\n                            _rowIndex = _column.rowIndex;\n                            _colIndex = _column.rowIndex;\n                        }\n\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                            _di++;\n                        }\n\n                        if (!copyTextArray[_di]) {\n                            copyTextArray[_di] = [];\n                        }\n                        var originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                        if (originalColumn) {\n                            if (this.list[_column.dindex].__isGrouping) {\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                            } else {\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                            }\n                        } else {\n                            copyTextArray[_di].push(\"\");\n                        }\n\n                        _dindex = _column.dindex;\n                        _rowIndex = _column.rowIndex;\n                    }\n                }\n\n                copyTextArray.forEach(function (r) {\n                    copyText += r.join('\\t') + \"\\n\";\n                });\n\n                $clipBoard.get(0).innerText = copyText;\n                $clipBoard.select();\n\n                try {\n                    copysuccess = document.execCommand(\"copy\");\n                } catch (e) {\n                    copysuccess = false;\n                }\n                return copysuccess;\n            };\n\n            /**\r\n             * @method ax5grid.setData\r\n             * @param {Array} _data\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.setData({\r\n             *  list: [],\r\n             *  page: {\r\n             *      currentPage: 0,\r\n             *      pageSize: 50,\r\n             *      totalElements: 500,\r\n             *      totalPages: 100\r\n             *  }\r\n             * });\r\n             *\r\n             * // onlyList\r\n             * ax5Grid.setData([]);\r\n             * ```\r\n             */\n            this.setData = function (_data) {\n                var isFirstPaint = typeof this.xvar.paintStartRowIndex === \"undefined\";\n\n                GRID.data.set.call(this, _data);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this);\n                GRID.scroller.resize.call(this);\n                GRID.page.navigationUpdate.call(this);\n\n                if (!isFirstPaint) GRID.body.scrollTo.call(this, { top: 0 });\n\n                isFirstPaint = null;\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.getList\r\n             * @param {String} _type - selected|modified|deleted\r\n             * @returns {Array}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.getList();\r\n             * ax5Grid.getList(\"selected\");\r\n             * ax5Grid.getList(\"modified\");\r\n             * ax5Grid.getList(\"deleted\");\r\n             * ```\r\n             */\n            this.getList = function (_type) {\n                return GRID.data.getList.call(this, _type);\n            };\n\n            /**\r\n             * @method ax5grid.setHeight\r\n             * @param {Number} _height\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.setHeight(height);\r\n             * ```\r\n             */\n            this.setHeight = function (_height) {\n                //console.log(this.$target);\n                if (_height == \"100%\") {\n                    _height = this.$target.offsetParent().innerHeight();\n                }\n                this.$target.css({ height: _height });\n                this.$[\"container\"][\"root\"].css({ height: _height });\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.addRow\r\n             * @param {Object} _row\r\n             * @param {Number|String} [_dindex=last]\r\n             * @param {Object} [_options] - options of addRow\r\n             * @param {Boolean} [_options.sort] - sortData\r\n             * @param {Number|String} [_options.focus] - HOME|END|[dindex]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\r\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"END\"});\r\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"HOME\"});\r\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: 10});\r\n             * ```\r\n             */\n            this.addRow = function (_row, _dindex, _options) {\n                GRID.data.add.call(this, _row, _dindex, _options);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                if (_options && _options.focus) {\n                    //GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                    GRID.body.moveFocus.call(this, _options.focus);\n                }\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.appendToList\r\n             * @param _list\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.appendToList([{},{},{}]);\r\n             * ax5Grid.appendToList([{},{},{}]);\r\n             * ```\r\n             */\n            this.appendToList = function (_list) {\n                GRID.data.append.call(this, _list, function () {\n                    alignGrid.call(this);\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }.bind(this));\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.removeRow\r\n             * @param {Number|String} [_dindex=last]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.removeRow();\r\n             * ax5Grid.removeRow(\"first\");\r\n             * ax5Grid.removeRow(\"last\");\r\n             * ax5Grid.removeRow(1);\r\n             * ```\r\n             */\n            this.removeRow = function (_dindex) {\n                GRID.data.remove.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, this.config.body.grouping ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.updateRow\r\n             * @param {Object} _row\r\n             * @param {Number} _dindex\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.updateRow({price: 100, amount: 100, cost: 10000}, 1);\r\n             * ```\r\n             */\n            this.updateRow = function (_row, _dindex) {\n                GRID.data.update.call(this, _row, _dindex);\n                // todo : mergeCells 옵션에 따라 예외처리\n\n                GRID.body.repaintRow.call(this, _dindex);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.updateChildRows\r\n             * @param {Number} _dindex\r\n             * @param {Object} _updateData\r\n             * @param {Object} [_options]\r\n             * @param {Function} [_options.filter]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * onDataChanged: function () {\r\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked});\r\n             * }\r\n             *\r\n             * onDataChanged: function () {\r\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked}, {filter: function(){\r\n             *          return this.item.type == \"A\";\r\n             *      });\r\n             * }\r\n             * ```\r\n             */\n            this.updateChildRows = function (_dindex, _updateData, _options) {\n                GRID.data.updateChild.call(this, _dindex, _updateData, _options);\n                this.xvar.paintStartRowIndex = undefined;\n                this.xvar.paintStartColumnIndex = undefined;\n                GRID.body.repaint.call(this);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.deleteRow\r\n             * @param {Number|String} _dindex\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.deleteRow(\"first\");\r\n             * ax5Grid.deleteRow(\"last\");\r\n             * ax5Grid.deleteRow(1);\r\n             * ax5Grid.deleteRow(\"selected\");\r\n             * ```\r\n             */\n            this.deleteRow = function (_dindex) {\n                GRID.data.deleteRow.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                // 삭제시엔 포커스 ?\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.setValue\r\n             * @param _dindex\r\n             * @param _key\r\n             * @param _value\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.setValue(0, \"price\", 100);\r\n             * ```\r\n             */\n            this.setValue = function (_dindex, _key, _value) {\n                // getPanelname;\n                if (GRID.data.setValue.call(this, _dindex, _key, _value)) {\n                    var repaintCell = function repaintCell(_panelName, _rows, __dindex, __key, __value) {\n                        for (var r = 0, rl = _rows.length; r < rl; r++) {\n                            for (var c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n                                if (_rows[r].cols[c].key == __key) {\n                                    if (this.xvar.frozenRowIndex > __dindex) {\n                                        GRID.body.repaintCell.call(this, \"top-\" + _panelName, __dindex, r, c, __value);\n                                    } else {\n                                        GRID.body.repaintCell.call(this, _panelName + \"-scroll\", __dindex, r, c, __value);\n                                    }\n                                }\n                            }\n                        }\n                    };\n\n                    repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, _key, _value);\n                    repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, _key, _value);\n                }\n\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.addColumn\r\n             * @param {Object} _column\r\n             * @param {Number|String} [_cindex=last]\r\n             * @returns {ax5grid}\r\n             */\n            this.addColumn = function () {\n                var processor = {\n                    \"first\": function first(_column) {\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\n                    },\n                    \"last\": function last(_column) {\n                        this.config.columns = this.config.columns.concat([].concat(_column));\n                    }\n                };\n\n                return function (_column, _cindex) {\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _column);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        if (U.isArray(_column)) {\n                            for (var _i = 0, _l = _column.length; _i < _l; _i++) {\n                                this.config.columns.splice(_cindex + _i, 0, _column[_i]);\n                            }\n                        } else {\n                            this.config.columns.splice(_cindex, 0, _column);\n                        }\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                };\n            }();\n\n            /**\r\n             * @method ax5grid.removeColumn\r\n             * @param {Number|String} [_cindex=last]\r\n             * @returns {ax5grid}\r\n             */\n            this.removeColumn = function () {\n                var processor = {\n                    \"first\": function first(_cindex) {\n                        this.config.columns.splice(_cindex, 1);\n                    },\n                    \"last\": function last() {\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\n                    }\n                };\n                return function (_cindex) {\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _cindex);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        //\n                        this.config.columns.splice(_cindex, 1);\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                };\n            }();\n\n            /**\r\n             * @method ax5grid.updateColumn\r\n             * @param {Object} _column\r\n             * @param {Number} _cindex\r\n             * @returns {ax5grid}\r\n             */\n            this.updateColumn = function (_column, _cindex) {\n                if (!U.isNumber(_cindex)) {\n                    throw 'invalid argument _cindex';\n                }\n                //\n                this.config.columns.splice(_cindex, 1, _column);\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.setColumnWidth\r\n             * @param {Number} _width\r\n             * @param {Number} _cindex\r\n             * @returns {ax5grid}\r\n             */\n            this.setColumnWidth = function (_width, _cindex) {\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n                this.needToPaintSum = true;\n\n                // 컬럼너비 변경사항 적용.\n                GRID.header.repaint.call(this);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n\n                alignGrid.call(this);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.getColumnSortInfo\r\n             * @returns {Object} sortInfo\r\n             */\n            this.getColumnSortInfo = function () {\n                var that = { sortInfo: [] };\n                for (var k in this.sortInfo) {\n                    that.sortInfo.push({\n                        key: k,\n                        orderBy: this.sortInfo[k].orderBy,\n                        seq: this.sortInfo[k].seq\n                    });\n                }\n                that.sortInfo.sort(function (a, b) {\n                    return a.seq > b.seq;\n                });\n                return that.sortInfo;\n            };\n\n            /**\r\n             * @method ax5grid.setColumnSort\r\n             * @param {Object} _sortInfo\r\n             * @param {Object} _sortInfo.key\r\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\r\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\r\n             * ```\r\n             */\n            this.setColumnSort = function (_sortInfo) {\n                if (typeof _sortInfo !== \"undefined\") {\n                    this.sortInfo = _sortInfo;\n                    GRID.header.applySortStatus.call(this, _sortInfo);\n                }\n\n                sortColumns.call(this, _sortInfo || this.sortInfo);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.select\r\n             * @param {Number|Object} _selectObject\r\n             * @param {Number} _selectObject.index - index of row\r\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\r\n             * @param {Number} _selectObject.conIndex - colIndex of columns\r\n             * @param {Object} _options\r\n             * @param {Boolean} _options.selectedClear\r\n             * @param {Boolean} _options.selected\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.select(0);\r\n             * firstGrid.select(0, {selected: true});\r\n             * firstGrid.select(0, {selected: false});\r\n             * firstGrid.select(0, {selectedClear: true});\r\n             * ```\r\n             */\n            this.select = function (_selectObject, _options) {\n                if (U.isNumber(_selectObject)) {\n                    var _dindex2 = _selectObject;\n\n                    if (!this.config.multipleSelect) {\n                        this.clearSelect();\n                    } else {\n                        if (_options && _options.selectedClear) {\n                            this.clearSelect();\n                        }\n                    }\n\n                    GRID.data.select.call(this, _dindex2, _options && _options.selected);\n                    GRID.body.updateRowState.call(this, [\"selected\"], _dindex2);\n                }\n                return this;\n            };\n\n            /**\r\n             * @method firstGrid.clickBody\r\n             * @param {Number} _dindex\r\n             * @returns {ax5grid}\r\n             */\n            this.clickBody = function (_dindex) {\n                GRID.body.click.call(this, _dindex);\n                return this;\n            };\n\n            /**\r\n             * @method firstGrid.DBLClickBody\r\n             * @param {Number} _dindex\r\n             * @returns {ax5grid}\r\n             */\n            this.DBLClickBody = function (_dindex) {\n                GRID.body.dblClick.call(this, _dindex);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.clearSelect\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.clearSelect();\r\n             * ```\r\n             */\n            this.clearSelect = function () {\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\n                GRID.data.clearSelect.call(this);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.selectAll\r\n             * @param {Object} _options\r\n             * @param {Boolean} _options.selected\r\n             * @param {Function} _options.filter\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.selectAll();\r\n             * firstGrid.selectAll({selected: true});\r\n             * firstGrid.selectAll({selected: false});\r\n             * firstGrid.selectAll({filter: function(){\r\n             *      return this[\"b\"] == \"A01\";\r\n             * });\r\n             * firstGrid.selectAll({selected: true, filter: function(){\r\n             *      return this[\"b\"] == \"A01\";\r\n             * });\r\n             * ```\r\n             */\n            this.selectAll = function (_options) {\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.exportExcel\r\n             * @param {String} _fileName\r\n             * @returns {ax5grid|String}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\r\n             * console.log(firstGrid.exportExcel());\r\n             * ```\r\n             */\n            this.exportExcel = function (_fileName) {\n                var table = [];\n                table.push('<table border=\"1\">');\n                table.push(GRID.header.getExcelString.call(this));\n                table.push(GRID.body.getExcelString.call(this));\n                table.push('</table>');\n\n                if (typeof _fileName === \"undefined\") {\n                    return table.join('');\n                } else {\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\n                }\n\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.focus\r\n             * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.focus(\"UP\");\r\n             * firstGrid.focus(\"DOWN\");\r\n             * firstGrid.focus(\"HOME\");\r\n             * firstGrid.focus(\"END\");\r\n             * ```\r\n             */\n            this.focus = function (_pos) {\n                if (GRID.body.moveFocus.call(this, _pos)) {\n                    var focusedColumn = void 0;\n                    for (var c in this.focusedColumn) {\n                        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                        break;\n                    }\n                    if (focusedColumn) {\n                        this.select(focusedColumn.dindex, { selectedClear: true });\n                    }\n                } else {\n                    if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n                        this.select(0);\n                    } else {\n                        var selectedIndex = this.selectedDataIndexs[0];\n                        var processor = {\n                            \"UP\": function UP() {\n                                if (selectedIndex > 0) {\n                                    this.select(selectedIndex - 1, { selectedClear: true });\n                                    GRID.body.moveFocus.call(this, selectedIndex - 1);\n                                }\n                            },\n                            \"DOWN\": function DOWN() {\n                                if (selectedIndex < this.list.length - 1) {\n                                    this.select(selectedIndex + 1, { selectedClear: true });\n                                    GRID.body.moveFocus.call(this, selectedIndex + 1);\n                                }\n                            },\n                            \"HOME\": function HOME() {\n                                this.select(0, { selectedClear: true });\n                                GRID.body.moveFocus.call(this, 0);\n                            },\n                            \"END\": function END() {\n                                this.select(this.list.length - 1, { selectedClear: true });\n                                GRID.body.moveFocus.call(this, this.list.length - 1);\n                            }\n                        };\n\n                        if (_pos in processor) {\n                            processor[_pos].call(this);\n                        }\n                    }\n                }\n                return this;\n            };\n\n            /**\r\n             * @method ax5grid.destroy\r\n             * @returns {null}\r\n             */\n            this.destroy = function () {\n                var instanceId = this.instanceId;\n                this.$target.empty();\n                this.list = [];\n                UI.grid_instance = ax5.util.filter(UI.grid_instance, function () {\n                    return this.instanceId != instanceId;\n                });\n                return null;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                UI.grid_instance = UI.grid_instance || [];\n                UI.grid_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n    }());\n\n    GRID = ax5.ui.grid;\n})();\n\n// todo : filter\n// todo : column reorder\n// todo : editor 필수값 속성 지정\n// ax5.ui.grid.body\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    var columnSelect = {\n        focusClear: function focusClear() {\n            var self = this,\n                _column = void 0;\n            for (var c in self.focusedColumn) {\n                _column = self.focusedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName].find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]').removeAttr('data-ax5grid-column-focused');\n                }\n            }\n            self.focusedColumn = {};\n        },\n        clear: function clear() {\n            var self = this,\n                _column = void 0;\n            for (var c in self.selectedColumn) {\n                _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName].find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]').removeAttr('data-ax5grid-column-selected');\n                }\n            }\n            self.selectedColumn = {};\n        },\n        init: function init(column) {\n            var self = this;\n            if (this.isInlineEditing) {\n                for (var editKey in this.inlineEditing) {\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                        return this;\n                    }\n                }\n            }\n\n            // focus\n            columnSelect.focusClear.call(self);\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n                panelName: column.panelName,\n                dindex: column.dindex,\n                rowIndex: column.rowIndex,\n                colIndex: column.colIndex,\n                colspan: column.colspan\n            };\n\n            // select\n            columnSelect.clear.call(self);\n            self.xvar.selectedRange = {\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n                end: null\n            };\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = function (data) {\n                if (data) {\n                    return false;\n                } else {\n                    return {\n                        panelName: column.panelName,\n                        dindex: column.dindex,\n                        rowIndex: column.rowIndex,\n                        colIndex: column.colIndex,\n                        colspan: column.colspan\n                    };\n                }\n            }(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n            this.$.panel[column.panelName].find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\").attr('data-ax5grid-column-selected', \"true\");\n\n            if (this.isInlineEditing) {\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\n            }\n        },\n        update: function update(column) {\n            var self = this;\n            var dindex, colIndex, rowIndex, trl;\n\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n            columnSelect.clear.call(self);\n\n            var range = {\n                r: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n                },\n                c: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n                }\n            };\n\n            dindex = range.r.s;\n            for (; dindex <= range.r.e; dindex++) {\n\n                trl = this.bodyRowTable.rows.length;\n                rowIndex = 0;\n                for (; rowIndex < trl; rowIndex++) {\n                    colIndex = range.c.s;\n                    for (; colIndex <= range.c.e; colIndex++) {\n                        var _panels = [],\n                            panelName = \"\";\n\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        panelName = _panels.join(\"-\");\n\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                            panelName: panelName,\n                            dindex: dindex,\n                            rowIndex: rowIndex,\n                            colIndex: colIndex,\n                            colspan: column.colspan\n                        };\n\n                        _panels = null;\n                        panelName = null;\n                    }\n                }\n            }\n            dindex = null;\n            colIndex = null;\n            rowIndex = null;\n\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName].find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]').attr('data-ax5grid-column-selected', 'true');\n                }\n            }\n        }\n    };\n\n    var columnSelector = {\n        \"on\": function on(cell) {\n            var self = this;\n\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n                return;\n            }\n\n            columnSelect.init.call(self, cell);\n\n            this.$[\"container\"][\"body\"].on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                    columnSelect.update.call(self, {\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                    U.stopEvent(e);\n                }\n            }).on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            }).on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                columnSelector.off.call(self);\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n\n            this.$[\"container\"][\"body\"].off(\"mousemove.ax5grid-\" + this.instanceId).off(\"mouseup.ax5grid-\" + this.instanceId).off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n\n    var updateRowState = function updateRowState(_states, _dindex, _data) {\n        var self = this,\n            cfg = this.config,\n            processor = {\n            \"selected\": function selected(_dindex) {\n                if (this.list[_dindex]) {\n                    var i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').attr(\"data-ax5grid-selected\", this.list[_dindex][cfg.columnKeys.selected]);\n                    }\n                }\n            },\n            \"selectedClear\": function selectedClear() {\n                var si = this.selectedDataIndexs.length;\n                while (si--) {\n                    var dindex = this.selectedDataIndexs[si];\n                    var i = this.$.livePanelKeys.length;\n                    while (i--) {\n                        this.$.panel[this.$.livePanelKeys[i]].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').attr(\"data-ax5grid-selected\", false);\n                        this.list[dindex][cfg.columnKeys.selected] = false;\n                    }\n                }\n            },\n            \"cellChecked\": function cellChecked(_dindex, _data) {\n                var key = _data.key;\n                var rowIndex = _data.rowIndex;\n                var colIndex = _data.colIndex;\n\n                var panelName = function () {\n                    var _panels = [];\n                    if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                    if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                    _panels.push(\"body\");\n                    if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                    return _panels.join(\"-\");\n                }.call(this);\n\n                this.$.panel[panelName].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]').find('[data-ax5grid-editor=\"checkbox\"]').attr(\"data-ax5grid-checked\", '' + _data.checked);\n            }\n        };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _dindex, _data);\n        });\n    };\n\n    var updateRowStateAll = function updateRowStateAll(_states, _data) {\n        var self = this,\n            cfg = this.config,\n            processor = {\n            \"selected\": function selected(_dindex) {\n                GRID.body.repaint.call(this, true);\n            }\n        };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _data);\n        });\n    };\n\n    var init = function init() {\n        var self = this;\n\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            var panelName = void 0,\n                attr = void 0,\n                row = void 0,\n                col = void 0,\n                dindex = void 0,\n                rowIndex = void 0,\n                colIndex = void 0,\n                disableSelection = void 0,\n                targetClick = {\n                \"default\": function _default(_column) {\n                    var column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                        that = {\n                        self: self,\n                        page: self.page,\n                        list: self.list,\n                        item: self.list[_column.dindex],\n                        dindex: _column.dindex,\n                        rowIndex: _column.rowIndex,\n                        colIndex: _column.colIndex,\n                        column: column,\n                        value: self.list[_column.dindex][column.key]\n                    };\n\n                    if (column.editor && column.editor.type == \"checkbox\") {\n                        // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\n                        var value = GRID.data.getValue.call(self, _column.dindex, column.key),\n                            checked = void 0,\n                            newValue = void 0;\n\n                        if (column.editor.config && column.editor.config.trueValue) {\n                            if (checked = !(value == column.editor.config.trueValue)) {\n                                newValue = column.editor.config.trueValue;\n                            } else {\n                                newValue = column.editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = value == false || value == \"false\" || value < \"1\" ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, _column.dindex, column.key, newValue);\n\n                        updateRowState.call(self, [\"cellChecked\"], _column.dindex, {\n                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                            editorConfig: column.editor.config, checked: checked\n                        });\n                    } else {\n                        if (self.config.body.onClick) {\n                            self.config.body.onClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function rowSelector(_column) {\n                    if (self.list[_column.dindex][self.config.columnKeys.disableSelection]) {\n                        return false;\n                    }\n\n                    if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.dindex) {\n                        updateRowState.call(self, [\"selectedClear\"]);\n                        GRID.data.clearSelect.call(self);\n                    }\n\n                    GRID.data.select.call(self, _column.dindex, undefined, {\n                        internalCall: true\n                    });\n                    updateRowState.call(self, [\"selected\"], _column.dindex);\n                },\n                \"lineNumber\": function lineNumber(_column) {},\n                \"tree-control\": function treeControl(_column, _el) {\n                    //console.log(_column);\n                    toggleCollapse.call(self, _column.dindex);\n                }\n            };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                }, this);\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\n            var panelName = void 0,\n                attr = void 0,\n                row = void 0,\n                col = void 0,\n                dindex = void 0,\n                rowIndex = void 0,\n                colIndex = void 0,\n                targetDBLClick = {\n                \"default\": function _default(_column) {\n                    if (self.isInlineEditing) {\n                        for (var columnKey in self.inlineEditing) {\n                            if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                return this;\n                            }\n                        }\n                    }\n\n                    var column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                        value = \"\";\n                    if (column) {\n                        if (!self.list[dindex].__isGrouping) {\n                            value = GRID.data.getValue.call(self, dindex, column.key);\n                        }\n                    }\n\n                    var editor = self.colGroup[_column.colIndex].editor;\n                    if (U.isObject(editor)) {\n                        GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\n                    } else {\n                        // 더블클릭 실행\n                        if (self.config.body.onDBLClick) {\n                            var that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n                            self.config.body.onDBLClick.call(that);\n                        }\n                    }\n                },\n                \"rowSelector\": function rowSelector(_column) {},\n                \"lineNumber\": function lineNumber(_column) {}\n            };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetDBLClick) {\n                targetDBLClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n\n        if (this.config.contextMenu) {\n            this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n                var target = void 0,\n                    dindex = void 0,\n                    rowIndex = void 0,\n                    colIndex = void 0,\n                    item = void 0,\n                    column = void 0,\n                    param = {};\n\n                target = U.findParentNode(e.target, function (t) {\n                    if (t.getAttribute(\"data-ax5grid-column-attr\")) {\n                        return true;\n                    }\n                });\n\n                if (target) {\n                    // item 찾기\n                    rowIndex = Number(target.getAttribute(\"data-ax5grid-column-rowIndex\"));\n                    colIndex = Number(target.getAttribute(\"data-ax5grid-column-colIndex\"));\n                    dindex = Number(target.getAttribute(\"data-ax5grid-data-index\"));\n                    column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n                    item = self.list[dindex];\n                }\n\n                if (!self.contextMenu) {\n                    self.contextMenu = new ax5.ui.menu();\n                }\n\n                self.contextMenu.setConfig(self.config.contextMenu);\n\n                param = {\n                    element: target,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex,\n                    item: item,\n                    column: column,\n                    gridSelf: self\n                };\n\n                self.contextMenu.popup(e, {\n                    filter: function filter() {\n                        return self.config.contextMenu.popupFilter.call(this, this, param);\n                    },\n                    param: param\n                });\n\n                U.stopEvent(e.originalEvent);\n                target = null;\n                dindex = null;\n                rowIndex = null;\n                colIndex = null;\n                item = null;\n                column = null;\n                param = null;\n            });\n        }\n\n        this.$[\"container\"][\"body\"].on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\n            if (self.xvar.touchmoved) return false;\n            if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                columnSelector.on.call(self, {\n                    panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                    dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                    rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                    colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                    colspan: Number(this.getAttribute(\"colspan\"))\n                });\n            }\n        }).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        resetFrozenColumn.call(this);\n\n        // 그리드 바디에 출력할 여유 카운트\n        this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n        this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n    };\n\n    var resetFrozenColumn = function resetFrozenColumn() {\n        var cfg = this.config,\n            dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n        this.asideBodyRowData = function (dataTable) {\n            var data = { rows: [] };\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = { cols: [] };\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    },\n                        _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }.call(this, this.bodyRowTable);\n\n        //console.log(dividedBodyRowObj);\n\n        this.leftBodyRowData = dividedBodyRowObj.leftData;\n        this.bodyRowData = dividedBodyRowObj.rightData;\n\n        if (cfg.body.grouping) {\n            var dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n            this.asideBodyGroupingData = function (dataTable) {\n                var data = { rows: [] };\n                for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                    data.rows[i] = { cols: [] };\n                    if (i === 0) {\n                        var col = {\n                            label: \"\",\n                            colspan: 1,\n                            rowspan: dataTable.rows.length,\n                            colIndex: null\n                        },\n                            _col = {};\n\n                        if (cfg.showLineNumber) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.lineNumberColumnWidth,\n                                _width: cfg.lineNumberColumnWidth,\n                                columnAttr: \"lineNumber\",\n                                label: \"&nbsp;\", key: \"__d-index__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                        if (cfg.showRowSelector) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.rowSelectorColumnWidth,\n                                _width: cfg.rowSelectorColumnWidth,\n                                columnAttr: \"rowSelector\",\n                                label: \"\", key: \"__d-checkbox__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                    }\n                }\n\n                return data;\n            }.call(this, this.bodyGroupingTable);\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n            this.bodyGroupingMap = GRID.util.makeBodyRowMap.call(this, this.bodyGroupingTable);\n        }\n\n        this.leftFootSumData = {};\n        this.footSumData = {};\n        if (this.config.footSum) {\n            var dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n            this.leftFootSumData = dividedFootSumObj.leftData;\n            this.footSumData = dividedFootSumObj.rightData;\n        }\n    };\n\n    var getFieldValue = function getFieldValue(_list, _item, _index, _col, _value, _returnPlainText) {\n        var _key = _col.key,\n            tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__d-index__\") {\n            return typeof _item[\"__index\"] !== \"undefined\" ? _item[\"__index\"] + 1 : \"\";\n        } else if (_key === \"__d-checkbox__\") {\n            return \"<div class=\\\"checkBox\\\" style=\\\"max-height: \" + (_col.width - 10) + \"px;min-height: \" + (_col.width - 10) + \"px;\\\"></div>\";\n        } else {\n            if (_col.editor && function (_editor) {\n                if (_editor.type in GRID.inlineEditor) {\n                    return GRID.inlineEditor[_editor.type].editMode == \"inline\";\n                }\n                return false;\n            }(_col.editor)) {\n                // editor가 inline타입이라면\n\n                _value = _value || GRID.data.getValue.call(this, typeof _item.__origin_index__ === \"undefined\" ? _index : _item.__origin_index__, _key);\n\n                if (U.isFunction(_col.editor.disabled)) {\n                    if (_col.editor.disabled.call({\n                        list: _list,\n                        dindex: _index,\n                        item: _list[_index],\n                        key: _key,\n                        value: _value\n                    })) {\n                        return _value;\n                    }\n                }\n\n                // print editor\n                return _returnPlainText ? _value : GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\n            }\n\n            var valueProcessor = {\n                \"formatter\": function formatter() {\n                    var that = {\n                        key: _key,\n                        value: _value || GRID.data.getValue.call(this, typeof _item.__origin_index__ === \"undefined\" ? _index : _item.__origin_index__, _key),\n                        dindex: _index,\n                        item: _item,\n                        list: _list\n                    };\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                },\n                \"default\": function _default() {\n                    var returnValue = \"\";\n\n                    if (typeof _value !== \"undefined\") {\n                        returnValue = _value;\n                    } else {\n                        _value = GRID.data.getValue.call(this, typeof _item.__origin_index__ === \"undefined\" ? _index : _item.__origin_index__, _key);\n                        if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                    }\n\n                    // 키값이 Boolean일때 오류 발생하여 수정.\n                    return typeof returnValue !== \"string\" ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                        return tagsToReplace[tag] || tag;\n                    });\n                },\n                \"treeControl\": function treeControl(__value) {\n                    var cfg = this.config,\n                        keys = this.config.tree.columnKeys,\n                        indentNodeHtml = '';\n\n                    if (_item[keys.children].length) {\n                        indentNodeHtml += '<a ' + 'data-ax5grid-data-index=\"' + _index + '\" ' + 'data-ax5grid-column-attr=\"tree-control\" ' + 'data-ax5grid-tnode-arrow=\"\" ' + 'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + _item[keys.depth] * cfg.tree.indentWidth + 'px;\"' + '>';\n                        indentNodeHtml += _item[keys.collapse] ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n                        indentNodeHtml += '</a>';\n                    } else {\n                        indentNodeHtml += '<span ' + 'data-ax5grid-tnode-arrow=\"\" ' + 'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + _item[keys.depth] * cfg.tree.indentWidth + 'px;\"' + '>&nbsp;</span>';\n                    }\n\n                    indentNodeHtml += '<span ' + 'data-ax5grid-tnode-item=\"' + (_item[keys.children].length ? 'group' : 'item') + '\" ' + 'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' + '>';\n                    indentNodeHtml += _item[keys.children].length ? _item[keys.collapse] ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n                    indentNodeHtml += '</span>';\n\n                    return indentNodeHtml + __value;\n                }\n            };\n\n            var returnValue = _col.formatter ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n            if (this.config.tree.use && _col.treeControl) {\n                returnValue = valueProcessor.treeControl.call(this, returnValue);\n            }\n\n            return returnValue;\n        }\n    };\n\n    var getGroupingValue = function getGroupingValue(_item, _index, _col) {\n        var value = void 0,\n            that = void 0,\n            _key = _col.key,\n            _label = _col.label;\n\n        if (typeof _key === \"undefined\") {\n            that = {\n                key: _key,\n                list: _item.__groupingList,\n                groupBy: _item.__groupingBy\n            };\n            if (U.isFunction(_label)) {\n                value = _label.call(that);\n            } else {\n                value = _label;\n            }\n            _item[_col.colIndex] = value;\n            return value;\n        } else if (_key === \"__d-index__\") {\n            return '';\n        } else if (_key === \"__d-checkbox__\") {\n            return '';\n        } else {\n            if (_col.collector) {\n                that = {\n                    key: _key,\n                    list: _item.__groupingList\n                };\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n                _item[_col.colIndex] = value;\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    var getSumFieldValue = function getSumFieldValue(_list, _col) {\n        var _key = _col.key,\n            _label = _col.label;\n        //, _collector, _formatter\n        if (typeof _key === \"undefined\") {\n            return _label;\n        } else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n            return '&nbsp;';\n        } else {\n            if (_col.collector) {\n                var that = {\n                    key: _key,\n                    list: _list\n                },\n                    value = void 0;\n\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    var repaint = function repaint(_reset) {\n        // debugger;\n        var cfg = this.config,\n            list = this.proxyList ? this.proxyList : this.list;\n\n        /// repaint reset 타입이면 고정컬럼을 재조정\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n            this.xvar.paintStartRowIndex = undefined;\n            this.xvar.paintStartColumnIndex = undefined;\n        }\n\n        /// 출력시작 인덱스\n        var paintStartRowIndex = void 0,\n            virtualPaintStartRowIndex = void 0;\n\n        if (this.config.virtualScrollY) {\n            virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-this.$.panel[\"body-scroll\"].position().top / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n            if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n                paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n            }\n        } else {\n            paintStartRowIndex = this.xvar.frozenRowIndex;\n        }\n\n        if (isNaN(paintStartRowIndex)) return this;\n\n        var paintStartColumnIndex = 0,\n            paintEndColumnIndex = 0,\n            nopaintLeftColumnsWidth = null,\n            nopaintRightColumnsWidth = null;\n\n        var bodyScrollLeft = -this.$.panel[\"body-scroll\"].position().left;\n\n        if (this.config.virtualScrollX) {\n            // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n            for (var ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n                // bodyScrollLeft\n                this.colGroup[ci]._sx = ci == this.xvar.frozenColumnIndex ? 0 : this.colGroup[ci - 1]._ex;\n                this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n                if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                    paintStartColumnIndex = ci;\n                }\n                if (this.colGroup[ci]._sx <= bodyScrollLeft + this.xvar.bodyWidth && this.colGroup[ci]._ex >= bodyScrollLeft + this.xvar.bodyWidth) {\n                    paintEndColumnIndex = ci;\n\n                    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n                }\n            }\n\n            if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n            if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n            this.$.panel[\"top-body-scroll\"].css({ \"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth });\n            this.$.panel[\"body-scroll\"].css({ \"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth });\n            this.$.panel[\"bottom-body-scroll\"].css({ \"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth });\n        }\n\n        var isFirstPaint = typeof this.xvar.paintStartRowIndex === \"undefined\",\n            headerColGroup = this.headerColGroup,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = void 0,\n            virtualPaintRowCount = void 0;\n\n        if (!this.config.virtualScrollY) {\n            virtualPaintRowCount = paintRowCount = list.length;\n        } else {\n            virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n            paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n        }\n\n        // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n            paintStartRowIndex = this.xvar.paintStartRowIndex;\n        }\n\n        if (this.xvar.dataRowCount === list.length && this.xvar.paintStartRowIndex === paintStartRowIndex && this.xvar.paintRowCount === paintRowCount && this.xvar.paintStartColumnIndex === paintStartColumnIndex && this.xvar.paintEndColumnIndex === paintEndColumnIndex) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n        // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n        if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n            bodyRowData = GRID.util.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n            if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n                this.needToPaintSum = true;\n            }\n        }\n\n        /*\r\n        if (!this.config.virtualScrollX && document.addEventListener && ax5.info.supportTouch) {\r\n            paintRowCount = paintRowCount * 2;\r\n        }\r\n         */\n\n        /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n        /// 사용된 패널들의 키 모음\n        this.$.livePanelKeys = [];\n\n        // 그리드 바디 영역 페인트 함수\n        /**\r\n         * @param _elTargetKey\r\n         * @param _colGroup\r\n         * @param _bodyRow\r\n         * @param _groupRow\r\n         * @param _list\r\n         * @param [_scrollConfig]\r\n         * @returns {boolean}\r\n         */\n        var repaintBody = function repaintBody(_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            var SS = [],\n                cgi = void 0,\n                cgl = void 0,\n                di = void 0,\n                dl = void 0,\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0,\n                cellHeight = void 0,\n                colAlign = void 0,\n                isScrolled = function () {\n                // 스크롤값이 변경되거나 처음 호출되었습니까?\n                if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                    _scrollConfig = {\n                        paintStartRowIndex: 0,\n                        paintRowCount: _list.length\n                    };\n                    return false;\n                } else {\n                    return true;\n                }\n            }();\n\n            if (isScrolled) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            // 가로 가상 스크롤 적용하지 않는 경우\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = function () {\n                var len = void 0;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            }(); di < dl; di++) {\n                if (_list[di]) {\n                    var isGroupingRow = false,\n                        rowTable = void 0,\n                        odi = typeof _list[di].__origin_index__ !== \"undefined\" ? _list[di].__origin_index__ : di;\n                    if (_groupRow && \"__isGrouping\" in _list[di]) {\n                        rowTable = _groupRow;\n                        isGroupingRow = true;\n                    } else {\n                        rowTable = _bodyRow;\n                    }\n\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                        SS.push('<tr class=\"tr-' + di % 4 + '\"', isGroupingRow ? ' data-ax5grid-grouping-tr=\"true\"' : '', ' data-ax5grid-tr-data-index=\"' + di + '\"', ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"', ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"', '>');\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                                var attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                                var tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push(function (_cellHeight) {\n                                var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n                            }(cellHeight), isGroupingRow ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + odi + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                        SS.push('</tr>');\n                    }\n                }\n            }\n            SS.push('</table>');\n\n            if (isScrolled && _list.length) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            _elTarget.empty();\n            SS = SS.join('');\n\n            if (this.config.virtualScrollAccelerated && _elTargetKey !== \"aside-body-scroll\") {\n                setTimeout(function () {\n                    _elTarget.get(0).innerHTML = SS;\n                });\n            } else {\n                _elTarget.get(0).innerHTML = SS;\n            }\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\r\n         * @param _elTargetKey\r\n         * @param _colGroup\r\n         * @param _bodyRow\r\n         * @param _list\r\n         * @param [_scrollConfig]\r\n         * @returns {boolean}\r\n         */\n        var repaintSum = function repaintSum(_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            var SS = [],\n                cgi = void 0,\n                cgl = void 0,\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0,\n                cellHeight = void 0,\n                colAlign = void 0;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + tri + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n                    }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-column-attr=\"' + \"sum\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty();\n            SS = SS.join('');\n            if (this.config.virtualScrollAccelerated) {\n                setTimeout(function () {\n                    _elTarget.get(0).innerHTML = SS;\n                });\n            } else {\n                _elTarget.get(0).innerHTML = SS;\n            }\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\r\n         * @param _elTargetKey\r\n         * @param _colGroup\r\n         * @param _bodyRow\r\n         * @param _list\r\n         * @param [_scrollConfig]\r\n         * @returns {boolean}\r\n         */\n        var mergeCellsBody = function mergeCellsBody(_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            var tblRowMaps = [];\n            var _elTarget = this.$.panel[_elTargetKey];\n            var token = {},\n                hasMergeTd = void 0;\n            //console.log(_elTarget);\n\n            // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n            var tableTrs = _elTarget.find(\"tr\");\n            for (var ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n                var tableTrTds = void 0,\n                    trMaps = void 0;\n\n                if (!tableTrs[ri].getAttribute(\"data-ax5grid-grouping-tr\")) {\n                    tableTrTds = tableTrs[ri].childNodes;\n                    trMaps = [];\n                    for (var _ci = 0, cl = tableTrTds.length; _ci < cl; _ci++) {\n                        var tdObj = {\n                            \"$\": jQuery(tableTrTds[_ci])\n                        };\n\n                        if (tdObj[\"$\"].attr(\"data-ax5grid-column-col\") != \"null\") {\n                            tdObj.dindex = tdObj[\"$\"].attr(\"data-ax5grid-data-index\");\n                            tdObj.tri = tdObj[\"$\"].attr(\"data-ax5grid-column-row\");\n                            tdObj.ci = tdObj[\"$\"].attr(\"data-ax5grid-column-col\");\n                            tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-rowIndex\");\n                            tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-colIndex\");\n                            tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                            tdObj.text = tdObj[\"$\"].text();\n                            trMaps.push(tdObj);\n                        }\n\n                        tdObj = null;\n                    }\n                    tblRowMaps.push(trMaps);\n                }\n            }\n\n            // 두줄이상 일 때 의미가 있으니.\n            if (tblRowMaps.length > 1) {\n                hasMergeTd = false;\n\n                var _loop = function _loop(_ri, _rl) {\n                    var prevTokenColIndexs = [];\n\n                    var _loop2 = function _loop2(_ci3, _cl2) {\n                        // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n                        if (!_colGroup[_ci3].editor && function () {\n                            if (U.isArray(cfg.body.mergeCells)) {\n                                return ax5.util.search(cfg.body.mergeCells, _colGroup[_ci3].key) > -1;\n                            } else {\n                                return true;\n                            }\n                        }()) {\n\n                            // 앞줄과 값이 같다면.\n                            if (token[_ci3] && function () {\n                                if (prevTokenColIndexs.length > 0) {\n                                    var hasFalse = true;\n                                    prevTokenColIndexs.forEach(function (ti) {\n                                        if (tblRowMaps[_ri - 1][ti].text != tblRowMaps[_ri][ti].text) {\n                                            hasFalse = false;\n                                        }\n                                    });\n                                    return hasFalse;\n                                } else {\n                                    return true;\n                                }\n                            }() && token[_ci3].text == tblRowMaps[_ri][_ci3].text) {\n                                tblRowMaps[_ri][_ci3].rowspan = 0;\n                                tblRowMaps[token[_ci3].ri][_ci3].rowspan++;\n                                hasMergeTd = true;\n                            } else {\n                                token[_ci3] = {\n                                    ri: _ri,\n                                    ci: _ci3,\n                                    text: tblRowMaps[_ri][_ci3].text\n                                };\n                            }\n\n                            prevTokenColIndexs.push(_ci3);\n                        }\n                    };\n\n                    for (var _ci3 = 0, _cl2 = tblRowMaps[_ri].length; _ci3 < _cl2; _ci3++) {\n                        _loop2(_ci3, _cl2);\n                    }\n                };\n\n                for (var _ri = 0, _rl = tblRowMaps.length; _ri < _rl; _ri++) {\n                    _loop(_ri, _rl);\n                }\n\n                // rowspan을 다 구했으면 적용합니다.\n                if (hasMergeTd) {\n                    for (var _ri2 = 0, _rl2 = tblRowMaps.length; _ri2 < _rl2; _ri2++) {\n                        for (var _ci2 = 0, _cl = tblRowMaps[_ri2].length; _ci2 < _cl; _ci2++) {\n                            if (tblRowMaps[_ri2][_ci2].rowspan == 0) {\n                                tblRowMaps[_ri2][_ci2][\"$\"].remove();\n                            } else if (tblRowMaps[_ri2][_ci2].rowspan > 1) {\n                                tblRowMaps[_ri2][_ci2][\"$\"].attr(\"rowspan\", tblRowMaps[_ri2][_ci2].rowspan).addClass(\"merged\");\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        var scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            paintStartColumnIndex: paintStartColumnIndex,\n            paintEndColumnIndex: paintEndColumnIndex,\n            nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n            nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n            bodyTrHeight: this.xvar.bodyTrHeight,\n            virtualScrollX: this.config.virtualScrollX,\n            virtualScrollY: this.config.virtualScrollY\n        };\n\n        // aside\n        if (cfg.asidePanelWidth > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum) {\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\n                //repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n            }\n        }\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), jQuery.extend({}, scrollConfig, {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex\n                }));\n            }\n\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), jQuery.extend({}, scrollConfig, {\n                paintStartRowIndex: 0,\n                paintRowCount: this.xvar.frozenRowIndex\n            }));\n        }\n        repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n        // 바닥 요약\n        if (cfg.footSum && this.needToPaintSum) {\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n        // right\n        if (cfg.rightSum) {}\n        // todo : right 표현 정리\n\n\n        /// mergeCells\n        if (cfg.body.mergeCells && this.list.length) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                    mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n        }\n\n        this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\n        this.xvar.paintRowCount = paintRowCount;\n        this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n        this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n        this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n        this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n        this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n        this.xvar.dataRowCount = list.length;\n        this.needToPaintSum = false;\n\n        GRID.page.statusUpdate.call(this);\n    };\n\n    var repaintCell = function repaintCell(_panelName, _dindex, _rowIndex, _colIndex, _newValue) {\n        var self = this,\n            cfg = this.config,\n            list = this.list;\n\n        var updateCell = this.$[\"panel\"][_panelName].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]').find('[data-ax5grid-cellholder]'),\n            colGroup = this.colGroup,\n            col = colGroup[_colIndex];\n\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n        if (col.editor && col.editor.updateWith) {\n            col.editor.updateWith.forEach(function (updateColumnKey) {\n                colGroup.forEach(function (col) {\n                    if (col.key == updateColumnKey) {\n                        var rowIndex = col.rowIndex,\n                            colIndex = col.colIndex,\n                            panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                            updateWithCell = self.$[\"panel\"][panelName].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]').find('[data-ax5grid-cellholder]');\n\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                    }\n                });\n            });\n        }\n\n        /// ~~~~~~\n\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            headerColGroup = this.headerColGroup,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n        }\n\n        var repaintSum = function repaintSum(_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi = void 0,\n                cgl = void 0,\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0,\n                cellHeight = void 0,\n                colAlign = void 0;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + tri + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n                    }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-column-attr=\"' + \"sum\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        var replaceGroupTr = function replaceGroupTr(_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di = void 0,\n                dl = void 0,\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0,\n                cellHeight = void 0,\n                colAlign = void 0;\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = function () {\n                var len = void 0;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            }(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    var rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                                var attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                                var tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push(function (_cellHeight) {\n                                var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n                            }(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                        paintStartRowIndex: 0,\n                        paintRowCount: this.xvar.frozenRowIndex,\n                        bodyTrHeight: this.xvar.bodyTrHeight\n                    });\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    var repaintRow = function repaintRow(_dindex) {\n        var self = this,\n            cfg = this.config,\n            list = this.list;\n        /// ~~~~~~\n\n        var paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            bodyTrHeight: this.xvar.bodyTrHeight\n        };\n\n        var repaintSum = function repaintSum(_elTargetKey, _colGroup, _bodyRow, _list) {\n            var _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi = void 0,\n                cgl = void 0,\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0,\n                cellHeight = void 0,\n                colAlign = void 0;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + tri + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    isFootSum: true\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                    }(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-column-attr=\"' + \"sum\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        var replaceGroupTr = function replaceGroupTr(_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            var _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di = void 0,\n                dl = void 0,\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0,\n                cellHeight = void 0,\n                colAlign = void 0;\n\n            if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                _scrollConfig = {\n                    paintStartRowIndex: 0,\n                    paintRowCount: _list.length\n                };\n            }\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = function () {\n                var len = void 0;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            }(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    var rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                                var attrs = \"\";\n                                if (_focusedColumn) {\n                                    attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                }\n                                if (_selectedColumn) {\n                                    attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                }\n                                return attrs;\n                            }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                                var tdCSS_class = \"\";\n                                if (_col.styleClass) {\n                                    if (U.isFunction(_col.styleClass)) {\n                                        tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                    } else {\n                                        tdCSS_class += _col.styleClass + \" \";\n                                    }\n                                }\n                                if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                return tdCSS_class;\n                            }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push(function (_cellHeight) {\n                                var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n                            }(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n        var replaceTr = function replaceTr(_elTargetKey, _colGroup, _bodyRow, _list, di) {\n            var _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0,\n                cellHeight = void 0,\n                colAlign = void 0,\n                rowTable = _bodyRow;\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ', 'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', 'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ', 'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', function (_focusedColumn, _selectedColumn) {\n                        var attrs = \"\";\n                        if (_focusedColumn) {\n                            attrs += 'data-ax5grid-column-focused=\"true\" ';\n                        }\n                        if (_selectedColumn) {\n                            attrs += 'data-ax5grid-column-selected=\"true\" ';\n                        }\n                        return attrs;\n                    }(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]), 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.styleClass) {\n                            if (U.isFunction(_col.styleClass)) {\n                                tdCSS_class += _col.styleClass.call({\n                                    column: _col,\n                                    key: _col.key,\n                                    item: _list[di],\n                                    index: di\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.styleClass + \" \";\n                            }\n                        }\n                        if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function (_cellHeight) {\n                        var lineHeight = cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth;\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + (col.multiLine ? 'multiLine' : '') + '\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + '\" style=\"height:' + _cellHeight + 'px;' + (col.multiLine ? '' : 'line-height: ' + lineHeight + 'px;') + '\">';\n                    }(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'data-ax5grid-data-index=\"' + di + '\" ', 'data-ax5grid-column-attr=\"' + \"default\" + '\" ', 'style=\"height: ' + cfg.body.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n            }\n\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        };\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n            } else {\n                replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n        }\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > _dindex) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n                } else {\n                    replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n                }\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            } else {\n                replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    var scrollTo = function scrollTo(css, noRepaint) {\n\n        if (this.isInlineEditing) {\n            for (var key in this.inlineEditing) {\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\n            }\n        }\n\n        if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n            this.$.panel[\"aside-body-scroll\"].css({ top: css.top });\n        }\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n            this.$.panel[\"left-body-scroll\"].css({ top: css.top });\n        }\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n            this.$.panel[\"top-body-scroll\"].css({ left: css.left });\n        }\n\n        this.$.panel[\"body-scroll\"].css(css);\n\n        if (this.config.footSum && \"left\" in css) {\n            this.$.panel[\"bottom-body-scroll\"].css({ left: css.left });\n        }\n\n        if (this.config.virtualScrollY && !noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else if (this.config.virtualScrollX && !noRepaint && \"left\" in css) {\n            repaint.call(this);\n        }\n    };\n\n    var blur = function blur() {\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this);\n        }\n    };\n\n    var moveFocus = function moveFocus(_position) {\n        var focus = {\n            \"UD\": function UD(_dy) {\n                var moveResult = true,\n                    focusedColumn = void 0,\n                    originalColumn = void 0,\n                    while_i = void 0,\n                    nPanelInfo = void 0;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dy > 0) {\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = 0;\n                        if (focusedColumn.dindex > this.list.length - 1) {\n                            focusedColumn.dindex = this.list.length - 1;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                } else {\n                    if (focusedColumn.rowIndex + _dy < 0) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                        if (focusedColumn.dindex < 0) {\n                            focusedColumn.dindex = 0;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == (_dy > 0 ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length) {\n                    while (!this.$.panel[nPanelInfo.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        if (_dy > 0) {\n                            focusedColumn.dindex++;\n                        } else {\n                            focusedColumn.dindex--;\n                        }\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        } else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            },\n            \"LR\": function LR(_dx) {\n                var moveResult = true,\n                    focusedColumn = void 0,\n                    originalColumn = void 0,\n                    while_i = 0,\n                    isScrollPanel = false,\n                    containerPanelName = \"\",\n                    nPanelInfo = void 0;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dx < 0) {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex < 0) {\n                        focusedColumn.colIndex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                        focusedColumn.colIndex = this.colGroup.length - 1;\n                        moveResult = false;\n                    }\n                }\n\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.rowIndex = 0;\n                }\n\n                if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                    if (_dx < 0) {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    if (_dx < 0) {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                    while (!this.$.panel[nPanelInfo.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        focusedColumn.dindex--;\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리\n                var isScrollTo = function () {\n                    if (!this.config.virtualScrollX) return false;\n                    var scrollLeft = 0;\n                    if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                        if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                            scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                            scrollTo.call(this, { left: scrollLeft });\n                            GRID.header.scrollTo.call(this, { left: scrollLeft });\n                            GRID.scroller.resize.call(this);\n                            return true;\n                        } else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                            if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                                scrollLeft = this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth;\n                                scrollTo.call(this, { left: -scrollLeft });\n                                GRID.header.scrollTo.call(this, { left: -scrollLeft });\n                                GRID.scroller.resize.call(this);\n                            }\n                            return true;\n                        }\n                    }\n                    scrollLeft = null;\n                    return false;\n                }.call(this);\n\n                containerPanelName = nPanelInfo.containerPanelName;\n                isScrollPanel = nPanelInfo.isScrollPanel;\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n                var $column = this.$.panel[focusedColumn.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\");\n\n                if (!isScrollTo && $column && isScrollPanel) {\n                    // 스크롤 패널 이라면~\n                    // todo : 컬럼이동할 때에도 scrollTo 체크\n                    var newLeft = function () {\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                            return $column.position().left;\n                        } else {\n                            return;\n                        }\n                    }.call(this);\n\n                    if (typeof newLeft !== \"undefined\") {\n                        GRID.header.scrollTo.call(this, { left: -newLeft });\n                        scrollTo.call(this, { left: -newLeft });\n                        GRID.scroller.resize.call(this);\n                    }\n                }\n\n                return moveResult;\n            },\n            \"INDEX\": function INDEX(_dindex) {\n                var moveResult = true,\n                    focusedColumn = void 0,\n                    originalColumn = void 0,\n                    while_i = void 0;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) {\n                    focusedColumn = {\n                        rowIndex: 0,\n                        colIndex: 0\n                    };\n                }\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dindex == \"end\") {\n                    _dindex = this.list.length - 1;\n                }\n\n                focusedColumn.dindex = _dindex;\n                focusedColumn.rowIndex = 0;\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == (_dy > 0 ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        break;\n                    }\n                    while_i++;\n                }\n\n                var nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        } else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                            scrollTo.call(this, { top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight });\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName].find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            }\n        };\n\n        var processor = {\n            \"UP\": function UP() {\n                return focus[\"UD\"].call(this, -1);\n            },\n            \"DOWN\": function DOWN() {\n                return focus[\"UD\"].call(this, 1);\n            },\n            \"LEFT\": function LEFT() {\n                return focus[\"LR\"].call(this, -1);\n            },\n            \"RIGHT\": function RIGHT() {\n                return focus[\"LR\"].call(this, 1);\n            },\n            \"HOME\": function HOME() {\n                return focus[\"INDEX\"].call(this, 0);\n            },\n            \"END\": function END() {\n                return focus[\"INDEX\"].call(this, \"end\");\n            },\n            \"position\": function position(_position) {\n                return focus[\"INDEX\"].call(this, _position);\n            }\n        };\n\n        if (_position in processor) {\n            return processor[_position].call(this);\n        } else {\n            return processor[\"position\"].call(this, _position);\n        }\n    };\n\n    var inlineEdit = {\n        active: function active(_focusedColumn, _e, _initValue) {\n            var self = this,\n                dindex,\n                colIndex,\n                rowIndex,\n                panelName,\n                colspan,\n                col,\n                editor;\n\n            // this.inlineEditing = {};\n            for (var key in _focusedColumn) {\n                panelName = _focusedColumn[key].panelName;\n                dindex = _focusedColumn[key].dindex;\n                colIndex = _focusedColumn[key].colIndex;\n                rowIndex = _focusedColumn[key].rowIndex;\n                colspan = _focusedColumn[key].colspan;\n\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\n                col = this.colGroup[colIndex];\n                if (!(editor = col.editor)) return this;\n\n                // editor disabled 체크\n                if (U.isFunction(editor.disabled)) {\n                    if (editor.disabled.call({\n                        list: this.list,\n                        dindex: dindex,\n                        item: this.list[dindex],\n                        key: col.key,\n                        value: _initValue\n                    })) {\n                        return this;\n                    }\n                }\n\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n                if (!function (_editor, _type) {\n                    if (_editor.type in GRID.inlineEditor) {\n                        return GRID.inlineEditor[_editor.type].editMode == \"popup\";\n                    }\n                }(editor)) {\n                    // 체크 박스 타입이면 값 변경 시도\n                    if (editor.type == \"checkbox\") {\n                        var checked, newValue;\n                        if (editor.config && editor.config.trueValue) {\n                            if (checked = !(_initValue == editor.config.trueValue)) {\n                                newValue = editor.config.trueValue;\n                            } else {\n                                newValue = editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = _initValue == false || _initValue == \"false\" || _initValue < \"1\" ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, dindex, col.key, newValue);\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                            editorConfig: col.editor.config, checked: checked\n                        });\n                    }\n                    return this;\n                }\n\n                if (this.list[dindex].__isGrouping) {\n                    return false;\n                }\n                if (key in this.inlineEditing) {\n                    return false;\n                }\n                this.inlineEditing[key] = {\n                    editor: editor,\n                    panelName: panelName,\n                    columnKey: key,\n                    column: _focusedColumn[key],\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\n                };\n                this.isInlineEditing = true;\n            }\n            if (this.isInlineEditing) {\n\n                var originalValue = GRID.data.getValue.call(self, dindex, col.key),\n                    initValue = function (__value, __editor) {\n                    if (U.isNothing(__value)) {\n                        __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                    }\n\n                    if (__editor.type == \"money\") {\n                        return U.number(__value, { \"money\": true });\n                    } else {\n                        return __value;\n                    }\n                }.call(this, _initValue, editor);\n\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName].find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]').find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]').find('[data-ax5grid-cellholder]');\n\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n                return true;\n            }\n        },\n        deActive: function deActive(_msg, _key, _value) {\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n            if (!this.inlineEditing[_key]) return this;\n\n            var panelName = this.inlineEditing[_key].panelName,\n                dindex = this.inlineEditing[_key].column.dindex,\n                rowIndex = this.inlineEditing[_key].column.rowIndex,\n                colIndex = this.inlineEditing[_key].column.colIndex,\n                column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n                editorValue = function ($inlineEditor) {\n                if (typeof _value === \"undefined\") {\n                    if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                        return $inlineEditor.val();\n                    } else {\n                        _msg = \"CANCEL\";\n                        return false;\n                    }\n                } else {\n                    return _value;\n                }\n            }(this.inlineEditing[_key].$inlineEditor),\n                newValue = function (__value, __editor) {\n                if (__editor.type == \"money\") {\n                    return U.number(__value);\n                } else {\n                    return __value;\n                }\n            }.call(this, editorValue, column.editor);\n\n            var action = {\n                \"CANCEL\": function CANCEL(_dindex, _column, _newValue) {\n                    action[\"__clear\"].call(this);\n                },\n                \"RETURN\": function RETURN(_dindex, _column, _newValue) {\n                    if (GRID.data.setValue.call(this, _dindex, _column.key, _newValue)) {\n                        action[\"__clear\"].call(this);\n                        GRID.body.repaintCell.call(this, panelName, dindex, rowIndex, colIndex, _newValue);\n                    } else {\n                        action[\"__clear\"].call(this);\n                    }\n                },\n                \"__clear\": function __clear() {\n                    this.isInlineEditing = false;\n                    var bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                    if (bindedAx5ui == \"ax5picker\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                    } else if (bindedAx5ui == \"ax5select\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                    }\n\n                    this.inlineEditing[_key].$inlineEditor.remove();\n                    this.inlineEditing[_key].$inlineEditor = null;\n                    this.inlineEditing[_key].$inlineEditorCell = null;\n                    this.inlineEditing[_key] = undefined;\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n                }\n            };\n\n            if (_msg in action) {\n                action[_msg || \"RETURN\"].call(this, dindex, column, newValue);\n            } else {\n                action[\"__clear\"].call(this);\n            }\n        },\n        keydown: function keydown(key, columnKey, _options) {\n            var processor = {\n                \"ESC\": function ESC() {\n                    for (var columnKey in this.inlineEditing) {\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                    }\n                },\n                \"RETURN\": function RETURN() {\n                    if (this.isInlineEditing) {\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) {\n                            // todo : 네이밍 검증 할 필요있음.\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                        } else {\n                            return false;\n                        }\n                    } else {\n                        for (var k in this.focusedColumn) {\n                            var _column = this.focusedColumn[k],\n                                column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                                _dindex3 = _column.dindex,\n                                value = \"\",\n                                col = this.colGroup[_column.colIndex];\n                            ;\n\n                            if (column) {\n                                if (!this.list[_dindex3].__isGrouping) {\n                                    value = GRID.data.getValue.call(this, _dindex3, column.key);\n                                }\n                            }\n\n                            if (col.editor && GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\n                                if (_options && _options.moveFocus) {} else {\n                                    if (column.editor && column.editor.type == \"checkbox\") {\n                                        value = GRID.data.getValue.call(this, _dindex3, column.key);\n\n                                        var checked = void 0,\n                                            newValue = void 0;\n                                        if (column.editor.config && column.editor.config.trueValue) {\n                                            if (checked = !(value == column.editor.config.trueValue)) {\n                                                newValue = column.editor.config.trueValue;\n                                            } else {\n                                                newValue = column.editor.config.falseValue;\n                                            }\n                                        } else {\n                                            newValue = checked = value == false || value == \"false\" || value < \"1\" ? \"true\" : \"false\";\n                                        }\n\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\n                                        updateRowState.call(this, [\"cellChecked\"], _dindex3, {\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                            editorConfig: column.editor.config, checked: checked\n                                        });\n                                    }\n                                }\n                            } else {\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\n                            }\n                        }\n                    }\n                    return true;\n                }\n            };\n\n            if (key in processor) {\n                processor[key].call(this, key, columnKey, _options);\n            }\n        }\n    };\n\n    var getExcelString = function getExcelString() {\n        var cfg = this.config,\n            list = this.list,\n            bodyRowData = this.bodyRowTable,\n            footSumData = this.footSumTable,\n            bodyGroupingData = this.bodyGroupingTable;\n\n        // body-scroll 의 포지션에 의존적이므로..\n        var getBody = function getBody(_colGroup, _bodyRow, _groupRow, _list) {\n            var SS = [],\n                di = void 0,\n                dl = void 0,\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0;\n\n            //SS.push('<table border=\"1\">');\n            for (di = 0, dl = _list.length; di < dl; di++) {\n                var isGroupingRow = false,\n                    rowTable = void 0;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    SS.push('\\n<tr>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n\n                        SS.push('<td ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', '>', isGroupingRow ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, undefined, \"text\"), '&nbsp;</td>');\n                    }\n                    SS.push('\\n</tr>');\n                }\n            }\n            //SS.push('</table>');\n            return SS.join('');\n        };\n        var getSum = function getSum(_colGroup, _bodyRow, _list) {\n            var SS = [],\n                tri = void 0,\n                trl = void 0,\n                ci = void 0,\n                cl = void 0,\n                col = void 0;\n\n            //SS.push('<table border=\"1\">');\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', '>', getSumFieldValue.call(this, _list, col), '</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        var po = [];\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n        if (cfg.footSum) {\n            // 바닥 요약\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n        }\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        return po.join('');\n    };\n\n    var toggleCollapse = function toggleCollapse(_dindex, _collapse) {\n        if (GRID.data.toggleCollapse.call(this, _dindex, _collapse)) {\n            this.proxyList = GRID.data.getProxyList.call(this, this.list);\n            repaint.call(this);\n        }\n    };\n\n    var click = function click(_dindex) {\n        var that = {\n            self: this,\n            page: this.page,\n            list: this.list,\n            item: this.list[_dindex],\n            dindex: _dindex\n        };\n\n        moveFocus.call(this, _dindex);\n        if (this.config.body.onClick) {\n            this.config.body.onClick.call(that);\n        }\n\n        that = null;\n        // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n    };\n\n    var dblClick = function dblClick(_dindex) {\n        var that = {\n            self: this,\n            page: this.page,\n            list: this.list,\n            item: this.list[_dindex],\n            dindex: _dindex\n        };\n\n        moveFocus.call(this, _dindex);\n\n        if (this.config.body.onDBLClick) {\n            this.config.body.onDBLClick.call(that);\n        }\n\n        that = null;\n    };\n\n    GRID.body = {\n        init: init,\n        repaint: repaint,\n        repaintCell: repaintCell,\n        repaintRow: repaintRow,\n        updateRowState: updateRowState,\n        updateRowStateAll: updateRowStateAll,\n        scrollTo: scrollTo,\n        blur: blur,\n        moveFocus: moveFocus,\n        inlineEdit: inlineEdit,\n        getExcelString: getExcelString,\n        toggleCollapse: toggleCollapse,\n        click: click,\n        dblClick: dblClick\n    };\n})();\n// ax5.ui.grid.collector\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    var sum = function sum() {\n        var value = 0,\n            i = this.list.length;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n            }\n        }\n        return value;\n    };\n\n    var avg = function avg() {\n        var value = 0,\n            i = this.list.length,\n            listLength = 0;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n                listLength++;\n            }\n        }\n        return U.number(value / (listLength || 1), { \"round\": 2 });\n    };\n\n    GRID.collector = {\n        sum: sum,\n        avg: avg\n    };\n})();\n// ax5.ui.grid.layout\n(function () {\n\n    var GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    var init = function init() {};\n\n    var clearGroupingData = function clearGroupingData(_list) {\n        var i = 0,\n            l = _list.length,\n            returnList = [];\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n                returnList.push(jQuery.extend({}, _list[i]));\n            }\n        }\n        return returnList;\n    };\n\n    var initData = function initData(_list) {\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n\n        var i = 0,\n            l = _list.length,\n            returnList = [],\n            appendIndex = 0,\n            dataRealRowCount = 0,\n            lineNumber = 0;\n\n        if (this.config.body.grouping) {\n\n            var groupingKeys = U.map(this.bodyGrouping.by, function () {\n                return {\n                    key: this,\n                    compareString: \"\",\n                    grouping: false,\n                    list: []\n                };\n            });\n\n            var gi = 0,\n                gl = groupingKeys.length,\n                compareString = void 0,\n                appendRow = [],\n                ari = void 0;\n            for (; i < l + 1; i++) {\n                gi = 0;\n\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                }\n\n                compareString = \"\"; // 그룹핑 구문검사용\n                appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\n\n                // 그룹핑 구문검사\n                for (; gi < gl; gi++) {\n                    if (_list[i]) {\n                        compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                    }\n\n                    if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                        var appendRowItem = { keys: [], labels: [], list: groupingKeys[gi].list };\n                        for (var ki = 0; ki < gi + 1; ki++) {\n                            appendRowItem.keys.push(groupingKeys[ki].key);\n                            appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                        }\n                        appendRow.push(appendRowItem);\n                        groupingKeys[gi].list = [];\n                    }\n\n                    groupingKeys[gi].list.push(_list[i]);\n                    groupingKeys[gi].compareString = compareString;\n                }\n\n                // 새로 추가해야할 그룹핑 row\n                ari = appendRow.length;\n                while (ari--) {\n                    returnList.push({ __isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: { keys: appendRow[ari].keys, labels: appendRow[ari].labels } });\n                }\n                //~ 그룹핑 구문 검사 완료\n\n                if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\n                    _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\n                    returnList.push(_list[i]);\n\n                    dataRealRowCount++;\n                    appendIndex++;\n                    lineNumber++;\n                }\n            }\n        } else {\n            for (; i < l; i++) {\n                if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.deleted]) {\n                        this.deletedList.push(_list[i]);\n                    } else {\n\n                        if (_list[i][this.config.columnKeys.selected]) {\n                            this.selectedDataIndexs.push(i);\n                        }\n\n                        // __original_index 인덱스 키가 없다면 추가.\n                        if (typeof _list[i][\"__original_index\"] === \"undefined\") {\n                            _list[i][\"__original_index\"] = lineNumber;\n                        }\n                        _list[i][\"__index\"] = lineNumber;\n                        dataRealRowCount++;\n                        lineNumber++;\n                        returnList.push(_list[i]);\n                    }\n                }\n            }\n        }\n\n        // 원본 데이터의 갯수\n        // grouping은 제외하고 수집됨.\n        this.xvar.dataRealRowCount = dataRealRowCount;\n        return returnList;\n    };\n\n    var arrangeData4tree = function arrangeData4tree(_list) {\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n        var i = 0,\n            seq = 0,\n            appendIndex = 0,\n            dataRealRowCount = 0,\n            lineNumber = 0;\n\n        var li = _list.length;\n        var keys = this.config.tree.columnKeys;\n        var hashDigit = this.config.tree.hashDigit;\n        var listIndexMap = {};\n\n        while (li--) {\n            delete _list[li][keys.parentHash];\n            delete _list[li][keys.selfHash];\n            //delete _list[li][keys.childrenLength];\n        }\n\n        /// 루트 아이템 수집\n        i = 0;\n        seq = 0;\n        li = _list.length;\n        for (; i < li; i++) {\n            if (_list[i]) {\n                listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n                if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") {\n                    // 최상위 아이템인 경우\n                    _list[i][keys.parentKey] = \"top\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.depth] = 0;\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                }\n            }\n        }\n\n        /// 자식 아이템 수집\n        i = 0;\n        lineNumber = 0;\n        for (; i < li; i++) {\n            var _parent = void 0,\n                _parentHash = void 0;\n            if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n                if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n                    _parentHash = _parent[keys.selfHash];\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = _parentHash;\n                    _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\n                    _list[i][keys.depth] = _parent[keys.depth] + 1;\n                    if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n                    _parent[keys.children].push(_list[i][keys.selfKey]);\n                } else {\n                    _list[i][keys.parentKey] = \"top\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                }\n            }\n\n            if (_list[i]) {\n                if (_list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                    _list[i][keys.hidden] = true;\n                } else if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n\n                _list[i][\"__index\"] = lineNumber;\n                dataRealRowCount++;\n                lineNumber++;\n            }\n        }\n\n        this.listIndexMap = listIndexMap;\n        this.xvar.dataRealRowCount = dataRealRowCount;\n\n        return _list;\n    };\n\n    var getProxyList = function getProxyList(_list) {\n        var i = 0,\n            l = _list.length,\n            returnList = [];\n        for (; i < l; i++) {\n\n            if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\n                _list[i].__origin_index__ = i;\n                returnList.push(_list[i]);\n            }\n        }\n        return returnList;\n    };\n\n    var set = function set(data) {\n\n        var list = void 0;\n        if (U.isArray(data)) {\n            this.page = null;\n            list = data;\n        } else if (\"page\" in data) {\n            this.page = jQuery.extend({}, data.page);\n            list = data.list;\n        }\n\n        // console.log(this.list.length);\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        } else {\n            this.proxyList = null;\n            this.list = initData.call(this, !this.config.remoteSort && Object.keys(this.sortInfo).length ? sort.call(this, this.sortInfo, list) : list);\n        }\n        this.deletedList = [];\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n\n        if (this.config.body.grouping) {}\n        return this;\n    };\n\n    var get = function get(_type) {\n        return {\n            list: this.list,\n            page: this.page\n        };\n    };\n\n    var getList = function getList(_type) {\n        var returnList = [];\n        var i = 0,\n            l = this.list.length;\n        switch (_type) {\n            case \"modified\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.modified]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"selected\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.selected]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"deleted\":\n                //_list = GRID.data.clearGroupingData(this.list);\n                returnList = [].concat(this.deletedList);\n                break;\n            default:\n                returnList = GRID.data.clearGroupingData.call(this, this.list);\n        }\n        return returnList;\n    };\n\n    var add = function add(_row, _dindex, _options) {\n        var list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;\n        var processor = {\n            \"first\": function first() {\n                list = [].concat(_row).concat(list);\n            },\n            \"last\": function last() {\n                list = list.concat([].concat(_row));\n            }\n        };\n\n        if (this.config.tree.use) {\n            var _list2 = this.list.concat([].concat(_row));\n\n            this.list = arrangeData4tree.call(this, _list2);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        } else {\n            if (typeof _dindex === \"undefined\") _dindex = \"last\";\n            if (_dindex in processor) {\n                _row[this.config.columnKeys.modified] = true;\n                processor[_dindex].call(this, _row);\n            } else {\n                if (!U.isNumber(_dindex)) {\n                    throw 'invalid argument _dindex';\n                }\n                if (U.isArray(_row)) {\n                    for (var _i = 0, _l = _row.length; _i < _l; _i++) {\n                        list.splice(_dindex + _i, 0, _row[_i]);\n                    }\n                } else {\n                    list.splice(_dindex, 0, _row);\n                }\n            }\n\n            if (this.config.body.grouping) {\n                list = initData.call(this, sort.call(this, this.sortInfo, list));\n            } else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n                list = initData.call(this, sort.call(this, this.sortInfo, list));\n            } else {\n                list = initData.call(this, list);\n            }\n\n            this.list = list;\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\r\n     * list에서 완전 제거 하는 경우 사용.\r\n     * ax5grid.data.remove\r\n     */\n    var remove = function remove(_dindex) {\n        var list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;\n        var processor = {\n            \"first\": function first() {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, 0);\n                } else {\n                    list.splice(0, 1);\n                }\n            },\n            \"last\": function last() {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, list.length - 1);\n                } else {\n                    list.splice(list.length - 1, 1);\n                }\n            },\n            \"index\": function index(_dindex) {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, _dindex);\n                } else {\n                    list.splice(_dindex, 1);\n                }\n            },\n            \"tree\": function tree(_dindex) {\n                var treeKeys = this.config.tree.columnKeys,\n                    selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\n                list = U.filter(list, function () {\n                    return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\n                });\n                treeKeys = null;\n                selfHash = null;\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            processor[\"index\"].call(this, _dindex);\n        }\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        } else {\n            if (this.config.body.grouping) {\n                list = initData.call(this, sort.call(this, this.sortInfo, list));\n            } else if (Object.keys(this.sortInfo).length) {\n                list = initData.call(this, sort.call(this, this.sortInfo, list));\n            } else {\n                list = initData.call(this, list);\n            }\n            this.list = list;\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\r\n     * list에서 deleted 처리 repaint\r\n     * ax5grid.data.deleteRow\r\n     */\n    var deleteRow = function deleteRow(_dindex) {\n        var list = this.config.body.grouping ? clearGroupingData.call(this, this.list) : this.list;\n        var processor = {\n            \"first\": function first() {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, 0);\n                } else {\n                    list[0][this.config.columnKeys.deleted] = true;\n                }\n            },\n            \"last\": function last() {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, list.length - 1);\n                } else {\n                    list[list.length - 1][this.config.columnKeys.deleted] = true;\n                }\n            },\n            \"selected\": function selected() {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, \"selected\");\n                } else {\n                    var i = list.length;\n                    while (i--) {\n                        if (list[i][this.config.columnKeys.selected]) {\n                            list[i][this.config.columnKeys.deleted] = true;\n                        }\n                    }\n                    i = null;\n                }\n            },\n            \"tree\": function tree(_dindex) {\n                var keys = this.config.columnKeys,\n                    treeKeys = this.config.tree.columnKeys;\n\n                if (_dindex === \"selected\") {\n\n                    var i = list.length;\n                    while (i--) {\n                        if (list[i][this.config.columnKeys.selected]) {\n                            list[i][this.config.columnKeys.deleted] = true;\n\n                            var selfHash = list[i][treeKeys.selfHash];\n                            var ii = list.length;\n\n                            while (ii--) {\n                                if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\n                                    list[ii][keys.deleted] = true;\n                                }\n                            }\n\n                            selfHash = null;\n                            ii = null;\n                        }\n                    }\n                    i = null;\n                } else {\n                    var _selfHash = list[_dindex][treeKeys.selfHash];\n                    var _i2 = list.length;\n                    while (_i2--) {\n                        if (list[_i2][treeKeys.selfHash].substr(0, _selfHash.length) !== _selfHash) {\n                            list[_i2][keys.deleted] = true;\n                        }\n                    }\n                    _selfHash = null;\n                    _i2 = null;\n                }\n\n                keys = null;\n                treeKeys = null;\n            }\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            list[_dindex][this.config.columnKeys.deleted] = true;\n        }\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        } else {\n            if (this.config.body.grouping) {\n                list = initData.call(this, sort.call(this, this.sortInfo, list));\n            } else if (Object.keys(this.sortInfo).length) {\n                list = initData.call(this, sort.call(this, this.sortInfo, list));\n            } else {\n                list = initData.call(this, list);\n            }\n\n            this.list = list;\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    var update = function update(_row, _dindex) {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        //\n        this.needToPaintSum = true;\n        this.list.splice(_dindex, 1, _row);\n\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\n        }\n    };\n\n    var updateChild = function updateChild(_dindex, _updateData, _options) {\n        var keys = this.config.tree.columnKeys,\n            selfHash = void 0,\n            originIndex = void 0;\n\n        if (typeof _dindex === \"undefined\") return false;\n        originIndex = this.proxyList[_dindex].__origin_index__;\n\n        if (this.list[originIndex][keys.children]) {\n            this.proxyList = []; // 리셋 프록시\n\n            if (_options && _options.filter) {\n                if (_options.filter.call({ item: this.list[originIndex], dindex: originIndex }, this.list[originIndex])) {\n                    for (var _k in _updateData) {\n                        this.list[originIndex][_k] = _updateData[_k];\n                    }\n                }\n            } else {\n                for (var _k2 in _updateData) {\n                    this.list[originIndex][_k2] = _updateData[_k2];\n                }\n            }\n\n            selfHash = this.list[originIndex][keys.selfHash];\n\n            var i = 0,\n                l = this.list.length;\n            for (; i < l; i++) {\n                if (this.list[i]) {\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n                        if (_options && _options.filter) {\n                            if (_options.filter.call({ item: this.list[i], dindex: i }, this.list[i])) {\n                                for (var _k3 in _updateData) {\n                                    this.list[i][_k3] = _updateData[_k3];\n                                }\n                            }\n                        } else {\n                            for (var _k4 in _updateData) {\n                                this.list[i][_k4] = _updateData[_k4];\n                            }\n                        }\n                    }\n\n                    if (!this.list[i][keys.hidden]) {\n                        this.proxyList.push(this.list[i]);\n                    }\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    var setValue = function setValue(_dindex, _key, _value) {\n        var originalValue = getValue.call(this, _dindex, _key);\n        this.needToPaintSum = true;\n\n        if (originalValue !== _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\n                    Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\").call(this.list[_dindex], _value);\n                } catch (e) {}\n            } else {\n                this.list[_dindex][this.config.columnKeys.modified] = true;\n                this.list[_dindex][_key] = _value;\n            }\n\n            if (this.onDataChanged) {\n                this.onDataChanged.call({\n                    self: this,\n                    list: this.list,\n                    dindex: _dindex,\n                    item: this.list[_dindex],\n                    key: _key,\n                    value: _value\n                });\n            }\n        }\n\n        return true;\n    };\n\n    var getValue = function getValue(_dindex, _key, _value) {\n        var list = this.list;\n\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\").call(list[_dindex]);\n            } catch (e) {}\n        } else {\n            _value = list[_dindex][_key];\n        }\n        return _value;\n    };\n\n    var clearSelect = function clearSelect() {\n        this.selectedDataIndexs = [];\n    };\n\n    var select = function select(_dindex, _selected, _options) {\n        var cfg = this.config;\n\n        if (!this.list[_dindex]) return false;\n        if (this.list[_dindex].__isGrouping) return false;\n        if (this.list[_dindex][cfg.columnKeys.disableSelection]) return false;\n\n        if (typeof _selected === \"undefined\") {\n            if (this.list[_dindex][cfg.columnKeys.selected] = !this.list[_dindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        } else {\n            if (this.list[_dindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                item: this.list[_dindex],\n                key: cfg.columnKeys.selected,\n                value: this.list[_dindex][cfg.columnKeys.selected]\n            });\n        }\n\n        return this.list[_dindex][cfg.columnKeys.selected];\n    };\n\n    var selectAll = function selectAll(_selected, _options) {\n        var cfg = this.config,\n            dindex = this.list.length;\n\n        if (typeof _selected === \"undefined\") {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        } else {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list\n            });\n        }\n\n        return this.list;\n    };\n\n    var sort = function sort(_sortInfo, _list, _options) {\n        var self = this,\n            list = _list || this.list,\n            sortInfoArray = [],\n            lineNumber = 0;\n        var getKeyValue = function getKeyValue(_item, _key, _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    _value = Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\").call(_item);\n                } catch (e) {}\n            } else {\n                _value = _item[_key];\n            }\n            return _value;\n        };\n\n        for (var k in _sortInfo) {\n            sortInfoArray[_sortInfo[k].seq] = { key: k, order: _sortInfo[k].orderBy };\n        }\n        sortInfoArray = U.filter(sortInfoArray, function () {\n            return typeof this !== \"undefined\";\n        });\n\n        // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\n        if (_options && _options.resetLineNumber && sortInfoArray.length === 0) {\n            sortInfoArray[0] = { key: '__original_index', order: \"asc\" };\n        }\n\n        var i = 0,\n            l = sortInfoArray.length,\n            _a_val = void 0,\n            _b_val = void 0;\n\n        list.sort(function (_a, _b) {\n            for (i = 0; i < l; i++) {\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n                if ((typeof _a_val === \"undefined\" ? \"undefined\" : _typeof(_a_val)) !== (typeof _b_val === \"undefined\" ? \"undefined\" : _typeof(_b_val))) {\n                    _a_val = '' + _a_val;\n                    _b_val = '' + _b_val;\n                }\n                if (_a_val < _b_val) {\n                    return sortInfoArray[i].order === \"asc\" ? -1 : 1;\n                } else if (_a_val > _b_val) {\n                    return sortInfoArray[i].order === \"asc\" ? 1 : -1;\n                }\n            }\n        });\n\n        if (_options && _options.resetLineNumber) {\n            i = 0, l = list.length, lineNumber = 0;\n            for (; i < l; i++) {\n                if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                    _list[i][\"__index\"] = lineNumber++;\n                }\n            }\n        }\n\n        if (_list) {\n            return list;\n        } else {\n            this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            GRID.page.navigationUpdate.call(this);\n            return this;\n        }\n    };\n\n    var append = function append(_list, _callback) {\n        var self = this;\n\n        if (this.config.tree.use) {\n            var list = this.list.concat([].concat(_list));\n\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n            list = null;\n        } else {\n            this.list = this.list.concat([].concat(_list));\n        }\n\n        this.appendProgress = true;\n        GRID.page.statusUpdate.call(this);\n\n        if (this.appendDebouncer) {\n            if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n                clearTimeout(this.appendDebouncer);\n                self.appendDebounceTimes++;\n            } else {\n                self.appendDebounceTimes = 0;\n                appendIdle.call(self);\n                _callback();\n                return false;\n            }\n        }\n\n        this.appendDebouncer = setTimeout(function () {\n            self.appendDebounceTimes = 0;\n            appendIdle.call(self);\n            _callback();\n        }, this.config.debounceTime);\n\n        // todo : append bounce animation\n    };\n\n    var appendIdle = function appendIdle() {\n        this.appendProgress = false;\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, sort.call(this, this.sortInfo, this.list));\n        } else {\n            this.list = initData.call(this, this.list);\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = this.config.frozenRowIndex > this.list.length ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n    };\n\n    var toggleCollapse = function toggleCollapse(_dindex, _collapse) {\n        var keys = this.config.tree.columnKeys,\n            selfHash = void 0,\n            originIndex = void 0;\n\n        if (typeof _dindex === \"undefined\") return false;\n        originIndex = this.proxyList[_dindex].__origin_index__;\n\n        if (this.list[originIndex][keys.children]) {\n            this.proxyList = []; // 리셋 프록시\n            if (typeof _collapse == \"undefined\") {\n                _collapse = !(this.list[originIndex][keys.collapse] || false);\n            }\n\n            this.list[originIndex][keys.collapse] = _collapse;\n            selfHash = this.list[originIndex][keys.selfHash];\n\n            var i = this.list.length;\n            while (i--) {\n                if (this.list[i]) {\n                    // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n                        this.list[i][keys.hidden] = _collapse;\n                    }\n\n                    if (!this.list[i][keys.hidden]) {\n                        this.proxyList.push(this.list[i]);\n                    }\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    GRID.data = {\n        init: init,\n        set: set,\n        get: get,\n        getList: getList,\n        getProxyList: getProxyList,\n        setValue: setValue,\n        getValue: getValue,\n        clearSelect: clearSelect,\n        select: select,\n        selectAll: selectAll,\n        add: add,\n        remove: remove,\n        deleteRow: deleteRow,\n        update: update,\n        updateChild: updateChild,\n        sort: sort,\n        initData: initData,\n        clearGroupingData: clearGroupingData,\n        append: append,\n        toggleCollapse: toggleCollapse\n    };\n})();\n/*\r\n * Copyright (c) 2016. tom@axisj.com\r\n * - github.com/thomasjang\r\n * - www.axisj.com\r\n */\n\n// ax5.ui.grid.excel\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    var base64 = function base64(s) {\n        return window.btoa(unescape(encodeURIComponent(s)));\n    };\n\n    var uri = \"data:application/vnd.ms-excel;base64,\";\n\n    var getExcelTmpl = function getExcelTmpl() {\n        return \"\\uFEFF\\n{{#tables}}{{{body}}}{{/tables}}\\n\";\n    };\n\n    var tableToExcel = function tableToExcel(table, fileName) {\n        var link = void 0,\n            a = void 0,\n            output = void 0,\n            tables = [].concat(table);\n\n        output = ax5.mustache.render(getExcelTmpl(), {\n            worksheet: function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({ name: \"Sheet\" + (ti + 1) });\n                });\n                return arr;\n            }(),\n            tables: function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({ body: t });\n                });\n                return arr;\n            }()\n        });\n\n        var isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1,\n            isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1,\n            isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\n\n        var blob1 = void 0,\n            blankWindow = void 0,\n            $iframe = void 0,\n            iframe = void 0,\n            anchor = void 0;\n\n        if (navigator.msSaveOrOpenBlob) {\n            blob1 = new Blob([output], { type: \"text/html\" });\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\n        } else if (isSafari) {\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\n            //tables\n            blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\n            blankWindow.document.write(output);\n            blankWindow = null;\n        } else {\n            if (isIE && typeof Blob === \"undefined\") {\n                //otherwise use the iframe and save\n                //requires a blank iframe on page called txtArea1\n                $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\n                jQuery(document.body).append($iframe);\n\n                iframe = window[this.id + '-excel-export'];\n                iframe.document.open(\"text/html\", \"replace\");\n                iframe.document.write(output);\n                iframe.document.close();\n                iframe.focus();\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\n                $iframe.remove();\n            } else {\n                // Attempt to use an alternative method\n                anchor = document.body.appendChild(document.createElement(\"a\"));\n\n                // If the [download] attribute is supported, try to use it\n                if (\"download\" in anchor) {\n                    anchor.download = fileName;\n                    //anchor.href = URL.createObjectURL( blob );\n                    anchor.href = uri + base64(output);\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                }\n            }\n        }\n\n        return true;\n    };\n\n    GRID.excel = {\n        export: tableToExcel\n    };\n})();\n// ax5.ui.grid.formatter\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    var money = function money() {\n        return U.number(this.value, { \"money\": true });\n    };\n\n    GRID.formatter = {\n        money: money\n    };\n})();\n// ax5.ui.grid.header\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    var columnResizerEvent = {\n        \"on\": function on(_columnResizer, _colIndex) {\n            var self = this;\n            var $columnResizer = $(_columnResizer);\n            var columnResizerPositionLeft = $columnResizer.offset().left;\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\n            self.xvar.columnResizerIndex = _colIndex;\n            var resizeRange = {\n                min: -self.colGroup[_colIndex]._width + 2,\n                max: self.$[\"container\"][\"root\"].width() - self.colGroup[_colIndex]._width\n            };\n\n            jQuery(document.body).bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                var mouseObj = GRID.util.getMousePosition(e);\n                self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n\n                if (resizeRange.min > self.xvar.__da) {\n                    self.xvar.__da = resizeRange.min;\n                } else if (resizeRange.max < self.xvar.__da) {\n                    self.xvar.__da = resizeRange.max;\n                }\n\n                if (!self.xvar.columnResizerLived) {\n                    self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\n                }\n                self.xvar.columnResizerLived = true;\n                self.$[\"resizer\"][\"horizontal\"].css({\n                    left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\n                });\n            }).bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                columnResizerEvent.off.call(self);\n                U.stopEvent(e);\n            }).bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                columnResizerEvent.off.call(self);\n                U.stopEvent(e);\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\n            this.xvar.columnResizerLived = false;\n\n            if (typeof this.xvar.__da === \"undefined\") {} else {\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\n            }\n\n            jQuery(document.body).unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId).unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId).unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n\n    var init = function init() {\n        // 헤더 초기화\n        var self = this;\n\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            var key = this.getAttribute(\"data-ax5grid-column-key\"),\n                colIndex = this.getAttribute(\"data-ax5grid-column-colindex\"),\n\n            //rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\"),\n            col = self.colGroup[colIndex];\n\n            if (key === \"__checkbox_header__\") {\n                var selected = this.getAttribute(\"data-ax5grid-selected\");\n                selected = U.isNothing(selected) ? true : selected !== \"true\";\n\n                $(this).attr(\"data-ax5grid-selected\", selected);\n                self.selectAll({ selected: selected });\n\n                selected = null;\n            } else {\n                if (key && col && col.sortable !== false && !col.sortFixed) {\n                    if (col.sortable === true || self.config.sortable === true) {\n                        toggleSort.call(self, col.key);\n                    }\n                }\n            }\n\n            GRID.body.blur.call(self);\n\n            key = null;\n            colIndex = null;\n            col = null;\n        });\n        this.$[\"container\"][\"header\"].on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\n            var colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\n\n            self.xvar.mousePosition = GRID.util.getMousePosition(e);\n            columnResizerEvent.on.call(self, this, Number(colIndex));\n            U.stopEvent(e);\n\n            colIndex = null;\n        }).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        resetFrozenColumn.call(this);\n    };\n\n    var resetFrozenColumn = function resetFrozenColumn() {\n        var cfg = this.config,\n            dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.xvar.frozenColumnIndex);\n\n        this.asideHeaderData = function (dataTable) {\n            var colGroup = [];\n            var data = { rows: [] };\n            for (var i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = { cols: [] };\n                if (i === 0) {\n                    var col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    },\n                        _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            key: \"__index_header__\", label: \"&nbsp;\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            key: \"__checkbox_header__\", label: \"\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n\n                    col = null;\n                }\n            }\n\n            this.asideColGroup = colGroup;\n            return data;\n        }.call(this, this.headerTable);\n\n        this.leftHeaderData = dividedHeaderObj.leftData;\n        this.headerData = dividedHeaderObj.rightData;\n    };\n\n    var getFieldValue = function getFieldValue(_col) {\n        return _col.key === \"__checkbox_header__\" ? \"<div class=\\\"checkBox\\\" style=\\\"max-height: \" + (_col.width - 10) + \"px;min-height: \" + (_col.width - 10) + \"px;\\\"></div>\" : _col.label || \"&nbsp;\";\n    };\n\n    var repaint = function repaint(_reset) {\n        var cfg = this.config,\n            colGroup = this.colGroup;\n\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        }\n        var asideHeaderData = this.asideHeaderData,\n            leftHeaderData = this.leftHeaderData,\n            headerData = this.headerData,\n            headerAlign = cfg.header.align;\n\n        // this.asideColGroup : asideHeaderData에서 처리 함.\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\n\n        var repaintHeader = function repaintHeader(_elTarget, _colGroup, _bodyRow) {\n            var tableWidth = 0,\n                SS = [];\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n                tableWidth += _colGroup[cgi]._width;\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                var trCSS_class = \"\";\n                SS.push('<tr class=\"' + trCSS_class + '\">');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\n                    var colAlign = headerAlign || col.align;\n                    SS.push('<td ', 'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ', 'data-ax5grid-column-row=\"' + tri + '\" ', 'data-ax5grid-column-col=\"' + ci + '\" ', function () {\n                        return typeof col.key !== \"undefined\" ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\n                    }(), 'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ', 'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', 'class=\"' + function (_col) {\n                        var tdCSS_class = \"\";\n                        if (_col.headerStyleClass) {\n                            if (U.isFunction(_col.headerStyleClass)) {\n                                tdCSS_class += _col.headerStyleClass.call({\n                                    column: _col,\n                                    key: _col.key\n                                }) + \" \";\n                            } else {\n                                tdCSS_class += _col.headerStyleClass + \" \";\n                            }\n                        }\n                        if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                        if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                        return tdCSS_class;\n                    }.call(this, col) + '\" ', 'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push(function () {\n                        var lineHeight = cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth;\n                        return '<span data-ax5grid-cellHolder=\"\" ' + (colAlign ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') + ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\n                    }(), function () {\n                        var _SS = \"\";\n\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\n                        }\n                        return _SS;\n                    }(), getFieldValue.call(this, col), '</span>');\n\n                    if (!U.isNothing(col.colIndex)) {\n                        if (cfg.enableFilter) {\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\n                        }\n                    }\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ', 'data-ax5grid-column-row=\"null\" ', 'data-ax5grid-column-col=\"null\" ', 'style=\"height: ' + cfg.header.columnHeight + 'px;min-height: 1px;\" ', '></td>');\n                SS.push('</tr>');\n            }\n            SS.push('</table>');\n            _elTarget.html(SS.join(''));\n\n            /// append column-resizer\n            (function () {\n                var resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth,\n                    resizerLeft = 0,\n                    AS = [];\n\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                    var col = _colGroup[cgi];\n                    if (!U.isNothing(col.colIndex)) {\n                        //_colGroup[cgi]._width\n                        resizerLeft += col._width;\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\n                    }\n                }\n                _elTarget.append(AS);\n            }).call(this);\n\n            return tableWidth;\n        };\n\n        if (cfg.asidePanelWidth > 0) {\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\n        }\n        if (cfg.frozenColumnIndex > 0) {\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\n        }\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\n\n        if (cfg.rightSum) {}\n    };\n\n    var scrollTo = function scrollTo(css) {\n        this.$.panel[\"header-scroll\"].css(css);\n        return this;\n    };\n\n    var toggleSort = function toggleSort(_key) {\n        var sortOrder = \"\",\n            sortInfo = {},\n            seq = 0;\n\n        for (var k in this.sortInfo) {\n            if (this.sortInfo[k].fixed) {\n                sortInfo[k] = this.sortInfo[k];\n                seq++;\n            }\n        }\n\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            if (this.colGroup[i].key == _key) {\n                if (sortOrder == \"\") {\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\n                        sortOrder = \"desc\";\n                    } else if (this.colGroup[i].sort === \"desc\") {\n                        sortOrder = \"asc\";\n                    } else {\n                        sortOrder = undefined;\n                    }\n                }\n                this.colGroup[i].sort = sortOrder;\n            } else if (!this.config.multiSort) {\n                this.colGroup[i].sort = undefined;\n            }\n\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\n                if (!sortInfo[this.colGroup[i].key]) {\n                    sortInfo[this.colGroup[i].key] = {\n                        seq: seq++,\n                        orderBy: this.colGroup[i].sort\n                    };\n                }\n            }\n        }\n\n        this.setColumnSort(sortInfo);\n        return this;\n    };\n\n    var applySortStatus = function applySortStatus(_sortInfo) {\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            for (var _key in _sortInfo) {\n                if (this.colGroup[i].key == _key) {\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\n                }\n            }\n        }\n        return this;\n    };\n\n    var select = function select(_options) {\n        GRID.data.select.call(this, dindex, _options && _options.selected);\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n    };\n\n    var getExcelString = function getExcelString() {\n        var cfg = this.config,\n            colGroup = this.colGroup,\n            headerData = this.headerTable,\n            getHeader = function getHeader(_colGroup, _bodyRow) {\n            var SS = [];\n            //SS.push('<table border=\"1\">');\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr>');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ', 'colspan=\"' + col.colspan + '\" ', 'rowspan=\"' + col.rowspan + '\" ', '>', getFieldValue.call(this, col), '</td>');\n                }\n                SS.push('</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        return getHeader.call(this, colGroup, headerData);\n    };\n\n    GRID.header = {\n        init: init,\n        repaint: repaint,\n        scrollTo: scrollTo,\n        toggleSort: toggleSort,\n        applySortStatus: applySortStatus,\n        getExcelString: getExcelString\n    };\n})();\n// ax5.ui.grid.inlineEditor\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var edit_text = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            if (typeof _editor.attributes !== \"undefined\") {\n                var attributesText = \"\";\n                for (var k in _editor.attributes) {\n                    attributesText += \" \" + k + \"='\" + _editor.attributes[k] + \"'\";\n                }\n            }\n            return \"<input type=\\\"text\\\" data-ax5grid-editor=\\\"text\\\" value=\\\"\" + _value + \"\\\" \" + attributesText + \">\";\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.focus().select();\n        }\n    };\n\n    var edit_money = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"' + _value + '\" >';\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"money\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_number = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"' + _value + '\" >';\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"number\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_date = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"' + _value + '\" >';\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\n            _$el.ax5picker({\n                direction: \"auto\",\n                content: {\n                    type: 'date',\n                    formatter: {\n                        pattern: 'date'\n                    }\n                },\n                onStateChanged: function onStateChanged() {\n                    if (this.state == \"open\") {\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\n                    }\n                }\n            });\n            _$el.focus().select();\n        }\n    };\n\n    var edit_select = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        getHtml: function getHtml(_root, _columnKey, _editor, _value) {\n            var po = [];\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\n            po.push('</div>');\n\n            return po.join('');\n        },\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var eConfig = {\n                columnKeys: {\n                    optionValue: \"value\",\n                    optionText: \"text\",\n                    optionSelected: \"selected\"\n                }\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n\n            eConfig.options.forEach(function (n) {\n                if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\n            });\n\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\n            _$el.ax5select({\n                direction: \"auto\",\n                columnKeys: eConfig.columnKeys,\n                options: eConfig.options,\n                onStateChanged: function onStateChanged() {\n                    if (this.state == \"open\") {\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\n                    } else if (this.state == \"changeValue\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\n                    }\n                }\n            });\n            _$el.ax5select(\"open\");\n            _$el.ax5select(\"setValue\", _value);\n            _$el.find(\"a\").focus();\n        }\n    };\n\n    var edit_checkbox = {\n        editMode: \"inline\",\n        getHtml: function getHtml(_root, _editor, _value) {\n\n            var lineHeight = _root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth;\n            var checked;\n            if (_editor.config && _editor.config.trueValue) {\n                checked = _value == _editor.config.trueValue ? \"true\" : \"false\";\n            } else {\n                checked = _value == false || _value == \"false\" || _value < \"1\" ? \"false\" : \"true\";\n            }\n\n            var eConfig = {\n                marginTop: 2,\n                height: lineHeight - 4\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\n\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\n        }\n    };\n\n    var edit_textarea = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        _getHtml: function _getHtml(_root, _columnKey, _editor, _value) {\n            // init 에서 사용하게 될 HTML 태그를 만들어 줍니다.\n            return \"<div data-ax5grid-editor=\\\"textarea\\\"></div>\";\n        },\n        _bindUI: function _bindUI(_root, _columnKey, _$el, _editor, _$parent, _value) {\n            // 위치와 크기를 구합니다.\n            var offset = _$el.offset();\n            var box = {\n                width: _$el.width()\n            };\n            var editorHeight = 150;\n            var buttonHeight = 30;\n\n            // 새로운 엘리먼트 생성\n            var $newDiv = jQuery(\"<div data-ax5grid-popup=\\\"textarea\\\" style=\\\"z-index: 9999;\\\">\\n    <textarea style=\\\"width:100%;height:\" + (editorHeight - buttonHeight) + \"px;\\\" class=\\\"form-control\\\">\" + _value + \"</textarea>\\n    <div style=\\\"height:\" + buttonHeight + \"px;padding:5px;text-align: right;\\\">\\n        <button class=\\\"btn btn-default\\\">OK</button>\\n    </div>\\n</div>\");\n            var $newTextarea = $newDiv.find(\"textarea\");\n            // 엘리먼트에 CSS 적용\n            $newDiv.css({\n                position: \"absolute\",\n                left: offset.left,\n                top: offset.top,\n                width: box.width,\n                height: editorHeight\n            });\n            $newDiv.find(\"textarea\");\n\n            // 새로운 엘리먼트를 document.body에 append\n            jQuery(document.body).append($newDiv);\n            $newTextarea.focus().select();\n\n            $newTextarea.on(\"blur\", function (e) {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value);\n                $newDiv.remove();\n                ax5.util.stopEvent(e.originalEvent);\n            });\n            $newTextarea.on(\"keydown\", function (e) {\n                if (e.which == ax5.info.eventKeys.ESC) {\n                    GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\n                    $newDiv.remove();\n                    ax5.util.stopEvent(e.originalEvent);\n                }\n            });\n\n            /// 값 변경\n            /// GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n            /// 에디팅 취소\n            /// GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\n        },\n\n        init: function init(_root, _columnKey, _editor, _$parent, _value) {\n            // 인라인 에디팅 활성화 시작\n            /**\r\n             * _root : gridInstance\r\n             * _columnKey : di + \"_\" + col.colIndex + \"_\" + col.rowIndex\r\n             * _editor : col.editor\r\n             * _$parent : 셀\r\n             * _value : 값\r\n             */\n            var $el = void 0;\n            _$parent.append($el = jQuery(this._getHtml(_root, _columnKey, _editor, _value)));\n            // 셀에 HTML 컨텐츠 추가\n\n            this._bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            // 이벤트 바인딩\n\n            return $el;\n        }\n    };\n\n    GRID.inlineEditor = {\n        \"text\": edit_text,\n        \"money\": edit_money,\n        \"number\": edit_number,\n        \"date\": edit_date,\n        \"select\": edit_select,\n        \"checkbox\": edit_checkbox,\n        \"textarea\": edit_textarea\n    };\n})();\n// ax5.ui.grid.page\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    var onclickPageMove = function onclickPageMove(_act) {\n        var callback = function callback(_pageNo) {\n            if (this.page.currentPage != _pageNo) {\n                this.page.selectPage = _pageNo;\n                if (this.config.page.onChange) {\n                    this.config.page.onChange.call({\n                        self: this,\n                        page: this.page,\n                        data: this.data\n                    });\n                }\n            }\n        };\n        var processor = {\n            \"first\": function first() {\n                callback.call(this, 0);\n            },\n            \"prev\": function prev() {\n                var pageNo = this.page.currentPage - 1;\n                if (pageNo < 0) pageNo = 0;\n                callback.call(this, pageNo);\n            },\n            \"next\": function next() {\n                var pageNo = this.page.currentPage + 1;\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\n                callback.call(this, pageNo);\n            },\n            \"last\": function last() {\n                callback.call(this, this.page.totalPages - 1);\n            }\n        };\n\n        if (_act in processor) {\n            processor[_act].call(this);\n        } else {\n            callback.call(this, _act - 1);\n        }\n    };\n\n    var navigationUpdate = function navigationUpdate() {\n        var self = this;\n        if (this.page) {\n            var page = {\n                hasPage: false,\n                currentPage: this.page.currentPage,\n                pageSize: this.page.pageSize,\n                totalElements: this.page.totalElements,\n                totalPages: this.page.totalPages,\n                firstIcon: this.config.page.firstIcon,\n                prevIcon: this.config.page.prevIcon || \"«\",\n                nextIcon: this.config.page.nextIcon || \"»\",\n                lastIcon: this.config.page.lastIcon\n            };\n            var navigationItemCount = this.config.page.navigationItemCount;\n\n            page[\"@paging\"] = function () {\n                var returns = [],\n                    startI = void 0,\n                    endI = void 0;\n\n                startI = page.currentPage - Math.floor(navigationItemCount / 2);\n                if (startI < 0) startI = 0;\n                endI = page.currentPage + navigationItemCount;\n                if (endI > page.totalPages) endI = page.totalPages;\n\n                if (endI - startI > navigationItemCount) {\n                    endI = startI + navigationItemCount;\n                }\n\n                if (endI - startI < navigationItemCount) {\n                    startI = endI - navigationItemCount;\n                }\n                if (startI < 0) startI = 0;\n\n                for (var p = startI, l = endI; p < l; p++) {\n                    returns.push({ 'pageNo': p + 1, 'selected': page.currentPage == p });\n                }\n                return returns;\n            }();\n\n            if (page[\"@paging\"].length > 0) {\n                page.hasPage = true;\n            }\n\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\n                onclickPageMove.call(self, this.getAttribute(\"data-ax5grid-page-move\"));\n            });\n        } else {\n            this.$[\"page\"][\"navigation\"].empty();\n        }\n    };\n\n    var statusUpdate = function statusUpdate() {\n        if (!this.config.page.statusDisplay) {\n            return;\n        }\n\n        var fromRowIndex = this.xvar.virtualPaintStartRowIndex;\n        var toRowIndex = this.xvar.virtualPaintStartRowIndex + this.xvar.virtualPaintRowCount;\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\n        var totalElements = this.xvar.dataRowCount;\n\n        if (toRowIndex > totalElements) {\n            toRowIndex = totalElements;\n        }\n\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\n            fromRowIndex: U.number(fromRowIndex + 1, { \"money\": true }),\n            toRowIndex: U.number(toRowIndex, { \"money\": true }),\n            totalElements: U.number(totalElements, { \"money\": true }),\n            dataRowCount: totalElements !== this.xvar.dataRealRowCount ? U.number(this.xvar.dataRealRowCount, { \"money\": true }) : false,\n            progress: this.appendProgress ? this.config.appendProgressIcon : \"\"\n        }));\n    };\n\n    GRID.page = {\n        navigationUpdate: navigationUpdate,\n        statusUpdate: statusUpdate\n    };\n})();\n// ax5.ui.grid.scroller\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    var convertScrollPosition = {\n        \"vertical\": function vertical(css, _var) {\n            var _content_height = _var._content_height - _var._panel_height,\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n                top = _content_height * css.top / _scroller_height;\n\n            if (top < 0) top = 0;else if (_content_height < top) {\n                top = _content_height;\n            }\n            return {\n                top: -top\n            };\n        },\n        \"horizontal\": function horizontal(css, _var) {\n            var _content_width = _var._content_width - _var._panel_width,\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n                left = _content_width * css.left / _scroller_width;\n\n            if (left < 0) left = 0;else if (_content_width < left) {\n                left = _content_width;\n            }\n            return {\n                left: -left\n            };\n        }\n    };\n\n    var convertScrollBarPosition = {\n        \"vertical\": function vertical(_top, _var) {\n\n            var self = this,\n                type = \"vertical\",\n                _content_height = _var._content_height - _var._panel_height,\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n                top = _scroller_height * _top / _content_height,\n                scrollPositon = void 0;\n\n            if (-top > _scroller_height) {\n                top = -_scroller_height;\n\n                scrollPositon = convertScrollPosition[type].call(this, { top: -top }, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.body.scrollTo.call(self, scrollPositon);\n\n                /*\r\n                if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\r\n                this.xvar.scrollTimer = setTimeout(function () {\r\n                    GRID.body.scrollTo.call(self, scrollPositon);\r\n                });\r\n                */\n            }\n\n            return -top;\n        },\n        \"horizontal\": function horizontal(_left, _var) {\n            var self = this,\n                type = \"horizontal\",\n                _content_width = _var._content_width - _var._panel_width,\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n                left = _scroller_width * _left / _content_width,\n                scrollPositon = void 0;\n\n            if (-left > _scroller_width) {\n                left = -_scroller_width;\n                scrollPositon = convertScrollPosition[type].call(this, { left: -left }, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.header.scrollTo.call(self, scrollPositon);\n                GRID.body.scrollTo.call(self, scrollPositon);\n\n                /*\r\n                if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\r\n                this.xvar.scrollTimer = setTimeout(function () {\r\n                  });\r\n                */\n            }\n\n            return -left;\n        }\n    };\n\n    var scrollBarMover = {\n        \"click\": function click(track, bar, type, e) {\n\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n            if (new Date().getTime() - GRID.scroller.moveout_timer < 20) {\n                return false;\n            }\n\n            var self = this,\n                trackOffset = track.offset(),\n                barBox = {\n                width: bar.outerWidth(), height: bar.outerHeight()\n            },\n                trackBox = {\n                width: track.innerWidth(), height: track.innerHeight()\n            },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                \"vertical\": function vertical(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newTop = mouseObj.clientY - trackOffset.top;\n                    if (newTop < 0) {\n                        newTop = 0;\n                    } else if (newTop + barBox.height > trackBox.height) {\n                        newTop = trackBox.height - barBox.height;\n                    }\n                    return { top: newTop };\n                },\n                \"horizontal\": function horizontal(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newLeft = mouseObj.clientX - trackOffset.left;\n                    if (newLeft < 0) {\n                        newLeft = 0;\n                    } else if (newLeft + barBox.width > trackBox.width) {\n                        newLeft = trackBox.width - barBox.width;\n                    }\n                    return { left: newLeft };\n                }\n            },\n                css = getScrollerPosition[type](e);\n\n            bar.css(css);\n\n            var scrollPositon = convertScrollPosition[type].call(self, css, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            });\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n            GRID.body.scrollTo.call(self, scrollPositon);\n\n            scrollPositon = null;\n        },\n        \"on\": function on(track, bar, type, e) {\n            var self = this,\n                barOffset = bar.position(),\n                barBox = {\n                width: bar.outerWidth(), height: bar.outerHeight()\n            },\n                trackBox = {\n                width: track.innerWidth(), height: track.innerHeight()\n            },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                \"vertical\": function vertical(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newTop = barOffset.top + self.xvar.__da;\n                    if (newTop < 0) {\n                        newTop = 0;\n                    } else if (newTop + barBox.height > trackBox.height) {\n                        newTop = trackBox.height - barBox.height;\n                    }\n                    return { top: newTop };\n                },\n                \"horizontal\": function horizontal(e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    // track을 벗어 나지 안도록 범위 체크\n                    var newLeft = barOffset.left + self.xvar.__da;\n                    if (newLeft < 0) {\n                        newLeft = 0;\n                    } else if (newLeft + barBox.width > trackBox.width) {\n                        newLeft = trackBox.width - barBox.width;\n                    }\n                    return { left: newLeft };\n                }\n            };\n\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body).bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                var css = getScrollerPosition[type](e);\n                bar.css(css);\n\n                var scrollPositon = convertScrollPosition[type].call(self, css, {\n                    _content_width: _content_width,\n                    _content_height: _content_height,\n                    _panel_width: _panel_width,\n                    _panel_height: _panel_height,\n                    _horizontal_scroller_width: _horizontal_scroller_width,\n                    _vertical_scroller_height: _vertical_scroller_height,\n                    verticalScrollBarHeight: verticalScrollBarHeight,\n                    horizontalScrollBarWidth: horizontalScrollBarWidth\n                });\n\n                if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n\n                if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                self.xvar.scrollTimer = setTimeout(function () {\n                    GRID.body.scrollTo.call(self, scrollPositon);\n                });\n            }).bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                scrollBarMover.off.call(self);\n            }).bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                scrollBarMover.off.call(self);\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n            GRID.scroller.moveout_timer = new Date().getTime();\n\n            jQuery(document.body).unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId).unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId).unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n\n    var scrollContentMover = {\n        \"wheel\": function wheel(delta) {\n            var self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth;\n\n            if (isNaN(_content_height) || isNaN(_content_width)) {\n                return false;\n            }\n\n            var newLeft = void 0,\n                newTop = void 0,\n                _top_is_end = false,\n                _left_is_end = false;\n\n            newLeft = _body_scroll_position.left - delta.x;\n            newTop = _body_scroll_position.top - delta.y;\n\n            // newTop이 범위를 넘었는지 체크\n            if (newTop >= 0) {\n                newTop = 0;\n                _top_is_end = true;\n            } else if (newTop <= _panel_height - _content_height) {\n                newTop = _panel_height - _content_height;\n                if (newTop >= 0) newTop = 0;\n                _top_is_end = true;\n            } else {\n                if (delta.y == 0) _top_is_end = true;\n            }\n\n            // newLeft이 범위를 넘었는지 체크\n            if (newLeft >= 0) {\n                newLeft = 0;\n                _left_is_end = true;\n            } else if (newLeft <= _panel_width - _content_width) {\n                newLeft = _panel_width - _content_width;\n                if (newLeft >= 0) newLeft = 0;\n                _left_is_end = true;\n            } else {\n                if (delta.x == 0) _left_is_end = true;\n            }\n\n            resize.call(this);\n            GRID.header.scrollTo.call(self, { left: newLeft });\n\n            if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\n            this.xvar.scrollTimer = setTimeout(function () {\n                GRID.body.scrollTo.call(self, { left: newLeft, top: newTop });\n            }, 0);\n\n            return !_top_is_end || !_left_is_end;\n        },\n        \"on\": function on() {\n            var self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                getContentPosition = function getContentPosition(e) {\n                var mouseObj = GRID.util.getMousePosition(e),\n                    newLeft = void 0,\n                    newTop = void 0;\n\n                self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                // newTop이 범위를 넘었는지 체크\n                if (newTop >= 0) {\n                    newTop = 0;\n                } else if (newTop <= _panel_height - _content_height) {\n                    newTop = _panel_height - _content_height;\n                    if (newTop >= 0) newTop = 0;\n                }\n\n                // newLeft이 범위를 넘었는지 체크\n                if (newLeft >= 0) {\n                    newLeft = 0;\n                } else if (newLeft <= _panel_width - _content_width) {\n                    newLeft = _panel_width - _content_width;\n                    if (newLeft >= 0) newLeft = 0;\n                }\n\n                return {\n                    left: newLeft, top: newTop\n                };\n            };\n\n            this.xvar.__x_da = 0; // 이동량 변수 초기화\n            this.xvar.__y_da = 0; // 계산이 잘못 될까바\n            this.xvar.touchmoved = false;\n\n            jQuery(document.body).on(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\n                var css = getContentPosition(e);\n\n                resize.call(self);\n                if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                self.xvar.scrollTimer = setTimeout(function () {\n                    GRID.header.scrollTo.call(self, { left: css.left });\n                    GRID.body.scrollTo.call(self, css, \"noRepaint\");\n                }, 0);\n                U.stopEvent(e.originalEvent);\n                self.xvar.touchmoved = true;\n            }).on(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\n                if (self.xvar.touchmoved) {\n                    var css = getContentPosition(e);\n\n                    resize.call(self);\n                    if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                    self.xvar.scrollTimer = setTimeout(function () {\n                        GRID.header.scrollTo.call(self, { left: css.left });\n                        GRID.body.scrollTo.call(self, css);\n                    }, 0);\n\n                    U.stopEvent(e.originalEvent);\n                    scrollContentMover.off.call(self);\n                }\n            });\n\n            jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n        },\n        \"off\": function off() {\n\n            jQuery(document.body).off(\"touchmove\" + \".ax5grid-\" + this.instanceId).off(\"touchend\" + \".ax5grid-\" + this.instanceId);\n\n            jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n        }\n    };\n\n    var init = function init() {\n        var self = this,\n            margin = this.config.scroller.trackPadding;\n\n        if (margin == 0) {\n            this.$[\"scroller\"][\"vertical-bar\"].css({ width: this.config.scroller.size, left: -1 });\n            this.$[\"scroller\"][\"horizontal-bar\"].css({ height: this.config.scroller.size, top: -1 });\n        } else {\n            this.$[\"scroller\"][\"vertical-bar\"].css({ width: this.config.scroller.size - (margin + 1), left: margin / 2 });\n            this.$[\"scroller\"][\"horizontal-bar\"].css({ height: this.config.scroller.size - (margin + 1), top: margin / 2 });\n        }\n\n        this.$[\"scroller\"][\"vertical-bar\"].on(GRID.util.ENM[\"mousedown\"], function (e) {\n            this.xvar.mousePosition = GRID.util.getMousePosition(e);\n            scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n        }.bind(this)).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        this.$[\"scroller\"][\"vertical\"].on(\"click\", function (e) {\n            if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\n                scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }\n        }.bind(this));\n\n        this.$[\"scroller\"][\"horizontal-bar\"].on(GRID.util.ENM[\"mousedown\"], function (e) {\n            this.xvar.mousePosition = GRID.util.getMousePosition(e);\n            scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n        }.bind(this)).on(\"dragstart\", function (e) {\n            U.stopEvent(e);\n            return false;\n        });\n\n        this.$[\"scroller\"][\"horizontal\"].on(\"click\", function (e) {\n            if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\n                scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }\n        }.bind(this));\n\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', function (e) {\n            var E = e.originalEvent,\n                delta = { x: 0, y: 0 };\n\n            if (E.detail) {\n                delta.y = E.detail * 10;\n            } else {\n                if (typeof E.deltaY === \"undefined\") {\n                    delta.y = -E.wheelDelta;\n                    delta.x = 0;\n                } else {\n                    delta.y = E.deltaY;\n                    delta.x = E.deltaX;\n                }\n            }\n\n            if (scrollContentMover.wheel.call(this, delta)) {\n                U.stopEvent(e);\n            }\n        }.bind(this));\n\n        if (ax5.info.supportTouch) {\n            this.$[\"container\"][\"body\"].on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollContentMover.on.call(self);\n            });\n        }\n    };\n\n    var resize = function resize() {\n        var _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\n            _content_height = this.xvar.scrollContentHeight,\n            _content_width = this.xvar.scrollContentWidth,\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            height: verticalScrollBarHeight\n        });\n\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            width: horizontalScrollBarWidth\n        });\n\n        _vertical_scroller_height = null;\n        _horizontal_scroller_width = null;\n        _panel_height = null;\n        _panel_width = null;\n        _content_height = null;\n        _content_width = null;\n        verticalScrollBarHeight = null;\n        horizontalScrollBarWidth = null;\n    };\n\n    GRID.scroller = {\n        // 타이머\n        moveout_timer: new Date().getTime(),\n        init: init,\n        resize: resize\n    };\n})();\n// ax5.ui.grid.tmpl\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var main = function main() {\n        return \"<div data-ax5grid-container=\\\"root\\\" data-ax5grid-instance=\\\"{{instanceId}}\\\">\\n            <div data-ax5grid-container=\\\"hidden\\\">\\n                <textarea data-ax5grid-form=\\\"clipboard\\\"></textarea>\\n            </div>\\n            <div data-ax5grid-container=\\\"header\\\">\\n                <div data-ax5grid-panel=\\\"aside-header\\\"></div>\\n                <div data-ax5grid-panel=\\\"left-header\\\"></div>\\n                <div data-ax5grid-panel=\\\"header\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"header\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"right-header\\\"></div>\\n            </div>\\n            <div data-ax5grid-container=\\\"body\\\">\\n                <div data-ax5grid-panel=\\\"top-aside-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"top-left-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"top-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"top-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"top-right-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"aside-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"aside-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"left-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"left-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"right-body\\\">\\n                  <div data-ax5grid-panel-scroll=\\\"right-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"bottom-aside-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"bottom-left-body\\\"></div>\\n                <div data-ax5grid-panel=\\\"bottom-body\\\">\\n                    <div data-ax5grid-panel-scroll=\\\"bottom-body\\\"></div>\\n                </div>\\n                <div data-ax5grid-panel=\\\"bottom-right-body\\\"></div>\\n            </div>\\n            <div data-ax5grid-container=\\\"page\\\">\\n                <div data-ax5grid-page=\\\"holder\\\">\\n                    <div data-ax5grid-page=\\\"navigation\\\"></div>\\n                    <div data-ax5grid-page=\\\"status\\\"></div>\\n                </div>\\n            </div>\\n            <div data-ax5grid-container=\\\"scroller\\\">\\n                <div data-ax5grid-scroller=\\\"vertical\\\">\\n                    <div data-ax5grid-scroller=\\\"vertical-bar\\\"></div>    \\n                </div>\\n                <div data-ax5grid-scroller=\\\"horizontal\\\">\\n                    <div data-ax5grid-scroller=\\\"horizontal-bar\\\"></div>\\n                </div>\\n                <div data-ax5grid-scroller=\\\"corner\\\"></div>\\n            </div>\\n            <div data-ax5grid-resizer=\\\"vertical\\\"></div>\\n            <div data-ax5grid-resizer=\\\"horizontal\\\"></div>\\n        </div>\";\n    };\n\n    var page_navigation = function page_navigation() {\n        return \"<div data-ax5grid-page-navigation=\\\"holder\\\">\\n            {{#hasPage}}\\n            <div data-ax5grid-page-navigation=\\\"cell\\\">    \\n                {{#firstIcon}}<button type=\\\"button\\\" data-ax5grid-page-move=\\\"first\\\">{{{firstIcon}}}</button>{{/firstIcon}}\\n                <button type=\\\"button\\\" data-ax5grid-page-move=\\\"prev\\\">{{{prevIcon}}}</button>\\n            </div>\\n            <div data-ax5grid-page-navigation=\\\"cell-paging\\\">\\n                {{#@paging}}\\n                <button type=\\\"button\\\" data-ax5grid-page-move=\\\"{{pageNo}}\\\" data-ax5grid-page-selected=\\\"{{selected}}\\\">{{pageNo}}</button>\\n                {{/@paging}}\\n            </div>\\n            <div data-ax5grid-page-navigation=\\\"cell\\\">\\n                <button type=\\\"button\\\" data-ax5grid-page-move=\\\"next\\\">{{{nextIcon}}}</button>\\n                {{#lastIcon}}<button type=\\\"button\\\" data-ax5grid-page-move=\\\"last\\\">{{{lastIcon}}}</button>{{/lastIcon}}\\n            </div>\\n            {{/hasPage}}\\n        </div>\";\n    };\n\n    var page_status = function page_status() {\n        return \"<span>{{{progress}}} {{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>\";\n    };\n\n    GRID.tmpl = {\n        \"main\": main,\n        \"page_navigation\": page_navigation,\n        \"page_status\": page_status,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(GRID.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();\n// ax5.ui.grid.util\n(function () {\n\n    var GRID = ax5.ui.grid;\n\n    var U = ax5.util;\n\n    /**\r\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\r\n     * @param _table\r\n     * @param _frozenColumnIndex\r\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\r\n     */\n    var divideTableByFrozenColumnIndex = function divideTableByFrozenColumnIndex(_table, _frozenColumnIndex) {\n\n        var tempTable_l = { rows: [] },\n            tempTable_r = { rows: [] };\n\n        for (var r = 0, rl = _table.rows.length; r < rl; r++) {\n            var row = _table.rows[r];\n\n            tempTable_l.rows[r] = { cols: [] };\n            tempTable_r.rows[r] = { cols: [] };\n\n            for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                var col = jQuery.extend({}, row.cols[c]),\n                    colStartIndex = col.colIndex,\n                    colEndIndex = col.colIndex + col.colspan;\n\n                if (colStartIndex < _frozenColumnIndex) {\n                    if (colEndIndex <= _frozenColumnIndex) {\n                        // 좌측편에 변형없이 추가\n                        tempTable_l.rows[r].cols.push(col);\n                    } else {\n                        var leftCol = jQuery.extend({}, col),\n                            rightCol = jQuery.extend({}, leftCol);\n\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\n                        rightCol.colIndex = _frozenColumnIndex;\n                        rightCol.colspan = col.colspan - leftCol.colspan;\n\n                        tempTable_l.rows[r].cols.push(leftCol);\n                        if (rightCol.colspan) {\n                            tempTable_r.rows[r].cols.push(rightCol);\n                        }\n                    }\n                } else {\n                    // 오른편\n                    tempTable_r.rows[r].cols.push(col);\n                }\n\n                col = null;\n                colStartIndex = null;\n                colEndIndex = null;\n            }\n\n            row = null;\n        }\n\n        return {\n            leftData: tempTable_l,\n            rightData: tempTable_r\n        };\n    };\n\n    var getTableByStartEndColumnIndex = function getTableByStartEndColumnIndex(_table, _startColumnIndex, _endColumnIndex) {\n\n        var tempTable = { rows: [] };\n        for (var r = 0, rl = _table.rows.length; r < rl; r++) {\n            var row = _table.rows[r];\n\n            tempTable.rows[r] = { cols: [] };\n            for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                var col = jQuery.extend({}, row.cols[c]),\n                    colStartIndex = col.colIndex,\n                    colEndIndex = col.colIndex + col.colspan;\n\n                if (_startColumnIndex <= colStartIndex || colEndIndex <= _endColumnIndex) {\n                    if (_startColumnIndex <= colStartIndex && colEndIndex <= _endColumnIndex) {\n                        // 변형없이 추가\n                        tempTable.rows[r].cols.push(col);\n                    } else if (_startColumnIndex > colStartIndex && colEndIndex > _startColumnIndex) {\n                        // 앞에서 걸친경우\n                        col.colspan = colEndIndex - _startColumnIndex;\n                        tempTable.rows[r].cols.push(col);\n                    } else if (colEndIndex > _endColumnIndex && colStartIndex <= _endColumnIndex) {\n                        tempTable.rows[r].cols.push(col);\n                    }\n                }\n            }\n        }\n\n        return tempTable;\n    };\n\n    var getMousePosition = function getMousePosition(e) {\n        var mouseObj = void 0,\n            originalEvent = e.originalEvent ? e.originalEvent : e;\n\n        mouseObj = 'changedTouches' in originalEvent && originalEvent.changedTouches ? originalEvent.changedTouches[0] : originalEvent;\n        // clientX, Y 쓰면 스크롤에서 문제 발생\n        return {\n            clientX: mouseObj.pageX,\n            clientY: mouseObj.pageY\n        };\n    };\n\n    var ENM = {\n        \"mousedown\": ax5.info.supportTouch ? \"touchstart\" : \"mousedown\",\n        \"mousemove\": ax5.info.supportTouch ? \"touchmove\" : \"mousemove\",\n        \"mouseup\": ax5.info.supportTouch ? \"touchend\" : \"mouseup\"\n    };\n\n    var makeHeaderTable = function makeHeaderTable(_columns) {\n        var columns = U.deepCopy(_columns),\n            cfg = this.config,\n            table = {\n            rows: []\n        },\n            colIndex = 0,\n            maekRows = function maekRows(_columns, depth, parentField) {\n            var row = { cols: [] };\n            var i = 0,\n                l = _columns.length;\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                var colspan = 1;\n\n                if (!field.hidden) {\n                    field.colspan = 1;\n                    field.rowspan = 1;\n\n                    field.rowIndex = depth;\n                    field.colIndex = function () {\n                        if (!parentField) {\n                            return colIndex++;\n                        } else {\n                            colIndex = parentField.colIndex + i + 1;\n                            return parentField.colIndex + i;\n                        }\n                    }();\n\n                    row.cols.push(field);\n\n                    if ('columns' in field) {\n                        colspan = maekRows(field.columns, depth + 1, field);\n                    } else {\n                        field.width = 'width' in field ? field.width : cfg.columnMinWidth;\n                    }\n                    field.colspan = colspan;\n                } else {}\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = { cols: [] };\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return row.cols.length - 1 + colspan;\n            } else {\n                return colspan;\n            }\n        };\n\n        maekRows(columns, 0);\n\n        // set rowspan\n        for (var r = 0, rl = table.rows.length; r < rl; r++) {\n            for (var c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\n                if (!('columns' in table.rows[r].cols[c])) {\n                    table.rows[r].cols[c].rowspan = rl - r;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    var makeBodyRowTable = function makeBodyRowTable(_columns) {\n        var columns = U.deepCopy(_columns),\n            table = {\n            rows: []\n        },\n            colIndex = 0,\n            maekRows = function maekRows(_columns, depth, parentField) {\n            var row = { cols: [] },\n                i = 0,\n                l = _columns.length,\n                colspan = 1;\n\n            var selfMakeRow = function selfMakeRow(__columns) {\n                var i = 0,\n                    l = __columns.length;\n                for (; i < l; i++) {\n                    var field = __columns[i],\n                        _colspan = 1;\n\n                    if (!field.hidden) {\n\n                        if ('key' in field) {\n                            field.colspan = 1;\n                            field.rowspan = 1;\n\n                            field.rowIndex = depth;\n                            field.colIndex = function () {\n                                if (!parentField) {\n                                    return colIndex++;\n                                } else {\n                                    colIndex = parentField.colIndex + i + 1;\n                                    return parentField.colIndex + i;\n                                }\n                            }();\n\n                            row.cols.push(field);\n                            if ('columns' in field) {\n                                _colspan = maekRows(field.columns, depth + 1, field);\n                            }\n                            field.colspan = _colspan;\n                        } else {\n                            if ('columns' in field) {\n                                selfMakeRow(field.columns, depth);\n                            }\n                        }\n                    } else {}\n                }\n            };\n\n            for (; i < l; i++) {\n                var field = _columns[i];\n                colspan = 1;\n\n                if (!field.hidden) {\n\n                    if ('key' in field) {\n                        field.colspan = 1;\n                        field.rowspan = 1;\n\n                        field.rowIndex = depth;\n                        field.colIndex = function () {\n                            if (!parentField) {\n                                return colIndex++;\n                            } else {\n                                colIndex = parentField.colIndex + i + 1;\n                                return parentField.colIndex + i;\n                            }\n                        }();\n\n                        row.cols.push(field);\n                        if ('columns' in field) {\n                            colspan = maekRows(field.columns, depth + 1, field);\n                        }\n                        field.colspan = colspan;\n                    } else {\n                        if ('columns' in field) {\n                            selfMakeRow(field.columns, depth);\n                        }\n                    }\n                } else {}\n\n                field = null;\n            }\n\n            if (row.cols.length > 0) {\n                if (!table.rows[depth]) {\n                    table.rows[depth] = { cols: [] };\n                }\n                table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                return row.cols.length - 1 + colspan;\n            } else {\n                return colspan;\n            }\n        };\n\n        maekRows(columns, 0);\n\n        (function (table) {\n            // set rowspan\n            for (var r = 0, rl = table.rows.length; r < rl; r++) {\n                var row = table.rows[r];\n                for (var c = 0, cl = row.cols.length; c < cl; c++) {\n                    var col = row.cols[c];\n                    if (!('columns' in col)) {\n                        col.rowspan = rl - r;\n                    }\n                    col = null;\n                }\n                row = null;\n            }\n        })(table);\n\n        return table;\n    };\n\n    var makeBodyRowMap = function makeBodyRowMap(_table) {\n        var map = {};\n        _table.rows.forEach(function (row) {\n            row.cols.forEach(function (col) {\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\n            });\n        });\n        return map;\n    };\n\n    var makeFootSumTable = function makeFootSumTable(_footSumColumns) {\n        var table = {\n            rows: []\n        };\n\n        for (var r = 0, rl = _footSumColumns.length; r < rl; r++) {\n            var footSumRow = _footSumColumns[r],\n                addC = 0;\n\n            table.rows[r] = { cols: [] };\n\n            for (var c = 0, cl = footSumRow.length; c < cl; c++) {\n                if (addC > this.colGroup.length) break;\n                var colspan = footSumRow[c].colspan || 1;\n                if (footSumRow[c].label || footSumRow[c].key) {\n                    table.rows[r].cols.push({\n                        colspan: colspan,\n                        rowspan: 1,\n                        colIndex: addC,\n                        columnAttr: \"sum\",\n                        align: footSumRow[c].align,\n                        label: footSumRow[c].label,\n                        key: footSumRow[c].key,\n                        collector: footSumRow[c].collector,\n                        formatter: footSumRow[c].formatter\n                    });\n                } else {\n                    table.rows[r].cols.push({\n                        colIndex: addC,\n                        colspan: colspan,\n                        rowspan: 1,\n                        label: \"&nbsp;\"\n                    });\n                }\n                addC += colspan;\n                colspan = null;\n            }\n\n            if (addC < this.colGroup.length) {\n                for (var _c = addC; _c < this.colGroup.length; _c++) {\n                    table.rows[r].cols.push({\n                        colIndex: _c,\n                        colspan: 1,\n                        rowspan: 1,\n                        label: \"&nbsp;\"\n                    });\n                }\n            }\n            footSumRow = null;\n            addC = null;\n        }\n\n        return table;\n    };\n\n    var makeBodyGroupingTable = function makeBodyGroupingTable(_bodyGroupingColumns) {\n        var table = {\n            rows: []\n        },\n            r = 0,\n            addC = 0;\n\n        table.rows[r] = { cols: [] };\n        for (var _c2 = 0, cl = _bodyGroupingColumns.length; _c2 < cl; _c2++) {\n            if (addC > this.columns.length) break;\n            var colspan = _bodyGroupingColumns[_c2].colspan || 1;\n            if (_bodyGroupingColumns[_c2].label || _bodyGroupingColumns[_c2].key) {\n                table.rows[r].cols.push({\n                    colspan: colspan,\n                    rowspan: 1,\n                    rowIndex: 0,\n                    colIndex: addC,\n                    columnAttr: \"default\",\n                    align: _bodyGroupingColumns[_c2].align,\n                    label: _bodyGroupingColumns[_c2].label,\n                    key: _bodyGroupingColumns[_c2].key,\n                    collector: _bodyGroupingColumns[_c2].collector,\n                    formatter: _bodyGroupingColumns[_c2].formatter\n                });\n            } else {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: addC,\n                    colspan: colspan,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n            addC += colspan;\n        }\n\n        if (addC < this.colGroup.length) {\n            for (var c = addC; c < this.colGroup.length; c++) {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: c,\n                    colspan: 1,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n        }\n\n        return table;\n    };\n\n    var findPanelByColumnIndex = function findPanelByColumnIndex(_dindex, _colIndex, _rowIndex) {\n        var _containerPanelName = void 0,\n            _isScrollPanel = false,\n            _panels = [];\n\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\n        _panels.push(\"body\");\n\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\n            _containerPanelName = _panels.join(\"-\");\n            _panels.push(\"scroll\");\n            _isScrollPanel = true;\n        }\n\n        return {\n            panelName: _panels.join(\"-\"),\n            containerPanelName: _containerPanelName,\n            isScrollPanel: _isScrollPanel\n        };\n    };\n\n    var getRealPathForDataItem = function getRealPathForDataItem(_dataPath) {\n        var path = [],\n            _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\n\n        _path.forEach(function (n) {\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n        });\n        _path = null;\n        return path.join(\"\");\n    };\n\n    GRID.util = {\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\n        getTableByStartEndColumnIndex: getTableByStartEndColumnIndex,\n        getMousePosition: getMousePosition,\n        ENM: ENM,\n        makeHeaderTable: makeHeaderTable,\n        makeBodyRowTable: makeBodyRowTable,\n        makeBodyRowMap: makeBodyRowMap,\n        makeFootSumTable: makeFootSumTable,\n        makeBodyGroupingTable: makeBodyGroupingTable,\n        findPanelByColumnIndex: findPanelByColumnIndex,\n        getRealPathForDataItem: getRealPathForDataItem\n    };\n})();","/*\r\n * Copyright (c) 2016. tom@axisj.com\r\n * - github.com/thomasjang\r\n * - www.axisj.com\r\n */\r\n\r\n// ax5.ui.grid\r\n(function () {\r\n\r\n    const UI = ax5.ui;\r\n    const U = ax5.util;\r\n    let GRID;\r\n\r\n    UI.addClass({\r\n        className: \"grid\"\r\n    }, (function () {\r\n        /**\r\n         * @class ax5grid\r\n         * @classdesc\r\n         * @author tom@axisj.com\r\n         * @example\r\n         * ```\r\n         * var myGrid = new ax5.ui.grid();\r\n         * ```\r\n         */\r\n        return function () {\r\n            let self = this,\r\n                cfg,\r\n                ctrlKeys = {\r\n                    \"33\": \"KEY_PAGEUP\",\r\n                    \"34\": \"KEY_PAGEDOWN\",\r\n                    \"35\": \"KEY_END\",\r\n                    \"36\": \"KEY_HOME\",\r\n                    \"37\": \"KEY_LEFT\",\r\n                    \"38\": \"KEY_UP\",\r\n                    \"39\": \"KEY_RIGHT\",\r\n                    \"40\": \"KEY_DOWN\"\r\n                };\r\n\r\n            this.instanceId = ax5.getGuid();\r\n            this.config = {\r\n                theme: 'default',\r\n                animateTime: 250,\r\n                debounceTime: 250,\r\n                appendDebouncer: null,\r\n                appendDebounceTimes: 0,\r\n                appendProgressIcon: '...',\r\n                appendProgress: false,\r\n\r\n                // 틀고정 속성\r\n                frozenColumnIndex: 0,\r\n                frozenRowIndex: 0,\r\n                showLineNumber: false,\r\n                showRowSelector: false,\r\n                multipleSelect: true,\r\n                virtualScrollY: true,\r\n                virtualScrollX: true,\r\n                virtualScrollYCountMargin: 0,\r\n                virtualScrollAccelerated: false,\r\n                height: 0,\r\n                columnMinWidth: 100,\r\n                lineNumberColumnWidth: 30,\r\n                rowSelectorColumnWidth: 26,\r\n                sortable: undefined,\r\n                remoteSort: false,\r\n\r\n                header: {\r\n                    display: true,\r\n                    align: false,\r\n                    columnHeight: 26,\r\n                    columnPadding: 3,\r\n                    columnBorderWidth: 1\r\n                },\r\n                body: {\r\n                    align: false,\r\n                    columnHeight: 26,\r\n                    columnPadding: 3,\r\n                    columnBorderWidth: 1,\r\n                    grouping: false,\r\n                    mergeCells: false\r\n                },\r\n                rightSum: false,\r\n                footSum: false,\r\n                page: {\r\n                    height: 25,\r\n                    display: true,\r\n                    statusDisplay: true,\r\n                    navigationItemCount: 5\r\n                },\r\n                scroller: {\r\n                    size: 15,\r\n                    barMinSize: 15,\r\n                    trackPadding: 4\r\n                },\r\n                columnKeys: {\r\n                    selected: '__selected__',\r\n                    modified: '__modified__',\r\n                    deleted: '__deleted__',\r\n                    disableSelection: '__disable_selection__'\r\n                },\r\n                tree: {\r\n                    use: false,\r\n                    hashDigit: 8,\r\n                    indentWidth: 10,\r\n                    arrowWidth: 15,\r\n                    iconWidth: 18,\r\n                    icons: {\r\n                        openedArrow: '▾',\r\n                        collapsedArrow: '▸',\r\n                        groupIcon: '⊚',\r\n                        collapsedGroupIcon: '⊚',\r\n                        itemIcon: '⊙'\r\n                    },\r\n                    columnKeys: {\r\n                        parentKey: \"pid\",\r\n                        selfKey: \"id\",\r\n                        collapse: \"collapse\",\r\n                        hidden: \"hidden\",\r\n                        parentHash: \"__hp__\",\r\n                        selfHash: \"__hs__\",\r\n                        children: \"__children__\",\r\n                        depth: \"__depth__\",\r\n                    }\r\n                }\r\n            };\r\n            this.xvar = {\r\n                bodyTrHeight: 0, // 한줄의 높이\r\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\r\n                scrollContentHeight: 0, // 스크롤 된 내용물의 높이\r\n                scrollTimer: null\r\n            };\r\n\r\n            // 그리드 데이터셋\r\n            this.columns = []; // config.columns에서 복제된 오브젝트\r\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\r\n            this.footSumColumns = [];\r\n            this.bodyGrouping = {};\r\n\r\n            this.list = []; // 그리드의 데이터\r\n            this.proxyList = null; // 그리드 데이터의 대리자\r\n            this.page = {}; // 그리드의 페이지 정보\r\n            this.selectedDataIndexs = [];\r\n            this.deletedList = [];\r\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\r\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\r\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\r\n            this.isInlineEditing = false;\r\n            this.inlineEditing = {};\r\n            this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵\r\n            this.gridContextMenu = null; // contentMenu 의 인스턴스\r\n\r\n            // header\r\n            this.headerTable = {};\r\n            this.leftHeaderData = {};\r\n            this.headerData = {};\r\n            this.rightHeaderData = {};\r\n\r\n            // body\r\n            this.bodyRowTable = {};\r\n            this.leftBodyRowData = {};\r\n            this.bodyRowData = {};\r\n            this.rightBodyRowData = {};\r\n            this.bodyRowMap = {};\r\n\r\n            this.bodyGroupingTable = {};\r\n            this.leftBodyGroupingData = {};\r\n            this.bodyGroupingData = {};\r\n            this.rightBodyGroupingData = {};\r\n            this.bodyGroupingMap = {};\r\n\r\n            // footSum\r\n            this.footSumTable = {}; // footSum의 출력레이아웃\r\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\r\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\r\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\r\n\r\n            cfg = this.config;\r\n\r\n            const initGrid = function () {\r\n                // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\r\n\r\n                let data = {\r\n                    instanceId: this.id\r\n                };\r\n\r\n                this.$target.html(GRID.tmpl.get(\"main\", data));\r\n\r\n                // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\r\n                this.$ = {\r\n                    \"container\": {\r\n                        \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\r\n                        \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\r\n                        \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\r\n                        \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\r\n                        \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\r\n                        \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\r\n                    },\r\n                    \"panel\": {\r\n                        \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\r\n                        \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\r\n                        \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\r\n                        \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\r\n                        \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\r\n                        \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\r\n                        \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\r\n                        \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\r\n                        \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\r\n                        \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\r\n                        \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\r\n                        \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\r\n                        \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\r\n                        \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\r\n                        \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\r\n                        \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\r\n                        \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\r\n                        \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\r\n                        \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\r\n                        \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\r\n                        \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\r\n                        \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\r\n                        \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\r\n                    },\r\n                    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\r\n                    \"scroller\": {\r\n                        \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\r\n                        \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\r\n                        \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\r\n                        \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\r\n                        \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\r\n                    },\r\n                    \"page\": {\r\n                        \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\r\n                        \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\r\n                    },\r\n                    \"form\": {\r\n                        \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\r\n                    },\r\n                    \"resizer\": {\r\n                        \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\r\n                        \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\r\n                    }\r\n                };\r\n\r\n                this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\r\n\r\n                return this;\r\n            };\r\n            const initColumns = function (_columns) {\r\n                this.columns = U.deepCopy(_columns);\r\n                this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\r\n                this.xvar.frozenColumnIndex = cfg.frozenColumnIndex || 0;\r\n\r\n                this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\r\n                this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\r\n                // 바디에 표현될 한줄의 높이를 계산합니다.\r\n                this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\r\n\r\n                let colGroupMap = {};\r\n                for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\r\n                    let row = this.headerTable.rows[r];\r\n                    for (let c = 0, cl = row.cols.length; c < cl; c++) {\r\n                        colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\r\n                    }\r\n                }\r\n\r\n                this.colGroup = [];\r\n                for (var k in colGroupMap) {\r\n                    this.colGroup.push(colGroupMap[k]);\r\n                }\r\n\r\n                return this;\r\n            };\r\n            const onResetColumns = function () {\r\n                initColumns.call(this, this.config.columns);\r\n                resetColGroupWidth.call(this);\r\n                if (this.config.footSum) {\r\n                    initFootSum.call(this, this.config.footSum);\r\n                    this.needToPaintSum = true;\r\n                }\r\n                if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\r\n                alignGrid.call(this, true);\r\n                GRID.header.repaint.call(this, true);\r\n                GRID.body.repaint.call(this, true);\r\n                GRID.scroller.resize.call(this);\r\n            };\r\n            const resetColGroupWidth = function () {\r\n                /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\r\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (function () {\r\n                            let width = 0;\r\n                            if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\r\n                            if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\r\n                            width += cfg.scroller.size;\r\n                            return width;\r\n                        })(),\r\n                    totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\r\n                    colGroup = this.colGroup,\r\n                    i, l;\r\n\r\n                for (i = 0, l = colGroup.length; i < l; i++) {\r\n                    if (U.isNumber(colGroup[i].width)) {\r\n                        totalWidth += colGroup[i]._width = colGroup[i].width;\r\n                    } else if (colGroup[i].width === \"*\") {\r\n                        autoWidthColgroupIndexs.push(i);\r\n                    } else if (U.right(colGroup[i].width, 1) === \"%\") {\r\n                        totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\r\n                    }\r\n                }\r\n                if (autoWidthColgroupIndexs.length > 0) {\r\n                    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\r\n                    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\r\n                        colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\r\n                    }\r\n                }\r\n            };\r\n            const initFootSum = function (_footSum) {\r\n                if (U.isArray(_footSum)) {\r\n                    this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\r\n                } else {\r\n                    this.footSumColumns = [];\r\n                    this.footSumTable = {};\r\n                }\r\n            };\r\n            const initBodyGroup = function (_grouping) {\r\n                let grouping = jQuery.extend({}, _grouping);\r\n                if (\"by\" in grouping && \"columns\" in grouping) {\r\n                    this.bodyGrouping = {\r\n                        by: grouping.by,\r\n                        columns: grouping.columns\r\n                    };\r\n                    this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\r\n                    this.sortInfo = (function () {\r\n                        let sortInfo = {};\r\n                        for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\r\n                            sortInfo[this.bodyGrouping.by[k]] = {\r\n                                orderBy: \"asc\",\r\n                                seq: k,\r\n                                fixed: true\r\n                            };\r\n                            for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\r\n                                if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\r\n                                    this.colGroup[c].sort = \"asc\";\r\n                                    this.colGroup[c].sortFixed = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        return sortInfo;\r\n                    }).call(this);\r\n                } else {\r\n                    cfg.body.grouping = false;\r\n                }\r\n            };\r\n            const alignGrid = function (_isFirst) {\r\n                // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\r\n                if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\r\n                    return false;\r\n                }\r\n\r\n                if (!this.config.height) {\r\n                    this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\r\n                }\r\n\r\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\r\n                    CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\r\n                    CT_INNER_WIDTH = CT_WIDTH,\r\n                    CT_INNER_HEIGHT = CT_HEIGHT,\r\n                    asidePanelWidth = cfg.asidePanelWidth = (function () {\r\n                        let width = 0;\r\n                        if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\r\n                        if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\r\n                        return width;\r\n                    })(),\r\n                    frozenPanelWidth = cfg.frozenPanelWidth = (function (colGroup, endIndex) {\r\n                        let width = 0;\r\n                        for (let i = 0, l = endIndex; i < l; i++) {\r\n                            width += colGroup[i]._width;\r\n                        }\r\n                        return width;\r\n                    })(this.colGroup, cfg.frozenColumnIndex),\r\n                    verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\r\n\r\n                // todo : 우측 함계컬럼 너비 계산\r\n                let rightPanelWidth = 0,\r\n                    frozenRowHeight = (function (bodyTrHeight) {\r\n                        return cfg.frozenRowIndex * bodyTrHeight;\r\n                    })(this.xvar.bodyTrHeight),\r\n                    footSumHeight = (function (bodyTrHeight) {\r\n                        return this.footSumColumns.length * bodyTrHeight;\r\n                    }).call(this, this.xvar.bodyTrHeight),\r\n                    headerHeight = (cfg.header.display) ? this.headerTable.rows.length * cfg.header.columnHeight : 0,\r\n                    pageHeight = (cfg.page.display) ? cfg.page.height : 0;\r\n\r\n                (function () {\r\n                    verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\r\n                    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\r\n                    horizontalScrollerHeight = (function () {\r\n                        let totalColGroupWidth = 0;\r\n                        // aside 빼고 너비\r\n                        // 수직 스크롤이 있으면 또 빼고 비교\r\n                        let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\r\n                        for (let i = 0, l = this.colGroup.length; i < l; i++) {\r\n                            totalColGroupWidth += this.colGroup[i]._width;\r\n                        }\r\n                        return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\r\n                    }).call(this);\r\n\r\n                    if (horizontalScrollerHeight > 0) {\r\n                        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\r\n                    }\r\n                }).call(this);\r\n\r\n                // 수평 너비 결정\r\n                CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\r\n                // 수직 스크롤러의 높이 결정.\r\n                CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\r\n\r\n                bodyHeight = CT_INNER_HEIGHT - headerHeight;\r\n\r\n                let panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\r\n                    let css = {},\r\n                        isHide = false;\r\n\r\n                    switch (hPosition) {\r\n                        case \"aside\":\r\n                            if (asidePanelWidth === 0) {\r\n                                isHide = true;\r\n                            } else {\r\n                                css[\"left\"] = 0;\r\n                                css[\"width\"] = asidePanelWidth;\r\n                            }\r\n                            break;\r\n                        case \"left\":\r\n                            if (cfg.frozenColumnIndex === 0) {\r\n                                isHide = true;\r\n                            } else {\r\n                                css[\"left\"] = asidePanelWidth;\r\n                                css[\"width\"] = frozenPanelWidth;\r\n                            }\r\n                            break;\r\n                        case \"right\":\r\n                            if (!cfg.rightSum) {\r\n                                isHide = true;\r\n                            } else {\r\n\r\n                            }\r\n                            break;\r\n                        default:\r\n                            if (containerType !== \"page\") {\r\n                                if (cfg.frozenColumnIndex === 0) {\r\n                                    css[\"left\"] = asidePanelWidth;\r\n                                } else {\r\n                                    css[\"left\"] = frozenPanelWidth + asidePanelWidth;\r\n                                }\r\n                                css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    if (isHide) {\r\n                        panel.hide();\r\n                        // 프로세스 중지\r\n                        return this;\r\n                    }\r\n\r\n                    if (containerType === \"body\") {\r\n                        switch (vPosition) {\r\n                            case \"top\":\r\n                                if (cfg.frozenRowIndex == 0) {\r\n                                    isHide = true;\r\n                                } else {\r\n                                    css[\"top\"] = 0;\r\n                                    css[\"height\"] = frozenRowHeight;\r\n                                }\r\n                                break;\r\n                            case \"bottom\":\r\n                                if (!cfg.footSum) {\r\n                                    isHide = true;\r\n                                } else {\r\n                                    css[\"top\"] = bodyHeight - footSumHeight;\r\n                                    css[\"height\"] = footSumHeight; // footSum height\r\n                                }\r\n                                break;\r\n                            default:\r\n                                css[\"top\"] = frozenRowHeight;\r\n                                css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\r\n\r\n                                break;\r\n                        }\r\n                    } else if (containerType === \"header\") {\r\n                        css[\"height\"] = headerHeight;\r\n                    } else if (containerType === \"page\") {\r\n                        if (pageHeight == 0) {\r\n                            isHide = true;\r\n                        } else {\r\n                            css[\"height\"] = pageHeight;\r\n\r\n                        }\r\n                    }\r\n\r\n                    if (isHide) {\r\n                        panel.hide();\r\n                        // 프로세스 중지\r\n                        return this;\r\n                    }\r\n\r\n                    panel.show().css(css);\r\n                    return this;\r\n                };\r\n                let scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\r\n                    let css = {},\r\n                        isHide = false;\r\n\r\n                    switch (containerType) {\r\n                        case \"vertical\":\r\n                            if (scrollerWidth > 0) {\r\n                                css[\"width\"] = scrollerWidth;\r\n                                css[\"height\"] = CT_INNER_HEIGHT;\r\n                                css[\"bottom\"] = scrollerHeight + pageHeight;\r\n                            } else {\r\n                                isHide = true;\r\n                            }\r\n                            break;\r\n                        case \"horizontal\":\r\n                            if (scrollerHeight > 0) {\r\n                                css[\"width\"] = CT_INNER_WIDTH;\r\n                                css[\"height\"] = scrollerHeight;\r\n                                css[\"right\"] = scrollerWidth;\r\n                                css[\"bottom\"] = pageHeight;\r\n                            } else {\r\n                                isHide = true;\r\n                            }\r\n                            break;\r\n                        case \"corner\":\r\n                            if (scrollerWidth > 0 && scrollerHeight > 0) {\r\n                                css[\"width\"] = scrollerWidth;\r\n                                css[\"height\"] = scrollerHeight;\r\n                                css[\"bottom\"] = pageHeight;\r\n                            } else {\r\n                                isHide = true;\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    if (isHide) {\r\n                        panel.hide();\r\n                        // 프로세스 중지\r\n                        return this;\r\n                    }\r\n\r\n                    panel.show().css(css);\r\n                };\r\n\r\n                this.$[\"container\"][\"header\"].css({height: headerHeight});\r\n                this.$[\"container\"][\"body\"].css({height: bodyHeight});\r\n\r\n                // 각 패널들의 크기 표시여부를 결정합니다\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\r\n\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\r\n\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\r\n\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\r\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\r\n\r\n\r\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\r\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\r\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\r\n\r\n                panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\r\n\r\n                // 각 패널의 사이즈 결정\r\n                /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\r\n                this.xvar.bodyHeight = this.$.panel[\"body\"].height();\r\n                this.xvar.bodyWidth = this.$.panel[\"body\"].width();\r\n                // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\r\n\r\n                return true;\r\n            };\r\n            const sortColumns = function (_sortInfo) {\r\n                GRID.header.repaint.call(this);\r\n\r\n                if (U.isFunction(this.config.remoteSort)) {\r\n                    let that = {sortInfo: []};\r\n                    for (let k in _sortInfo) {\r\n                        that.sortInfo.push({\r\n                            key: k,\r\n                            orderBy: _sortInfo[k].orderBy,\r\n                            seq: _sortInfo[k].seq\r\n                        });\r\n                    }\r\n                    that.sortInfo.sort(function (a, b) {\r\n                        return a.seq > b.seq;\r\n                    });\r\n                    this.config.remoteSort.call(that, that);\r\n                } else {\r\n                    if (this.config.body.grouping) {\r\n                        this.list = GRID.data.initData.call(this,\r\n                            GRID.data.sort.call(this,\r\n                                _sortInfo,\r\n                                GRID.data.clearGroupingData.call(this,\r\n                                    this.list\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n                    else {\r\n                        this.list = GRID.data.sort.call(this, _sortInfo,\r\n                            GRID.data.clearGroupingData.call(this,\r\n                                this.list\r\n                            ),\r\n                            {resetLineNumber: true}\r\n                        );\r\n                    }\r\n                    GRID.body.repaint.call(this, true);\r\n                    GRID.scroller.resize.call(this);\r\n                }\r\n            };\r\n            /// private end\r\n\r\n            /**\r\n            /**\r\n             * Preferences of grid UI\r\n             * @method ax5grid.setConfig\r\n             * @param {Object} _config - 클래스 속성값\r\n             * @param {Element} _config.target\r\n             * @param {Number} [_config.frozenColumnIndex=0]\r\n             * @param {Number} [_config.frozenRowIndex=0]\r\n             * @param {Boolean} [_config.showLineNumber=false]\r\n             * @param {Boolean} [_config.showRowSelector=false]\r\n             * @param {Boolean} [_config.multipleSelect=true]\r\n             * @param {Number} [_config.columnMinWidth=100]\r\n             * @param {Number} [_config.lineNumberColumnWidth=30]\r\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\r\n             * @param {Boolean} [_config.sortable=false]\r\n             * @param {Boolean} [_config.multiSort=false]\r\n             * @param {Function} [_config.remoteSort=false]\r\n             * @param {Boolean} [_config.virtualScrollY=true] - 세로축 가상스크롤 처리여부\r\n             * @param {Boolean} [_config.virtualScrollX=true] - 가로축 가상스크롤 처리여부\r\n             * @param {Object} [_config.header]\r\n             * @param {String} [_config.header.align]\r\n             * @param {Number} [_config.header.columnHeight=25]\r\n             * @param {Number} [_config.header.columnPadding=3]\r\n             * @param {Number} [_config.header.columnBorderWidth=1]\r\n             * @param {Object} [_config.body]\r\n             * @param {Function} [_config.onClick]\r\n             * @param {Function} [_config.onDBLClick]\r\n             * @param {String|Array} [_config.body.mergeCells=false] -\r\n             * @param {String} [_config.body.align]\r\n             * @param {Number} [_config.body.columnHeight=25]\r\n             * @param {Number} [_config.body.columnPadding=3]\r\n             * @param {Number} [_config.body.columnBorderWidth=1]\r\n             * @param {Object} [_config.body.grouping]\r\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\r\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\r\n             * @param {Object} [_config.page]\r\n             * @param {Number} [_config.page.height=25]\r\n             * @param {Boolean} [_config.page.display=true] - grid page display\r\n             * @param {Boolean} [_config.page.statusDisplay=true] - grid status display\r\n             * @param {Number} [_config.page.navigationItemCount=5]\r\n             * @param {Object} [_config.scroller]\r\n             * @param {Number} [_config.scroller.size=15]\r\n             * @param {Number} [_config.scroller.barMinSize=15]\r\n             * @param {Number} [_config.scroller.trackPadding=4]\r\n             * @param {Object} [_config.columnKeys]\r\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\r\n             * @param {Object[]} _config.columns\r\n             * @param {String} _config.columns[].key\r\n             * @param {String} _config.columns[].label\r\n             * @param {Number} _config.columns[].width\r\n             * @param {(String|Function)} _config.columns[].styleClass\r\n             * @param {(String|Function)} _config.columns[].headerStyleClass\r\n             * @param {Boolean} _config.columns[].enableFilter\r\n             * @param {Boolean} _config.columns[].sortable\r\n             * @param {String} _config.columns[].align\r\n             * @param {(String|Function)} _config.columns[].formatter\r\n             * @param {Object} _config.columns[].editor\r\n             * @param {String} _config.columns[].editor.type - text,number,money,date\r\n             * @param {Object} _config.columns[].editor.config\r\n             * @param {Array} _config.columns[].editor.updateWith\r\n             * @param {Function} _config.columns[].editor.disabled - disable editor\r\n             * @param {Boolean} [_config.columns[].multiLine=false]\r\n             * @param {Object} [_config.tree]\r\n             * @param {Boolean} [_config.tree.use=false] - Whether tree-type data is used\r\n             * @param {Number} [_config.tree.hashDigit=8]\r\n             * @param {Number} [_config.tree.indentWidth=10]\r\n             * @param {Number} [_config.tree.arrowWidth=15]\r\n             * @param {Number} [_config.tree.iconWidth=18]\r\n             * @param {Object} [_config.tree.icons]\r\n             * @param {String} [_config.tree.icons.openedArrow='▾']\r\n             * @param {String} [_config.tree.icons.collapsedArrow='▸']\r\n             * @param {String} [_config.tree.icons.groupIcon='⊚']\r\n             * @param {String} [_config.tree.icons.collapsedGroupIcon='⊚']\r\n             * @param {String} [_config.tree.icons.itemIcon='⊙']\r\n             * @param {Object} [_config.tree.columnKeys]\r\n             * @param {String} [_config.tree.columnKeys.parentKey=\"pid\"]\r\n             * @param {String} [_config.tree.columnKeys.selfKey=\"id\"]\r\n             * @param {String} [_config.tree.columnKeys.collapse=\"collapse\"]\r\n             * @param {String} [_config.tree.columnKeys.hidden=\"hidden\"]\r\n             * @param {String} [_config.tree.columnKeys.parentHash=\"__hp__\"]\r\n             * @param {String} [_config.tree.columnKeys.selfHash=\"__hs__\"]\r\n             * @param {String} [_config.tree.columnKeys.children=\"__children__\"]\r\n             * @param {String} [_config.tree.columnKeys.depth=\"__depth__\"]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * var firstGrid = new ax5.ui.grid();\r\n             *\r\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\r\n             *     return \"myType\" + (this.value || \"\");\r\n             * };\r\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\r\n             *     return (''+this.value).toUpperCase();\r\n             * };\r\n             *\r\n             * ax5.ui.grid.collector[\"myType\"] = function () {\r\n             *     return \"myType\" + (this.value || \"\");\r\n             * };\r\n             *\r\n             * var sampleData = [\r\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\r\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\r\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\r\n             * ];\r\n             *\r\n             * var gridView = {\r\n             *     initView: function () {\r\n             *         firstGrid.setConfig({\r\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\r\n             *             columns: [\r\n             *                 {\r\n             *                     key: \"companyJson['대표자명']\",\r\n             *                     label: \"필드A\",\r\n             *                     width: 80,\r\n             *                     styleClass: function () {\r\n             *                         return \"ABC\";\r\n             *                     },\r\n             *                     enableFilter: true,\r\n             *                     align: \"center\",\r\n             *                     editor: {type:\"text\"}\r\n             *                 },\r\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\r\n             *                 {\r\n             *                     key: undefined, label: \"필드C\", columns: [\r\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\r\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\r\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\r\n             *                     ]\r\n             *                 },\r\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\r\n             *                 {key: \"customer\", label: \"고객명\"},\r\n             *                 {key: \"saleType\", label: \"판매타입\"}\r\n             *             ]\r\n             *         });\r\n             *         return this;\r\n             *     },\r\n             *     setData: function (_pageNo) {\r\n             *         firstGrid.setData(sampleData);\r\n             *         return this;\r\n             *     }\r\n             * };\r\n             *\r\n             * // onClick, onDBLClick, onDataChanged\r\n             * firstGrid.setConfig({\r\n             *      target: $('[data-ax5grid=\"first-grid\"]'),\r\n             *      columns: [...],\r\n             *      body: {\r\n             *          onClick: function(){\r\n             *              console.log(this);\r\n             *          },\r\n             *          onDBLClick: function(){\r\n             *              console.log(this);\r\n             *              // If the column does not have an editor attribute, an event is raised.\r\n             *          },\r\n             *          onDataChanged: function(){\r\n             *              console.log(this);\r\n             *              // If change Data\r\n             *          }\r\n             *      }\r\n             * });\r\n             * ```\r\n             */\r\n            this.init = function (_config) {\r\n                cfg = jQuery.extend(true, {}, cfg, _config);\r\n                if (!cfg.target) {\r\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\r\n                    return this;\r\n                }\r\n\r\n                // 그리드의 이벤트 정의 구간\r\n                this.onStateChanged = cfg.onStateChanged;\r\n                this.onClick = cfg.onClick;\r\n                this.onLoad = cfg.onLoad;\r\n                this.onDataChanged = cfg.body.onDataChanged;\r\n                // todo event에 대한 추가 정의 필요\r\n\r\n                this.$target = jQuery(cfg.target);\r\n\r\n                // target attribute data\r\n                (function (data) {\r\n                    if (U.isObject(data) && !data.error) {\r\n                        cfg = jQuery.extend(true, cfg, data);\r\n                    }\r\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\r\n\r\n                let grid = this.config = cfg;\r\n\r\n                if (!this.config.height) {\r\n                    this.config._height = this.$target.height();\r\n                }\r\n\r\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\r\n                if (!this.id) {\r\n                    //this.id = 'ax5grid-' + ax5.getGuid();\r\n                    this.id = 'ax5grid-' + this.instanceId;\r\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\r\n                }\r\n\r\n\r\n                GRID.data.init.call(this);\r\n\r\n                if (this.config.tree.use) { // 트리라면\r\n                    this.sortInfo = {};\r\n                    this.sortInfo[this.config.tree.columnKeys.selfHash] = {orderBy: \"asc\", seq: 0, fixed: true};\r\n                }\r\n\r\n                ///========\r\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\r\n                initGrid.call(this);\r\n\r\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\r\n                initColumns.call(this, grid.columns);\r\n                resetColGroupWidth.call(this);\r\n\r\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\r\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\r\n\r\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\r\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\r\n\r\n                // 그리드의 각 요소의 크기를 맞춤니다.\r\n                alignGrid.call(this, true);\r\n\r\n                // columns의 데이터로 header데이터를 만들고\r\n                GRID.header.init.call(this);\r\n                // header를 출력합니다.\r\n                GRID.header.repaint.call(this);\r\n\r\n                // columns의 데이터로 body데이터를 만들고\r\n                GRID.body.init.call(this);\r\n                // body를 출력합니다.\r\n                GRID.body.repaint.call(this);\r\n\r\n                // scroller\r\n                GRID.scroller.init.call(this);\r\n                GRID.scroller.resize.call(this);\r\n\r\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\r\n                    alignGrid.call(self);\r\n                    GRID.scroller.resize.call(self);\r\n                    GRID.body.repaint.call(self);  // window resize시 repaint 함수 호출\r\n                });\r\n\r\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, (function (e) {\r\n                    let isPickerClick = false,\r\n                        target = U.findParentNode(e.target, function (_target) {\r\n                            if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\r\n                                return true;\r\n                            }\r\n                            return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\r\n                        });\r\n\r\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\r\n                        self.focused = true;\r\n                    } else {\r\n                        self.focused = false;\r\n                        GRID.body.blur.call(this);\r\n                    }\r\n                }).bind(this));\r\n\r\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\r\n                    if (self.focused) {\r\n                        if (self.isInlineEditing) {\r\n\r\n                            if (e.which == ax5.info.eventKeys.ESC) {\r\n                                self.keyDown(\"ESC\", e.originalEvent);\r\n                            }\r\n                            else if (e.which == ax5.info.eventKeys.RETURN) {\r\n                                self.keyDown(\"RETURN\", e.originalEvent);\r\n                            }\r\n                            else if (e.which == ax5.info.eventKeys.TAB) {\r\n                                self.keyDown(\"TAB\", e.originalEvent);\r\n                                U.stopEvent(e);\r\n                            }\r\n                            else if (e.which == ax5.info.eventKeys.UP) {\r\n                                self.keyDown(\"RETURN\", {shiftKey: true});\r\n                            }\r\n                            else if (e.which == ax5.info.eventKeys.DOWN) {\r\n                                self.keyDown(\"RETURN\", {});\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n\r\n                            if (e.metaKey || e.ctrlKey) {\r\n                                if (e.which == 67) { // c\r\n                                    self.copySelect();\r\n                                }\r\n                            } else {\r\n                                if (ctrlKeys[e.which]) {\r\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\r\n                                    U.stopEvent(e);\r\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\r\n                                    if (self.focused) {\r\n                                        GRID.body.blur.call(self);\r\n                                    }\r\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\r\n                                    self.keyDown(\"RETURN\", e.originalEvent);\r\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\r\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\r\n                                    U.stopEvent(e);\r\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\r\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\r\n                setTimeout((function () {\r\n                    if (this.onLoad) {\r\n                        this.onLoad.call({\r\n                            self: this\r\n                        });\r\n                    }\r\n                }).bind(this));\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * align grid size\r\n             * @method ax5grid.align\r\n             * @returns {ax5grid}\r\n             */\r\n            this.align = function () {\r\n                if (alignGrid.call(this)) {\r\n                    GRID.body.repaint.call(this);\r\n                    GRID.scroller.resize.call(this);\r\n                }\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.keyDown\r\n             * @param {String} _keyName\r\n             * @param {Event|Object} _data\r\n             * @return {ax5grid}\r\n             */\r\n            this.keyDown = (function () {\r\n                let processor = {\r\n                    \"KEY_UP\": function () {\r\n                        GRID.body.moveFocus.call(this, \"UP\");\r\n                    },\r\n                    \"KEY_DOWN\": function () {\r\n                        GRID.body.moveFocus.call(this, \"DOWN\");\r\n                    },\r\n                    \"KEY_LEFT\": function () {\r\n                        GRID.body.moveFocus.call(this, \"LEFT\");\r\n                    },\r\n                    \"KEY_RIGHT\": function () {\r\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\r\n                    },\r\n                    \"KEY_HOME\": function () {\r\n                        GRID.body.moveFocus.call(this, \"HOME\");\r\n                    },\r\n                    \"KEY_END\": function () {\r\n                        GRID.body.moveFocus.call(this, \"END\");\r\n                    },\r\n                    \"INLINE_EDIT\": function (_e) {\r\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\r\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\r\n                            U.stopEvent(_e);\r\n                        }\r\n                    },\r\n                    \"ESC\": function (_e) {\r\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\r\n                    },\r\n                    \"RETURN\": function (_e) {\r\n                        var activeEditLength = 0;\r\n                        for (var columnKey in this.inlineEditing) {\r\n                            activeEditLength++;\r\n\r\n                            if(!GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey)){\r\n                                return false;\r\n                                U.stopEvent(_e);\r\n                            }\r\n                            // next focus\r\n                            if (activeEditLength == 1) {\r\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\r\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\r\n                                }\r\n                            }\r\n                        }\r\n                        if (activeEditLength == 0) {\r\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\r\n                            U.stopEvent(_e);\r\n                        } else {\r\n\r\n                        }\r\n                    },\r\n                    \"TAB\": function (_e) {\r\n\r\n                        var activeEditLength = 0;\r\n                        for (var columnKey in this.inlineEditing) {\r\n                            activeEditLength++;\r\n\r\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\r\n                            // next focus\r\n                            if (activeEditLength == 1) {\r\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\r\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                return function (_act, _data) {\r\n                    if (_act in processor) processor[_act].call(this, _data);\r\n                    return this;\r\n                }\r\n            })();\r\n\r\n            /**\r\n             * @method ax5grid.copySelect\r\n             * @returns {Boolean} copysuccess\r\n             */\r\n            this.copySelect = function () {\r\n                let copysuccess,\r\n                    $clipBoard = this.$[\"form\"][\"clipboard\"],\r\n                    copyTextArray = [], copyText = \"\",\r\n                    _rowIndex, _colIndex, _dindex, _di = 0;\r\n\r\n                for (let c in this.selectedColumn) {\r\n                    let _column = this.selectedColumn[c];\r\n\r\n                    if (_column) {\r\n                        if (typeof _dindex === \"undefined\") {\r\n                            _dindex = _column.dindex;\r\n                            _rowIndex = _column.rowIndex;\r\n                            _colIndex = _column.rowIndex;\r\n                        }\r\n\r\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\r\n                            _di++;\r\n                        }\r\n\r\n                        if (!copyTextArray[_di]) {\r\n                            copyTextArray[_di] = [];\r\n                        }\r\n                        let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\r\n                        if (originalColumn) {\r\n                            if (this.list[_column.dindex].__isGrouping) {\r\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\r\n                            } else {\r\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\r\n                            }\r\n                        } else {\r\n                            copyTextArray[_di].push(\"\");\r\n                        }\r\n\r\n                        _dindex = _column.dindex;\r\n                        _rowIndex = _column.rowIndex;\r\n                    }\r\n                }\r\n\r\n                copyTextArray.forEach(function (r) {\r\n                    copyText += r.join('\\t') + \"\\n\";\r\n                });\r\n\r\n                $clipBoard.get(0).innerText = copyText;\r\n                $clipBoard.select();\r\n\r\n                try {\r\n                    copysuccess = document.execCommand(\"copy\");\r\n                } catch (e) {\r\n                    copysuccess = false;\r\n                }\r\n                return copysuccess;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.setData\r\n             * @param {Array} _data\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.setData({\r\n             *  list: [],\r\n             *  page: {\r\n             *      currentPage: 0,\r\n             *      pageSize: 50,\r\n             *      totalElements: 500,\r\n             *      totalPages: 100\r\n             *  }\r\n             * });\r\n             *\r\n             * // onlyList\r\n             * ax5Grid.setData([]);\r\n             * ```\r\n             */\r\n            this.setData = function (_data) {\r\n                let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\");\r\n\r\n                GRID.data.set.call(this, _data);\r\n                alignGrid.call(this);\r\n                GRID.body.repaint.call(this);\r\n                GRID.scroller.resize.call(this);\r\n                GRID.page.navigationUpdate.call(this);\r\n\r\n                if (!isFirstPaint) GRID.body.scrollTo.call(this, {top: 0});\r\n\r\n                isFirstPaint = null;\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.getList\r\n             * @param {String} _type - selected|modified|deleted\r\n             * @returns {Array}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.getList();\r\n             * ax5Grid.getList(\"selected\");\r\n             * ax5Grid.getList(\"modified\");\r\n             * ax5Grid.getList(\"deleted\");\r\n             * ```\r\n             */\r\n            this.getList = function (_type) {\r\n                return GRID.data.getList.call(this, _type);\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.setHeight\r\n             * @param {Number} _height\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.setHeight(height);\r\n             * ```\r\n             */\r\n            this.setHeight = function (_height) {\r\n                //console.log(this.$target);\r\n                if (_height == \"100%\") {\r\n                    _height = this.$target.offsetParent().innerHeight();\r\n                }\r\n                this.$target.css({height: _height});\r\n                this.$[\"container\"][\"root\"].css({height: _height});\r\n                alignGrid.call(this);\r\n                GRID.body.repaint.call(this, \"reset\");\r\n                GRID.scroller.resize.call(this);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.addRow\r\n             * @param {Object} _row\r\n             * @param {Number|String} [_dindex=last]\r\n             * @param {Object} [_options] - options of addRow\r\n             * @param {Boolean} [_options.sort] - sortData\r\n             * @param {Number|String} [_options.focus] - HOME|END|[dindex]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\r\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"END\"});\r\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"HOME\"});\r\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: 10});\r\n             * ```\r\n             */\r\n            this.addRow = function (_row, _dindex, _options) {\r\n                GRID.data.add.call(this, _row, _dindex, _options);\r\n                alignGrid.call(this);\r\n                GRID.body.repaint.call(this, \"reset\");\r\n                if(_options && _options.focus) {\r\n                    //GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\r\n                    GRID.body.moveFocus.call(this, _options.focus);\r\n                }\r\n                GRID.scroller.resize.call(this);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.appendToList\r\n             * @param _list\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.appendToList([{},{},{}]);\r\n             * ax5Grid.appendToList([{},{},{}]);\r\n             * ```\r\n             */\r\n            this.appendToList = function (_list) {\r\n                GRID.data.append.call(this, _list, (function () {\r\n                    alignGrid.call(this);\r\n                    GRID.body.repaint.call(this);\r\n                    GRID.scroller.resize.call(this);\r\n                }).bind(this));\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.removeRow\r\n             * @param {Number|String} [_dindex=last]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.removeRow();\r\n             * ax5Grid.removeRow(\"first\");\r\n             * ax5Grid.removeRow(\"last\");\r\n             * ax5Grid.removeRow(1);\r\n             * ```\r\n             */\r\n            this.removeRow = function (_dindex) {\r\n                GRID.data.remove.call(this, _dindex);\r\n                alignGrid.call(this);\r\n                GRID.body.repaint.call(this, \"reset\");\r\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\r\n                GRID.scroller.resize.call(this);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.updateRow\r\n             * @param {Object} _row\r\n             * @param {Number} _dindex\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.updateRow({price: 100, amount: 100, cost: 10000}, 1);\r\n             * ```\r\n             */\r\n            this.updateRow = function (_row, _dindex) {\r\n                GRID.data.update.call(this, _row, _dindex);\r\n                // todo : mergeCells 옵션에 따라 예외처리\r\n\r\n                GRID.body.repaintRow.call(this, _dindex);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.updateChildRows\r\n             * @param {Number} _dindex\r\n             * @param {Object} _updateData\r\n             * @param {Object} [_options]\r\n             * @param {Function} [_options.filter]\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * onDataChanged: function () {\r\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked});\r\n             * }\r\n             *\r\n             * onDataChanged: function () {\r\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked}, {filter: function(){\r\n             *          return this.item.type == \"A\";\r\n             *      });\r\n             * }\r\n             * ```\r\n             */\r\n            this.updateChildRows = function (_dindex, _updateData, _options) {\r\n                GRID.data.updateChild.call(this, _dindex, _updateData, _options);\r\n                this.xvar.paintStartRowIndex = undefined;\r\n                this.xvar.paintStartColumnIndex = undefined;\r\n                GRID.body.repaint.call(this);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.deleteRow\r\n             * @param {Number|String} _dindex\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.deleteRow(\"first\");\r\n             * ax5Grid.deleteRow(\"last\");\r\n             * ax5Grid.deleteRow(1);\r\n             * ax5Grid.deleteRow(\"selected\");\r\n             * ```\r\n             */\r\n            this.deleteRow = function (_dindex) {\r\n                GRID.data.deleteRow.call(this, _dindex);\r\n                alignGrid.call(this);\r\n                GRID.body.repaint.call(this, \"reset\");\r\n                // 삭제시엔 포커스 ?\r\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\r\n                GRID.scroller.resize.call(this);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.setValue\r\n             * @param _dindex\r\n             * @param _key\r\n             * @param _value\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5Grid.setValue(0, \"price\", 100);\r\n             * ```\r\n             */\r\n            this.setValue = function (_dindex, _key, _value) {\r\n                // getPanelname;\r\n                if (GRID.data.setValue.call(this, _dindex, _key, _value)) {\r\n                    let repaintCell = function (_panelName, _rows, __dindex, __key, __value) {\r\n                        for (let r = 0, rl = _rows.length; r < rl; r++) {\r\n                            for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\r\n                                if (_rows[r].cols[c].key == __key) {\r\n                                    if (this.xvar.frozenRowIndex > __dindex) {\r\n                                        GRID.body.repaintCell.call(this, \"top-\" + _panelName, __dindex, r, c, __value);\r\n                                    } else {\r\n                                        GRID.body.repaintCell.call(this, _panelName + \"-scroll\", __dindex, r, c, __value);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, _key, _value);\r\n                    repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, _key, _value);\r\n\r\n                }\r\n\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.addColumn\r\n             * @param {Object} _column\r\n             * @param {Number|String} [_cindex=last]\r\n             * @returns {ax5grid}\r\n             */\r\n            this.addColumn = (function () {\r\n                let processor = {\r\n                    \"first\": function (_column) {\r\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\r\n                    },\r\n                    \"last\": function (_column) {\r\n                        this.config.columns = this.config.columns.concat([].concat(_column));\r\n                    }\r\n                };\r\n\r\n                return function (_column, _cindex) {\r\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\r\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\r\n                    if (_cindex in processor) {\r\n                        processor[_cindex].call(this, _column);\r\n                    } else {\r\n                        if (!U.isNumber(_cindex)) {\r\n                            throw 'invalid argument _cindex';\r\n                        }\r\n                        if (U.isArray(_column)) {\r\n                            for (let _i = 0, _l = _column.length; _i < _l; _i++) {\r\n                                this.config.columns.splice(_cindex + _i, 0, _column[_i]);\r\n                            }\r\n                        } else {\r\n                            this.config.columns.splice(_cindex, 0, _column);\r\n                        }\r\n                    }\r\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\r\n                    return this;\r\n                }\r\n            })();\r\n\r\n            /**\r\n             * @method ax5grid.removeColumn\r\n             * @param {Number|String} [_cindex=last]\r\n             * @returns {ax5grid}\r\n             */\r\n            this.removeColumn = (function () {\r\n                let processor = {\r\n                    \"first\": function (_cindex) {\r\n                        this.config.columns.splice(_cindex, 1);\r\n                    },\r\n                    \"last\": function () {\r\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\r\n                    }\r\n                };\r\n                return function (_cindex) {\r\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\r\n                    if (_cindex in processor) {\r\n                        processor[_cindex].call(this, _cindex);\r\n                    } else {\r\n                        if (!U.isNumber(_cindex)) {\r\n                            throw 'invalid argument _cindex';\r\n                        }\r\n                        //\r\n                        this.config.columns.splice(_cindex, 1);\r\n                    }\r\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\r\n                    return this;\r\n                }\r\n            })();\r\n\r\n            /**\r\n             * @method ax5grid.updateColumn\r\n             * @param {Object} _column\r\n             * @param {Number} _cindex\r\n             * @returns {ax5grid}\r\n             */\r\n            this.updateColumn = function (_column, _cindex) {\r\n                if (!U.isNumber(_cindex)) {\r\n                    throw 'invalid argument _cindex';\r\n                }\r\n                //\r\n                this.config.columns.splice(_cindex, 1, _column);\r\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.setColumnWidth\r\n             * @param {Number} _width\r\n             * @param {Number} _cindex\r\n             * @returns {ax5grid}\r\n             */\r\n            this.setColumnWidth = function (_width, _cindex) {\r\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\r\n                this.needToPaintSum = true;\r\n\r\n                // 컬럼너비 변경사항 적용.\r\n                GRID.header.repaint.call(this);\r\n                GRID.body.repaint.call(this, true);\r\n                GRID.scroller.resize.call(this);\r\n\r\n                alignGrid.call(this);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.getColumnSortInfo\r\n             * @returns {Object} sortInfo\r\n             */\r\n            this.getColumnSortInfo = function () {\r\n                let that = {sortInfo: []};\r\n                for (let k in this.sortInfo) {\r\n                    that.sortInfo.push({\r\n                        key: k,\r\n                        orderBy: this.sortInfo[k].orderBy,\r\n                        seq: this.sortInfo[k].seq\r\n                    });\r\n                }\r\n                that.sortInfo.sort(function (a, b) {\r\n                    return a.seq > b.seq;\r\n                });\r\n                return that.sortInfo;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.setColumnSort\r\n             * @param {Object} _sortInfo\r\n             * @param {Object} _sortInfo.key\r\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\r\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\r\n             * ```\r\n             */\r\n            this.setColumnSort = function (_sortInfo) {\r\n                if (typeof _sortInfo !== \"undefined\") {\r\n                    this.sortInfo = _sortInfo;\r\n                    GRID.header.applySortStatus.call(this, _sortInfo);\r\n                }\r\n\r\n                sortColumns.call(this, _sortInfo || this.sortInfo);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.select\r\n             * @param {Number|Object} _selectObject\r\n             * @param {Number} _selectObject.index - index of row\r\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\r\n             * @param {Number} _selectObject.conIndex - colIndex of columns\r\n             * @param {Object} _options\r\n             * @param {Boolean} _options.selectedClear\r\n             * @param {Boolean} _options.selected\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.select(0);\r\n             * firstGrid.select(0, {selected: true});\r\n             * firstGrid.select(0, {selected: false});\r\n             * firstGrid.select(0, {selectedClear: true});\r\n             * ```\r\n             */\r\n            this.select = function (_selectObject, _options) {\r\n                if (U.isNumber(_selectObject)) {\r\n                    let dindex = _selectObject;\r\n\r\n                    if (!this.config.multipleSelect) {\r\n                        this.clearSelect();\r\n                    } else {\r\n                        if (_options && _options.selectedClear) {\r\n                            this.clearSelect();\r\n                        }\r\n                    }\r\n\r\n                    GRID.data.select.call(this, dindex, _options && _options.selected);\r\n                    GRID.body.updateRowState.call(this, [\"selected\"], dindex);\r\n                }\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method firstGrid.clickBody\r\n             * @param {Number} _dindex\r\n             * @returns {ax5grid}\r\n             */\r\n            this.clickBody = function (_dindex) {\r\n                GRID.body.click.call(this, _dindex);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method firstGrid.DBLClickBody\r\n             * @param {Number} _dindex\r\n             * @returns {ax5grid}\r\n             */\r\n            this.DBLClickBody = function (_dindex) {\r\n                GRID.body.dblClick.call(this, _dindex);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.clearSelect\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.clearSelect();\r\n             * ```\r\n             */\r\n            this.clearSelect = function () {\r\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\r\n                GRID.data.clearSelect.call(this);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.selectAll\r\n             * @param {Object} _options\r\n             * @param {Boolean} _options.selected\r\n             * @param {Function} _options.filter\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.selectAll();\r\n             * firstGrid.selectAll({selected: true});\r\n             * firstGrid.selectAll({selected: false});\r\n             * firstGrid.selectAll({filter: function(){\r\n             *      return this[\"b\"] == \"A01\";\r\n             * });\r\n             * firstGrid.selectAll({selected: true, filter: function(){\r\n             *      return this[\"b\"] == \"A01\";\r\n             * });\r\n             * ```\r\n             */\r\n            this.selectAll = function (_options) {\r\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\r\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.exportExcel\r\n             * @param {String} _fileName\r\n             * @returns {ax5grid|String}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\r\n             * console.log(firstGrid.exportExcel());\r\n             * ```\r\n             */\r\n            this.exportExcel = function (_fileName) {\r\n                let table = [];\r\n                table.push('<table border=\"1\">');\r\n                table.push(GRID.header.getExcelString.call(this));\r\n                table.push(GRID.body.getExcelString.call(this));\r\n                table.push('</table>');\r\n\r\n                if (typeof _fileName === \"undefined\") {\r\n                    return table.join('');\r\n                }\r\n                else {\r\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\r\n                }\r\n\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.focus\r\n             * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\r\n             * @returns {ax5grid}\r\n             * @example\r\n             * ```js\r\n             * firstGrid.focus(\"UP\");\r\n             * firstGrid.focus(\"DOWN\");\r\n             * firstGrid.focus(\"HOME\");\r\n             * firstGrid.focus(\"END\");\r\n             * ```\r\n             */\r\n            this.focus = function (_pos) {\r\n                if (GRID.body.moveFocus.call(this, _pos)) {\r\n                    let focusedColumn;\r\n                    for (let c in this.focusedColumn) {\r\n                        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\r\n                        break;\r\n                    }\r\n                    if (focusedColumn) {\r\n                        this.select(focusedColumn.dindex, {selectedClear: true});\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof this.selectedDataIndexs[0] === \"undefined\") {\r\n                        this.select(0);\r\n                    } else {\r\n                        let selectedIndex = this.selectedDataIndexs[0];\r\n                        let processor = {\r\n                            \"UP\": function () {\r\n                                if (selectedIndex > 0) {\r\n                                    this.select(selectedIndex - 1, {selectedClear: true});\r\n                                    GRID.body.moveFocus.call(this, selectedIndex - 1);\r\n                                }\r\n                            },\r\n                            \"DOWN\": function () {\r\n                                if (selectedIndex < this.list.length - 1) {\r\n                                    this.select(selectedIndex + 1, {selectedClear: true});\r\n                                    GRID.body.moveFocus.call(this, selectedIndex + 1);\r\n                                }\r\n                            },\r\n                            \"HOME\": function () {\r\n                                this.select(0, {selectedClear: true});\r\n                                GRID.body.moveFocus.call(this, 0);\r\n                            },\r\n                            \"END\": function () {\r\n                                this.select(this.list.length - 1, {selectedClear: true});\r\n                                GRID.body.moveFocus.call(this, this.list.length - 1);\r\n                            }\r\n                        };\r\n\r\n                        if (_pos in processor) {\r\n                            processor[_pos].call(this);\r\n                        }\r\n                    }\r\n                }\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * @method ax5grid.destroy\r\n             * @returns {null}\r\n             */\r\n            this.destroy = function () {\r\n                const instanceId = this.instanceId;\r\n                this.$target.empty();\r\n                this.list = [];\r\n                UI.grid_instance = ax5.util.filter(UI.grid_instance, function () {\r\n                    return this.instanceId != instanceId;\r\n                });\r\n                return null;\r\n            };\r\n\r\n            // 클래스 생성자\r\n            this.main = (function () {\r\n                UI.grid_instance = UI.grid_instance || [];\r\n                UI.grid_instance.push(this);\r\n\r\n                if (arguments && U.isObject(arguments[0])) {\r\n                    this.setConfig(arguments[0]);\r\n                }\r\n            }).apply(this, arguments);\r\n        };\r\n    })());\r\n\r\n    GRID = ax5.ui.grid;\r\n})();\r\n\r\n// todo : filter\r\n// todo : column reorder\r\n// todo : editor 필수값 속성 지정","// ax5.ui.grid.body\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    const columnSelect = {\r\n        focusClear: function () {\r\n            let self = this, _column;\r\n            for (let c in self.focusedColumn) {\r\n                _column = self.focusedColumn[c];\r\n                if (_column) {\r\n                    self.$.panel[_column.panelName]\r\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\r\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\r\n                        .removeAttr('data-ax5grid-column-focused');\r\n                }\r\n            }\r\n            self.focusedColumn = {};\r\n        },\r\n        clear: function () {\r\n            let self = this, _column;\r\n            for (let c in self.selectedColumn) {\r\n                _column = self.selectedColumn[c];\r\n                if (_column) {\r\n                    self.$.panel[_column.panelName]\r\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\r\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\r\n                        .removeAttr('data-ax5grid-column-selected');\r\n                }\r\n            }\r\n            self.selectedColumn = {};\r\n        },\r\n        init: function (column) {\r\n            let self = this;\r\n            if (this.isInlineEditing) {\r\n                for (let editKey in this.inlineEditing) {\r\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\r\n                        return this;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // focus\r\n            columnSelect.focusClear.call(self);\r\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\r\n                panelName: column.panelName,\r\n                dindex: column.dindex,\r\n                rowIndex: column.rowIndex,\r\n                colIndex: column.colIndex,\r\n                colspan: column.colspan\r\n            };\r\n\r\n            // select\r\n            columnSelect.clear.call(self);\r\n            self.xvar.selectedRange = {\r\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\r\n                end: null\r\n            };\r\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\r\n                if (data) {\r\n                    return false;\r\n                } else {\r\n                    return {\r\n                        panelName: column.panelName,\r\n                        dindex: column.dindex,\r\n                        rowIndex: column.rowIndex,\r\n                        colIndex: column.colIndex,\r\n                        colspan: column.colspan\r\n                    }\r\n                }\r\n            })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\r\n\r\n            this.$.panel[column.panelName]\r\n                .find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]')\r\n                .find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]')\r\n                .attr('data-ax5grid-column-focused', \"true\")\r\n                .attr('data-ax5grid-column-selected', \"true\");\r\n\r\n            if (this.isInlineEditing) {\r\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\r\n            }\r\n        },\r\n        update: function (column) {\r\n            var self = this;\r\n            var dindex, colIndex, rowIndex, trl;\r\n\r\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\r\n            columnSelect.clear.call(self);\r\n\r\n            var range = {\r\n                r: {\r\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\r\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\r\n                },\r\n                c: {\r\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\r\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\r\n                }\r\n            };\r\n\r\n            dindex = range.r.s;\r\n            for (; dindex <= range.r.e; dindex++) {\r\n\r\n\r\n                trl = this.bodyRowTable.rows.length;\r\n                rowIndex = 0;\r\n                for (; rowIndex < trl; rowIndex++) {\r\n                    colIndex = range.c.s;\r\n                    for (; colIndex <= range.c.e; colIndex++) {\r\n                        var _panels = [],\r\n                            panelName = \"\";\r\n\r\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\r\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\r\n                        _panels.push(\"body\");\r\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\r\n                        panelName = _panels.join(\"-\");\r\n\r\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\r\n                            panelName: panelName,\r\n                            dindex: dindex,\r\n                            rowIndex: rowIndex,\r\n                            colIndex: colIndex,\r\n                            colspan: column.colspan\r\n                        };\r\n\r\n                        _panels = null;\r\n                        panelName = null;\r\n                    }\r\n                }\r\n            }\r\n            dindex = null;\r\n            colIndex = null;\r\n            rowIndex = null;\r\n\r\n            for (var c in self.selectedColumn) {\r\n                var _column = self.selectedColumn[c];\r\n                if (_column) {\r\n                    self.$.panel[_column.panelName]\r\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\r\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\r\n                        .attr('data-ax5grid-column-selected', 'true');\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    const columnSelector = {\r\n        \"on\": function (cell) {\r\n            let self = this;\r\n\r\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\r\n                return;\r\n            }\r\n\r\n            columnSelect.init.call(self, cell);\r\n\r\n            this.$[\"container\"][\"body\"]\r\n                .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\r\n                    if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\r\n                        columnSelect.update.call(self, {\r\n                            panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\r\n                            dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\r\n                            rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\r\n                            colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\r\n                            colspan: Number(this.getAttribute(\"colspan\"))\r\n                        });\r\n                        U.stopEvent(e);\r\n                    }\r\n                })\r\n                .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\r\n                    columnSelector.off.call(self);\r\n                })\r\n                .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\r\n                    columnSelector.off.call(self);\r\n                });\r\n\r\n            jQuery(document.body)\r\n                .attr('unselectable', 'on')\r\n                .css('user-select', 'none')\r\n                .on('selectstart', false);\r\n        },\r\n        \"off\": function () {\r\n\r\n            this.$[\"container\"][\"body\"]\r\n                .off(\"mousemove.ax5grid-\" + this.instanceId)\r\n                .off(\"mouseup.ax5grid-\" + this.instanceId)\r\n                .off(\"mouseleave.ax5grid-\" + this.instanceId);\r\n\r\n            jQuery(document.body)\r\n                .removeAttr('unselectable')\r\n                .css('user-select', 'auto')\r\n                .off('selectstart');\r\n        }\r\n    };\r\n\r\n    const updateRowState = function (_states, _dindex, _data) {\r\n        let self = this,\r\n            cfg = this.config,\r\n            processor = {\r\n                \"selected\": function (_dindex) {\r\n                    if (this.list[_dindex]) {\r\n                        var i = this.$.livePanelKeys.length;\r\n                        while (i--) {\r\n                            this.$.panel[this.$.livePanelKeys[i]]\r\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\r\n                                .attr(\"data-ax5grid-selected\", this.list[_dindex][cfg.columnKeys.selected]);\r\n\r\n                        }\r\n                    }\r\n                },\r\n                \"selectedClear\": function () {\r\n                    var si = this.selectedDataIndexs.length;\r\n                    while (si--) {\r\n                        var dindex = this.selectedDataIndexs[si];\r\n                        var i = this.$.livePanelKeys.length;\r\n                        while (i--) {\r\n                            this.$.panel[this.$.livePanelKeys[i]]\r\n                                .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\r\n                                .attr(\"data-ax5grid-selected\", false);\r\n                            this.list[dindex][cfg.columnKeys.selected] = false;\r\n                        }\r\n                    }\r\n                },\r\n                \"cellChecked\": function (_dindex, _data) {\r\n                    var key = _data.key;\r\n                    var rowIndex = _data.rowIndex;\r\n                    var colIndex = _data.colIndex;\r\n\r\n                    var panelName = (function () {\r\n                        var _panels = [];\r\n                        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\r\n                        if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\r\n                        _panels.push(\"body\");\r\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\r\n                        return _panels.join(\"-\");\r\n                    }).call(this);\r\n\r\n                    this.$.panel[panelName]\r\n                        .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\r\n                        .find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]')\r\n                        .find('[data-ax5grid-editor=\"checkbox\"]')\r\n                        .attr(\"data-ax5grid-checked\", '' + _data.checked);\r\n                }\r\n            };\r\n\r\n        _states.forEach(function (_state) {\r\n            if (!processor[_state]) throw 'invaild state name';\r\n            processor[_state].call(self, _dindex, _data);\r\n        });\r\n    };\r\n\r\n    const updateRowStateAll = function (_states, _data) {\r\n        let self = this,\r\n            cfg = this.config,\r\n            processor = {\r\n                \"selected\": function (_dindex) {\r\n                    GRID.body.repaint.call(this, true);\r\n                }\r\n            };\r\n\r\n        _states.forEach(function (_state) {\r\n            if (!processor[_state]) throw 'invaild state name';\r\n            processor[_state].call(self, _data);\r\n        });\r\n    };\r\n\r\n    const init = function () {\r\n        let self = this;\r\n\r\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\r\n            let panelName, attr,\r\n                row, col, dindex, rowIndex, colIndex, disableSelection,\r\n                targetClick = {\r\n                    \"default\": function (_column) {\r\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\r\n                            that = {\r\n                                self: self,\r\n                                page: self.page,\r\n                                list: self.list,\r\n                                item: self.list[_column.dindex],\r\n                                dindex: _column.dindex,\r\n                                rowIndex: _column.rowIndex,\r\n                                colIndex: _column.colIndex,\r\n                                column: column,\r\n                                value: self.list[_column.dindex][column.key]\r\n                            };\r\n\r\n                        if (column.editor && column.editor.type == \"checkbox\") { // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\r\n                            let value = GRID.data.getValue.call(self, _column.dindex, column.key),\r\n                                checked, newValue;\r\n\r\n                            if (column.editor.config && column.editor.config.trueValue) {\r\n                                if (checked = !(value == column.editor.config.trueValue)) {\r\n                                    newValue = column.editor.config.trueValue;\r\n                                } else {\r\n                                    newValue = column.editor.config.falseValue;\r\n                                }\r\n                            } else {\r\n                                newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\r\n                            }\r\n\r\n                            GRID.data.setValue.call(self, _column.dindex, column.key, newValue);\r\n\r\n                            updateRowState.call(self, [\"cellChecked\"], _column.dindex, {\r\n                                key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\r\n                                editorConfig: column.editor.config, checked: checked\r\n                            });\r\n                        } else {\r\n                            if (self.config.body.onClick) {\r\n                                self.config.body.onClick.call(that);\r\n                            }\r\n                        }\r\n                    },\r\n                    \"rowSelector\": function (_column) {\r\n                        if (self.list[_column.dindex][self.config.columnKeys.disableSelection]) {\r\n                            return false;\r\n                        }\r\n\r\n                        if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.dindex) {\r\n                            updateRowState.call(self, [\"selectedClear\"]);\r\n                            GRID.data.clearSelect.call(self);\r\n                        }\r\n\r\n                        GRID.data.select.call(self, _column.dindex, undefined, {\r\n                            internalCall: true\r\n                        });\r\n                        updateRowState.call(self, [\"selected\"], _column.dindex);\r\n                    },\r\n                    \"lineNumber\": function (_column) {\r\n\r\n                    },\r\n                    \"tree-control\": function (_column, _el) {\r\n                        //console.log(_column);\r\n                        toggleCollapse.call(self, _column.dindex);\r\n                    }\r\n                };\r\n\r\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\r\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\r\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\r\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\r\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\r\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\r\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\r\n\r\n            if (attr in targetClick) {\r\n                targetClick[attr]({\r\n                    panelName: panelName,\r\n                    attr: attr,\r\n                    row: row,\r\n                    col: col,\r\n                    dindex: dindex,\r\n                    rowIndex: rowIndex,\r\n                    colIndex: colIndex\r\n                }, this);\r\n            }\r\n        });\r\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\r\n            let panelName, attr,\r\n                row, col, dindex, rowIndex, colIndex,\r\n                targetDBLClick = {\r\n                    \"default\": function (_column) {\r\n                        if (self.isInlineEditing) {\r\n                            for (let columnKey in self.inlineEditing) {\r\n                                if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\r\n                                    return this;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\r\n                        if (column) {\r\n                            if (!self.list[dindex].__isGrouping) {\r\n                                value = GRID.data.getValue.call(self, dindex, column.key);\r\n                            }\r\n                        }\r\n\r\n                        let editor = self.colGroup[_column.colIndex].editor;\r\n                        if (U.isObject(editor)) {\r\n                            GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\r\n                        } else {\r\n                            // 더블클릭 실행\r\n                            if (self.config.body.onDBLClick) {\r\n                                let that = {\r\n                                    self: self,\r\n                                    page: self.page,\r\n                                    list: self.list,\r\n                                    item: self.list[_column.dindex],\r\n                                    dindex: _column.dindex,\r\n                                    rowIndex: _column.rowIndex,\r\n                                    colIndex: _column.colIndex,\r\n                                    column: column,\r\n                                    value: self.list[_column.dindex][column.key]\r\n                                };\r\n                                self.config.body.onDBLClick.call(that);\r\n                            }\r\n                        }\r\n                    },\r\n                    \"rowSelector\": function (_column) {\r\n\r\n                    },\r\n                    \"lineNumber\": function (_column) {\r\n\r\n                    }\r\n                };\r\n\r\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\r\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\r\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\r\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\r\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\r\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\r\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\r\n\r\n            if (attr in targetDBLClick) {\r\n                targetDBLClick[attr]({\r\n                    panelName: panelName,\r\n                    attr: attr,\r\n                    row: row,\r\n                    col: col,\r\n                    dindex: dindex,\r\n                    rowIndex: rowIndex,\r\n                    colIndex: colIndex\r\n                });\r\n            }\r\n        });\r\n\r\n        if (this.config.contextMenu) {\r\n            this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\r\n                let target, dindex, rowIndex, colIndex, item, column, param = {};\r\n\r\n                target = U.findParentNode(e.target, function (t) {\r\n                    if (t.getAttribute(\"data-ax5grid-column-attr\")) {\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                if (target) {\r\n                    // item 찾기\r\n                    rowIndex = Number(target.getAttribute(\"data-ax5grid-column-rowIndex\"));\r\n                    colIndex = Number(target.getAttribute(\"data-ax5grid-column-colIndex\"));\r\n                    dindex = Number(target.getAttribute(\"data-ax5grid-data-index\"));\r\n                    column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\r\n                    item = self.list[dindex];\r\n                }\r\n\r\n                if (!self.contextMenu) {\r\n                    self.contextMenu = new ax5.ui.menu();\r\n                }\r\n\r\n                self.contextMenu.setConfig(self.config.contextMenu);\r\n\r\n                param = {\r\n                    element: target,\r\n                    dindex: dindex,\r\n                    rowIndex: rowIndex,\r\n                    colIndex: colIndex,\r\n                    item: item,\r\n                    column: column,\r\n                    gridSelf: self\r\n                };\r\n\r\n                self.contextMenu.popup(e, {\r\n                    filter: function () {\r\n                        return self.config.contextMenu.popupFilter.call(this, this, param);\r\n                    },\r\n                    param: param\r\n                });\r\n\r\n                U.stopEvent(e.originalEvent);\r\n                target = null;\r\n                dindex = null;\r\n                rowIndex = null;\r\n                colIndex = null;\r\n                item = null;\r\n                column = null;\r\n                param = null;\r\n            });\r\n        }\r\n\r\n        this.$[\"container\"][\"body\"]\r\n            .on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\r\n                if (self.xvar.touchmoved) return false;\r\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\r\n                    columnSelector.on.call(self, {\r\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\r\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\r\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\r\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\r\n                        colspan: Number(this.getAttribute(\"colspan\"))\r\n                    });\r\n                }\r\n            })\r\n            .on(\"dragstart\", function (e) {\r\n                U.stopEvent(e);\r\n                return false;\r\n            });\r\n\r\n        resetFrozenColumn.call(this);\r\n\r\n        // 그리드 바디에 출력할 여유 카운트\r\n        this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\r\n        this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\r\n    };\r\n\r\n    const resetFrozenColumn = function () {\r\n        let cfg = this.config,\r\n            dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\r\n\r\n\r\n        this.asideBodyRowData = (function (dataTable) {\r\n            let data = {rows: []};\r\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\r\n                data.rows[i] = {cols: []};\r\n                if (i === 0) {\r\n                    let col = {\r\n                        label: \"\",\r\n                        colspan: 1,\r\n                        rowspan: dataTable.rows.length,\r\n                        colIndex: null\r\n                    }, _col = {};\r\n\r\n                    if (cfg.showLineNumber) {\r\n                        _col = jQuery.extend({}, col, {\r\n                            width: cfg.lineNumberColumnWidth,\r\n                            _width: cfg.lineNumberColumnWidth,\r\n                            columnAttr: \"lineNumber\",\r\n                            label: \"&nbsp;\", key: \"__d-index__\"\r\n                        });\r\n                        data.rows[i].cols.push(_col);\r\n                    }\r\n                    if (cfg.showRowSelector) {\r\n                        _col = jQuery.extend({}, col, {\r\n                            width: cfg.rowSelectorColumnWidth,\r\n                            _width: cfg.rowSelectorColumnWidth,\r\n                            columnAttr: \"rowSelector\",\r\n                            label: \"\", key: \"__d-checkbox__\"\r\n                        });\r\n                        data.rows[i].cols.push(_col);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return data;\r\n        }).call(this, this.bodyRowTable);\r\n        \r\n        //console.log(dividedBodyRowObj);\r\n        \r\n        this.leftBodyRowData = dividedBodyRowObj.leftData;\r\n        this.bodyRowData = dividedBodyRowObj.rightData;\r\n\r\n        if (cfg.body.grouping) {\r\n            let dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\r\n            this.asideBodyGroupingData = (function (dataTable) {\r\n                let data = {rows: []};\r\n                for (let i = 0, l = dataTable.rows.length; i < l; i++) {\r\n                    data.rows[i] = {cols: []};\r\n                    if (i === 0) {\r\n                        let col = {\r\n                            label: \"\",\r\n                            colspan: 1,\r\n                            rowspan: dataTable.rows.length,\r\n                            colIndex: null\r\n                        }, _col = {};\r\n\r\n                        if (cfg.showLineNumber) {\r\n                            _col = jQuery.extend({}, col, {\r\n                                width: cfg.lineNumberColumnWidth,\r\n                                _width: cfg.lineNumberColumnWidth,\r\n                                columnAttr: \"lineNumber\",\r\n                                label: \"&nbsp;\", key: \"__d-index__\"\r\n                            });\r\n                            data.rows[i].cols.push(_col);\r\n                        }\r\n                        if (cfg.showRowSelector) {\r\n                            _col = jQuery.extend({}, col, {\r\n                                width: cfg.rowSelectorColumnWidth,\r\n                                _width: cfg.rowSelectorColumnWidth,\r\n                                columnAttr: \"rowSelector\",\r\n                                label: \"\", key: \"__d-checkbox__\"\r\n                            });\r\n                            data.rows[i].cols.push(_col);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return data;\r\n            }).call(this, this.bodyGroupingTable);\r\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\r\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\r\n            this.bodyGroupingMap = GRID.util.makeBodyRowMap.call(this, this.bodyGroupingTable);\r\n        }\r\n\r\n        this.leftFootSumData = {};\r\n        this.footSumData = {};\r\n        if (this.config.footSum) {\r\n            let dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\r\n            this.leftFootSumData = dividedFootSumObj.leftData;\r\n            this.footSumData = dividedFootSumObj.rightData;\r\n        }\r\n    };\r\n\r\n    const getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\r\n        let _key = _col.key, tagsToReplace = {\r\n            '<': '&lt;',\r\n            '>': '&gt;'\r\n        };\r\n\r\n        if (_key === \"__d-index__\") {\r\n            return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\r\n        }\r\n        else if (_key === \"__d-checkbox__\") {\r\n            return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\r\n        }\r\n        else {\r\n            if (_col.editor && (function (_editor) {\r\n                    if (_editor.type in GRID.inlineEditor) {\r\n                        return (GRID.inlineEditor[_editor.type].editMode == \"inline\");\r\n                    }\r\n                    return false;\r\n                })(_col.editor)) { // editor가 inline타입이라면\r\n\r\n                _value = _value || GRID.data.getValue.call(this, (typeof _item.__origin_index__ === \"undefined\") ? _index : _item.__origin_index__, _key);\r\n\r\n                if (U.isFunction(_col.editor.disabled)) {\r\n                    if (_col.editor.disabled.call({\r\n                            list: _list,\r\n                            dindex: _index,\r\n                            item: _list[_index],\r\n                            key: _key,\r\n                            value: _value\r\n                        })) {\r\n                        return _value;\r\n                    }\r\n                }\r\n\r\n                // print editor\r\n                return _returnPlainText ? _value : GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\r\n            }\r\n\r\n            const valueProcessor = {\r\n                \"formatter\": function () {\r\n                    let that = {\r\n                        key: _key,\r\n                        value: _value || GRID.data.getValue.call(this, (typeof _item.__origin_index__ === \"undefined\") ? _index : _item.__origin_index__, _key),\r\n                        dindex: _index,\r\n                        item: _item,\r\n                        list: _list\r\n                    };\r\n                    if (U.isFunction(_col.formatter)) {\r\n                        return _col.formatter.call(that);\r\n                    } else {\r\n                        return GRID.formatter[_col.formatter].call(that);\r\n                    }\r\n                },\r\n                \"default\": function () {\r\n                    let returnValue = \"\";\r\n\r\n                    if (typeof _value !== \"undefined\") {\r\n                        returnValue = _value;\r\n                    } else {\r\n                        _value = GRID.data.getValue.call(this, (typeof _item.__origin_index__ === \"undefined\") ? _index : _item.__origin_index__, _key);\r\n                        if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\r\n                    }\r\n\r\n                    // 키값이 Boolean일때 오류 발생하여 수정.\r\n                    return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\r\n                            return tagsToReplace[tag] || tag;\r\n                        });\r\n                },\r\n                \"treeControl\": function (__value) {\r\n                    let cfg = this.config,\r\n                        keys = this.config.tree.columnKeys,\r\n                        indentNodeHtml = '';\r\n\r\n                    if (_item[keys.children].length) {\r\n                        indentNodeHtml += '<a ' +\r\n                            'data-ax5grid-data-index=\"' + _index + '\" ' +\r\n                            'data-ax5grid-column-attr=\"tree-control\" ' +\r\n                            'data-ax5grid-tnode-arrow=\"\" ' +\r\n                            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\r\n                            '>';\r\n                        indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\r\n                        indentNodeHtml += '</a>';\r\n                    } else {\r\n                        indentNodeHtml += '<span ' +\r\n                            'data-ax5grid-tnode-arrow=\"\" ' +\r\n                            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\r\n                            '>&nbsp;</span>';\r\n                    }\r\n\r\n                    indentNodeHtml += '<span ' +\r\n                        'data-ax5grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\r\n                        'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\r\n                        '>';\r\n                    indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\r\n                    indentNodeHtml += '</span>';\r\n\r\n                    return indentNodeHtml + __value;\r\n                }\r\n            };\r\n\r\n            let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\r\n            if (this.config.tree.use && _col.treeControl) {\r\n                returnValue = valueProcessor.treeControl.call(this, returnValue);\r\n            }\r\n\r\n            return returnValue;\r\n        }\r\n\r\n    };\r\n\r\n    const getGroupingValue = function (_item, _index, _col) {\r\n        let value, that, _key = _col.key, _label = _col.label;\r\n\r\n        if (typeof _key === \"undefined\") {\r\n            that = {\r\n                key: _key,\r\n                list: _item.__groupingList,\r\n                groupBy: _item.__groupingBy\r\n            };\r\n            if (U.isFunction(_label)) {\r\n                value = _label.call(that);\r\n            } else {\r\n                value = _label;\r\n            }\r\n            _item[_col.colIndex] = value;\r\n            return value;\r\n        }\r\n        else if (_key === \"__d-index__\") {\r\n            return '';\r\n        }\r\n        else if (_key === \"__d-checkbox__\") {\r\n            return '';\r\n        }\r\n        else {\r\n            if (_col.collector) {\r\n                that = {\r\n                    key: _key,\r\n                    list: _item.__groupingList\r\n                };\r\n                if (U.isFunction(_col.collector)) {\r\n                    value = _col.collector.call(that);\r\n                } else {\r\n                    value = GRID.collector[_col.collector].call(that);\r\n                }\r\n                _item[_col.colIndex] = value;\r\n\r\n                if (_col.formatter) {\r\n                    that.value = value;\r\n                    if (U.isFunction(_col.formatter)) {\r\n                        return _col.formatter.call(that);\r\n                    } else {\r\n                        return GRID.formatter[_col.formatter].call(that);\r\n                    }\r\n                } else {\r\n                    return value;\r\n                }\r\n            } else {\r\n                return \"&nbsp;\";\r\n            }\r\n        }\r\n    };\r\n\r\n    const getSumFieldValue = function (_list, _col) {\r\n        let _key = _col.key, _label = _col.label;\r\n        //, _collector, _formatter\r\n        if (typeof _key === \"undefined\") {\r\n            return _label;\r\n        }\r\n        else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\r\n            return '&nbsp;';\r\n        }\r\n        else {\r\n            if (_col.collector) {\r\n                let that = {\r\n                        key: _key,\r\n                        list: _list\r\n                    },\r\n                    value;\r\n\r\n                if (U.isFunction(_col.collector)) {\r\n                    value = _col.collector.call(that);\r\n                } else {\r\n                    value = GRID.collector[_col.collector].call(that);\r\n                }\r\n\r\n                if (_col.formatter) {\r\n                    that.value = value;\r\n                    if (U.isFunction(_col.formatter)) {\r\n                        return _col.formatter.call(that);\r\n                    } else {\r\n                        return GRID.formatter[_col.formatter].call(that);\r\n                    }\r\n                } else {\r\n                    return value;\r\n                }\r\n\r\n            } else {\r\n                return \"&nbsp;\";\r\n            }\r\n        }\r\n    };\r\n\r\n    const repaint = function (_reset) {\r\n        // debugger;\r\n        let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\r\n\r\n        /// repaint reset 타입이면 고정컬럼을 재조정\r\n        if (_reset) {\r\n            resetFrozenColumn.call(this);\r\n            // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\r\n            this.xvar.paintStartRowIndex = undefined;\r\n            this.xvar.paintStartColumnIndex = undefined;\r\n        }\r\n\r\n        /// 출력시작 인덱스\r\n        let paintStartRowIndex, virtualPaintStartRowIndex;\r\n\r\n        if (this.config.virtualScrollY) {\r\n            virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\r\n            if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\r\n                paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\r\n            }\r\n        }\r\n        else {\r\n            paintStartRowIndex = this.xvar.frozenRowIndex;\r\n        }\r\n\r\n        if (isNaN(paintStartRowIndex)) return this;\r\n\r\n        let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\r\n\r\n        let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\r\n\r\n        if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\r\n            for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\r\n                // bodyScrollLeft\r\n                this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\r\n                this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\r\n\r\n                if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\r\n                    paintStartColumnIndex = ci;\r\n                }\r\n                if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\r\n                    paintEndColumnIndex = ci;\r\n\r\n                    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\r\n                    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\r\n                }\r\n            }\r\n\r\n            if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\r\n            if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\r\n            this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\r\n            this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\r\n            this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\r\n        }\r\n\r\n        let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\r\n            headerColGroup = this.headerColGroup,\r\n            asideBodyRowData = this.asideBodyRowData,\r\n            leftBodyRowData = this.leftBodyRowData,\r\n            bodyRowData = this.bodyRowData,\r\n            leftFootSumData = this.leftFootSumData,\r\n            footSumData = this.footSumData,\r\n            asideBodyGroupingData = this.asideBodyGroupingData,\r\n            leftBodyGroupingData = this.leftBodyGroupingData,\r\n            bodyGroupingData = this.bodyGroupingData,\r\n            bodyAlign = cfg.body.align,\r\n            paintRowCount, virtualPaintRowCount;\r\n\r\n        if (!this.config.virtualScrollY) {\r\n            virtualPaintRowCount = paintRowCount = list.length;\r\n        } else {\r\n            virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\r\n            paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\r\n        }\r\n\r\n        // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\r\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\r\n            paintStartRowIndex = this.xvar.paintStartRowIndex;\r\n        }\r\n\r\n        if (\r\n            this.xvar.dataRowCount === list.length\r\n            && this.xvar.paintStartRowIndex === paintStartRowIndex\r\n            && this.xvar.paintRowCount === paintRowCount\r\n            && this.xvar.paintStartColumnIndex === paintStartColumnIndex\r\n            && this.xvar.paintEndColumnIndex === paintEndColumnIndex\r\n        ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\r\n\r\n        // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\r\n        if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\r\n            headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\r\n            bodyRowData = GRID.util.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\r\n\r\n            if (cfg.body.grouping) {\r\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\r\n            }\r\n            if (cfg.footSum) {\r\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\r\n            }\r\n            if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\r\n                this.needToPaintSum = true;\r\n            }\r\n        }\r\n\r\n\r\n        /*\r\n        if (!this.config.virtualScrollX && document.addEventListener && ax5.info.supportTouch) {\r\n            paintRowCount = paintRowCount * 2;\r\n        }\r\n         */\r\n\r\n        /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\r\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\r\n        /// 사용된 패널들의 키 모음\r\n        this.$.livePanelKeys = [];\r\n\r\n        // 그리드 바디 영역 페인트 함수\r\n        /**\r\n         * @param _elTargetKey\r\n         * @param _colGroup\r\n         * @param _bodyRow\r\n         * @param _groupRow\r\n         * @param _list\r\n         * @param [_scrollConfig]\r\n         * @returns {boolean}\r\n         */\r\n        let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\r\n            let _elTarget = this.$.panel[_elTargetKey];\r\n\r\n            if (!isFirstPaint && !_scrollConfig) {\r\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\r\n                return false;\r\n            }\r\n\r\n            let SS = [],\r\n                cgi, cgl, di, dl, tri, trl, ci, cl, col, cellHeight, colAlign,\r\n                isScrolled = (function () {\r\n                    // 스크롤값이 변경되거나 처음 호출되었습니까?\r\n                    if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\r\n                        _scrollConfig = {\r\n                            paintStartRowIndex: 0,\r\n                            paintRowCount: _list.length\r\n                        };\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                })();\r\n\r\n            if (isScrolled) {\r\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\r\n            }\r\n\r\n            // 가로 가상 스크롤 적용하지 않는 경우\r\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\r\n            SS.push('<colgroup>');\r\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\r\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\r\n            }\r\n            SS.push('<col  />');\r\n            SS.push('</colgroup>');\r\n\r\n\r\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\r\n                let len;\r\n                len = _list.length;\r\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\r\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\r\n                }\r\n                return len;\r\n            })(); di < dl; di++) {\r\n                if (_list[di]) {\r\n                    let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\r\n                    if (_groupRow && \"__isGrouping\" in _list[di]) {\r\n                        rowTable = _groupRow;\r\n                        isGroupingRow = true;\r\n                    } else {\r\n                        rowTable = _bodyRow;\r\n                    }\r\n\r\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\r\n\r\n                        SS.push('<tr class=\"tr-' + (di % 4) + '\"',\r\n                            (isGroupingRow) ? ' data-ax5grid-grouping-tr=\"true\"' : '',\r\n                            ' data-ax5grid-tr-data-index=\"' + di + '\"',\r\n                            ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\r\n                            ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\r\n                            '>');\r\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\r\n                            col = rowTable.rows[tri].cols[ci];\r\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\r\n                            colAlign = col.align || bodyAlign;\r\n\r\n                            SS.push('<td ',\r\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\r\n                                'data-ax5grid-data-index=\"' + di + '\" ',\r\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\r\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\r\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\r\n                                (function (_focusedColumn, _selectedColumn) {\r\n                                    let attrs = \"\";\r\n                                    if (_focusedColumn) {\r\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\r\n                                    }\r\n                                    if (_selectedColumn) {\r\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\r\n                                    }\r\n                                    return attrs;\r\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\r\n                                'colspan=\"' + col.colspan + '\" ',\r\n                                'rowspan=\"' + col.rowspan + '\" ',\r\n                                'class=\"' + (function (_col) {\r\n                                    let tdCSS_class = \"\";\r\n                                    if (_col.styleClass) {\r\n                                        if (U.isFunction(_col.styleClass)) {\r\n                                            tdCSS_class += _col.styleClass.call({\r\n                                                    column: _col,\r\n                                                    key: _col.key,\r\n                                                    item: _list[di],\r\n                                                    index: di\r\n                                                }) + \" \";\r\n                                        } else {\r\n                                            tdCSS_class += _col.styleClass + \" \";\r\n                                        }\r\n                                    }\r\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                                    return tdCSS_class;\r\n                                }).call(this, col) + '\" ',\r\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n\r\n                            SS.push((function (_cellHeight) {\r\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\r\n                                if (!col.multiLine) {\r\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\r\n                                }\r\n\r\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\r\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                                    '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\r\n\r\n                            })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\r\n\r\n                            SS.push('</td>');\r\n                        }\r\n                        SS.push('<td ',\r\n                            'data-ax5grid-column-row=\"null\" ',\r\n                            'data-ax5grid-column-col=\"null\" ',\r\n                            'data-ax5grid-data-index=\"' + odi + '\" ',\r\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\r\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\r\n                            '></td>');\r\n                        SS.push('</tr>');\r\n                    }\r\n                }\r\n            }\r\n            SS.push('</table>');\r\n\r\n            if (isScrolled && _list.length) {\r\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\r\n            }\r\n\r\n            _elTarget.empty();\r\n            SS = SS.join('');\r\n\r\n            if (this.config.virtualScrollAccelerated && _elTargetKey !== \"aside-body-scroll\") {\r\n                setTimeout(function () {\r\n                    _elTarget.get(0).innerHTML = SS;\r\n                });\r\n            } else {\r\n                _elTarget.get(0).innerHTML = SS;\r\n            }\r\n\r\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @param _elTargetKey\r\n         * @param _colGroup\r\n         * @param _bodyRow\r\n         * @param _list\r\n         * @param [_scrollConfig]\r\n         * @returns {boolean}\r\n         */\r\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\r\n            let _elTarget = this.$.panel[_elTargetKey];\r\n\r\n            if (!isFirstPaint && !_scrollConfig) {\r\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\r\n                return false;\r\n            }\r\n\r\n            let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\r\n\r\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\r\n            SS.push('<colgroup>');\r\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\r\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\r\n            }\r\n            SS.push('<col  />');\r\n            SS.push('</colgroup>');\r\n\r\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\r\n                SS.push('<tr class=\"tr-sum\">');\r\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\r\n                    col = _bodyRow.rows[tri].cols[ci];\r\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\r\n                    colAlign = col.align || bodyAlign;\r\n\r\n                    SS.push('<td ',\r\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\r\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\r\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\r\n                        (function (_focusedColumn, _selectedColumn) {\r\n                            var attrs = \"\";\r\n                            if (_focusedColumn) {\r\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\r\n                            }\r\n                            if (_selectedColumn) {\r\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\r\n                            }\r\n                            return attrs;\r\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\r\n                        'colspan=\"' + col.colspan + '\" ',\r\n                        'rowspan=\"' + col.rowspan + '\" ',\r\n                        'class=\"' + (function (_col) {\r\n                            var tdCSS_class = \"\";\r\n                            if (_col.styleClass) {\r\n                                if (U.isFunction(_col.styleClass)) {\r\n                                    tdCSS_class += _col.styleClass.call({\r\n                                            column: _col,\r\n                                            key: _col.key,\r\n                                            isFootSum: true\r\n                                        }) + \" \";\r\n                                } else {\r\n                                    tdCSS_class += _col.styleClass + \" \";\r\n                                }\r\n                            }\r\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                            return tdCSS_class;\r\n                        }).call(this, col) + '\" ',\r\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n\r\n                    SS.push((function (_cellHeight) {\r\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\r\n                        if (!col.multiLine) {\r\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\r\n                        }\r\n\r\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\r\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\r\n\r\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\r\n\r\n                    SS.push('</td>');\r\n                }\r\n                SS.push('<td ',\r\n                    'data-ax5grid-column-row=\"null\" ',\r\n                    'data-ax5grid-column-col=\"null\" ',\r\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\r\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\r\n                    '></td>');\r\n                SS.push('</tr>');\r\n            }\r\n\r\n            SS.push('</table>');\r\n\r\n            _elTarget.empty();\r\n            SS = SS.join('');\r\n            if (this.config.virtualScrollAccelerated) {\r\n                setTimeout(function () {\r\n                    _elTarget.get(0).innerHTML = SS;\r\n                });\r\n            } else {\r\n                _elTarget.get(0).innerHTML = SS;\r\n            }\r\n\r\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @param _elTargetKey\r\n         * @param _colGroup\r\n         * @param _bodyRow\r\n         * @param _list\r\n         * @param [_scrollConfig]\r\n         * @returns {boolean}\r\n         */\r\n        let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\r\n            let tblRowMaps = [];\r\n            let _elTarget = this.$.panel[_elTargetKey];\r\n            let token = {}, hasMergeTd;\r\n            //console.log(_elTarget);\r\n\r\n            // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\r\n            let tableTrs = _elTarget.find(\"tr\");\r\n            for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\r\n                let tableTrTds, trMaps;\r\n\r\n                if (!tableTrs[ri].getAttribute(\"data-ax5grid-grouping-tr\")) {\r\n                    tableTrTds = tableTrs[ri].childNodes;\r\n                    trMaps = [];\r\n                    for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\r\n                        let tdObj = {\r\n                            \"$\": jQuery(tableTrTds[ci])\r\n                        };\r\n\r\n                        if (tdObj[\"$\"].attr(\"data-ax5grid-column-col\") != \"null\") {\r\n                            tdObj.dindex = tdObj[\"$\"].attr(\"data-ax5grid-data-index\");\r\n                            tdObj.tri = tdObj[\"$\"].attr(\"data-ax5grid-column-row\");\r\n                            tdObj.ci = tdObj[\"$\"].attr(\"data-ax5grid-column-col\");\r\n                            tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-rowIndex\");\r\n                            tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-colIndex\");\r\n                            tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\r\n                            tdObj.text = tdObj[\"$\"].text();\r\n                            trMaps.push(tdObj);\r\n                        }\r\n\r\n                        tdObj = null;\r\n                    }\r\n                    tblRowMaps.push(trMaps);\r\n                }\r\n\r\n            }\r\n\r\n\r\n            // 두줄이상 일 때 의미가 있으니.\r\n            if (tblRowMaps.length > 1) {\r\n                hasMergeTd = false;\r\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\r\n                    let prevTokenColIndexs = [];\r\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\r\n                        // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\r\n                        if (!_colGroup[ci].editor && (() => {\r\n                                if (U.isArray(cfg.body.mergeCells)) {\r\n                                    return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\r\n                                } else {\r\n                                    return true;\r\n                                }\r\n                            })()) {\r\n\r\n                            // 앞줄과 값이 같다면.\r\n                            if (token[ci] && (() => {\r\n                                    if (prevTokenColIndexs.length > 0) {\r\n                                        let hasFalse = true;\r\n                                        prevTokenColIndexs.forEach(function (ti) {\r\n                                            if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\r\n                                                hasFalse = false;\r\n                                            }\r\n                                        });\r\n                                        return hasFalse;\r\n                                    } else {\r\n                                        return true;\r\n                                    }\r\n                                })() && token[ci].text == tblRowMaps[ri][ci].text) {\r\n                                tblRowMaps[ri][ci].rowspan = 0;\r\n                                tblRowMaps[token[ci].ri][ci].rowspan++;\r\n                                hasMergeTd = true;\r\n                            } else {\r\n                                token[ci] = {\r\n                                    ri: ri,\r\n                                    ci: ci,\r\n                                    text: tblRowMaps[ri][ci].text\r\n                                };\r\n                            }\r\n\r\n                            prevTokenColIndexs.push(ci);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // rowspan을 다 구했으면 적용합니다.\r\n                if (hasMergeTd) {\r\n                    for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\r\n                        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\r\n                            if (tblRowMaps[ri][ci].rowspan == 0) {\r\n                                tblRowMaps[ri][ci][\"$\"].remove();\r\n                            } else if (tblRowMaps[ri][ci].rowspan > 1) {\r\n                                tblRowMaps[ri][ci][\"$\"]\r\n                                    .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\r\n                                    .addClass(\"merged\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        let scrollConfig = {\r\n            paintStartRowIndex: paintStartRowIndex,\r\n            paintRowCount: paintRowCount,\r\n            paintStartColumnIndex: paintStartColumnIndex,\r\n            paintEndColumnIndex: paintEndColumnIndex,\r\n            nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\r\n            nopaintRightColumnsWidth: nopaintRightColumnsWidth,\r\n            bodyTrHeight: this.xvar.bodyTrHeight,\r\n            virtualScrollX: this.config.virtualScrollX,\r\n            virtualScrollY: this.config.virtualScrollY,\r\n        };\r\n\r\n        // aside\r\n        if (cfg.asidePanelWidth > 0) {\r\n            if (this.xvar.frozenRowIndex > 0) {\r\n                // 상단 행고정\r\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\r\n            }\r\n\r\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\r\n\r\n            if (cfg.footSum) {\r\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\r\n                //repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\r\n            }\r\n        }\r\n\r\n        // left\r\n        if (this.xvar.frozenColumnIndex > 0) {\r\n            if (this.xvar.frozenRowIndex > 0) {\r\n                // 상단 행고정\r\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), jQuery.extend({}, scrollConfig, {\r\n                    paintStartRowIndex: 0,\r\n                    paintRowCount: this.xvar.frozenRowIndex\r\n                }));\r\n            }\r\n\r\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\r\n\r\n            if (cfg.footSum && this.needToPaintSum) {\r\n                // 바닥 요약\r\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\r\n            }\r\n        }\r\n\r\n        // body\r\n        if (this.xvar.frozenRowIndex > 0) {\r\n            // 상단 행고정\r\n            repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), jQuery.extend({}, scrollConfig, {\r\n                paintStartRowIndex: 0,\r\n                paintRowCount: this.xvar.frozenRowIndex\r\n            }));\r\n        }\r\n        repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\r\n\r\n        // 바닥 요약\r\n        if (cfg.footSum && this.needToPaintSum) {\r\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\r\n        }\r\n        // right\r\n        if (cfg.rightSum) {\r\n            // todo : right 표현 정리\r\n        }\r\n\r\n        /// mergeCells\r\n        if (cfg.body.mergeCells && this.list.length) {\r\n            // left\r\n            if (this.xvar.frozenColumnIndex > 0) {\r\n                if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\r\n                    // console.log(this.leftHeaderColGroup, leftBodyRowData);\r\n                    mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\r\n                }\r\n                mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\r\n            }\r\n\r\n            // body\r\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\r\n                mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\r\n            }\r\n            mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\r\n        }\r\n\r\n        this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\r\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\r\n        this.xvar.paintRowCount = paintRowCount;\r\n        this.xvar.virtualPaintRowCount = virtualPaintRowCount;\r\n        this.xvar.paintStartColumnIndex = paintStartColumnIndex;\r\n        this.xvar.paintEndColumnIndex = paintEndColumnIndex;\r\n        this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\r\n        this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\r\n        this.xvar.dataRowCount = list.length;\r\n        this.needToPaintSum = false;\r\n\r\n        GRID.page.statusUpdate.call(this);\r\n    };\r\n\r\n    const repaintCell = function (_panelName, _dindex, _rowIndex, _colIndex, _newValue) {\r\n        let self = this,\r\n            cfg = this.config,\r\n            list = this.list;\r\n\r\n        let updateCell = this.$[\"panel\"][_panelName]\r\n                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\r\n                .find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]')\r\n                .find('[data-ax5grid-cellholder]'),\r\n            colGroup = this.colGroup,\r\n            col = colGroup[_colIndex];\r\n\r\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\r\n\r\n        if (col.editor && col.editor.updateWith) {\r\n            col.editor.updateWith.forEach(function (updateColumnKey) {\r\n                colGroup.forEach(function (col) {\r\n                    if (col.key == updateColumnKey) {\r\n                        let rowIndex = col.rowIndex, colIndex = col.colIndex,\r\n                            panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\r\n                            updateWithCell = self.$[\"panel\"][panelName]\r\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\r\n                                .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\r\n                                .find('[data-ax5grid-cellholder]');\r\n\r\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        /// ~~~~~~\r\n\r\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\r\n            headerColGroup = this.headerColGroup,\r\n            leftFootSumData = this.leftFootSumData,\r\n            footSumData = this.footSumData,\r\n            leftBodyGroupingData = this.leftBodyGroupingData,\r\n            bodyGroupingData = this.bodyGroupingData,\r\n            bodyAlign = cfg.body.align,\r\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\r\n            scrollConfig = {\r\n                paintStartRowIndex: paintStartRowIndex,\r\n                paintRowCount: paintRowCount,\r\n                bodyTrHeight: this.xvar.bodyTrHeight\r\n            };\r\n\r\n        if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\r\n            headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\r\n            if (cfg.body.grouping) {\r\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\r\n            }\r\n            if (cfg.footSum) {\r\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\r\n            }\r\n        }\r\n\r\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\r\n            let _elTarget = this.$.panel[_elTargetKey],\r\n                SS = [],\r\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\r\n\r\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\r\n            SS.push('<colgroup>');\r\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\r\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\r\n            }\r\n            SS.push('<col  />');\r\n            SS.push('</colgroup>');\r\n\r\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\r\n                SS.push('<tr class=\"tr-sum\">');\r\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\r\n                    col = _bodyRow.rows[tri].cols[ci];\r\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\r\n                    colAlign = col.align || bodyAlign;\r\n\r\n                    SS.push('<td ',\r\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\r\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\r\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\r\n                        (function (_focusedColumn, _selectedColumn) {\r\n                            var attrs = \"\";\r\n                            if (_focusedColumn) {\r\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\r\n                            }\r\n                            if (_selectedColumn) {\r\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\r\n                            }\r\n                            return attrs;\r\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\r\n                        'colspan=\"' + col.colspan + '\" ',\r\n                        'rowspan=\"' + col.rowspan + '\" ',\r\n                        'class=\"' + (function (_col) {\r\n                            let tdCSS_class = \"\";\r\n                            if (_col.styleClass) {\r\n                                if (U.isFunction(_col.styleClass)) {\r\n                                    tdCSS_class += _col.styleClass.call({\r\n                                            column: _col,\r\n                                            key: _col.key,\r\n                                            isFootSum: true\r\n                                        }) + \" \";\r\n                                } else {\r\n                                    tdCSS_class += _col.styleClass + \" \";\r\n                                }\r\n                            }\r\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                            return tdCSS_class;\r\n                        }).call(this, col) + '\" ',\r\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n\r\n                    SS.push((function (_cellHeight) {\r\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\r\n                        if (!col.multiLine) {\r\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\r\n                        }\r\n\r\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\r\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\r\n\r\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\r\n\r\n                    SS.push('</td>');\r\n                }\r\n                SS.push('<td ',\r\n                    'data-ax5grid-column-row=\"null\" ',\r\n                    'data-ax5grid-column-col=\"null\" ',\r\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\r\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\r\n                    '></td>');\r\n                SS.push('</tr>');\r\n            }\r\n\r\n            SS.push('</table>');\r\n\r\n            _elTarget.empty().get(0).innerHTML = SS.join('');\r\n            return true;\r\n        };\r\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\r\n            let _elTarget = this.$.panel[_elTargetKey],\r\n                SS = [],\r\n                di, dl, tri, trl, ci, cl,\r\n                col, cellHeight, colAlign;\r\n\r\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\r\n                let len;\r\n                len = _list.length;\r\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\r\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\r\n                }\r\n                return len;\r\n            })(); di < dl; di++) {\r\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\r\n                    let rowTable = _groupRow;\r\n                    SS = [];\r\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\r\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\r\n                            col = rowTable.rows[tri].cols[ci];\r\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\r\n                            colAlign = col.align || bodyAlign;\r\n\r\n                            SS.push('<td ',\r\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\r\n                                'data-ax5grid-data-index=\"' + di + '\" ',\r\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\r\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\r\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\r\n                                (function (_focusedColumn, _selectedColumn) {\r\n                                    let attrs = \"\";\r\n                                    if (_focusedColumn) {\r\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\r\n                                    }\r\n                                    if (_selectedColumn) {\r\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\r\n                                    }\r\n                                    return attrs;\r\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\r\n                                'colspan=\"' + col.colspan + '\" ',\r\n                                'rowspan=\"' + col.rowspan + '\" ',\r\n                                'class=\"' + (function (_col) {\r\n                                    let tdCSS_class = \"\";\r\n                                    if (_col.styleClass) {\r\n                                        if (U.isFunction(_col.styleClass)) {\r\n                                            tdCSS_class += _col.styleClass.call({\r\n                                                    column: _col,\r\n                                                    key: _col.key,\r\n                                                    item: _list[di],\r\n                                                    index: di\r\n                                                }) + \" \";\r\n                                        } else {\r\n                                            tdCSS_class += _col.styleClass + \" \";\r\n                                        }\r\n                                    }\r\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                                    return tdCSS_class;\r\n                                }).call(this, col) + '\" ',\r\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n\r\n                            SS.push((function (_cellHeight) {\r\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\r\n                                if (!col.multiLine) {\r\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\r\n                                }\r\n\r\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\r\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                                    '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\r\n\r\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\r\n\r\n                            SS.push('</td>');\r\n                        }\r\n                        SS.push('<td ',\r\n                            'data-ax5grid-column-row=\"null\" ',\r\n                            'data-ax5grid-column-col=\"null\" ',\r\n                            'data-ax5grid-data-index=\"' + di + '\" ',\r\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\r\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\r\n                            '></td>');\r\n                    }\r\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\r\n                }\r\n            }\r\n        };\r\n\r\n        // body.grouping tr 다시 그리기..\r\n        if (cfg.body.grouping) {\r\n            // left\r\n            if (this.xvar.frozenColumnIndex > 0) {\r\n                if (this.xvar.frozenRowIndex > 0) {\r\n                    // 상단 행고정\r\n                    replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\r\n                        paintStartRowIndex: 0,\r\n                        paintRowCount: this.xvar.frozenRowIndex,\r\n                        bodyTrHeight: this.xvar.bodyTrHeight\r\n                    });\r\n                }\r\n                replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\r\n            }\r\n\r\n            // body\r\n            if (this.xvar.frozenRowIndex > 0) {\r\n                // 상단 행고정\r\n                replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\r\n                    paintStartRowIndex: 0,\r\n                    paintRowCount: this.xvar.frozenRowIndex,\r\n                    bodyTrHeight: this.xvar.bodyTrHeight\r\n                });\r\n            }\r\n\r\n            replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\r\n        }\r\n\r\n        if (this.xvar.frozenColumnIndex > 0) {\r\n            if (cfg.footSum && this.needToPaintSum) {\r\n                // 바닥 요약\r\n                repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\r\n            }\r\n        }\r\n\r\n        if (cfg.footSum && this.needToPaintSum) {\r\n            // 바닥 요약\r\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\r\n        }\r\n    };\r\n\r\n    const repaintRow = function (_dindex) {\r\n        let self = this,\r\n            cfg = this.config,\r\n            list = this.list;\r\n        /// ~~~~~~\r\n\r\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\r\n            asideBodyRowData = this.asideBodyRowData,\r\n            leftBodyRowData = this.leftBodyRowData,\r\n            bodyRowData = this.bodyRowData,\r\n            leftFootSumData = this.leftFootSumData,\r\n            footSumData = this.footSumData,\r\n            asideBodyGroupingData = this.asideBodyGroupingData,\r\n            leftBodyGroupingData = this.leftBodyGroupingData,\r\n            bodyGroupingData = this.bodyGroupingData,\r\n            bodyAlign = cfg.body.align,\r\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\r\n            scrollConfig = {\r\n                paintStartRowIndex: paintStartRowIndex,\r\n                paintRowCount: paintRowCount,\r\n                bodyTrHeight: this.xvar.bodyTrHeight\r\n            };\r\n\r\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\r\n            let _elTarget = this.$.panel[_elTargetKey],\r\n                SS = [],\r\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\r\n\r\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\r\n            SS.push('<colgroup>');\r\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\r\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\r\n            }\r\n            SS.push('<col  />');\r\n            SS.push('</colgroup>');\r\n\r\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\r\n                SS.push('<tr class=\"tr-sum\">');\r\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\r\n                    col = _bodyRow.rows[tri].cols[ci];\r\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\r\n                    colAlign = col.align || bodyAlign;\r\n\r\n                    SS.push('<td ',\r\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\r\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\r\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\r\n                        (function (_focusedColumn, _selectedColumn) {\r\n                            var attrs = \"\";\r\n                            if (_focusedColumn) {\r\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\r\n                            }\r\n                            if (_selectedColumn) {\r\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\r\n                            }\r\n                            return attrs;\r\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\r\n                        'colspan=\"' + col.colspan + '\" ',\r\n                        'rowspan=\"' + col.rowspan + '\" ',\r\n                        'class=\"' + (function (_col) {\r\n                            var tdCSS_class = \"\";\r\n                            if (_col.styleClass) {\r\n                                if (U.isFunction(_col.styleClass)) {\r\n                                    tdCSS_class += _col.styleClass.call({\r\n                                            column: _col,\r\n                                            key: _col.key,\r\n                                            isFootSum: true\r\n                                        }) + \" \";\r\n                                } else {\r\n                                    tdCSS_class += _col.styleClass + \" \";\r\n                                }\r\n                            }\r\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                            return tdCSS_class;\r\n                        }).call(this, col) + '\" ',\r\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n\r\n                    SS.push((function (_cellHeight) {\r\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\r\n                        if (!col.multiLine) {\r\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\r\n                        }\r\n\r\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\r\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\r\n\r\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\r\n\r\n                    SS.push('</td>');\r\n                }\r\n                SS.push('<td ',\r\n                    'data-ax5grid-column-row=\"null\" ',\r\n                    'data-ax5grid-column-col=\"null\" ',\r\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\r\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\r\n                    '></td>');\r\n                SS.push('</tr>');\r\n            }\r\n\r\n            SS.push('</table>');\r\n\r\n            _elTarget.empty().get(0).innerHTML = SS.join('');\r\n            return true;\r\n        };\r\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\r\n            let _elTarget = this.$.panel[_elTargetKey],\r\n                SS = [],\r\n                di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\r\n\r\n            if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\r\n                _scrollConfig = {\r\n                    paintStartRowIndex: 0,\r\n                    paintRowCount: _list.length\r\n                };\r\n            }\r\n\r\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\r\n                let len;\r\n                len = _list.length;\r\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\r\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\r\n                }\r\n                return len;\r\n            })(); di < dl; di++) {\r\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\r\n                    let rowTable = _groupRow;\r\n                    SS = [];\r\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\r\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\r\n                            col = rowTable.rows[tri].cols[ci];\r\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\r\n                            colAlign = col.align || bodyAlign;\r\n\r\n                            SS.push('<td ',\r\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\r\n                                'data-ax5grid-data-index=\"' + di + '\" ',\r\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\r\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\r\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\r\n                                (function (_focusedColumn, _selectedColumn) {\r\n                                    let attrs = \"\";\r\n                                    if (_focusedColumn) {\r\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\r\n                                    }\r\n                                    if (_selectedColumn) {\r\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\r\n                                    }\r\n                                    return attrs;\r\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\r\n                                'colspan=\"' + col.colspan + '\" ',\r\n                                'rowspan=\"' + col.rowspan + '\" ',\r\n                                'class=\"' + (function (_col) {\r\n                                    let tdCSS_class = \"\";\r\n                                    if (_col.styleClass) {\r\n                                        if (U.isFunction(_col.styleClass)) {\r\n                                            tdCSS_class += _col.styleClass.call({\r\n                                                    column: _col,\r\n                                                    key: _col.key,\r\n                                                    item: _list[di],\r\n                                                    index: di\r\n                                                }) + \" \";\r\n                                        } else {\r\n                                            tdCSS_class += _col.styleClass + \" \";\r\n                                        }\r\n                                    }\r\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                                    return tdCSS_class;\r\n                                }).call(this, col) + '\" ',\r\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n\r\n                            SS.push((function (_cellHeight) {\r\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\r\n                                if (!col.multiLine) {\r\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\r\n                                }\r\n\r\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\r\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\r\n\r\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\r\n\r\n                            SS.push('</td>');\r\n                        }\r\n                        SS.push('<td ',\r\n                            'data-ax5grid-column-row=\"null\" ',\r\n                            'data-ax5grid-column-col=\"null\" ',\r\n                            'data-ax5grid-data-index=\"' + di + '\" ',\r\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\r\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\r\n                            '></td>');\r\n                    }\r\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\r\n                }\r\n            }\r\n        };\r\n        let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\r\n            let _elTarget = this.$.panel[_elTargetKey],\r\n                SS = [],\r\n                tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow;\r\n\r\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\r\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\r\n                    col = rowTable.rows[tri].cols[ci];\r\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\r\n                    colAlign = col.align || bodyAlign;\r\n\r\n                    SS.push('<td ',\r\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\r\n                        'data-ax5grid-data-index=\"' + di + '\" ',\r\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                        'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\r\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\r\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\r\n                        (function (_focusedColumn, _selectedColumn) {\r\n                            let attrs = \"\";\r\n                            if (_focusedColumn) {\r\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\r\n                            }\r\n                            if (_selectedColumn) {\r\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\r\n                            }\r\n                            return attrs;\r\n                        })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\r\n                        'colspan=\"' + col.colspan + '\" ',\r\n                        'rowspan=\"' + col.rowspan + '\" ',\r\n                        'class=\"' + (function (_col) {\r\n                            let tdCSS_class = \"\";\r\n                            if (_col.styleClass) {\r\n                                if (U.isFunction(_col.styleClass)) {\r\n                                    tdCSS_class += _col.styleClass.call({\r\n                                            column: _col,\r\n                                            key: _col.key,\r\n                                            item: _list[di],\r\n                                            index: di\r\n                                        }) + \" \";\r\n                                } else {\r\n                                    tdCSS_class += _col.styleClass + \" \";\r\n                                }\r\n                            }\r\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                            return tdCSS_class;\r\n                        }).call(this, col) + '\" ',\r\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n\r\n                    SS.push((function (_cellHeight) {\r\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\r\n                        if (!col.multiLine) {\r\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\r\n                        }\r\n\r\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\r\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\r\n\r\n                    })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\r\n                    SS.push('</td>');\r\n                }\r\n                SS.push('<td ',\r\n                    'data-ax5grid-column-row=\"null\" ',\r\n                    'data-ax5grid-column-col=\"null\" ',\r\n                    'data-ax5grid-data-index=\"' + di + '\" ',\r\n                    'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\r\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\r\n                    '></td>');\r\n            }\r\n\r\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\r\n        };\r\n\r\n        // left\r\n        if (this.xvar.frozenColumnIndex > 0) {\r\n            if (this.xvar.frozenRowIndex > _dindex) {\r\n                // 상단 행고정\r\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\r\n            } else {\r\n                replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\r\n            }\r\n        }\r\n\r\n        // body\r\n        if (this.xvar.frozenRowIndex > _dindex) {\r\n            // 상단 행고정\r\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\r\n        } else {\r\n            replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\r\n        }\r\n\r\n        // body.grouping tr 다시 그리기..\r\n        if (cfg.body.grouping) {\r\n            // left\r\n            if (this.xvar.frozenColumnIndex > 0) {\r\n                if (this.xvar.frozenRowIndex > _dindex) {\r\n                    // 상단 행고정\r\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\r\n                }\r\n                else {\r\n                    replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\r\n                }\r\n            }\r\n\r\n            // body\r\n            if (this.xvar.frozenRowIndex > _dindex) {\r\n                // 상단 행고정\r\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\r\n            }\r\n            else {\r\n                replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\r\n            }\r\n        }\r\n\r\n        if (this.xvar.frozenColumnIndex > 0) {\r\n            if (cfg.footSum && this.needToPaintSum) {\r\n                // 바닥 요약\r\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\r\n            }\r\n        }\r\n\r\n        if (cfg.footSum && this.needToPaintSum) {\r\n            // 바닥 요약\r\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\r\n        }\r\n    };\r\n\r\n    const scrollTo = function (css, noRepaint) {\r\n\r\n        if (this.isInlineEditing) {\r\n            for (var key in this.inlineEditing) {\r\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\r\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\r\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\r\n            }\r\n        }\r\n\r\n        if (this.config.asidePanelWidth > 0 && \"top\" in css) {\r\n            this.$.panel[\"aside-body-scroll\"].css({top: css.top});\r\n        }\r\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\r\n            this.$.panel[\"left-body-scroll\"].css({top: css.top});\r\n        }\r\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\r\n            this.$.panel[\"top-body-scroll\"].css({left: css.left});\r\n        }\r\n\r\n        this.$.panel[\"body-scroll\"].css(css);\r\n\r\n        if (this.config.footSum && \"left\" in css) {\r\n            this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\r\n        }\r\n\r\n        if (this.config.virtualScrollY && !noRepaint && \"top\" in css) {\r\n            repaint.call(this);\r\n        } else if (this.config.virtualScrollX && !noRepaint && \"left\" in css) {\r\n            repaint.call(this);\r\n        }\r\n    };\r\n\r\n    const blur = function () {\r\n        columnSelect.focusClear.call(this);\r\n        columnSelect.clear.call(this);\r\n        if (this.isInlineEditing) {\r\n            inlineEdit.deActive.call(this);\r\n        }\r\n    };\r\n\r\n    const moveFocus = function (_position) {\r\n        let focus = {\r\n            \"UD\": function (_dy) {\r\n                let moveResult = true,\r\n                    focusedColumn, originalColumn, while_i,\r\n                    nPanelInfo;\r\n\r\n                for (let c in this.focusedColumn) {\r\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\r\n                    break;\r\n                }\r\n\r\n                if (!focusedColumn) return false;\r\n\r\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\r\n                columnSelect.focusClear.call(this);\r\n                columnSelect.clear.call(this);\r\n\r\n                if (_dy > 0) {\r\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\r\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\r\n                        focusedColumn.rowIndex = 0;\r\n                        if (focusedColumn.dindex > this.list.length - 1) {\r\n                            focusedColumn.dindex = this.list.length - 1;\r\n                            moveResult = false;\r\n                        }\r\n                    } else {\r\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\r\n                    }\r\n                }\r\n                else {\r\n                    if (focusedColumn.rowIndex + _dy < 0) {\r\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\r\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\r\n                        if (focusedColumn.dindex < 0) {\r\n                            focusedColumn.dindex = 0;\r\n                            moveResult = false;\r\n                        }\r\n                    } else {\r\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\r\n                    }\r\n                }\r\n\r\n                while_i = 0;\r\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\r\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\r\n                        focusedColumn.colIndex--;\r\n                    } else {\r\n                        focusedColumn.rowIndex--;\r\n                    }\r\n\r\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\r\n                        // find fail\r\n                        moveResult = false;\r\n                        break;\r\n                    }\r\n                    while_i++;\r\n                }\r\n\r\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\r\n\r\n                // if mergeCells\r\n                if (this.config.body.mergeCells && this.list.length) {\r\n                    while (!this.$.panel[nPanelInfo.panelName]\r\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\r\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\r\n\r\n                        if (_dy > 0) {\r\n                            focusedColumn.dindex++;\r\n                        } else {\r\n                            focusedColumn.dindex--;\r\n                        }\r\n\r\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\r\n                }\r\n\r\n                focusedColumn.panelName = nPanelInfo.panelName;\r\n\r\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\r\n                (function () {\r\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\r\n                        if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\r\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\r\n                            GRID.scroller.resize.call(this);\r\n                        }\r\n                        else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\r\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\r\n                            GRID.scroller.resize.call(this);\r\n                        }\r\n                    }\r\n                }).call(this);\r\n\r\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\r\n                this.$.panel[focusedColumn.panelName]\r\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\r\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\r\n                    .attr('data-ax5grid-column-focused', \"true\");\r\n\r\n                return moveResult;\r\n\r\n            },\r\n            \"LR\": function (_dx) {\r\n                let moveResult = true,\r\n                    focusedColumn, originalColumn,\r\n                    while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\r\n\r\n                for (var c in this.focusedColumn) {\r\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\r\n                    break;\r\n                }\r\n                if (!focusedColumn) return false;\r\n\r\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\r\n\r\n                columnSelect.focusClear.call(this);\r\n                columnSelect.clear.call(this);\r\n\r\n                if (_dx < 0) {\r\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\r\n                    if (focusedColumn.colIndex < 0) {\r\n                        focusedColumn.colIndex = 0;\r\n                        moveResult = false;\r\n                    }\r\n                } else {\r\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\r\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\r\n                        focusedColumn.colIndex = this.colGroup.length - 1;\r\n                        moveResult = false;\r\n                    }\r\n                }\r\n\r\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\r\n                    focusedColumn.rowIndex = 0;\r\n                }\r\n\r\n                if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\r\n                    if (_dx < 0) {\r\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\r\n                            focusedColumn.colIndex--;\r\n                            if (focusedColumn.colIndex <= 0) {\r\n                                // find fail\r\n                                moveResult = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\r\n                            focusedColumn.colIndex++;\r\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\r\n                                // find fail\r\n                                moveResult = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (_dx < 0) {\r\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\r\n                            focusedColumn.colIndex--;\r\n                            if (focusedColumn.colIndex <= 0) {\r\n                                // find fail\r\n                                moveResult = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\r\n                            focusedColumn.colIndex++;\r\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\r\n                                // find fail\r\n                                moveResult = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\r\n\r\n                // if mergeCells\r\n                if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\r\n                    while (!this.$.panel[nPanelInfo.panelName]\r\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\r\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\r\n\r\n                        focusedColumn.dindex--;\r\n\r\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\r\n                }\r\n\r\n                focusedColumn.panelName = nPanelInfo.panelName;\r\n\r\n                // 포커스 컬럼의 위치에 따라 스크롤 처리\r\n                let isScrollTo = (function () {\r\n                    if (!this.config.virtualScrollX) return false;\r\n                    let scrollLeft = 0;\r\n                    if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\r\n                        if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\r\n                            scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\r\n                            scrollTo.call(this, {left: scrollLeft});\r\n                            GRID.header.scrollTo.call(this, {left: scrollLeft});\r\n                            GRID.scroller.resize.call(this);\r\n                            return true;\r\n                        }\r\n                        else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\r\n                            if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\r\n                                scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\r\n                                scrollTo.call(this, {left: -scrollLeft});\r\n                                GRID.header.scrollTo.call(this, {left: -scrollLeft});\r\n                                GRID.scroller.resize.call(this);\r\n                            }\r\n                            return true;\r\n                        }\r\n                    }\r\n                    scrollLeft = null;\r\n                    return false;\r\n                }).call(this);\r\n\r\n                containerPanelName = nPanelInfo.containerPanelName;\r\n                isScrollPanel = nPanelInfo.isScrollPanel;\r\n\r\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\r\n\r\n                var $column = this.$.panel[focusedColumn.panelName]\r\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\r\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\r\n                    .attr('data-ax5grid-column-focused', \"true\");\r\n\r\n                if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\r\n                    // todo : 컬럼이동할 때에도 scrollTo 체크\r\n                    var newLeft = (function () {\r\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\r\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\r\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\r\n                            return $column.position().left;\r\n                        } else {\r\n                            return;\r\n                        }\r\n                    }).call(this);\r\n\r\n                    if (typeof newLeft !== \"undefined\") {\r\n                        GRID.header.scrollTo.call(this, {left: -newLeft});\r\n                        scrollTo.call(this, {left: -newLeft});\r\n                        GRID.scroller.resize.call(this);\r\n                    }\r\n                }\r\n\r\n                return moveResult;\r\n            },\r\n            \"INDEX\": function (_dindex) {\r\n                let moveResult = true,\r\n                    focusedColumn, originalColumn,\r\n                    while_i;\r\n\r\n                for (let c in this.focusedColumn) {\r\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\r\n                    break;\r\n                }\r\n                if (!focusedColumn) {\r\n                    focusedColumn = {\r\n                        rowIndex: 0,\r\n                        colIndex: 0\r\n                    }\r\n                }\r\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\r\n\r\n                columnSelect.focusClear.call(this);\r\n                columnSelect.clear.call(this);\r\n\r\n\r\n                if (_dindex == \"end\") {\r\n                    _dindex = this.list.length - 1;\r\n                }\r\n\r\n                focusedColumn.dindex = _dindex;\r\n                focusedColumn.rowIndex = 0;\r\n\r\n                while_i = 0;\r\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\r\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\r\n                        focusedColumn.colIndex--;\r\n                    } else {\r\n                        focusedColumn.rowIndex--;\r\n                    }\r\n\r\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\r\n                        // find fail\r\n                        break;\r\n                    }\r\n                    while_i++;\r\n                }\r\n\r\n                let nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\r\n                focusedColumn.panelName = nPanelInfo.panelName;\r\n\r\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\r\n                (function () {\r\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\r\n                        if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\r\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\r\n                            GRID.scroller.resize.call(this);\r\n                        }\r\n                        else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\r\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\r\n                            GRID.scroller.resize.call(this);\r\n                        }\r\n                    }\r\n                }).call(this);\r\n\r\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\r\n                this.$.panel[focusedColumn.panelName]\r\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\r\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\r\n                    .attr('data-ax5grid-column-focused', \"true\");\r\n\r\n                return moveResult;\r\n            }\r\n        };\r\n\r\n        let processor = {\r\n            \"UP\": function () {\r\n                return focus[\"UD\"].call(this, -1);\r\n            },\r\n            \"DOWN\": function () {\r\n                return focus[\"UD\"].call(this, 1);\r\n            },\r\n            \"LEFT\": function () {\r\n                return focus[\"LR\"].call(this, -1);\r\n            },\r\n            \"RIGHT\": function () {\r\n                return focus[\"LR\"].call(this, 1);\r\n            },\r\n            \"HOME\": function () {\r\n                return focus[\"INDEX\"].call(this, 0);\r\n            },\r\n            \"END\": function () {\r\n                return focus[\"INDEX\"].call(this, \"end\");\r\n            },\r\n            \"position\": function (_position) {\r\n                return focus[\"INDEX\"].call(this, _position);\r\n            }\r\n        };\r\n\r\n        if (_position in processor) {\r\n            return processor[_position].call(this);\r\n        } else {\r\n            return processor[\"position\"].call(this, _position);\r\n        }\r\n    };\r\n\r\n    const inlineEdit = {\r\n        active(_focusedColumn, _e, _initValue) {\r\n            var self = this,\r\n                dindex, colIndex, rowIndex, panelName, colspan,\r\n                col, editor;\r\n\r\n            // this.inlineEditing = {};\r\n            for (var key in _focusedColumn) {\r\n                panelName = _focusedColumn[key].panelName;\r\n                dindex = _focusedColumn[key].dindex;\r\n                colIndex = _focusedColumn[key].colIndex;\r\n                rowIndex = _focusedColumn[key].rowIndex;\r\n                colspan = _focusedColumn[key].colspan;\r\n\r\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\r\n                col = this.colGroup[colIndex];\r\n                if (!(editor = col.editor)) return this;\r\n\r\n                // editor disabled 체크\r\n                if (U.isFunction(editor.disabled)) {\r\n                    if (editor.disabled.call({\r\n                            list: this.list,\r\n                            dindex: dindex,\r\n                            item: this.list[dindex],\r\n                            key: col.key,\r\n                            value: _initValue\r\n                        })) {\r\n                        return this;\r\n                    }\r\n                }\r\n\r\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\r\n                if (!(function (_editor, _type) {\r\n                        if (_editor.type in GRID.inlineEditor) {\r\n                            return (GRID.inlineEditor[_editor.type].editMode == \"popup\");\r\n                        }\r\n                    })(editor)) {\r\n                    // 체크 박스 타입이면 값 변경 시도\r\n                    if (editor.type == \"checkbox\") {\r\n                        var checked, newValue;\r\n                        if (editor.config && editor.config.trueValue) {\r\n                            if (checked = !(_initValue == editor.config.trueValue)) {\r\n                                newValue = editor.config.trueValue;\r\n                            } else {\r\n                                newValue = editor.config.falseValue;\r\n                            }\r\n                        } else {\r\n                            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\r\n                        }\r\n\r\n                        GRID.data.setValue.call(self, dindex, col.key, newValue);\r\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\r\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\r\n                            editorConfig: col.editor.config, checked: checked\r\n                        });\r\n                    }\r\n                    return this;\r\n                }\r\n\r\n                if (this.list[dindex].__isGrouping) {\r\n                    return false;\r\n                }\r\n                if (key in this.inlineEditing) {\r\n                    return false;\r\n                }\r\n                this.inlineEditing[key] = {\r\n                    editor: editor,\r\n                    panelName: panelName,\r\n                    columnKey: key,\r\n                    column: _focusedColumn[key],\r\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\r\n                };\r\n                this.isInlineEditing = true;\r\n            }\r\n            if (this.isInlineEditing) {\r\n\r\n                let originalValue = GRID.data.getValue.call(self, dindex, col.key),\r\n                    initValue = (function (__value, __editor) {\r\n                        if (U.isNothing(__value)) {\r\n                            __value = U.isNothing(originalValue) ? \"\" : originalValue;\r\n                        }\r\n\r\n                        if (__editor.type == \"money\") {\r\n                            return U.number(__value, {\"money\": true});\r\n                        }\r\n                        else {\r\n                            return __value;\r\n                        }\r\n                    }).call(this, _initValue, editor);\r\n\r\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\r\n                    .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\r\n                    .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\r\n                    .find('[data-ax5grid-cellholder]');\r\n\r\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\r\n\r\n                return true;\r\n            }\r\n        },\r\n        deActive(_msg, _key, _value) {\r\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\r\n            if (!this.inlineEditing[_key]) return this;\r\n\r\n            let panelName = this.inlineEditing[_key].panelName,\r\n                dindex = this.inlineEditing[_key].column.dindex,\r\n                rowIndex = this.inlineEditing[_key].column.rowIndex,\r\n                colIndex = this.inlineEditing[_key].column.colIndex,\r\n                column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\r\n                editorValue = (function ($inlineEditor) {\r\n                    if (typeof _value === \"undefined\") {\r\n                        if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\r\n                            return $inlineEditor.val();\r\n                        } else {\r\n                            _msg = \"CANCEL\";\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return _value;\r\n                    }\r\n                })(this.inlineEditing[_key].$inlineEditor),\r\n                newValue = (function (__value, __editor) {\r\n                    if (__editor.type == \"money\") {\r\n                        return U.number(__value);\r\n                    }\r\n                    else {\r\n                        return __value;\r\n                    }\r\n                }).call(this, editorValue, column.editor);\r\n\r\n            let action = {\r\n                \"CANCEL\"(_dindex, _column, _newValue) {\r\n                    action[\"__clear\"].call(this);\r\n                },\r\n                \"RETURN\"(_dindex, _column, _newValue) {\r\n                    if (GRID.data.setValue.call(this, _dindex, _column.key, _newValue)) {\r\n                        action[\"__clear\"].call(this);\r\n                        GRID.body.repaintCell.call(this, panelName, dindex, rowIndex, colIndex, _newValue);\r\n                    } else {\r\n                        action[\"__clear\"].call(this);\r\n                    }\r\n                },\r\n                \"__clear\"() {\r\n                    this.isInlineEditing = false;\r\n                    let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\r\n                    if (bindedAx5ui == \"ax5picker\") {\r\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\r\n                    } else if (bindedAx5ui == \"ax5select\") {\r\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\r\n                    }\r\n\r\n                    this.inlineEditing[_key].$inlineEditor.remove();\r\n                    this.inlineEditing[_key].$inlineEditor = null;\r\n                    this.inlineEditing[_key].$inlineEditorCell = null;\r\n                    this.inlineEditing[_key] = undefined;\r\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\r\n                }\r\n            };\r\n\r\n            if (_msg in action) {\r\n                action[_msg || \"RETURN\"].call(this, dindex, column, newValue);\r\n            } else {\r\n                action[\"__clear\"].call(this);\r\n            }\r\n        },\r\n        keydown(key, columnKey, _options) {\r\n            let processor = {\r\n                \"ESC\"() {\r\n                    for (var columnKey in this.inlineEditing) {\r\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\r\n                    }\r\n                },\r\n                \"RETURN\"() {\r\n                    if (this.isInlineEditing) {\r\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\r\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\r\n                        }else{\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        for (var k in this.focusedColumn) {\r\n                            let _column = this.focusedColumn[k],\r\n                                column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\r\n                                dindex = _column.dindex,\r\n                                value = \"\",\r\n                                col = this.colGroup[_column.colIndex];\r\n                            ;\r\n\r\n                            if (column) {\r\n                                if (!this.list[dindex].__isGrouping) {\r\n                                    value = GRID.data.getValue.call(this, dindex, column.key);\r\n                                }\r\n                            }\r\n\r\n                            if (col.editor && GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\r\n                                if (_options && _options.moveFocus) {\r\n\r\n                                }\r\n                                else {\r\n                                    if (column.editor && column.editor.type == \"checkbox\") {\r\n                                        value = GRID.data.getValue.call(this, dindex, column.key);\r\n\r\n                                        let checked, newValue;\r\n                                        if (column.editor.config && column.editor.config.trueValue) {\r\n                                            if (checked = !(value == column.editor.config.trueValue)) {\r\n                                                newValue = column.editor.config.trueValue;\r\n                                            } else {\r\n                                                newValue = column.editor.config.falseValue;\r\n                                            }\r\n                                        } else {\r\n                                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\r\n                                        }\r\n\r\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\r\n                                        updateRowState.call(this, [\"cellChecked\"], dindex, {\r\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\r\n                                            editorConfig: column.editor.config, checked: checked\r\n                                        });\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            };\r\n\r\n            if (key in processor) {\r\n                processor[key].call(this, key, columnKey, _options);\r\n            }\r\n        }\r\n    };\r\n\r\n    const getExcelString = function () {\r\n        let cfg = this.config,\r\n            list = this.list,\r\n            bodyRowData = this.bodyRowTable,\r\n            footSumData = this.footSumTable,\r\n            bodyGroupingData = this.bodyGroupingTable;\r\n\r\n        // body-scroll 의 포지션에 의존적이므로..\r\n        let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\r\n            let SS = [],\r\n                di, dl,\r\n                tri, trl,\r\n                ci, cl,\r\n                col;\r\n\r\n            //SS.push('<table border=\"1\">');\r\n            for (di = 0, dl = _list.length; di < dl; di++) {\r\n                let isGroupingRow = false, rowTable;\r\n\r\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\r\n                    rowTable = _groupRow;\r\n                    isGroupingRow = true;\r\n                } else {\r\n                    rowTable = _bodyRow;\r\n                }\r\n\r\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\r\n                    SS.push('\\n<tr>');\r\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\r\n                        col = rowTable.rows[tri].cols[ci];\r\n\r\n                        SS.push('<td ',\r\n                            'colspan=\"' + col.colspan + '\" ',\r\n                            'rowspan=\"' + col.rowspan + '\" ',\r\n                            '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, undefined, \"text\"), '&nbsp;</td>');\r\n                    }\r\n                    SS.push('\\n</tr>');\r\n                }\r\n            }\r\n            //SS.push('</table>');\r\n            return SS.join('');\r\n        };\r\n        let getSum = function (_colGroup, _bodyRow, _list) {\r\n            let SS = [],\r\n                tri, trl,\r\n                ci, cl,\r\n                col;\r\n\r\n            //SS.push('<table border=\"1\">');\r\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\r\n                SS.push('\\n<tr>');\r\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\r\n                    col = _bodyRow.rows[tri].cols[ci];\r\n                    SS.push('<td ',\r\n                        'colspan=\"' + col.colspan + '\" ',\r\n                        'rowspan=\"' + col.rowspan + '\" ',\r\n                        '>', getSumFieldValue.call(this, _list, col), '</td>');\r\n                }\r\n                SS.push('\\n</tr>');\r\n            }\r\n            //SS.push('</table>');\r\n\r\n            return SS.join('');\r\n        };\r\n\r\n        let po = [];\r\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\r\n        if (cfg.footSum) {\r\n            // 바닥 요약\r\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\r\n        }\r\n\r\n        // right\r\n        if (cfg.rightSum) {\r\n            // todo : right 표현 정리\r\n        }\r\n\r\n        return po.join('');\r\n    };\r\n\r\n    const toggleCollapse = function (_dindex, _collapse) {\r\n        if (GRID.data.toggleCollapse.call(this, _dindex, _collapse)) {\r\n            this.proxyList = GRID.data.getProxyList.call(this, this.list);\r\n            repaint.call(this);\r\n        }\r\n    };\r\n\r\n    const click = function (_dindex) {\r\n        let that = {\r\n            self: this,\r\n            page: this.page,\r\n            list: this.list,\r\n            item: this.list[_dindex],\r\n            dindex: _dindex\r\n        };\r\n\r\n        moveFocus.call(this, _dindex);\r\n        if (this.config.body.onClick) {\r\n            this.config.body.onClick.call(that);\r\n        }\r\n\r\n        that = null;\r\n        // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\r\n    };\r\n\r\n    const dblClick = function (_dindex) {\r\n        let that = {\r\n            self: this,\r\n            page: this.page,\r\n            list: this.list,\r\n            item: this.list[_dindex],\r\n            dindex: _dindex\r\n        };\r\n\r\n        moveFocus.call(this, _dindex);\r\n\r\n        if (this.config.body.onDBLClick) {\r\n            this.config.body.onDBLClick.call(that);\r\n        }\r\n\r\n        that = null;\r\n    };\r\n\r\n\r\n    GRID.body = {\r\n        init: init,\r\n        repaint: repaint,\r\n        repaintCell: repaintCell,\r\n        repaintRow: repaintRow,\r\n        updateRowState: updateRowState,\r\n        updateRowStateAll: updateRowStateAll,\r\n        scrollTo: scrollTo,\r\n        blur: blur,\r\n        moveFocus: moveFocus,\r\n        inlineEdit: inlineEdit,\r\n        getExcelString: getExcelString,\r\n        toggleCollapse: toggleCollapse,\r\n        click: click,\r\n        dblClick: dblClick\r\n    };\r\n})();","// ax5.ui.grid.collector\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    let sum = function () {\r\n        let value = 0,\r\n            i = this.list.length;\r\n        while (i--) {\r\n            if (!(\"__groupingList\" in this.list[i])) {\r\n                value += U.number(this.list[i][this.key]);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n\r\n    let avg = function () {\r\n        let value = 0,\r\n            i = this.list.length, listLength = 0;\r\n        while (i--) {\r\n            if (!(\"__groupingList\" in this.list[i])) {\r\n                value += U.number(this.list[i][this.key]);\r\n                listLength++;\r\n            }\r\n        }\r\n        return U.number(value / (listLength || 1), {\"round\": 2});\r\n    };\r\n\r\n    GRID.collector = {\r\n        sum: sum,\r\n        avg: avg\r\n    };\r\n\r\n})();","// ax5.ui.grid.layout\r\n(function () {\r\n\r\n    let GRID = ax5.ui.grid,\r\n        U = ax5.util;\r\n\r\n    const init = function () {\r\n\r\n    };\r\n\r\n    const clearGroupingData = function (_list) {\r\n        let i = 0, l = _list.length, returnList = [];\r\n        for (; i < l; i++) {\r\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\r\n                if (_list[i][this.config.columnKeys.selected]) {\r\n                    this.selectedDataIndexs.push(i);\r\n                }\r\n                returnList.push(jQuery.extend({}, _list[i]));\r\n            }\r\n        }\r\n        return returnList;\r\n    };\r\n\r\n    const initData = function (_list) {\r\n        this.selectedDataIndexs = [];\r\n        this.deletedList = [];\r\n\r\n        let i = 0, l = _list.length,\r\n            returnList = [],\r\n            appendIndex = 0,\r\n            dataRealRowCount = 0,\r\n            lineNumber = 0;\r\n\r\n        if (this.config.body.grouping) {\r\n\r\n            let groupingKeys = U.map(this.bodyGrouping.by, function () {\r\n                return {\r\n                    key: this,\r\n                    compareString: \"\",\r\n                    grouping: false,\r\n                    list: []\r\n                }\r\n            });\r\n\r\n            let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\r\n            for (; i < l + 1; i++) {\r\n                gi = 0;\r\n\r\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\r\n                        this.deletedList.push(_list[i]);\r\n                }\r\n\r\n                compareString = \"\"; // 그룹핑 구문검사용\r\n                appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\r\n\r\n                // 그룹핑 구문검사\r\n                for (; gi < gl; gi++) {\r\n                    if (_list[i]) {\r\n                        compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\r\n                    }\r\n\r\n                    if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\r\n                        let appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\r\n                        for (let ki = 0; ki < gi + 1; ki++) {\r\n                            appendRowItem.keys.push(groupingKeys[ki].key);\r\n                            appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\r\n                        }\r\n                        appendRow.push(appendRowItem);\r\n                        groupingKeys[gi].list = [];\r\n                    }\r\n\r\n                    groupingKeys[gi].list.push(_list[i]);\r\n                    groupingKeys[gi].compareString = compareString;\r\n                }\r\n\r\n                // 새로 추가해야할 그룹핑 row\r\n                ari = appendRow.length;\r\n                while (ari--) {\r\n                    returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\r\n                }\r\n                //~ 그룹핑 구문 검사 완료\r\n\r\n                if (_list[i]) {\r\n                    if (_list[i][this.config.columnKeys.selected]) {\r\n                        this.selectedDataIndexs.push(i);\r\n                    }\r\n                    // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\r\n                    _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\r\n                    returnList.push(_list[i]);\r\n\r\n                    dataRealRowCount++;\r\n                    appendIndex++;\r\n                    lineNumber++;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (; i < l; i++) {\r\n                if (_list[i]) {\r\n                    if (_list[i][this.config.columnKeys.deleted]) {\r\n                        this.deletedList.push(_list[i]);\r\n                    } else {\r\n\r\n                        if (_list[i][this.config.columnKeys.selected]) {\r\n                            this.selectedDataIndexs.push(i);\r\n                        }\r\n\r\n                        // __original_index 인덱스 키가 없다면 추가.\r\n                        if(typeof _list[i][\"__original_index\"] === \"undefined\"){\r\n                            _list[i][\"__original_index\"] = lineNumber;\r\n                        }\r\n                        _list[i][\"__index\"] = lineNumber;\r\n                        dataRealRowCount++;\r\n                        lineNumber++;\r\n                        returnList.push(_list[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // 원본 데이터의 갯수\r\n        // grouping은 제외하고 수집됨.\r\n        this.xvar.dataRealRowCount = dataRealRowCount;\r\n        return returnList;\r\n    };\r\n\r\n    const arrangeData4tree = function (_list) {\r\n        this.selectedDataIndexs = [];\r\n        this.deletedList = [];\r\n        let i = 0, seq = 0,\r\n            appendIndex = 0,\r\n            dataRealRowCount = 0,\r\n            lineNumber = 0;\r\n\r\n        let li = _list.length;\r\n        let keys = this.config.tree.columnKeys;\r\n        let hashDigit = this.config.tree.hashDigit;\r\n        let listIndexMap = {};\r\n\r\n        while (li--) {\r\n            delete _list[li][keys.parentHash];\r\n            delete _list[li][keys.selfHash];\r\n            //delete _list[li][keys.childrenLength];\r\n        }\r\n\r\n        /// 루트 아이템 수집\r\n        i = 0;\r\n        seq = 0;\r\n        li = _list.length;\r\n        for (; i < li; i++) {\r\n            if (_list[i]) {\r\n                listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\r\n\r\n                if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") { // 최상위 아이템인 경우\r\n                    _list[i][keys.parentKey] = \"top\";\r\n                    _list[i][keys.children] = [];\r\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\r\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\r\n                    _list[i][keys.depth] = 0;\r\n                    _list[i][keys.hidden] = false;\r\n\r\n                    seq++;\r\n                }\r\n            }\r\n        }\r\n\r\n        /// 자식 아이템 수집\r\n        i = 0;\r\n        lineNumber = 0;\r\n        for (; i < li; i++) {\r\n            let _parent, _parentHash;\r\n            if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\r\n\r\n                if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\r\n                    _parentHash = _parent[keys.selfHash];\r\n                    _list[i][keys.children] = [];\r\n                    _list[i][keys.parentHash] = _parentHash;\r\n                    _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\r\n                    _list[i][keys.depth] = _parent[keys.depth] + 1;\r\n                    if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\r\n                    _parent[keys.children].push(_list[i][keys.selfKey]);\r\n                } else {\r\n                    _list[i][keys.parentKey] = \"top\";\r\n                    _list[i][keys.children] = [];\r\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\r\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\r\n                    _list[i][keys.hidden] = false;\r\n\r\n                    seq++;\r\n                }\r\n            }\r\n\r\n            if (_list[i]) {\r\n                if (_list[i][this.config.columnKeys.deleted]) {\r\n                    this.deletedList.push(_list[i]);\r\n                    _list[i][keys.hidden] = true;\r\n                }\r\n                else if (_list[i][this.config.columnKeys.selected]) {\r\n                    this.selectedDataIndexs.push(i);\r\n                }\r\n\r\n                _list[i][\"__index\"] = lineNumber;\r\n                dataRealRowCount++;\r\n                lineNumber++;\r\n            }\r\n        }\r\n\r\n        this.listIndexMap = listIndexMap;\r\n        this.xvar.dataRealRowCount = dataRealRowCount;\r\n\r\n        return _list;\r\n    };\r\n\r\n    const getProxyList = function (_list) {\r\n        let i = 0, l = _list.length, returnList = [];\r\n        for (; i < l; i++) {\r\n\r\n            if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\r\n                _list[i].__origin_index__ = i;\r\n                returnList.push(_list[i]);\r\n            }\r\n        }\r\n        return returnList;\r\n    };\r\n\r\n    const set = function (data) {\r\n\r\n        let list;\r\n        if (U.isArray(data)) {\r\n            this.page = null;\r\n            list = data;\r\n        } else if (\"page\" in data) {\r\n            this.page = jQuery.extend({}, data.page);\r\n            list = data.list;\r\n        }\r\n\r\n        // console.log(this.list.length);\r\n\r\n        if (this.config.tree.use) {\r\n            this.list = arrangeData4tree.call(this, list);\r\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\r\n        } else {\r\n            this.proxyList = null;\r\n            this.list = initData.call(this,\r\n                (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, list) : list\r\n            );\r\n        }\r\n        this.deletedList = [];\r\n\r\n        this.needToPaintSum = true;\r\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\r\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        GRID.page.navigationUpdate.call(this);\r\n\r\n        if (this.config.body.grouping) {\r\n\r\n        }\r\n        return this;\r\n    };\r\n\r\n    const get = function (_type) {\r\n        return {\r\n            list: this.list,\r\n            page: this.page\r\n        };\r\n    };\r\n\r\n    const getList = function (_type) {\r\n        let returnList = [];\r\n        let i = 0, l = this.list.length;\r\n        switch (_type) {\r\n            case \"modified\":\r\n                for (; i < l; i++) {\r\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.modified]) {\r\n                        returnList.push(jQuery.extend({}, this.list[i]));\r\n                    }\r\n                }\r\n                break;\r\n            case \"selected\":\r\n                for (; i < l; i++) {\r\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.selected]) {\r\n                        returnList.push(jQuery.extend({}, this.list[i]));\r\n                    }\r\n                }\r\n                break;\r\n            case \"deleted\":\r\n                //_list = GRID.data.clearGroupingData(this.list);\r\n                returnList = [].concat(this.deletedList);\r\n                break;\r\n            default:\r\n                returnList = GRID.data.clearGroupingData.call(this, this.list);\r\n        }\r\n        return returnList;\r\n    };\r\n\r\n    const add = function (_row, _dindex, _options) {\r\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\r\n        let processor = {\r\n            \"first\"() {\r\n                list = [].concat(_row).concat(list);\r\n            },\r\n            \"last\"() {\r\n                list = list.concat([].concat(_row));\r\n            }\r\n        };\r\n\r\n        if (this.config.tree.use) {\r\n            let list = this.list.concat([].concat(_row));\r\n\r\n            this.list = arrangeData4tree.call(this, list);\r\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\r\n        }\r\n        else {\r\n            if (typeof _dindex === \"undefined\") _dindex = \"last\";\r\n            if (_dindex in processor) {\r\n                _row[this.config.columnKeys.modified] = true;\r\n                processor[_dindex].call(this, _row);\r\n            } else {\r\n                if (!U.isNumber(_dindex)) {\r\n                    throw 'invalid argument _dindex';\r\n                }\r\n                if (U.isArray(_row)) {\r\n                    for (let _i = 0, _l = _row.length; _i < _l; _i++) {\r\n                        list.splice(_dindex + _i, 0, _row[_i]);\r\n                    }\r\n                } else {\r\n                    list.splice(_dindex, 0, _row);\r\n                }\r\n            }\r\n\r\n            if (this.config.body.grouping) {\r\n                list = initData.call(this,\r\n                    sort.call(this,\r\n                        this.sortInfo,\r\n                        list\r\n                    )\r\n                );\r\n            }\r\n            else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\r\n                list = initData.call(this,\r\n                    sort.call(this,\r\n                        this.sortInfo,\r\n                        list\r\n                    )\r\n                );\r\n            }\r\n            else {\r\n                list = initData.call(this, list);\r\n            }\r\n\r\n            this.list = list;\r\n        }\r\n\r\n        this.needToPaintSum = true;\r\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\r\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        GRID.page.navigationUpdate.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * list에서 완전 제거 하는 경우 사용.\r\n     * ax5grid.data.remove\r\n     */\r\n    const remove = function (_dindex) {\r\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\r\n        let processor = {\r\n            \"first\": function () {\r\n                if (this.config.tree.use) {\r\n                    processor.tree.call(this, 0);\r\n                } else {\r\n                    list.splice(0, 1);\r\n                }\r\n            },\r\n            \"last\": function () {\r\n                if (this.config.tree.use) {\r\n                    processor.tree.call(this, list.length - 1);\r\n                } else {\r\n                    list.splice(list.length - 1, 1);\r\n                }\r\n            },\r\n            \"index\": function (_dindex) {\r\n                if (this.config.tree.use) {\r\n                    processor.tree.call(this, _dindex);\r\n                } else {\r\n                    list.splice(_dindex, 1);\r\n                }\r\n            },\r\n            \"tree\": function (_dindex) {\r\n                let treeKeys = this.config.tree.columnKeys, selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\r\n                list = U.filter(list, function () {\r\n                    return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\r\n                });\r\n                treeKeys = null;\r\n                selfHash = null;\r\n            },\r\n        };\r\n\r\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\r\n        if (_dindex in processor) {\r\n            processor[_dindex].call(this, _dindex);\r\n        } else {\r\n            if (!U.isNumber(_dindex)) {\r\n                throw 'invalid argument _dindex';\r\n            }\r\n            processor[\"index\"].call(this, _dindex);\r\n        }\r\n\r\n        if (this.config.tree.use) {\r\n            this.list = arrangeData4tree.call(this, list);\r\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\r\n        }\r\n        else {\r\n            if (this.config.body.grouping) {\r\n                list = initData.call(this,\r\n                    sort.call(this,\r\n                        this.sortInfo,\r\n                        list\r\n                    )\r\n                );\r\n            } else if (Object.keys(this.sortInfo).length) {\r\n                list = initData.call(this,\r\n                    sort.call(this,\r\n                        this.sortInfo,\r\n                        list\r\n                    )\r\n                );\r\n            } else {\r\n                list = initData.call(this, list);\r\n            }\r\n            this.list = list;\r\n        }\r\n\r\n\r\n        this.needToPaintSum = true;\r\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\r\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        GRID.page.navigationUpdate.call(this);\r\n        return this;\r\n    };\r\n\r\n\r\n    /**\r\n     * list에서 deleted 처리 repaint\r\n     * ax5grid.data.deleteRow\r\n     */\r\n    const deleteRow = function (_dindex) {\r\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\r\n        let processor = {\r\n            \"first\": function () {\r\n                if (this.config.tree.use) {\r\n                    processor.tree.call(this, 0);\r\n                } else {\r\n                    list[0][this.config.columnKeys.deleted] = true;\r\n                }\r\n            },\r\n            \"last\": function () {\r\n                if (this.config.tree.use) {\r\n                    processor.tree.call(this, list.length - 1);\r\n                } else {\r\n                    list[list.length - 1][this.config.columnKeys.deleted] = true;\r\n                }\r\n            },\r\n            \"selected\": function () {\r\n                if (this.config.tree.use) {\r\n                    processor.tree.call(this, \"selected\");\r\n                } else {\r\n                    let i = list.length;\r\n                    while (i--) {\r\n                        if (list[i][this.config.columnKeys.selected]) {\r\n                            list[i][this.config.columnKeys.deleted] = true;\r\n                        }\r\n                    }\r\n                    i = null;\r\n                }\r\n            },\r\n            \"tree\": function (_dindex) {\r\n                let keys = this.config.columnKeys,\r\n                    treeKeys = this.config.tree.columnKeys;\r\n\r\n                if (_dindex === \"selected\") {\r\n\r\n                    let i = list.length;\r\n                    while (i--) {\r\n                        if (list[i][this.config.columnKeys.selected]) {\r\n                            list[i][this.config.columnKeys.deleted] = true;\r\n\r\n                            let selfHash = list[i][treeKeys.selfHash];\r\n                            let ii = list.length;\r\n\r\n                            while (ii--) {\r\n                                if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\r\n                                    list[ii][keys.deleted] = true;\r\n                                }\r\n                            }\r\n\r\n                            selfHash = null;\r\n                            ii = null;\r\n                        }\r\n                    }\r\n                    i = null;\r\n\r\n                } else {\r\n                    let selfHash = list[_dindex][treeKeys.selfHash];\r\n                    let i = list.length;\r\n                    while (i--) {\r\n                        if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {\r\n                            list[i][keys.deleted] = true;\r\n                        }\r\n                    }\r\n                    selfHash = null;\r\n                    i = null;\r\n                }\r\n\r\n                keys = null;\r\n                treeKeys = null;\r\n            },\r\n        };\r\n\r\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\r\n\r\n        if (_dindex in processor) {\r\n            processor[_dindex].call(this, _dindex);\r\n        } else {\r\n            if (!U.isNumber(_dindex)) {\r\n                throw 'invalid argument _dindex';\r\n            }\r\n            list[_dindex][this.config.columnKeys.deleted] = true;\r\n        }\r\n\r\n        if (this.config.tree.use) {\r\n            this.list = arrangeData4tree.call(this, list);\r\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\r\n        }\r\n        else {\r\n            if (this.config.body.grouping) {\r\n                list = initData.call(this,\r\n                    sort.call(this,\r\n                        this.sortInfo,\r\n                        list\r\n                    )\r\n                );\r\n            } else if (Object.keys(this.sortInfo).length) {\r\n                list = initData.call(this,\r\n                    sort.call(this,\r\n                        this.sortInfo,\r\n                        list\r\n                    )\r\n                );\r\n            } else {\r\n                list = initData.call(this, list);\r\n            }\r\n\r\n            this.list = list;\r\n        }\r\n\r\n        this.needToPaintSum = true;\r\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\r\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        GRID.page.navigationUpdate.call(this);\r\n        return this;\r\n    };\r\n\r\n    const update = function (_row, _dindex) {\r\n        if (!U.isNumber(_dindex)) {\r\n            throw 'invalid argument _dindex';\r\n        }\r\n        //\r\n        this.needToPaintSum = true;\r\n        this.list.splice(_dindex, 1, _row);\r\n\r\n        if (this.config.body.grouping) {\r\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\r\n        }\r\n    };\r\n\r\n    const updateChild = function (_dindex, _updateData, _options) {\r\n        let keys = this.config.tree.columnKeys, selfHash, originIndex;\r\n\r\n        if (typeof _dindex === \"undefined\") return false;\r\n        originIndex = this.proxyList[_dindex].__origin_index__;\r\n\r\n        if (this.list[originIndex][keys.children]) {\r\n            this.proxyList = []; // 리셋 프록시\r\n\r\n            if (_options && _options.filter) {\r\n                if (_options.filter.call({item: this.list[originIndex], dindex: originIndex}, this.list[originIndex])) {\r\n                    for (let _k in _updateData) {\r\n                        this.list[originIndex][_k] = _updateData[_k];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (let _k in _updateData) {\r\n                    this.list[originIndex][_k] = _updateData[_k];\r\n                }\r\n            }\r\n\r\n            selfHash = this.list[originIndex][keys.selfHash];\r\n\r\n            let i = 0, l = this.list.length;\r\n            for (; i < l; i++) {\r\n                if (this.list[i]) {\r\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\r\n                        if (_options && _options.filter) {\r\n                            if (_options.filter.call({item: this.list[i], dindex: i}, this.list[i])) {\r\n                                for (let _k in _updateData) {\r\n                                    this.list[i][_k] = _updateData[_k];\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            for (let _k in _updateData) {\r\n                                this.list[i][_k] = _updateData[_k];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!this.list[i][keys.hidden]) {\r\n                        this.proxyList.push(this.list[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const setValue = function (_dindex, _key, _value) {\r\n        let originalValue = getValue.call(this, _dindex, _key);\r\n        this.needToPaintSum = true;\r\n\r\n        if (originalValue !== _value) {\r\n            if (/[\\.\\[\\]]/.test(_key)) {\r\n                try {\r\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\r\n                    (Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\")).call(this.list[_dindex], _value);\r\n                } catch (e) {\r\n\r\n                }\r\n            } else {\r\n                this.list[_dindex][this.config.columnKeys.modified] = true;\r\n                this.list[_dindex][_key] = _value;\r\n            }\r\n\r\n            if (this.onDataChanged) {\r\n                this.onDataChanged.call({\r\n                    self: this,\r\n                    list: this.list,\r\n                    dindex: _dindex,\r\n                    item: this.list[_dindex],\r\n                    key: _key,\r\n                    value: _value\r\n                });\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    let getValue = function (_dindex, _key, _value) {\r\n        let list = this.list;\r\n\r\n        if (/[\\.\\[\\]]/.test(_key)) {\r\n            try {\r\n                _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(list[_dindex]);\r\n            } catch (e) {\r\n\r\n            }\r\n        } else {\r\n            _value = list[_dindex][_key];\r\n        }\r\n        return _value;\r\n    };\r\n\r\n    const clearSelect = function () {\r\n        this.selectedDataIndexs = [];\r\n    };\r\n\r\n    const select = function (_dindex, _selected, _options) {\r\n        let cfg = this.config;\r\n\r\n        if (!this.list[_dindex]) return false;\r\n        if (this.list[_dindex].__isGrouping) return false;\r\n        if (this.list[_dindex][cfg.columnKeys.disableSelection]) return false;\r\n\r\n        if (typeof _selected === \"undefined\") {\r\n            if (this.list[_dindex][cfg.columnKeys.selected] = !this.list[_dindex][cfg.columnKeys.selected]) {\r\n                this.selectedDataIndexs.push(_dindex);\r\n            }\r\n        } else {\r\n            if (this.list[_dindex][cfg.columnKeys.selected] = _selected) {\r\n                this.selectedDataIndexs.push(_dindex);\r\n            }\r\n        }\r\n\r\n        if (this.onDataChanged && _options && _options.internalCall) {\r\n            this.onDataChanged.call({\r\n                self: this,\r\n                list: this.list,\r\n                dindex: _dindex,\r\n                item: this.list[_dindex],\r\n                key: cfg.columnKeys.selected,\r\n                value: this.list[_dindex][cfg.columnKeys.selected]\r\n            });\r\n        }\r\n\r\n        return this.list[_dindex][cfg.columnKeys.selected];\r\n    };\r\n\r\n    const selectAll = function (_selected, _options) {\r\n        let cfg = this.config,\r\n            dindex = this.list.length;\r\n\r\n        if (typeof _selected === \"undefined\") {\r\n            while (dindex--) {\r\n                if (this.list[dindex].__isGrouping) continue;\r\n                if (_options && _options.filter) {\r\n                    if (_options.filter.call(this.list[dindex]) !== true) {\r\n                        continue;\r\n                    }\r\n                }\r\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\r\n\r\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\r\n                    this.selectedDataIndexs.push(dindex);\r\n                }\r\n            }\r\n        } else {\r\n            while (dindex--) {\r\n                if (this.list[dindex].__isGrouping) continue;\r\n                if (_options && _options.filter) {\r\n                    if (_options.filter.call(this.list[dindex]) !== true) {\r\n                        continue;\r\n                    }\r\n                }\r\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\r\n\r\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\r\n                    this.selectedDataIndexs.push(dindex);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.onDataChanged && _options && _options.internalCall) {\r\n            this.onDataChanged.call({\r\n                self: this,\r\n                list: this.list\r\n            });\r\n        }\r\n\r\n        return this.list;\r\n    };\r\n\r\n    const sort = function (_sortInfo, _list, _options) {\r\n        let self = this, list = _list || this.list, sortInfoArray = [], lineNumber = 0;\r\n        let getKeyValue = function (_item, _key, _value) {\r\n            if (/[\\.\\[\\]]/.test(_key)) {\r\n                try {\r\n                    _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(_item);\r\n                } catch (e) {\r\n                }\r\n            } else {\r\n                _value = _item[_key];\r\n            }\r\n            return _value;\r\n        };\r\n\r\n        for (let k in _sortInfo) {\r\n            sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\r\n        }\r\n        sortInfoArray = U.filter(sortInfoArray, function () {\r\n            return typeof this !== \"undefined\";\r\n        });\r\n\r\n        // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\r\n        if(_options && _options.resetLineNumber && sortInfoArray.length === 0) {\r\n            sortInfoArray[0] = {key: '__original_index', order: \"asc\"}\r\n        }\r\n\r\n        let i = 0, l = sortInfoArray.length, _a_val, _b_val;\r\n\r\n        list.sort(function (_a, _b) {\r\n            for (i = 0; i < l; i++) {\r\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\r\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\r\n\r\n                if (typeof _a_val !== typeof _b_val) {\r\n                    _a_val = '' + _a_val;\r\n                    _b_val = '' + _b_val;\r\n                }\r\n                if (_a_val < _b_val) {\r\n                    return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\r\n                } else if (_a_val > _b_val) {\r\n                    return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\r\n                }\r\n            }\r\n        });\r\n\r\n        if(_options && _options.resetLineNumber) {\r\n            i = 0, l = list.length, lineNumber = 0;\r\n            for (; i < l; i++) {\r\n                if (_list[i] && !_list[i][\"__isGrouping\"]) {\r\n                    _list[i][\"__index\"] = lineNumber++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_list) {\r\n            return list;\r\n        } else {\r\n            this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\r\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n            GRID.page.navigationUpdate.call(this);\r\n            return this;\r\n        }\r\n    };\r\n\r\n    const append = function (_list, _callback) {\r\n        let self = this;\r\n\r\n        if (this.config.tree.use) {\r\n            let list = this.list.concat([].concat(_list));\r\n\r\n            this.list = arrangeData4tree.call(this, list);\r\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\r\n            list = null;\r\n        } else {\r\n            this.list = this.list.concat([].concat(_list));\r\n        }\r\n\r\n        this.appendProgress = true;\r\n        GRID.page.statusUpdate.call(this);\r\n\r\n\r\n        if (this.appendDebouncer) {\r\n            if (self.appendDebounceTimes < this.config.debounceTime / 10) {\r\n                clearTimeout(this.appendDebouncer);\r\n                self.appendDebounceTimes++;\r\n            } else {\r\n                self.appendDebounceTimes = 0;\r\n                appendIdle.call(self);\r\n                _callback();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        this.appendDebouncer = setTimeout(function () {\r\n            self.appendDebounceTimes = 0;\r\n            appendIdle.call(self);\r\n            _callback();\r\n        }, this.config.debounceTime);\r\n\r\n        // todo : append bounce animation\r\n    };\r\n\r\n    const appendIdle = function () {\r\n        this.appendProgress = false;\r\n        if (this.config.body.grouping) {\r\n            this.list = initData.call(this,\r\n                sort.call(this,\r\n                    this.sortInfo,\r\n                    this.list\r\n                )\r\n            );\r\n        } else {\r\n            this.list = initData.call(this, this.list);\r\n        }\r\n\r\n        this.needToPaintSum = true;\r\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\r\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        GRID.page.navigationUpdate.call(this);\r\n    };\r\n\r\n    const toggleCollapse = function (_dindex, _collapse) {\r\n        let keys = this.config.tree.columnKeys, selfHash, originIndex;\r\n\r\n        if (typeof _dindex === \"undefined\") return false;\r\n        originIndex = this.proxyList[_dindex].__origin_index__;\r\n\r\n        if (this.list[originIndex][keys.children]) {\r\n            this.proxyList = []; // 리셋 프록시\r\n            if (typeof _collapse == \"undefined\") {\r\n                _collapse = !(this.list[originIndex][keys.collapse] || false);\r\n            }\r\n\r\n            this.list[originIndex][keys.collapse] = _collapse;\r\n            selfHash = this.list[originIndex][keys.selfHash];\r\n\r\n            let i = this.list.length;\r\n            while (i--) {\r\n                if (this.list[i]) {\r\n                    // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\r\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\r\n                        this.list[i][keys.hidden] = _collapse;\r\n                    }\r\n\r\n                    if (!this.list[i][keys.hidden]) {\r\n                        this.proxyList.push(this.list[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    GRID.data = {\r\n        init: init,\r\n        set: set,\r\n        get: get,\r\n        getList: getList,\r\n        getProxyList: getProxyList,\r\n        setValue: setValue,\r\n        getValue: getValue,\r\n        clearSelect: clearSelect,\r\n        select: select,\r\n        selectAll: selectAll,\r\n        add: add,\r\n        remove: remove,\r\n        deleteRow: deleteRow,\r\n        update: update,\r\n        updateChild: updateChild,\r\n        sort: sort,\r\n        initData: initData,\r\n        clearGroupingData: clearGroupingData,\r\n        append: append,\r\n        toggleCollapse: toggleCollapse\r\n    };\r\n})();","/*\r\n * Copyright (c) 2016. tom@axisj.com\r\n * - github.com/thomasjang\r\n * - www.axisj.com\r\n */\r\n\r\n// ax5.ui.grid.excel\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    const base64 = function (s) {\r\n        return window.btoa(unescape(encodeURIComponent(s)));\r\n    };\r\n\r\n    const uri = \"data:application/vnd.ms-excel;base64,\";\r\n\r\n    const getExcelTmpl = function () {\r\n        return `\\ufeff\r\n{{#tables}}{{{body}}}{{/tables}}\r\n`;\r\n    };\r\n\r\n    const tableToExcel = function (table, fileName) {\r\n        let link, a, output,\r\n            tables = [].concat(table);\r\n\r\n        output = ax5.mustache.render(getExcelTmpl(), {\r\n            worksheet: (function () {\r\n                var arr = [];\r\n                tables.forEach(function (t, ti) {\r\n                    arr.push({name: \"Sheet\" + (ti + 1)});\r\n                });\r\n                return arr;\r\n            })(),\r\n            tables: (function () {\r\n                var arr = [];\r\n                tables.forEach(function (t, ti) {\r\n                    arr.push({body: t});\r\n                });\r\n                return arr;\r\n            })()\r\n        });\r\n\r\n        let isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1,\r\n            isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1,\r\n            isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\r\n\r\n        let blob1, blankWindow, $iframe, iframe, anchor;\r\n\r\n        if (navigator.msSaveOrOpenBlob) {\r\n            blob1 = new Blob([output], {type: \"text/html\"});\r\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\r\n        }\r\n        else if (isSafari) {\r\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\r\n            //tables\r\n            blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\r\n            blankWindow.document.write(output);\r\n            blankWindow = null;\r\n        }\r\n        else {\r\n            if (isIE && typeof Blob === \"undefined\") {\r\n                //otherwise use the iframe and save\r\n                //requires a blank iframe on page called txtArea1\r\n                $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\r\n                jQuery(document.body).append($iframe);\r\n\r\n                iframe = window[this.id + '-excel-export'];\r\n                iframe.document.open(\"text/html\", \"replace\");\r\n                iframe.document.write(output);\r\n                iframe.document.close();\r\n                iframe.focus();\r\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\r\n                $iframe.remove();\r\n            } else {\r\n                // Attempt to use an alternative method\r\n                anchor = document.body.appendChild(\r\n                    document.createElement(\"a\")\r\n                );\r\n\r\n                // If the [download] attribute is supported, try to use it\r\n                if (\"download\" in anchor) {\r\n                    anchor.download = fileName;\r\n                    //anchor.href = URL.createObjectURL( blob );\r\n                    anchor.href = uri + base64(output);\r\n                    anchor.click();\r\n                    document.body.removeChild(anchor);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    GRID.excel = {\r\n        export: tableToExcel\r\n    };\r\n})();","// ax5.ui.grid.formatter\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    const money = function () {\r\n        return U.number(this.value, {\"money\": true});\r\n    };\r\n\r\n    GRID.formatter = {\r\n        money: money\r\n    };\r\n\r\n})();","// ax5.ui.grid.header\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    const columnResizerEvent = {\r\n        \"on\": function (_columnResizer, _colIndex) {\r\n            var self = this;\r\n            var $columnResizer = $(_columnResizer);\r\n            var columnResizerPositionLeft = $columnResizer.offset().left;\r\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\r\n            self.xvar.columnResizerIndex = _colIndex;\r\n            var resizeRange = {\r\n                min: -self.colGroup[_colIndex]._width + 2,\r\n                max: self.$[\"container\"][\"root\"].width() - self.colGroup[_colIndex]._width,\r\n            };\r\n\r\n            jQuery(document.body)\r\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\r\n                    var mouseObj = GRID.util.getMousePosition(e);\r\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\r\n\r\n                    if (resizeRange.min > self.xvar.__da) {\r\n                        self.xvar.__da = resizeRange.min;\r\n                    } else if (resizeRange.max < self.xvar.__da) {\r\n                        self.xvar.__da = resizeRange.max;\r\n                    }\r\n\r\n                    if (!self.xvar.columnResizerLived) {\r\n                        self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\r\n                    }\r\n                    self.xvar.columnResizerLived = true;\r\n                    self.$[\"resizer\"][\"horizontal\"].css({\r\n                        left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\r\n                    });\r\n                })\r\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\r\n                    columnResizerEvent.off.call(self);\r\n                    U.stopEvent(e);\r\n                })\r\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\r\n                    columnResizerEvent.off.call(self);\r\n                    U.stopEvent(e);\r\n                });\r\n\r\n            jQuery(document.body)\r\n                .attr('unselectable', 'on')\r\n                .css('user-select', 'none')\r\n                .on('selectstart', false);\r\n        },\r\n        \"off\": function () {\r\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\r\n            this.xvar.columnResizerLived = false;\r\n\r\n            if (typeof this.xvar.__da === \"undefined\") {\r\n\r\n            }\r\n            else {\r\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\r\n            }\r\n\r\n            jQuery(document.body)\r\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\r\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\r\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\r\n\r\n            jQuery(document.body)\r\n                .removeAttr('unselectable')\r\n                .css('user-select', 'auto')\r\n                .off('selectstart');\r\n        }\r\n    };\r\n\r\n    const init = function () {\r\n        // 헤더 초기화\r\n        const self = this;\r\n\r\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\r\n            let key = this.getAttribute(\"data-ax5grid-column-key\"),\r\n                colIndex = this.getAttribute(\"data-ax5grid-column-colindex\"),\r\n                //rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\"),\r\n                col = self.colGroup[colIndex];\r\n\r\n            if (key === \"__checkbox_header__\") {\r\n                let selected = this.getAttribute(\"data-ax5grid-selected\");\r\n                selected = (U.isNothing(selected)) ? true : (selected !== \"true\");\r\n\r\n                $(this).attr(\"data-ax5grid-selected\", selected);\r\n                self.selectAll({selected: selected});\r\n\r\n                selected = null;\r\n            }\r\n            else {\r\n                if (key && col && col.sortable !== false && !col.sortFixed) {\r\n                    if (col.sortable === true || self.config.sortable === true) {\r\n                        toggleSort.call(self, col.key);\r\n                    }\r\n                }\r\n            }\r\n\r\n            GRID.body.blur.call(self);\r\n\r\n            key = null;\r\n            colIndex = null;\r\n            col = null;\r\n        });\r\n        this.$[\"container\"][\"header\"]\r\n            .on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\r\n                let colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\r\n\r\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\r\n                columnResizerEvent.on.call(self, this, Number(colIndex));\r\n                U.stopEvent(e);\r\n\r\n                colIndex = null;\r\n            })\r\n            .on(\"dragstart\", function (e) {\r\n                U.stopEvent(e);\r\n                return false;\r\n            });\r\n\r\n        resetFrozenColumn.call(this);\r\n    };\r\n\r\n    const resetFrozenColumn = function () {\r\n        let cfg = this.config,\r\n            dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.xvar.frozenColumnIndex);\r\n\r\n        this.asideHeaderData = (function (dataTable) {\r\n            let colGroup = [];\r\n            let data = {rows: []};\r\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\r\n                data.rows[i] = {cols: []};\r\n                if (i === 0) {\r\n                    let col = {\r\n                        label: \"\",\r\n                        colspan: 1,\r\n                        rowspan: dataTable.rows.length,\r\n                        colIndex: null\r\n                    }, _col = {};\r\n\r\n                    if (cfg.showLineNumber) {\r\n                        _col = jQuery.extend({}, col, {\r\n                            width: cfg.lineNumberColumnWidth,\r\n                            _width: cfg.lineNumberColumnWidth,\r\n                            columnAttr: \"lineNumber\",\r\n                            key: \"__index_header__\", label: \"&nbsp;\"\r\n                        });\r\n                        colGroup.push(_col);\r\n                        data.rows[i].cols.push(_col);\r\n                    }\r\n                    if (cfg.showRowSelector) {\r\n                        _col = jQuery.extend({}, col, {\r\n                            width: cfg.rowSelectorColumnWidth,\r\n                            _width: cfg.rowSelectorColumnWidth,\r\n                            columnAttr: \"rowSelector\",\r\n                            key: \"__checkbox_header__\", label: \"\"\r\n                        });\r\n                        colGroup.push(_col);\r\n                        data.rows[i].cols.push(_col);\r\n                    }\r\n\r\n                    col = null;\r\n                }\r\n            }\r\n\r\n            this.asideColGroup = colGroup;\r\n            return data;\r\n        }).call(this, this.headerTable);\r\n\r\n        this.leftHeaderData = dividedHeaderObj.leftData;\r\n        this.headerData = dividedHeaderObj.rightData;\r\n    };\r\n\r\n    const getFieldValue = function (_col) {\r\n        return (_col.key === \"__checkbox_header__\")\r\n            ? `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`\r\n            : (_col.label || \"&nbsp;\");\r\n    };\r\n\r\n    const repaint = function (_reset) {\r\n        let cfg = this.config,\r\n            colGroup = this.colGroup;\r\n\r\n        if (_reset) {\r\n            resetFrozenColumn.call(this);\r\n            this.xvar.paintStartRowIndex = undefined;\r\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\r\n        }\r\n        let asideHeaderData = this.asideHeaderData,\r\n            leftHeaderData = this.leftHeaderData,\r\n            headerData = this.headerData,\r\n            headerAlign = cfg.header.align;\r\n\r\n        // this.asideColGroup : asideHeaderData에서 처리 함.\r\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\r\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\r\n\r\n        var repaintHeader = function (_elTarget, _colGroup, _bodyRow) {\r\n            let tableWidth = 0,\r\n                SS = [];\r\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\r\n            SS.push('<colgroup>');\r\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\r\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\r\n                tableWidth += _colGroup[cgi]._width;\r\n            }\r\n            SS.push('<col  />');\r\n            SS.push('</colgroup>');\r\n\r\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\r\n                var trCSS_class = \"\";\r\n                SS.push('<tr class=\"' + trCSS_class + '\">');\r\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\r\n                    var col = _bodyRow.rows[tri].cols[ci];\r\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\r\n                    var colAlign = headerAlign || col.align;\r\n                    SS.push('<td ',\r\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\r\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\r\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\r\n                        (function () {\r\n                            return (typeof col.key !== \"undefined\") ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\r\n                        })(),\r\n                        'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ',\r\n                        'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ',\r\n                        'colspan=\"' + col.colspan + '\" ',\r\n                        'rowspan=\"' + col.rowspan + '\" ',\r\n                        'class=\"' + (function (_col) {\r\n                            var tdCSS_class = \"\";\r\n                            if (_col.headerStyleClass) {\r\n                                if (U.isFunction(_col.headerStyleClass)) {\r\n                                    tdCSS_class += _col.headerStyleClass.call({\r\n                                            column: _col,\r\n                                            key: _col.key\r\n                                        }) + \" \";\r\n                                } else {\r\n                                    tdCSS_class += _col.headerStyleClass + \" \";\r\n                                }\r\n                            }\r\n                            if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\r\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\r\n                            return tdCSS_class;\r\n                        }).call(this, col) + '\" ',\r\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\r\n                    \r\n                    SS.push((function () {\r\n                        var lineHeight = (cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth);\r\n                        return '<span data-ax5grid-cellHolder=\"\" ' +\r\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\r\n                            ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\r\n                    })(), (function () {\r\n                        var _SS = \"\";\r\n\r\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\r\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\r\n                        }\r\n                        return _SS;\r\n                    })(), getFieldValue.call(this, col), '</span>');\r\n\r\n                    if (!U.isNothing(col.colIndex)) {\r\n                        if (cfg.enableFilter) {\r\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\r\n                        }\r\n                    }\r\n\r\n                    SS.push('</td>');\r\n                }\r\n                SS.push('<td ',\r\n                    'data-ax5grid-column-row=\"null\" ',\r\n                    'data-ax5grid-column-col=\"null\" ',\r\n                    'style=\"height: ' + (cfg.header.columnHeight) + 'px;min-height: 1px;\" ',\r\n                    '></td>');\r\n                SS.push('</tr>');\r\n            }\r\n            SS.push('</table>');\r\n            _elTarget.html(SS.join(''));\r\n\r\n            /// append column-resizer\r\n            (function () {\r\n                let resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth,\r\n                    resizerLeft = 0,\r\n                    AS = [];\r\n\r\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\r\n                    var col = _colGroup[cgi];\r\n                    if (!U.isNothing(col.colIndex)) {\r\n                        //_colGroup[cgi]._width\r\n                        resizerLeft += col._width;\r\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\r\n                    }\r\n                }\r\n                _elTarget.append(AS);\r\n            }).call(this);\r\n\r\n\r\n            return tableWidth;\r\n        };\r\n\r\n        if (cfg.asidePanelWidth > 0) {\r\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\r\n        }\r\n        if (cfg.frozenColumnIndex > 0) {\r\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\r\n        }\r\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\r\n\r\n        if (cfg.rightSum) {\r\n\r\n        }\r\n    };\r\n\r\n    const scrollTo = function (css) {\r\n        this.$.panel[\"header-scroll\"].css(css);\r\n        return this;\r\n    };\r\n\r\n    const toggleSort = function (_key) {\r\n        let sortOrder = \"\",\r\n            sortInfo = {},\r\n            seq = 0;\r\n\r\n        for (var k in this.sortInfo) {\r\n            if (this.sortInfo[k].fixed) {\r\n                sortInfo[k] = this.sortInfo[k];\r\n                seq++;\r\n            }\r\n        }\r\n\r\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\r\n            if (this.colGroup[i].key == _key) {\r\n                if (sortOrder == \"\") {\r\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\r\n                        sortOrder = \"desc\";\r\n                    }\r\n                    else if (this.colGroup[i].sort === \"desc\") {\r\n                        sortOrder = \"asc\";\r\n                    }\r\n                    else {\r\n                        sortOrder = undefined;\r\n                    }\r\n                }\r\n                this.colGroup[i].sort = sortOrder;\r\n            } else if (!this.config.multiSort) {\r\n                this.colGroup[i].sort = undefined;\r\n            }\r\n\r\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\r\n                if (!sortInfo[this.colGroup[i].key]) {\r\n                    sortInfo[this.colGroup[i].key] = {\r\n                        seq: seq++,\r\n                        orderBy: this.colGroup[i].sort\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setColumnSort(sortInfo);\r\n        return this;\r\n    };\r\n\r\n    const applySortStatus = function (_sortInfo) {\r\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\r\n            for (var _key in _sortInfo) {\r\n                if (this.colGroup[i].key == _key) {\r\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    const select = function (_options) {\r\n        GRID.data.select.call(this, dindex, _options && _options.selected);\r\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\r\n    };\r\n\r\n    const getExcelString = function () {\r\n        let cfg = this.config,\r\n            colGroup = this.colGroup,\r\n            headerData = this.headerTable,\r\n            getHeader = function (_colGroup, _bodyRow) {\r\n                var SS = [];\r\n                //SS.push('<table border=\"1\">');\r\n                for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\r\n                    SS.push('<tr>');\r\n                    for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\r\n                        var col = _bodyRow.rows[tri].cols[ci];\r\n                        SS.push('<td ',\r\n                            'colspan=\"' + col.colspan + '\" ',\r\n                            'rowspan=\"' + col.rowspan + '\" ',\r\n                            '>', getFieldValue.call(this, col), '</td>');\r\n                    }\r\n                    SS.push('</tr>');\r\n                }\r\n                //SS.push('</table>');\r\n\r\n                return SS.join('');\r\n            };\r\n\r\n        return getHeader.call(this, colGroup, headerData);\r\n    };\r\n\r\n    GRID.header = {\r\n        init: init,\r\n        repaint: repaint,\r\n        scrollTo: scrollTo,\r\n        toggleSort: toggleSort,\r\n        applySortStatus: applySortStatus,\r\n        getExcelString: getExcelString\r\n    };\r\n\r\n})();","// ax5.ui.grid.inlineEditor\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const edit_text = {\r\n        useReturnToSave: true,\r\n        editMode: \"popup\",\r\n        getHtml: function (_root, _columnKey, _editor, _value) {\r\n            if(typeof _editor.attributes !== \"undefined\"){\r\n                var attributesText  = \"\";\r\n                for (var k in _editor.attributes){\r\n                    attributesText += ` ${k}='${_editor.attributes[k]}'`\r\n                }\r\n            }\r\n            return `<input type=\"text\" data-ax5grid-editor=\"text\" value=\"${_value}\" ${attributesText}>`;\r\n        },\r\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\r\n            var $el;\r\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\r\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\r\n            $el.on(\"blur\", function () {\r\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\r\n            });\r\n            return $el;\r\n        },\r\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\r\n            _$el.focus().select();\r\n        }\r\n    };\r\n\r\n    const edit_money = {\r\n        useReturnToSave: true,\r\n        editMode: \"popup\",\r\n        getHtml: function (_root, _columnKey, _editor, _value) {\r\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"' + _value + '\" >';\r\n        },\r\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\r\n            var $el;\r\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\r\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\r\n            $el.on(\"blur\", function () {\r\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\r\n            });\r\n            return $el;\r\n        },\r\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\r\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\r\n            _$el.ax5formatter({\r\n                pattern: \"money\"\r\n            });\r\n            _$el.focus().select();\r\n        }\r\n    };\r\n\r\n    const edit_number = {\r\n        useReturnToSave: true,\r\n        editMode: \"popup\",\r\n        getHtml: function (_root, _columnKey, _editor, _value) {\r\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"' + _value + '\" >';\r\n        },\r\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\r\n            var $el;\r\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\r\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\r\n            $el.on(\"blur\", function () {\r\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\r\n            });\r\n            return $el;\r\n        },\r\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\r\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\r\n            _$el.ax5formatter({\r\n                pattern: \"number\"\r\n            });\r\n            _$el.focus().select();\r\n        }\r\n    };\r\n\r\n    const edit_date = {\r\n        useReturnToSave: true,\r\n        editMode: \"popup\",\r\n        getHtml: function (_root, _columnKey, _editor, _value) {\r\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"' + _value + '\" >';\r\n        },\r\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\r\n            var $el;\r\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\r\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\r\n            return $el;\r\n        },\r\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\r\n            var self = _root;\r\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\r\n            _$el.ax5picker({\r\n                direction: \"auto\",\r\n                content: {\r\n                    type: 'date',\r\n                    formatter: {\r\n                        pattern: 'date'\r\n                    }\r\n                },\r\n                onStateChanged: function () {\r\n                    if (this.state == \"open\") {\r\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\r\n                    } else if (this.state == \"close\") {\r\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\r\n                    }\r\n                }\r\n            });\r\n            _$el.focus().select();\r\n        }\r\n    };\r\n\r\n    const edit_select = {\r\n        useReturnToSave: false,\r\n        editMode: \"popup\",\r\n        getHtml: function (_root, _columnKey, _editor, _value) {\r\n            var po = [];\r\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\r\n            po.push('</div>');\r\n\r\n            return po.join('');\r\n        },\r\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\r\n            var $el;\r\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\r\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\r\n            return $el;\r\n        },\r\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\r\n            var eConfig = {\r\n                columnKeys: {\r\n                    optionValue: \"value\",\r\n                    optionText: \"text\",\r\n                    optionSelected: \"selected\"\r\n                }\r\n            };\r\n            jQuery.extend(true, eConfig, _editor.config);\r\n\r\n            eConfig.options.forEach(function (n) {\r\n                if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\r\n            });\r\n\r\n            var self = _root;\r\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\r\n            _$el.ax5select({\r\n                direction: \"auto\",\r\n                columnKeys: eConfig.columnKeys,\r\n                options: eConfig.options,\r\n                onStateChanged: function () {\r\n                    if (this.state == \"open\") {\r\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\r\n                    } else if (this.state == \"changeValue\") {\r\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\r\n                    } else if (this.state == \"close\") {\r\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\r\n                    }\r\n                }\r\n            });\r\n            _$el.ax5select(\"open\");\r\n            _$el.ax5select(\"setValue\", _value);\r\n            _$el.find(\"a\").focus();\r\n        }\r\n    };\r\n\r\n    const edit_checkbox = {\r\n        editMode: \"inline\",\r\n        getHtml: function (_root, _editor, _value) {\r\n\r\n            var lineHeight = (_root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth);\r\n            var checked;\r\n            if (_editor.config && _editor.config.trueValue) {\r\n                checked = (_value == _editor.config.trueValue) ? \"true\" : \"false\";\r\n            } else {\r\n                checked = (_value == false || _value == \"false\" || _value < \"1\") ? \"false\" : \"true\";\r\n            }\r\n\r\n            var eConfig = {\r\n                marginTop: 2,\r\n                height: lineHeight - 4\r\n            };\r\n            jQuery.extend(true, eConfig, _editor.config);\r\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\r\n\r\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\r\n        }\r\n    };\r\n\r\n    const edit_textarea = {\r\n        useReturnToSave: false,\r\n        editMode: \"popup\",\r\n        _getHtml: function (_root, _columnKey, _editor, _value) {\r\n            // init 에서 사용하게 될 HTML 태그를 만들어 줍니다.\r\n            return `<div data-ax5grid-editor=\"textarea\"></div>`;\r\n        },\r\n        _bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\r\n            // 위치와 크기를 구합니다.\r\n            let offset = _$el.offset();\r\n            let box = {\r\n                width: _$el.width()\r\n            };\r\n            let editorHeight = 150;\r\n            let buttonHeight = 30;\r\n\r\n            // 새로운 엘리먼트 생성\r\n            let $newDiv = jQuery(`<div data-ax5grid-popup=\"textarea\" style=\"z-index: 9999;\">\r\n    <textarea style=\"width:100%;height:${editorHeight-buttonHeight}px;\" class=\"form-control\">${_value}</textarea>\r\n    <div style=\"height:${buttonHeight}px;padding:5px;text-align: right;\">\r\n        <button class=\"btn btn-default\">OK</button>\r\n    </div>\r\n</div>`);\r\n            let $newTextarea = $newDiv.find(\"textarea\");\r\n            // 엘리먼트에 CSS 적용\r\n            $newDiv.css({\r\n                position: \"absolute\",\r\n                left: offset.left,\r\n                top: offset.top,\r\n                width: box.width,\r\n                height: editorHeight\r\n            });\r\n            $newDiv.find(\"textarea\");\r\n\r\n            // 새로운 엘리먼트를 document.body에 append\r\n            jQuery(document.body).append($newDiv);\r\n            $newTextarea.focus().select();\r\n\r\n            $newTextarea.on(\"blur\", function (e) {\r\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value);\r\n                $newDiv.remove();\r\n                ax5.util.stopEvent(e.originalEvent);\r\n            });\r\n            $newTextarea.on(\"keydown\", function (e) {\r\n                if(e.which == ax5.info.eventKeys.ESC){\r\n                    GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\r\n                    $newDiv.remove();\r\n                    ax5.util.stopEvent(e.originalEvent);\r\n                }\r\n            });\r\n\r\n            /// 값 변경\r\n            /// GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\r\n            /// 에디팅 취소\r\n            /// GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\r\n        },\r\n\r\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\r\n            // 인라인 에디팅 활성화 시작\r\n            /**\r\n             * _root : gridInstance\r\n             * _columnKey : di + \"_\" + col.colIndex + \"_\" + col.rowIndex\r\n             * _editor : col.editor\r\n             * _$parent : 셀\r\n             * _value : 값\r\n             */\r\n            let $el;\r\n            _$parent.append($el = jQuery(this._getHtml(_root, _columnKey, _editor, _value)));\r\n            // 셀에 HTML 컨텐츠 추가\r\n\r\n            this._bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\r\n            // 이벤트 바인딩\r\n\r\n            return $el;\r\n        },\r\n    };\r\n\r\n    GRID.inlineEditor = {\r\n        \"text\": edit_text,\r\n        \"money\": edit_money,\r\n        \"number\": edit_number,\r\n        \"date\": edit_date,\r\n        \"select\": edit_select,\r\n        \"checkbox\": edit_checkbox,\r\n        \"textarea\": edit_textarea\r\n    };\r\n\r\n})();","// ax5.ui.grid.page\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    const onclickPageMove = function (_act) {\r\n        var callback = function (_pageNo) {\r\n            if (this.page.currentPage != _pageNo) {\r\n                this.page.selectPage = _pageNo;\r\n                if (this.config.page.onChange) {\r\n                    this.config.page.onChange.call({\r\n                        self: this,\r\n                        page: this.page,\r\n                        data: this.data\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        var processor = {\r\n            \"first\": function () {\r\n                callback.call(this, 0);\r\n            },\r\n            \"prev\": function () {\r\n                var pageNo = this.page.currentPage - 1;\r\n                if (pageNo < 0) pageNo = 0;\r\n                callback.call(this, pageNo);\r\n            },\r\n            \"next\": function () {\r\n                var pageNo = this.page.currentPage + 1;\r\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\r\n                callback.call(this, pageNo);\r\n            },\r\n            \"last\": function () {\r\n                callback.call(this, this.page.totalPages - 1);\r\n            }\r\n        };\r\n\r\n        if (_act in processor) {\r\n            processor[_act].call(this);\r\n        }\r\n        else {\r\n            callback.call(this, _act-1);\r\n        }\r\n    };\r\n\r\n    const navigationUpdate = function () {\r\n        let self = this;\r\n        if (this.page) {\r\n            let page = {\r\n                hasPage: false,\r\n                currentPage: this.page.currentPage,\r\n                pageSize: this.page.pageSize,\r\n                totalElements: this.page.totalElements,\r\n                totalPages: this.page.totalPages,\r\n                firstIcon: this.config.page.firstIcon,\r\n                prevIcon: this.config.page.prevIcon || \"«\",\r\n                nextIcon: this.config.page.nextIcon || \"»\",\r\n                lastIcon: this.config.page.lastIcon,\r\n            };\r\n            let navigationItemCount = this.config.page.navigationItemCount;\r\n\r\n            page[\"@paging\"] = (function () {\r\n                let returns = [], startI, endI;\r\n\r\n                startI = page.currentPage - Math.floor(navigationItemCount / 2);\r\n                if (startI < 0) startI = 0;\r\n                endI = page.currentPage + navigationItemCount;\r\n                if (endI > page.totalPages) endI = page.totalPages;\r\n\r\n                if (endI - startI > navigationItemCount) {\r\n                    endI = startI + navigationItemCount;\r\n                }\r\n\r\n                if(endI - startI < navigationItemCount){\r\n                    startI = endI - navigationItemCount;\r\n                }\r\n                if (startI < 0) startI = 0;\r\n\r\n                for (let p = startI, l = endI; p < l; p++) {\r\n                    returns.push({'pageNo': (p + 1), 'selected': page.currentPage == p});\r\n                }\r\n                return returns;\r\n            })();\r\n\r\n            if(page[\"@paging\"].length > 0){\r\n                page.hasPage = true;\r\n            }\r\n\r\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\r\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\r\n                onclickPageMove.call(self, this.getAttribute(\"data-ax5grid-page-move\"));\r\n            });\r\n\r\n        } else {\r\n            this.$[\"page\"][\"navigation\"].empty();\r\n        }\r\n    };\r\n\r\n    const statusUpdate = function () {\r\n        if(!this.config.page.statusDisplay){\r\n            return;\r\n        }\r\n\r\n        let fromRowIndex = this.xvar.virtualPaintStartRowIndex;\r\n        let toRowIndex = this.xvar.virtualPaintStartRowIndex + this.xvar.virtualPaintRowCount;\r\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\r\n        let totalElements = this.xvar.dataRowCount;\r\n\r\n        if (toRowIndex > totalElements) {\r\n            toRowIndex = totalElements;\r\n        }\r\n\r\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\r\n            fromRowIndex: U.number(fromRowIndex + 1, {\"money\": true}),\r\n            toRowIndex: U.number(toRowIndex, {\"money\": true}),\r\n            totalElements: U.number(totalElements, {\"money\": true}),\r\n            dataRowCount: (totalElements !== this.xvar.dataRealRowCount) ? U.number(this.xvar.dataRealRowCount, {\"money\": true}) : false,\r\n            progress: (this.appendProgress) ? this.config.appendProgressIcon : \"\"\r\n        }));\r\n    };\r\n\r\n    GRID.page = {\r\n        navigationUpdate: navigationUpdate,\r\n        statusUpdate: statusUpdate\r\n    };\r\n\r\n})();","// ax5.ui.grid.scroller\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    const convertScrollPosition = {\r\n        \"vertical\": function (css, _var) {\r\n            let _content_height = _var._content_height - _var._panel_height,\r\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\r\n                top = (_content_height * css.top) / _scroller_height;\r\n\r\n            if (top < 0) top = 0;\r\n            else if (_content_height < top) {\r\n                top = _content_height;\r\n            }\r\n            return {\r\n                top: -top\r\n            }\r\n        },\r\n        \"horizontal\": function (css, _var) {\r\n            let _content_width = _var._content_width - _var._panel_width,\r\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\r\n                left = (_content_width * css.left) / _scroller_width;\r\n\r\n            if (left < 0) left = 0;\r\n            else if (_content_width < left) {\r\n                left = _content_width;\r\n            }\r\n            return {\r\n                left: -left\r\n            }\r\n        }\r\n    };\r\n\r\n    const convertScrollBarPosition = {\r\n        \"vertical\": function (_top, _var) {\r\n\r\n            let self = this,\r\n                type = \"vertical\",\r\n                _content_height = _var._content_height - _var._panel_height,\r\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\r\n                top = (_scroller_height * _top) / _content_height,\r\n                scrollPositon;\r\n\r\n            if (-top > _scroller_height) {\r\n                top = -_scroller_height;\r\n\r\n                scrollPositon = convertScrollPosition[type].call(this, {top: -top}, {\r\n                    _content_width: _var._content_width,\r\n                    _content_height: _var._content_height,\r\n                    _panel_width: _var._panel_width,\r\n                    _panel_height: _var._panel_height,\r\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\r\n                    _vertical_scroller_height: _var._vertical_scroller_height,\r\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\r\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\r\n                });\r\n\r\n                GRID.body.scrollTo.call(self, scrollPositon);\r\n\r\n                /*\r\n                if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\r\n                this.xvar.scrollTimer = setTimeout(function () {\r\n                    GRID.body.scrollTo.call(self, scrollPositon);\r\n                });\r\n                */\r\n            }\r\n\r\n            return -top\r\n        },\r\n        \"horizontal\": function (_left, _var) {\r\n            let self = this,\r\n                type = \"horizontal\",\r\n                _content_width = _var._content_width - _var._panel_width,\r\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\r\n                left = (_scroller_width * _left) / _content_width,\r\n                scrollPositon;\r\n\r\n            if (-left > _scroller_width) {\r\n                left = -_scroller_width;\r\n                scrollPositon = convertScrollPosition[type].call(this, {left: -left}, {\r\n                    _content_width: _var._content_width,\r\n                    _content_height: _var._content_height,\r\n                    _panel_width: _var._panel_width,\r\n                    _panel_height: _var._panel_height,\r\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\r\n                    _vertical_scroller_height: _var._vertical_scroller_height,\r\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\r\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\r\n                });\r\n\r\n                GRID.header.scrollTo.call(self, scrollPositon);\r\n                GRID.body.scrollTo.call(self, scrollPositon);\r\n\r\n                /*\r\n                if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\r\n                this.xvar.scrollTimer = setTimeout(function () {\r\n\r\n                });\r\n                */\r\n            }\r\n\r\n            return -left\r\n        }\r\n    };\r\n\r\n    const scrollBarMover = {\r\n        \"click\": function (track, bar, type, e) {\r\n\r\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\r\n            if ((new Date()).getTime() - GRID.scroller.moveout_timer < 20) {\r\n                return false;\r\n            }\r\n\r\n            let self = this,\r\n                trackOffset = track.offset(),\r\n                barBox = {\r\n                    width: bar.outerWidth(), height: bar.outerHeight()\r\n                },\r\n                trackBox = {\r\n                    width: track.innerWidth(), height: track.innerHeight()\r\n                },\r\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\r\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\r\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\r\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\r\n                _content_height = self.xvar.scrollContentHeight,\r\n                _content_width = self.xvar.scrollContentWidth,\r\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\r\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\r\n                getScrollerPosition = {\r\n                    \"vertical\": function (e) {\r\n                        let mouseObj = GRID.util.getMousePosition(e);\r\n                        // track을 벗어 나지 안도록 범위 체크\r\n                        let newTop = mouseObj.clientY - trackOffset.top;\r\n                        if (newTop < 0) {\r\n                            newTop = 0;\r\n                        }\r\n                        else if ((newTop + barBox.height) > trackBox.height) {\r\n                            newTop = trackBox.height - barBox.height;\r\n                        }\r\n                        return {top: newTop};\r\n                    },\r\n                    \"horizontal\": function (e) {\r\n                        let mouseObj = GRID.util.getMousePosition(e);\r\n                        // track을 벗어 나지 안도록 범위 체크\r\n                        let newLeft = mouseObj.clientX - trackOffset.left;\r\n                        if (newLeft < 0) {\r\n                            newLeft = 0;\r\n                        }\r\n                        else if ((newLeft + barBox.width) > trackBox.width) {\r\n                            newLeft = trackBox.width - barBox.width;\r\n                        }\r\n                        return {left: newLeft};\r\n                    }\r\n                },\r\n                css = getScrollerPosition[type](e);\r\n\r\n            bar.css(css);\r\n\r\n            let scrollPositon = convertScrollPosition[type].call(self, css, {\r\n                _content_width: _content_width,\r\n                _content_height: _content_height,\r\n                _panel_width: _panel_width,\r\n                _panel_height: _panel_height,\r\n                _horizontal_scroller_width: _horizontal_scroller_width,\r\n                _vertical_scroller_height: _vertical_scroller_height,\r\n                verticalScrollBarHeight: verticalScrollBarHeight,\r\n                horizontalScrollBarWidth: horizontalScrollBarWidth\r\n            });\r\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\r\n            GRID.body.scrollTo.call(self, scrollPositon);\r\n\r\n            scrollPositon = null;\r\n        },\r\n        \"on\": function (track, bar, type, e) {\r\n            let self = this,\r\n                barOffset = bar.position(),\r\n                barBox = {\r\n                    width: bar.outerWidth(), height: bar.outerHeight()\r\n                },\r\n                trackBox = {\r\n                    width: track.innerWidth(), height: track.innerHeight()\r\n                },\r\n\r\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\r\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\r\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\r\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\r\n                _content_height = self.xvar.scrollContentHeight,\r\n                _content_width = self.xvar.scrollContentWidth,\r\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\r\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\r\n\r\n                getScrollerPosition = {\r\n                    \"vertical\": function (e) {\r\n                        var mouseObj = GRID.util.getMousePosition(e);\r\n                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\r\n                        // track을 벗어 나지 안도록 범위 체크\r\n                        var newTop = barOffset.top + self.xvar.__da;\r\n                        if (newTop < 0) {\r\n                            newTop = 0;\r\n                        }\r\n                        else if ((newTop + barBox.height) > trackBox.height) {\r\n                            newTop = trackBox.height - barBox.height;\r\n                        }\r\n                        return {top: newTop};\r\n                    },\r\n                    \"horizontal\": function (e) {\r\n                        var mouseObj = GRID.util.getMousePosition(e);\r\n                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\r\n                        // track을 벗어 나지 안도록 범위 체크\r\n                        var newLeft = barOffset.left + self.xvar.__da;\r\n                        if (newLeft < 0) {\r\n                            newLeft = 0;\r\n                        }\r\n                        else if ((newLeft + barBox.width) > trackBox.width) {\r\n                            newLeft = trackBox.width - barBox.width;\r\n                        }\r\n                        return {left: newLeft};\r\n                    }\r\n                };\r\n\r\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\r\n\r\n            jQuery(document.body)\r\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\r\n                    let css = getScrollerPosition[type](e);\r\n                    bar.css(css);\r\n\r\n                    let scrollPositon = convertScrollPosition[type].call(self, css, {\r\n                        _content_width: _content_width,\r\n                        _content_height: _content_height,\r\n                        _panel_width: _panel_width,\r\n                        _panel_height: _panel_height,\r\n                        _horizontal_scroller_width: _horizontal_scroller_width,\r\n                        _vertical_scroller_height: _vertical_scroller_height,\r\n                        verticalScrollBarHeight: verticalScrollBarHeight,\r\n                        horizontalScrollBarWidth: horizontalScrollBarWidth\r\n                    });\r\n\r\n                    if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\r\n\r\n                    if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\r\n                    self.xvar.scrollTimer = setTimeout(function () {\r\n                        GRID.body.scrollTo.call(self, scrollPositon);\r\n                    });\r\n                })\r\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\r\n                    scrollBarMover.off.call(self);\r\n                })\r\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\r\n                    scrollBarMover.off.call(self);\r\n                });\r\n\r\n            jQuery(document.body)\r\n                .attr('unselectable', 'on')\r\n                .css('user-select', 'none')\r\n                .on('selectstart', false);\r\n        },\r\n        \"off\": function () {\r\n            GRID.scroller.moveout_timer = (new Date()).getTime();\r\n\r\n            jQuery(document.body)\r\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\r\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\r\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\r\n\r\n            jQuery(document.body)\r\n                .removeAttr('unselectable')\r\n                .css('user-select', 'auto')\r\n                .off('selectstart');\r\n        }\r\n    };\r\n\r\n    const scrollContentMover = {\r\n        \"wheel\": function (delta) {\r\n            let self = this,\r\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\r\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\r\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\r\n                _content_height = self.xvar.scrollContentHeight,\r\n                _content_width = self.xvar.scrollContentWidth;\r\n\r\n            if (isNaN(_content_height) || isNaN(_content_width)) {\r\n                return false;\r\n            }\r\n\r\n            let newLeft, newTop,\r\n                _top_is_end = false,\r\n                _left_is_end = false;\r\n\r\n            newLeft = _body_scroll_position.left - delta.x;\r\n            newTop = _body_scroll_position.top - delta.y;\r\n\r\n            // newTop이 범위를 넘었는지 체크\r\n            if (newTop >= 0) {\r\n                newTop = 0;\r\n                _top_is_end = true;\r\n            } else if (newTop <= _panel_height - _content_height) {\r\n                newTop = _panel_height - _content_height;\r\n                if (newTop >= 0) newTop = 0;\r\n                _top_is_end = true;\r\n            } else {\r\n                if (delta.y == 0) _top_is_end = true;\r\n            }\r\n\r\n            // newLeft이 범위를 넘었는지 체크\r\n            if (newLeft >= 0) {\r\n                newLeft = 0;\r\n                _left_is_end = true;\r\n            } else if (newLeft <= _panel_width - _content_width) {\r\n                newLeft = _panel_width - _content_width;\r\n                if (newLeft >= 0) newLeft = 0;\r\n                _left_is_end = true;\r\n            } else {\r\n                if (delta.x == 0) _left_is_end = true;\r\n            }\r\n\r\n            resize.call(this);\r\n            GRID.header.scrollTo.call(self, {left: newLeft});\r\n\r\n            if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\r\n            this.xvar.scrollTimer = setTimeout(function () {\r\n                GRID.body.scrollTo.call(self, {left: newLeft, top: newTop});\r\n            }, 0);\r\n\r\n            return !_top_is_end || !_left_is_end;\r\n        },\r\n        \"on\": function () {\r\n            let self = this,\r\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\r\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\r\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\r\n                _content_height = self.xvar.scrollContentHeight,\r\n                _content_width = self.xvar.scrollContentWidth,\r\n                getContentPosition = function (e) {\r\n                    let mouseObj = GRID.util.getMousePosition(e), newLeft, newTop;\r\n\r\n                    self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\r\n                    self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\r\n\r\n                    newLeft = _body_scroll_position.left + self.xvar.__x_da;\r\n                    newTop = _body_scroll_position.top + self.xvar.__y_da;\r\n\r\n                    // newTop이 범위를 넘었는지 체크\r\n                    if (newTop >= 0) {\r\n                        newTop = 0;\r\n                    } else if (newTop <= _panel_height - _content_height) {\r\n                        newTop = _panel_height - _content_height;\r\n                        if (newTop >= 0) newTop = 0;\r\n                    }\r\n\r\n                    // newLeft이 범위를 넘었는지 체크\r\n                    if (newLeft >= 0) {\r\n                        newLeft = 0;\r\n                    } else if (newLeft <= _panel_width - _content_width) {\r\n                        newLeft = _panel_width - _content_width;\r\n                        if (newLeft >= 0) newLeft = 0;\r\n                    }\r\n\r\n                    return {\r\n                        left: newLeft, top: newTop\r\n                    }\r\n                };\r\n\r\n            this.xvar.__x_da = 0; // 이동량 변수 초기화\r\n            this.xvar.__y_da = 0; // 계산이 잘못 될까바\r\n            this.xvar.touchmoved = false;\r\n\r\n            jQuery(document.body)\r\n                .on(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\r\n                    let css = getContentPosition(e);\r\n\r\n                    resize.call(self);\r\n                    if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\r\n                    self.xvar.scrollTimer = setTimeout(function () {\r\n                        GRID.header.scrollTo.call(self, {left: css.left});\r\n                        GRID.body.scrollTo.call(self, css, \"noRepaint\");\r\n                    }, 0);\r\n                    U.stopEvent(e.originalEvent);\r\n                    self.xvar.touchmoved = true;\r\n                })\r\n                .on(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\r\n                    if (self.xvar.touchmoved) {\r\n                        let css = getContentPosition(e);\r\n\r\n                        resize.call(self);\r\n                        if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\r\n                        self.xvar.scrollTimer = setTimeout(function () {\r\n                            GRID.header.scrollTo.call(self, {left: css.left});\r\n                            GRID.body.scrollTo.call(self, css);\r\n                        }, 0);\r\n\r\n                        U.stopEvent(e.originalEvent);\r\n                        scrollContentMover.off.call(self);\r\n                    }\r\n                });\r\n\r\n            jQuery(document.body)\r\n                .attr('unselectable', 'on')\r\n                .css('user-select', 'none')\r\n                .on('selectstart', false);\r\n        },\r\n        \"off\": function () {\r\n\r\n            jQuery(document.body)\r\n                .off(\"touchmove\" + \".ax5grid-\" + this.instanceId)\r\n                .off(\"touchend\" + \".ax5grid-\" + this.instanceId);\r\n\r\n            jQuery(document.body)\r\n                .removeAttr('unselectable')\r\n                .css('user-select', 'auto')\r\n                .off('selectstart');\r\n        }\r\n    };\r\n\r\n    const init = function () {\r\n        let self = this,\r\n            margin = this.config.scroller.trackPadding;\r\n\r\n        if (margin == 0) {\r\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size, left: -1});\r\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size, top: -1});\r\n        } else {\r\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size - (margin + 1), left: margin / 2});\r\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size - (margin + 1), top: margin / 2});\r\n        }\r\n\r\n        this.$[\"scroller\"][\"vertical-bar\"]\r\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\r\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\r\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\r\n            }).bind(this))\r\n            .on(\"dragstart\", function (e) {\r\n                U.stopEvent(e);\r\n                return false;\r\n            });\r\n\r\n        this.$[\"scroller\"][\"vertical\"]\r\n            .on(\"click\", (function (e) {\r\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\r\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\r\n                }\r\n            }).bind(this));\r\n\r\n        this.$[\"scroller\"][\"horizontal-bar\"]\r\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\r\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\r\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\r\n            }).bind(this))\r\n            .on(\"dragstart\", function (e) {\r\n                U.stopEvent(e);\r\n                return false;\r\n            });\r\n\r\n        this.$[\"scroller\"][\"horizontal\"]\r\n            .on(\"click\", (function (e) {\r\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\r\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\r\n                }\r\n            }).bind(this));\r\n\r\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', (function (e) {\r\n            let E = e.originalEvent, delta = {x: 0, y: 0};\r\n\r\n            if (E.detail) {\r\n                delta.y = E.detail * 10;\r\n            } else {\r\n                if (typeof E.deltaY === \"undefined\") {\r\n                    delta.y = -E.wheelDelta;\r\n                    delta.x = 0;\r\n                } else {\r\n                    delta.y = E.deltaY;\r\n                    delta.x = E.deltaX;\r\n                }\r\n            }\r\n\r\n            if (scrollContentMover.wheel.call(this, delta)) {\r\n                U.stopEvent(e);\r\n            }\r\n        }).bind(this));\r\n\r\n\r\n        if (ax5.info.supportTouch) {\r\n            this.$[\"container\"][\"body\"]\r\n                .on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\r\n                    self.xvar.mousePosition = GRID.util.getMousePosition(e);\r\n                    scrollContentMover.on.call(self);\r\n                });\r\n        }\r\n\r\n    };\r\n\r\n    const resize = function () {\r\n        let _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\r\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\r\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\r\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\r\n            _content_height = this.xvar.scrollContentHeight,\r\n            _content_width = this.xvar.scrollContentWidth,\r\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\r\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\r\n\r\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\r\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\r\n\r\n        this.$[\"scroller\"][\"vertical-bar\"].css({\r\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\r\n                _content_width: _content_width,\r\n                _content_height: _content_height,\r\n                _panel_width: _panel_width,\r\n                _panel_height: _panel_height,\r\n                _horizontal_scroller_width: _horizontal_scroller_width,\r\n                _vertical_scroller_height: _vertical_scroller_height,\r\n                verticalScrollBarHeight: verticalScrollBarHeight,\r\n                horizontalScrollBarWidth: horizontalScrollBarWidth\r\n            }),\r\n            height: verticalScrollBarHeight\r\n        });\r\n\r\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\r\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\r\n                _content_width: _content_width,\r\n                _content_height: _content_height,\r\n                _panel_width: _panel_width,\r\n                _panel_height: _panel_height,\r\n                _horizontal_scroller_width: _horizontal_scroller_width,\r\n                _vertical_scroller_height: _vertical_scroller_height,\r\n                verticalScrollBarHeight: verticalScrollBarHeight,\r\n                horizontalScrollBarWidth: horizontalScrollBarWidth\r\n            }),\r\n            width: horizontalScrollBarWidth\r\n        });\r\n\r\n        _vertical_scroller_height = null;\r\n        _horizontal_scroller_width = null;\r\n        _panel_height = null;\r\n        _panel_width = null;\r\n        _content_height = null;\r\n        _content_width = null;\r\n        verticalScrollBarHeight = null;\r\n        horizontalScrollBarWidth = null;\r\n    };\r\n\r\n    GRID.scroller = {\r\n        // 타이머\r\n        moveout_timer: (new Date()).getTime(),\r\n        init: init,\r\n        resize: resize\r\n    };\r\n\r\n})();","// ax5.ui.grid.tmpl\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const main = function () {\r\n        return `<div data-ax5grid-container=\"root\" data-ax5grid-instance=\"{{instanceId}}\">\r\n            <div data-ax5grid-container=\"hidden\">\r\n                <textarea data-ax5grid-form=\"clipboard\"></textarea>\r\n            </div>\r\n            <div data-ax5grid-container=\"header\">\r\n                <div data-ax5grid-panel=\"aside-header\"></div>\r\n                <div data-ax5grid-panel=\"left-header\"></div>\r\n                <div data-ax5grid-panel=\"header\">\r\n                    <div data-ax5grid-panel-scroll=\"header\"></div>\r\n                </div>\r\n                <div data-ax5grid-panel=\"right-header\"></div>\r\n            </div>\r\n            <div data-ax5grid-container=\"body\">\r\n                <div data-ax5grid-panel=\"top-aside-body\"></div>\r\n                <div data-ax5grid-panel=\"top-left-body\"></div>\r\n                <div data-ax5grid-panel=\"top-body\">\r\n                    <div data-ax5grid-panel-scroll=\"top-body\"></div>\r\n                </div>\r\n                <div data-ax5grid-panel=\"top-right-body\"></div>\r\n                <div data-ax5grid-panel=\"aside-body\">\r\n                    <div data-ax5grid-panel-scroll=\"aside-body\"></div>\r\n                </div>\r\n                <div data-ax5grid-panel=\"left-body\">\r\n                    <div data-ax5grid-panel-scroll=\"left-body\"></div>\r\n                </div>\r\n                <div data-ax5grid-panel=\"body\">\r\n                    <div data-ax5grid-panel-scroll=\"body\"></div>\r\n                </div>\r\n                <div data-ax5grid-panel=\"right-body\">\r\n                  <div data-ax5grid-panel-scroll=\"right-body\"></div>\r\n                </div>\r\n                <div data-ax5grid-panel=\"bottom-aside-body\"></div>\r\n                <div data-ax5grid-panel=\"bottom-left-body\"></div>\r\n                <div data-ax5grid-panel=\"bottom-body\">\r\n                    <div data-ax5grid-panel-scroll=\"bottom-body\"></div>\r\n                </div>\r\n                <div data-ax5grid-panel=\"bottom-right-body\"></div>\r\n            </div>\r\n            <div data-ax5grid-container=\"page\">\r\n                <div data-ax5grid-page=\"holder\">\r\n                    <div data-ax5grid-page=\"navigation\"></div>\r\n                    <div data-ax5grid-page=\"status\"></div>\r\n                </div>\r\n            </div>\r\n            <div data-ax5grid-container=\"scroller\">\r\n                <div data-ax5grid-scroller=\"vertical\">\r\n                    <div data-ax5grid-scroller=\"vertical-bar\"></div>    \r\n                </div>\r\n                <div data-ax5grid-scroller=\"horizontal\">\r\n                    <div data-ax5grid-scroller=\"horizontal-bar\"></div>\r\n                </div>\r\n                <div data-ax5grid-scroller=\"corner\"></div>\r\n            </div>\r\n            <div data-ax5grid-resizer=\"vertical\"></div>\r\n            <div data-ax5grid-resizer=\"horizontal\"></div>\r\n        </div>`;\r\n    };\r\n\r\n    const page_navigation = function(){\r\n        return `<div data-ax5grid-page-navigation=\"holder\">\r\n            {{#hasPage}}\r\n            <div data-ax5grid-page-navigation=\"cell\">    \r\n                {{#firstIcon}}<button type=\"button\" data-ax5grid-page-move=\"first\">{{{firstIcon}}}</button>{{/firstIcon}}\r\n                <button type=\"button\" data-ax5grid-page-move=\"prev\">{{{prevIcon}}}</button>\r\n            </div>\r\n            <div data-ax5grid-page-navigation=\"cell-paging\">\r\n                {{#@paging}}\r\n                <button type=\"button\" data-ax5grid-page-move=\"{{pageNo}}\" data-ax5grid-page-selected=\"{{selected}}\">{{pageNo}}</button>\r\n                {{/@paging}}\r\n            </div>\r\n            <div data-ax5grid-page-navigation=\"cell\">\r\n                <button type=\"button\" data-ax5grid-page-move=\"next\">{{{nextIcon}}}</button>\r\n                {{#lastIcon}}<button type=\"button\" data-ax5grid-page-move=\"last\">{{{lastIcon}}}</button>{{/lastIcon}}\r\n            </div>\r\n            {{/hasPage}}\r\n        </div>`;\r\n    };\r\n\r\n    const page_status = function(){\r\n        return `<span>{{{progress}}} {{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>`;\r\n    };\r\n\r\n    GRID.tmpl = {\r\n        \"main\": main,\r\n        \"page_navigation\": page_navigation,\r\n        \"page_status\": page_status,\r\n\r\n        get: function (tmplName, data, columnKeys) {\r\n            return ax5.mustache.render(GRID.tmpl[tmplName].call(this, columnKeys), data);\r\n        }\r\n    };\r\n\r\n})();","// ax5.ui.grid.util\r\n(function () {\r\n\r\n    const GRID = ax5.ui.grid;\r\n\r\n    const U = ax5.util;\r\n\r\n    /**\r\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\r\n     * @param _table\r\n     * @param _frozenColumnIndex\r\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\r\n     */\r\n    const divideTableByFrozenColumnIndex = function (_table, _frozenColumnIndex) {\r\n\r\n        let tempTable_l = {rows: []},\r\n            tempTable_r = {rows: []};\r\n\r\n        for (let r = 0, rl = _table.rows.length; r < rl; r++) {\r\n            let row = _table.rows[r];\r\n\r\n            tempTable_l.rows[r] = {cols: []};\r\n            tempTable_r.rows[r] = {cols: []};\r\n\r\n            for (let c = 0, cl = row.cols.length; c < cl; c++) {\r\n                let col = jQuery.extend({}, row.cols[c]),\r\n                    colStartIndex = col.colIndex,\r\n                    colEndIndex = col.colIndex + col.colspan;\r\n\r\n                if (colStartIndex < _frozenColumnIndex) {\r\n                    if (colEndIndex <= _frozenColumnIndex) {\r\n                        // 좌측편에 변형없이 추가\r\n                        tempTable_l.rows[r].cols.push(col);\r\n                    } else {\r\n                        let leftCol = jQuery.extend({}, col),\r\n                            rightCol = jQuery.extend({}, leftCol);\r\n\r\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\r\n                        rightCol.colIndex = _frozenColumnIndex;\r\n                        rightCol.colspan = col.colspan - leftCol.colspan;\r\n\r\n                        tempTable_l.rows[r].cols.push(leftCol);\r\n                        if (rightCol.colspan) {\r\n                            tempTable_r.rows[r].cols.push(rightCol);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // 오른편\r\n                    tempTable_r.rows[r].cols.push(col);\r\n                }\r\n\r\n                col = null;\r\n                colStartIndex = null;\r\n                colEndIndex = null;\r\n            }\r\n\r\n            row = null;\r\n        }\r\n\r\n        return {\r\n            leftData: tempTable_l,\r\n            rightData: tempTable_r\r\n        }\r\n    };\r\n\r\n    const getTableByStartEndColumnIndex = function (_table, _startColumnIndex, _endColumnIndex) {\r\n\r\n        let tempTable = {rows: []};\r\n        for (let r = 0, rl = _table.rows.length; r < rl; r++) {\r\n            let row = _table.rows[r];\r\n\r\n            tempTable.rows[r] = {cols: []};\r\n            for (let c = 0, cl = row.cols.length; c < cl; c++) {\r\n                let col = jQuery.extend({}, row.cols[c]),\r\n                    colStartIndex = col.colIndex, colEndIndex = col.colIndex + col.colspan;\r\n\r\n                if (_startColumnIndex <= colStartIndex || colEndIndex <= _endColumnIndex) {\r\n                    if (_startColumnIndex <= colStartIndex && colEndIndex <= _endColumnIndex) {\r\n                        // 변형없이 추가\r\n                        tempTable.rows[r].cols.push(col);\r\n                    }\r\n                    else if (_startColumnIndex > colStartIndex && colEndIndex > _startColumnIndex) {\r\n                        // 앞에서 걸친경우\r\n                        col.colspan = colEndIndex - _startColumnIndex;\r\n                        tempTable.rows[r].cols.push(col);\r\n                    }\r\n                    else if (colEndIndex > _endColumnIndex && colStartIndex <= _endColumnIndex) {\r\n                        tempTable.rows[r].cols.push(col);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return tempTable;\r\n    };\r\n\r\n    const getMousePosition = function (e) {\r\n        let mouseObj,\r\n            originalEvent = (e.originalEvent) ? e.originalEvent : e;\r\n\r\n        mouseObj = ('changedTouches' in originalEvent && originalEvent.changedTouches) ? originalEvent.changedTouches[0] : originalEvent;\r\n        // clientX, Y 쓰면 스크롤에서 문제 발생\r\n        return {\r\n            clientX: mouseObj.pageX,\r\n            clientY: mouseObj.pageY\r\n        }\r\n    };\r\n\r\n    const ENM = {\r\n        \"mousedown\": (ax5.info.supportTouch) ? \"touchstart\" : \"mousedown\",\r\n        \"mousemove\": (ax5.info.supportTouch) ? \"touchmove\" : \"mousemove\",\r\n        \"mouseup\": (ax5.info.supportTouch) ? \"touchend\" : \"mouseup\"\r\n    };\r\n\r\n    const makeHeaderTable = function (_columns) {\r\n        let columns = U.deepCopy(_columns),\r\n            cfg = this.config,\r\n            table = {\r\n                rows: []\r\n            },\r\n            colIndex = 0,\r\n            maekRows = function (_columns, depth, parentField) {\r\n                var row = {cols: []};\r\n                var i = 0, l = _columns.length;\r\n\r\n                for (; i < l; i++) {\r\n                    var field = _columns[i];\r\n                    var colspan = 1;\r\n\r\n                    if (!field.hidden) {\r\n                        field.colspan = 1;\r\n                        field.rowspan = 1;\r\n\r\n                        field.rowIndex = depth;\r\n                        field.colIndex = (function () {\r\n                            if (!parentField) {\r\n                                return colIndex++;\r\n                            } else {\r\n                                colIndex = parentField.colIndex + i + 1;\r\n                                return parentField.colIndex + i;\r\n                            }\r\n                        })();\r\n\r\n                        row.cols.push(field);\r\n\r\n                        if ('columns' in field) {\r\n                            colspan = maekRows(field.columns, depth + 1, field);\r\n                        } else {\r\n                            field.width = ('width' in field) ? field.width : cfg.columnMinWidth;\r\n                        }\r\n                        field.colspan = colspan;\r\n                    } else {\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                if (row.cols.length > 0) {\r\n                    if (!table.rows[depth]) {\r\n                        table.rows[depth] = {cols: []};\r\n                    }\r\n                    table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\r\n                    return (row.cols.length - 1) + colspan;\r\n                } else {\r\n                    return colspan;\r\n                }\r\n\r\n            };\r\n\r\n        maekRows(columns, 0);\r\n\r\n        // set rowspan\r\n        for (let r = 0, rl = table.rows.length; r < rl; r++) {\r\n            for (let c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\r\n                if (!('columns' in table.rows[r].cols[c])) {\r\n                    table.rows[r].cols[c].rowspan = rl - r;\r\n                }\r\n            }\r\n        }\r\n\r\n        return table;\r\n    };\r\n\r\n    const makeBodyRowTable = function (_columns) {\r\n        let columns = U.deepCopy(_columns),\r\n            table = {\r\n                rows: []\r\n            },\r\n            colIndex = 0,\r\n            maekRows = function (_columns, depth, parentField) {\r\n                let row = {cols: []},\r\n                    i = 0,\r\n                    l = _columns.length,\r\n                    colspan = 1;\r\n\r\n                let selfMakeRow = function (__columns) {\r\n                    let i = 0, l = __columns.length;\r\n                    for (; i < l; i++) {\r\n                        let field = __columns[i],\r\n                            colspan = 1;\r\n\r\n                        if (!field.hidden) {\r\n\r\n                            if ('key' in field) {\r\n                                field.colspan = 1;\r\n                                field.rowspan = 1;\r\n\r\n                                field.rowIndex = depth;\r\n                                field.colIndex = (function () {\r\n                                    if (!parentField) {\r\n                                        return colIndex++;\r\n                                    } else {\r\n                                        colIndex = parentField.colIndex + i + 1;\r\n                                        return parentField.colIndex + i;\r\n                                    }\r\n                                })();\r\n\r\n                                row.cols.push(field);\r\n                                if ('columns' in field) {\r\n                                    colspan = maekRows(field.columns, depth + 1, field);\r\n                                }\r\n                                field.colspan = colspan;\r\n                            }\r\n                            else {\r\n                                if ('columns' in field) {\r\n                                    selfMakeRow(field.columns, depth);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n                        }\r\n                    }\r\n                };\r\n\r\n                for (; i < l; i++) {\r\n                    let field = _columns[i];\r\n                    colspan = 1;\r\n\r\n                    if (!field.hidden) {\r\n\r\n                        if ('key' in field) {\r\n                            field.colspan = 1;\r\n                            field.rowspan = 1;\r\n\r\n                            field.rowIndex = depth;\r\n                            field.colIndex = (function () {\r\n                                if (!parentField) {\r\n                                    return colIndex++;\r\n                                } else {\r\n                                    colIndex = parentField.colIndex + i + 1;\r\n                                    return parentField.colIndex + i;\r\n                                }\r\n                            })();\r\n\r\n                            row.cols.push(field);\r\n                            if ('columns' in field) {\r\n                                colspan = maekRows(field.columns, depth + 1, field);\r\n                            }\r\n                            field.colspan = colspan;\r\n                        }\r\n                        else {\r\n                            if ('columns' in field) {\r\n                                selfMakeRow(field.columns, depth);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n\r\n                    }\r\n\r\n                    field = null;\r\n                }\r\n\r\n                if (row.cols.length > 0) {\r\n                    if (!table.rows[depth]) {\r\n                        table.rows[depth] = {cols: []};\r\n                    }\r\n                    table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\r\n                    return (row.cols.length - 1) + colspan;\r\n                }\r\n                else {\r\n                    return colspan;\r\n                }\r\n            };\r\n\r\n        maekRows(columns, 0);\r\n\r\n        (function (table) {\r\n            // set rowspan\r\n            for (let r = 0, rl = table.rows.length; r < rl; r++) {\r\n                let row = table.rows[r];\r\n                for (let c = 0, cl = row.cols.length; c < cl; c++) {\r\n                    let col = row.cols[c];\r\n                    if (!('columns' in col)) {\r\n                        col.rowspan = rl - r;\r\n                    }\r\n                    col = null;\r\n                }\r\n                row = null;\r\n            }\r\n        })(table);\r\n\r\n        return table;\r\n    };\r\n\r\n    const makeBodyRowMap = function (_table) {\r\n        let map = {};\r\n        _table.rows.forEach(function (row) {\r\n            row.cols.forEach(function (col) {\r\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\r\n            });\r\n        });\r\n        return map;\r\n    };\r\n\r\n    let makeFootSumTable = function (_footSumColumns) {\r\n        let table = {\r\n            rows: []\r\n        };\r\n\r\n        for (let r = 0, rl = _footSumColumns.length; r < rl; r++) {\r\n            let footSumRow = _footSumColumns[r],\r\n                addC = 0;\r\n\r\n            table.rows[r] = {cols: []};\r\n\r\n            for (let c = 0, cl = footSumRow.length; c < cl; c++) {\r\n                if (addC > this.colGroup.length) break;\r\n                let colspan = footSumRow[c].colspan || 1;\r\n                if (footSumRow[c].label || footSumRow[c].key) {\r\n                    table.rows[r].cols.push({\r\n                        colspan: colspan,\r\n                        rowspan: 1,\r\n                        colIndex: addC,\r\n                        columnAttr: \"sum\",\r\n                        align: footSumRow[c].align,\r\n                        label: footSumRow[c].label,\r\n                        key: footSumRow[c].key,\r\n                        collector: footSumRow[c].collector,\r\n                        formatter: footSumRow[c].formatter\r\n                    });\r\n                } else {\r\n                    table.rows[r].cols.push({\r\n                        colIndex: addC,\r\n                        colspan: colspan,\r\n                        rowspan: 1,\r\n                        label: \"&nbsp;\",\r\n                    });\r\n                }\r\n                addC += colspan;\r\n                colspan = null;\r\n            }\r\n\r\n            if (addC < this.colGroup.length) {\r\n                for (let c = addC; c < this.colGroup.length; c++) {\r\n                    table.rows[r].cols.push({\r\n                        colIndex: (c),\r\n                        colspan: 1,\r\n                        rowspan: 1,\r\n                        label: \"&nbsp;\",\r\n                    });\r\n                }\r\n            }\r\n            footSumRow = null;\r\n            addC = null;\r\n        }\r\n\r\n        return table;\r\n    };\r\n\r\n    const makeBodyGroupingTable = function (_bodyGroupingColumns) {\r\n        let table = {\r\n                rows: []\r\n            },\r\n            r = 0,\r\n            addC = 0;\r\n\r\n        table.rows[r] = {cols: []};\r\n        for (let c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {\r\n            if (addC > this.columns.length) break;\r\n            let colspan = _bodyGroupingColumns[c].colspan || 1;\r\n            if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {\r\n                table.rows[r].cols.push({\r\n                    colspan: colspan,\r\n                    rowspan: 1,\r\n                    rowIndex: 0,\r\n                    colIndex: addC,\r\n                    columnAttr: \"default\",\r\n                    align: _bodyGroupingColumns[c].align,\r\n                    label: _bodyGroupingColumns[c].label,\r\n                    key: _bodyGroupingColumns[c].key,\r\n                    collector: _bodyGroupingColumns[c].collector,\r\n                    formatter: _bodyGroupingColumns[c].formatter\r\n                });\r\n            } else {\r\n                table.rows[r].cols.push({\r\n                    rowIndex: 0,\r\n                    colIndex: addC,\r\n                    colspan: colspan,\r\n                    rowspan: 1,\r\n                    label: \"&nbsp;\"\r\n                });\r\n            }\r\n            addC += colspan;\r\n        }\r\n\r\n        if (addC < this.colGroup.length) {\r\n            for (var c = addC; c < this.colGroup.length; c++) {\r\n                table.rows[r].cols.push({\r\n                    rowIndex: 0,\r\n                    colIndex: (c),\r\n                    colspan: 1,\r\n                    rowspan: 1,\r\n                    label: \"&nbsp;\",\r\n                });\r\n            }\r\n        }\r\n\r\n        return table;\r\n    };\r\n\r\n    const findPanelByColumnIndex = function (_dindex, _colIndex, _rowIndex) {\r\n        let _containerPanelName,\r\n            _isScrollPanel = false,\r\n            _panels = [];\r\n\r\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\r\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\r\n        _panels.push(\"body\");\r\n\r\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\r\n            _containerPanelName = _panels.join(\"-\");\r\n            _panels.push(\"scroll\");\r\n            _isScrollPanel = true;\r\n        }\r\n\r\n        return {\r\n            panelName: _panels.join(\"-\"),\r\n            containerPanelName: _containerPanelName,\r\n            isScrollPanel: _isScrollPanel\r\n        }\r\n    };\r\n\r\n    const getRealPathForDataItem = function (_dataPath) {\r\n        let path = [],\r\n            _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\r\n\r\n        _path.forEach(function (n) {\r\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\r\n        });\r\n        _path = null;\r\n        return path.join(\"\");\r\n    };\r\n\r\n\r\n    GRID.util = {\r\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\r\n        getTableByStartEndColumnIndex: getTableByStartEndColumnIndex,\r\n        getMousePosition: getMousePosition,\r\n        ENM: ENM,\r\n        makeHeaderTable: makeHeaderTable,\r\n        makeBodyRowTable: makeBodyRowTable,\r\n        makeBodyRowMap: makeBodyRowMap,\r\n        makeFootSumTable: makeFootSumTable,\r\n        makeBodyGroupingTable: makeBodyGroupingTable,\r\n        findPanelByColumnIndex: findPanelByColumnIndex,\r\n        getRealPathForDataItem: getRealPathForDataItem,\r\n    };\r\n\r\n})();"]}