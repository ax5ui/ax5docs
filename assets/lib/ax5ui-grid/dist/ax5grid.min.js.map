{"version":3,"sources":["ax5grid.js","ax5grid-body.js","ax5grid-collector.js","ax5grid-data.js","ax5grid-excel.js","ax5grid-formatter.js","ax5grid-header.js","ax5grid-inline-editor.js","ax5grid-page.js","ax5grid-scroller.js","ax5grid-tmpl.js","ax5grid-util.js"],"names":["UI","ax5","ui","U","util","GRID","addClass","className","self","this","cfg","ctrlKeys","33","34","35","36","37","38","39","40","instanceId","getGuid","config","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","frozenColumnIndex","frozenRowIndex","showLineNumber","showRowSelector","multipleSelect","virtualScrollY","virtualScrollX","virtualScrollYCountMargin","virtualScrollAccelerated","virtualScrollAcceleratedDelayTime","height","columnMinWidth","lineNumberColumnWidth","rowSelectorColumnWidth","sortable","undefined","remoteSort","header","display","align","columnHeight","columnPadding","columnBorderWidth","body","grouping","mergeCells","rightSum","footSum","page","statusDisplay","navigationItemCount","scroller","size","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","tree","use","hashDigit","indentWidth","arrowWidth","iconWidth","icons","openedArrow","collapsedArrow","groupIcon","collapsedGroupIcon","itemIcon","parentKey","selfKey","collapse","hidden","parentHash","selfHash","children","depth","xvar","bodyTrHeight","scrollContentWidth","scrollContentHeight","scrollTimer","columns","colGroup","footSumColumns","bodyGrouping","list","proxyList","selectedDataIndexs","deletedList","sortInfo","focusedColumn","selectedColumn","isInlineEditing","inlineEditing","listIndexMap","contextMenu","headerTable","leftHeaderData","headerData","rightHeaderData","bodyRowTable","leftBodyRowData","bodyRowData","rightBodyRowData","bodyRowMap","bodyGroupingTable","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","bodyGroupingMap","footSumTable","leftFootSumData","footSumData","needToPaintSum","initGrid","data","id","$target","html","tmpl","get","$","container","find","root","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","right-body","right-body-scroll","bottom-aside-body","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","horizontal-bar","corner","navigation","status","form","clipboard","resizer","css","_height","initColumns","_columns","deepCopy","makeHeaderTable","call","makeBodyRowTable","makeBodyRowMap","rows","length","colGroupMap","r","rl","row","c","cl","cols","colIndex","jQuery","extend","k","push","onResetColumns","resetColGroupWidth","initFootSum","initBodyGroup","alignGrid","repaint","resize","CT_WIDTH","width","totalWidth","computedWidth","autoWidthColgroupIndexs","i","l","isNumber","_width","right","left","_footSum","isArray","makeFootSumTable","_grouping","by","makeBodyGroupingTable","kl","orderBy","seq","fixed","key","sort","sortFixed","_isFirst","Math","min","innerWidth","innerHeight","CT_HEIGHT","CT_INNER_WIDTH","CT_INNER_HEIGHT","asidePanelWidth","frozenPanelWidth","endIndex","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","rightPanelWidth","frozenRowHeight","footSumHeight","headerHeight","pageHeight","totalColGroupWidth","bodyWidth","panelDisplayProcess","vPosition","hPosition","containerType","isHide","hide","show","scrollerDisplayProcess","scrollerWidth","scrollerHeight","sortColumns","_sortInfo","isFunction","that","a","b","initData","clearGroupingData","resetLineNumber","init","_config","target","console","log","info","getError","onStateChanged","onClick","onLoad","onDataChanged","isObject","error","parseJson","attr","grid","window","bind","document","on","e","isPickerClick","findParentNode","_target","getAttribute","focused","blur","which","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","UP","shiftKey","DOWN","metaKey","ctrlKey","copySelect","SPACE","Object","keys","setTimeout","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","_e","inlineEdit","active","test","keydown","activeEditLength","columnKey","_act","_data","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_colIndex","_dindex","_di","_column","dindex","rowIndex","originalColumn","__isGrouping","forEach","join","innerText","select","execCommand","setData","isFirstPaint","paintStartRowIndex","set","navigationUpdate","scrollTo","top","getList","_type","setHeight","offsetParent","addRow","_row","_options","add","focus","appendToList","_list","append","removeRow","remove","updateRow","update","repaintRow","updateChildRows","_updateData","updateChild","paintStartColumnIndex","deleteRow","setValue","_key","_value","repaintCell","_panelName","_rows","__dindex","__key","__value","addColumn","first","concat","last","_cindex","_i","_l","splice","removeColumn","updateColumn","setColumnWidth","columnResizerIndex","getColumnSortInfo","setColumnSort","applySortStatus","_selectObject","selectedClear","clearSelect","updateRowState","clickBody","click","DBLClickBody","dblClick","selectAll","updateRowStateAll","exportExcel","_fileName","table","getExcelString","excel","export","_pos","selectedIndex","HOME","END","destroy","empty","grid_instance","filter","main","arguments","setConfig","apply","columnSelect","focusClear","panelName","removeAttr","clear","column","editKey","doindex","colspan","selectedRange","start","end","deActive","trl","range","s","max","_panels","columnSelector","cell","Number","off","_states","_doindex","si","__origin_index__","cellChecked","checked","_state","col","targetClick","default","item","value","editor","type","getValue","newValue","trueValue","falseValue","editorConfig","rowSelector","internalCall","lineNumber","tree-control","_el","toggleCollapse","targetDBLClick","onDBLClick","param","t","menu","element","gridSelf","popup","popupFilter","touchmoved","resetFrozenColumn","paintRowCountMargin","paintRowCountTopMargin","floor","dividedBodyRowObj","divideTableByFrozenColumnIndex","asideBodyRowData","dataTable","label","rowspan","_col","columnAttr","leftData","rightData","dividedBodyGroupingObj","asideBodyGroupingData","dividedFootSumObj","getFieldValue","_item","_index","_returnPlainText","tagsToReplace","<",">","_editor","inlineEditor","editMode","disabled","getHtml","valueProcessor","formatter","returnValue","replace","tag","treeControl","indentNodeHtml","getGroupingValue","_label","__groupingList","groupBy","__groupingBy","collector","getSumFieldValue","_reset","virtualPaintStartRowIndex","position","isNaN","paintEndColumnIndex","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","bodyScrollLeft","ci","_sx","_ex","padding-left","padding-right","headerColGroup","bodyAlign","paintRowCount","virtualPaintRowCount","ceil","abs","dataRowCount","getTableByStartEndColumnIndex","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","cgl","di","dl","tri","cellHeight","colAlign","isScrolled","stripeString","len","isGroupingRow","rowTable","odi","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","index","_cellHeight","lineHeight","multiLine","innerHTML","repaintSum","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","ri","tableTrTds","trMaps","childNodes","tdObj","text","_loop","prevTokenColIndexs","_loop2","search","hasFalse","ti","scrollConfig","frozenScrollConfig","asideColGroup","slice","leftHeaderColGroup","statusUpdate","_newValue","updateCell","updateWith","updateColumnKey","findPanelByColumnIndex","updateWithCell","replaceGroupTr","replaceTr","opts","bodyScrollToTimer","clearTimeout","noRepaint","callback","_position","UD","_dy","moveResult","while_i","nPanelInfo","newTop","LR","_dx","isScrollPanel","containerPanelName","isScrollTo","scrollLeft","$column","newLeft","outerWidth","INDEX","LEFT","RIGHT","_initValue","useReturnToSave","originalValue","initValue","__editor","isNothing","number","money","$inlineEditorCell","$inlineEditor","_msg","editorValue","tagName","val","action","CANCEL","__clear","bindedAx5ui","ax5picker","ax5select","getBody","getSum","po","_collapse","getProxyList","sum","avg","listLength","round","returnList","appendIndex","dataRealRowCount","groupingKeys","map","compareString","gi","gl","appendRow","ari","appendRowItem","labels","ki","arrangeData4tree","li","setDigit","_parent","_parentHash","treeKeys","substr","ii","originIndex","_k","Function","getRealPathForDataItem","listIndex","_selected","sortInfoArray","getKeyValue","order","_a_val","_b_val","_a","_b","_typeof","_callback","appendIdle","_doindx","base64","btoa","unescape","encodeURIComponent","uri","getExcelTmpl","tableToExcel","fileName","output","tables","mustache","render","worksheet","arr","name","isChrome","navigator","userAgent","indexOf","isSafari","isIE","documentMode","blob1","blankWindow","$iframe","iframe","anchor","msSaveOrOpenBlob","Blob","open","write","close","appendChild","createElement","download","href","removeChild","columnResizerEvent","_columnResizer","$columnResizer","columnResizerPositionLeft","offset","gridTargetOffsetLeft","resizeRange","ENM","mouseObj","getMousePosition","__da","clientX","mousePosition","columnResizerLived","removeClass","unbind","toggleSort","dividedHeaderObj","asideHeaderData","headerAlign","repaintHeader","tableWidth","trCSS_class","headerStyleClass","_SS","enableFilter","resizerHeight","resizerLeft","AS","sortOrder","multiSort","getHeader","edit_text","_root","_columnKey","attributes","attributesText","_$parent","$el","bindUI","_$el","edit_money","ax5formatter","pattern","edit_number","edit_date","direction","content","state","activePicker","edit_select","eConfig","optionValue","optionText","optionSelected","options","n","activeSelectOptionGroup","edit_checkbox","marginTop","edit_textarea","_getHtml","_bindUI","box","editorHeight","buttonHeight","$newDiv","$newTextarea","date","checkbox","textarea","onclickPageMove","_pageNo","currentPage","selectPage","onChange","prev","pageNo","next","totalPages","hasPage","pageSize","totalElements","firstIcon","prevIcon","nextIcon","lastIcon","returns","startI","endI","p","fromRowIndex","toRowIndex","progress","convertScrollPosition","_var","_content_height","_panel_height","_scroller_height","_vertical_scroller_height","verticalScrollBarHeight","_content_width","_panel_width","_scroller_width","_horizontal_scroller_width","horizontalScrollBarWidth","convertScrollBarPosition","_top","scrollPositon","_left","scrollBarMover","track","bar","Date","getTime","moveout_timer","trackOffset","barBox","outerHeight","trackBox","getScrollerPosition","clientY","barOffset","scrollContentMover","wheel","delta","_body_scroll_position","body_panel_height","body_panel_width","_top_is_end","_left_is_end","x","y","getContentPosition","__x_da","__y_da","margin","E","detail","deltaY","wheelDelta","deltaX","supportTouch","page_navigation","page_status","tmplName","template","parse","_table","_frozenColumnIndex","tempTable_l","tempTable_r","colStartIndex","colEndIndex","leftCol","rightCol","_startColumnIndex","_endColumnIndex","tempTable","changedTouches","pageX","pageY","mousedown","mousemove","mouseup","maekRows","parentField","field","selfMakeRow","__columns","_footSumColumns","footSumRow","addC","_bodyGroupingColumns","_containerPanelName","_isScrollPanel","_dataPath","path","_path","split"],"mappings":"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","file":"ax5grid.min.js","sourcesContent":["/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid\n(function () {\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n    let GRID;\n\n    UI.addClass({\n        className: \"grid\"\n    }, (function () {\n        /**\n         * @class ax5grid\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var myGrid = new ax5.ui.grid();\n         * ```\n         */\n        return function () {\n            let self = this,\n                cfg,\n                ctrlKeys = {\n                    \"33\": \"KEY_PAGEUP\",\n                    \"34\": \"KEY_PAGEDOWN\",\n                    \"35\": \"KEY_END\",\n                    \"36\": \"KEY_HOME\",\n                    \"37\": \"KEY_LEFT\",\n                    \"38\": \"KEY_UP\",\n                    \"39\": \"KEY_RIGHT\",\n                    \"40\": \"KEY_DOWN\"\n                };\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                debounceTime: 250,\n                appendDebouncer: null,\n                appendDebounceTimes: 0,\n                appendProgressIcon: '...',\n                appendProgress: false,\n\n                // 틀고정 속성\n                frozenColumnIndex: 0,\n                frozenRowIndex: 0,\n                showLineNumber: false,\n                showRowSelector: false,\n                multipleSelect: true,\n                virtualScrollY: true,\n                virtualScrollX: true,\n\n                // 스크롤될 때 body 페인팅 딜레이를 주어 성능이 좋은 않은 브라우저에서 반응을 빠르게 할 때 사용하는 옵션들\n                virtualScrollYCountMargin: 0,\n                virtualScrollAccelerated: true,\n                virtualScrollAcceleratedDelayTime: 30,\n\n                height: 0,\n                columnMinWidth: 100,\n                lineNumberColumnWidth: 30,\n                rowSelectorColumnWidth: 26,\n                sortable: undefined,\n                remoteSort: false,\n\n                header: {\n                    display: true,\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1\n                },\n                body: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1,\n                    grouping: false,\n                    mergeCells: false\n                },\n                rightSum: false,\n                footSum: false,\n                page: {\n                    height: 25,\n                    display: true,\n                    statusDisplay: true,\n                    navigationItemCount: 5\n                },\n                scroller: {\n                    size: 15,\n                    barMinSize: 15,\n                    trackPadding: 4\n                },\n                columnKeys: {\n                    selected: '__selected__',\n                    modified: '__modified__',\n                    deleted: '__deleted__',\n                    disableSelection: '__disable_selection__'\n                },\n                tree: {\n                    use: false,\n                    hashDigit: 8,\n                    indentWidth: 10,\n                    arrowWidth: 15,\n                    iconWidth: 18,\n                    icons: {\n                        openedArrow: '▾',\n                        collapsedArrow: '▸',\n                        groupIcon: '⊚',\n                        collapsedGroupIcon: '⊚',\n                        itemIcon: '⊙'\n                    },\n                    columnKeys: {\n                        parentKey: \"pid\",\n                        selfKey: \"id\",\n                        collapse: \"collapse\",\n                        hidden: \"hidden\",\n                        parentHash: \"__hp__\",\n                        selfHash: \"__hs__\",\n                        children: \"__children__\",\n                        depth: \"__depth__\",\n                    }\n                }\n            };\n            this.xvar = {\n                bodyTrHeight: 0, // 한줄의 높이\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n                scrollContentHeight: 0, // 스크롤 된 내용물의 높이\n                scrollTimer: null\n            };\n\n            // 그리드 데이터셋\n            this.columns = []; // config.columns에서 복제된 오브젝트\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n            this.footSumColumns = [];\n            this.bodyGrouping = {};\n\n            this.list = []; // 그리드의 데이터\n            this.proxyList = null; // 그리드 데이터의 대리자\n            this.page = {}; // 그리드의 페이지 정보\n            this.selectedDataIndexs = [];\n            this.deletedList = [];\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n            this.isInlineEditing = false;\n            this.inlineEditing = {};\n            this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵\n            this.contextMenu = null; // contentMenu 의 인스턴스\n\n            // header\n            this.headerTable = {};\n            this.leftHeaderData = {};\n            this.headerData = {};\n            this.rightHeaderData = {};\n\n            // body\n            this.bodyRowTable = {};\n            this.leftBodyRowData = {};\n            this.bodyRowData = {};\n            this.rightBodyRowData = {};\n            this.bodyRowMap = {};\n\n            this.bodyGroupingTable = {};\n            this.leftBodyGroupingData = {};\n            this.bodyGroupingData = {};\n            this.rightBodyGroupingData = {};\n            this.bodyGroupingMap = {};\n\n            // footSum\n            this.footSumTable = {}; // footSum의 출력레이아웃\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n            cfg = this.config;\n\n            const initGrid = function () {\n                // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n                let data = {\n                    instanceId: this.id\n                };\n\n                this.$target.html(GRID.tmpl.get(\"main\", data));\n\n                // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n                this.$ = {\n                    \"container\": {\n                        \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\n                        \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\n                        \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\n                        \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\n                    },\n                    \"panel\": {\n                        \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\n                        \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\n                        \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\n                        \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\n                        \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\n                        \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\n                        \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\n                        \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\n                        \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\n                        \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\n                        \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\n                        \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\n                        \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\n                        \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\n                        \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\n                        \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\n                        \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\n                        \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\n                        \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\n                        \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\n                        \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\n                    },\n                    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n                    \"scroller\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\n                        \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\n                        \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\n                        \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\n                    },\n                    \"page\": {\n                        \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\n                        \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\n                    },\n                    \"form\": {\n                        \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\n                    },\n                    \"resizer\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\n                    }\n                };\n\n                this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\n\n                return this;\n            };\n            const initColumns = function (_columns) {\n                this.columns = U.deepCopy(_columns);\n                this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\n                this.xvar.frozenColumnIndex = cfg.frozenColumnIndex || 0;\n\n                this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\n                this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\n                // 바디에 표현될 한줄의 높이를 계산합니다.\n                this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n                let colGroupMap = {};\n                for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n                    let row = this.headerTable.rows[r];\n                    for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                        colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n                    }\n                }\n\n                this.colGroup = [];\n                for (var k in colGroupMap) {\n                    this.colGroup.push(colGroupMap[k]);\n                }\n\n                return this;\n            };\n            const onResetColumns = function () {\n                initColumns.call(this, this.config.columns);\n                resetColGroupWidth.call(this);\n                if (this.config.footSum) {\n                    initFootSum.call(this, this.config.footSum);\n                    this.needToPaintSum = true;\n                }\n                if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n                alignGrid.call(this, true);\n                GRID.header.repaint.call(this, true);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n            };\n            const resetColGroupWidth = function () {\n                /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (function () {\n                            let width = 0;\n                            if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                            if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                            width += cfg.scroller.size;\n                            return width;\n                        })(),\n                    totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\n                    colGroup = this.colGroup,\n                    i, l;\n\n                for (i = 0, l = colGroup.length; i < l; i++) {\n                    if (U.isNumber(colGroup[i].width)) {\n                        totalWidth += colGroup[i]._width = colGroup[i].width;\n                    } else if (colGroup[i].width === \"*\") {\n                        autoWidthColgroupIndexs.push(i);\n                    } else if (U.right(colGroup[i].width, 1) === \"%\") {\n                        totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n                    }\n                }\n                if (autoWidthColgroupIndexs.length > 0) {\n                    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n                    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n                        colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n                    }\n                }\n            };\n            const initFootSum = function (_footSum) {\n                if (U.isArray(_footSum)) {\n                    this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n                } else {\n                    this.footSumColumns = [];\n                    this.footSumTable = {};\n                }\n            };\n            const initBodyGroup = function (_grouping) {\n                let grouping = jQuery.extend({}, _grouping);\n                if (\"by\" in grouping && \"columns\" in grouping) {\n                    this.bodyGrouping = {\n                        by: grouping.by,\n                        columns: grouping.columns\n                    };\n                    this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n                    this.sortInfo = (function () {\n                        let sortInfo = {};\n                        for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                            sortInfo[this.bodyGrouping.by[k]] = {\n                                orderBy: \"asc\",\n                                seq: k,\n                                fixed: true\n                            };\n                            for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\n                                if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                                    this.colGroup[c].sort = \"asc\";\n                                    this.colGroup[c].sortFixed = true;\n                                }\n                            }\n                        }\n                        return sortInfo;\n                    }).call(this);\n                } else {\n                    cfg.body.grouping = false;\n                }\n            };\n            const alignGrid = function (_isFirst) {\n                // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n                if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n                    return false;\n                }\n\n                if (!this.config.height) {\n                    this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\n                }\n\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n                    CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n                    CT_INNER_WIDTH = CT_WIDTH,\n                    CT_INNER_HEIGHT = CT_HEIGHT,\n                    asidePanelWidth = cfg.asidePanelWidth = (function () {\n                        let width = 0;\n                        if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                        if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                        return width;\n                    })(),\n                    frozenPanelWidth = cfg.frozenPanelWidth = (function (colGroup, endIndex) {\n                        let width = 0;\n                        for (let i = 0, l = endIndex; i < l; i++) {\n                            width += colGroup[i]._width;\n                        }\n                        return width;\n                    })(this.colGroup, cfg.frozenColumnIndex),\n                    verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\n\n                // todo : 우측 함계컬럼 너비 계산\n                let rightPanelWidth = 0,\n                    frozenRowHeight = (function (bodyTrHeight) {\n                        return cfg.frozenRowIndex * bodyTrHeight;\n                    })(this.xvar.bodyTrHeight),\n                    footSumHeight = (function (bodyTrHeight) {\n                        return this.footSumColumns.length * bodyTrHeight;\n                    }).call(this, this.xvar.bodyTrHeight),\n                    headerHeight = (cfg.header.display) ? this.headerTable.rows.length * cfg.header.columnHeight : 0,\n                    pageHeight = (cfg.page.display) ? cfg.page.height : 0;\n\n                (function () {\n                    verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n                    horizontalScrollerHeight = (function () {\n                        let totalColGroupWidth = 0;\n                        // aside 빼고 너비\n                        // 수직 스크롤이 있으면 또 빼고 비교\n                        let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n                        for (let i = 0, l = this.colGroup.length; i < l; i++) {\n                            totalColGroupWidth += this.colGroup[i]._width;\n                        }\n                        return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n                    }).call(this);\n\n                    if (horizontalScrollerHeight > 0) {\n                        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    }\n                }).call(this);\n\n                // 수평 너비 결정\n                CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n                // 수직 스크롤러의 높이 결정.\n                CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n                bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n                let panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (hPosition) {\n                        case \"aside\":\n                            if (asidePanelWidth === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = 0;\n                                css[\"width\"] = asidePanelWidth;\n                            }\n                            break;\n                        case \"left\":\n                            if (cfg.frozenColumnIndex === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = asidePanelWidth;\n                                css[\"width\"] = frozenPanelWidth;\n                            }\n                            break;\n                        case \"right\":\n                            if (!cfg.rightSum) {\n                                isHide = true;\n                            } else {\n\n                            }\n                            break;\n                        default:\n                            if (containerType !== \"page\") {\n                                if (cfg.frozenColumnIndex === 0) {\n                                    css[\"left\"] = asidePanelWidth;\n                                } else {\n                                    css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                                }\n                                css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    if (containerType === \"body\") {\n                        switch (vPosition) {\n                            case \"top\":\n                                if (cfg.frozenRowIndex == 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = 0;\n                                    css[\"height\"] = frozenRowHeight;\n                                }\n                                break;\n                            case \"bottom\":\n                                if (!cfg.footSum) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = bodyHeight - footSumHeight;\n                                    css[\"height\"] = footSumHeight; // footSum height\n                                }\n                                break;\n                            default:\n                                css[\"top\"] = frozenRowHeight;\n                                css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                                break;\n                        }\n                    } else if (containerType === \"header\") {\n                        css[\"height\"] = headerHeight;\n                    } else if (containerType === \"page\") {\n                        if (pageHeight == 0) {\n                            isHide = true;\n                        } else {\n                            css[\"height\"] = pageHeight;\n\n                        }\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                    return this;\n                };\n                let scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (containerType) {\n                        case \"vertical\":\n                            if (scrollerWidth > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = CT_INNER_HEIGHT;\n                                css[\"bottom\"] = scrollerHeight + pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"horizontal\":\n                            if (scrollerHeight > 0) {\n                                css[\"width\"] = CT_INNER_WIDTH;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"right\"] = scrollerWidth;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"corner\":\n                            if (scrollerWidth > 0 && scrollerHeight > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                };\n\n                this.$[\"container\"][\"header\"].css({height: headerHeight});\n                this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n                // 각 패널들의 크기 표시여부를 결정합니다\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n                panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n                // 각 패널의 사이즈 결정\n                /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\n                this.xvar.bodyHeight = this.$.panel[\"body\"].height();\n                this.xvar.bodyWidth = this.$.panel[\"body\"].width();\n                // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\n\n                return true;\n            };\n            const sortColumns = function (_sortInfo) {\n                GRID.header.repaint.call(this);\n\n                if (U.isFunction(this.config.remoteSort)) {\n                    let that = {sortInfo: []};\n                    for (let k in _sortInfo) {\n                        that.sortInfo.push({\n                            key: k,\n                            orderBy: _sortInfo[k].orderBy,\n                            seq: _sortInfo[k].seq\n                        });\n                    }\n                    that.sortInfo.sort(function (a, b) {\n                        return a.seq > b.seq;\n                    });\n                    this.config.remoteSort.call(that, that);\n                } else {\n                    if (this.config.body.grouping) {\n                        this.list = GRID.data.initData.call(this,\n                            GRID.data.sort.call(this,\n                                _sortInfo,\n                                GRID.data.clearGroupingData.call(this,\n                                    this.list\n                                )\n                            )\n                        );\n                    }\n                    else {\n                        this.list = GRID.data.sort.call(this, _sortInfo,\n                            GRID.data.clearGroupingData.call(this,\n                                this.list\n                            ),\n                            {resetLineNumber: true}\n                        );\n                    }\n                    GRID.body.repaint.call(this, true);\n                    GRID.scroller.resize.call(this);\n                }\n            };\n            /// private end\n\n            /**\n            /**\n             * Preferences of grid UI\n             * @method ax5grid.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Number} [_config.frozenColumnIndex=0]\n             * @param {Number} [_config.frozenRowIndex=0]\n             * @param {Boolean} [_config.showLineNumber=false]\n             * @param {Boolean} [_config.showRowSelector=false]\n             * @param {Boolean} [_config.multipleSelect=true]\n             * @param {Number} [_config.columnMinWidth=100]\n             * @param {Number} [_config.lineNumberColumnWidth=30]\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\n             * @param {Boolean} [_config.sortable=false]\n             * @param {Boolean} [_config.multiSort=false]\n             * @param {Function} [_config.remoteSort=false]\n             * @param {Boolean} [_config.virtualScrollY=true] - 세로축 가상스크롤 처리여부\n             * @param {Boolean} [_config.virtualScrollX=true] - 가로축 가상스크롤 처리여부\n             * @param {Object} [_config.header]\n             * @param {String} [_config.header.align]\n             * @param {Number} [_config.header.columnHeight=25]\n             * @param {Number} [_config.header.columnPadding=3]\n             * @param {Number} [_config.header.columnBorderWidth=1]\n             * @param {Object} [_config.body]\n             * @param {Function} [_config.onClick]\n             * @param {Function} [_config.onDBLClick]\n             * @param {String|Array} [_config.body.mergeCells=false] -\n             * @param {String} [_config.body.align]\n             * @param {Number} [_config.body.columnHeight=25]\n             * @param {Number} [_config.body.columnPadding=3]\n             * @param {Number} [_config.body.columnBorderWidth=1]\n             * @param {Object} [_config.body.grouping]\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\n             * @param {Object} [_config.page]\n             * @param {Number} [_config.page.height=25]\n             * @param {Boolean} [_config.page.display=true] - grid page display\n             * @param {Boolean} [_config.page.statusDisplay=true] - grid status display\n             * @param {Number} [_config.page.navigationItemCount=5]\n             * @param {Object} [_config.scroller]\n             * @param {Number} [_config.scroller.size=15]\n             * @param {Number} [_config.scroller.barMinSize=15]\n             * @param {Number} [_config.scroller.trackPadding=4]\n             * @param {Object} [_config.columnKeys]\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\n             * @param {Object[]} _config.columns\n             * @param {String} _config.columns[].key\n             * @param {String} _config.columns[].label\n             * @param {Number} _config.columns[].width\n             * @param {(String|Function)} _config.columns[].styleClass\n             * @param {(String|Function)} _config.columns[].headerStyleClass\n             * @param {Boolean} _config.columns[].enableFilter\n             * @param {Boolean} _config.columns[].sortable\n             * @param {String} _config.columns[].align\n             * @param {(String|Function)} _config.columns[].formatter\n             * @param {Object} _config.columns[].editor\n             * @param {String} _config.columns[].editor.type - text,number,money,date\n             * @param {Object} _config.columns[].editor.config\n             * @param {Array} _config.columns[].editor.updateWith\n             * @param {Function} _config.columns[].editor.disabled - disable editor\n             * @param {Boolean} [_config.columns[].multiLine=false]\n             * @param {Object} [_config.tree]\n             * @param {Boolean} [_config.tree.use=false] - Whether tree-type data is used\n             * @param {Number} [_config.tree.hashDigit=8]\n             * @param {Number} [_config.tree.indentWidth=10]\n             * @param {Number} [_config.tree.arrowWidth=15]\n             * @param {Number} [_config.tree.iconWidth=18]\n             * @param {Object} [_config.tree.icons]\n             * @param {String} [_config.tree.icons.openedArrow='▾']\n             * @param {String} [_config.tree.icons.collapsedArrow='▸']\n             * @param {String} [_config.tree.icons.groupIcon='⊚']\n             * @param {String} [_config.tree.icons.collapsedGroupIcon='⊚']\n             * @param {String} [_config.tree.icons.itemIcon='⊙']\n             * @param {Object} [_config.tree.columnKeys]\n             * @param {String} [_config.tree.columnKeys.parentKey=\"pid\"]\n             * @param {String} [_config.tree.columnKeys.selfKey=\"id\"]\n             * @param {String} [_config.tree.columnKeys.collapse=\"collapse\"]\n             * @param {String} [_config.tree.columnKeys.hidden=\"hidden\"]\n             * @param {String} [_config.tree.columnKeys.parentHash=\"__hp__\"]\n             * @param {String} [_config.tree.columnKeys.selfHash=\"__hs__\"]\n             * @param {String} [_config.tree.columnKeys.children=\"__children__\"]\n             * @param {String} [_config.tree.columnKeys.depth=\"__depth__\"]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * var firstGrid = new ax5.ui.grid();\n             *\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\n             *     return (''+this.value).toUpperCase();\n             * };\n             *\n             * ax5.ui.grid.collector[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             *\n             * var sampleData = [\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\n             * ];\n             *\n             * var gridView = {\n             *     initView: function () {\n             *         firstGrid.setConfig({\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\n             *             columns: [\n             *                 {\n             *                     key: \"companyJson['대표자명']\",\n             *                     label: \"필드A\",\n             *                     width: 80,\n             *                     styleClass: function () {\n             *                         return \"ABC\";\n             *                     },\n             *                     enableFilter: true,\n             *                     align: \"center\",\n             *                     editor: {type:\"text\"}\n             *                 },\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\n             *                 {\n             *                     key: undefined, label: \"필드C\", columns: [\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\n             *                     ]\n             *                 },\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\n             *                 {key: \"customer\", label: \"고객명\"},\n             *                 {key: \"saleType\", label: \"판매타입\"}\n             *             ]\n             *         });\n             *         return this;\n             *     },\n             *     setData: function (_pageNo) {\n             *         firstGrid.setData(sampleData);\n             *         return this;\n             *     }\n             * };\n             *\n             * // onClick, onDBLClick, onDataChanged\n             * firstGrid.setConfig({\n             *      target: $('[data-ax5grid=\"first-grid\"]'),\n             *      columns: [...],\n             *      body: {\n             *          onClick: function(){\n             *              console.log(this);\n             *          },\n             *          onDBLClick: function(){\n             *              console.log(this);\n             *              // If the column does not have an editor attribute, an event is raised.\n             *          },\n             *          onDataChanged: function(){\n             *              console.log(this);\n             *              // If change Data\n             *          }\n             *      }\n             * });\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\n                    return this;\n                }\n\n                // 그리드의 이벤트 정의 구간\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.body.onDataChanged;\n                // todo event에 대한 추가 정의 필요\n\n                this.$target = jQuery(cfg.target);\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\n\n                let grid = this.config = cfg;\n\n                if (!this.config.height) {\n                    this.config._height = this.$target.height();\n                }\n\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\n                if (!this.id) {\n                    //this.id = 'ax5grid-' + ax5.getGuid();\n                    this.id = 'ax5grid-' + this.instanceId;\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\n                }\n\n\n                GRID.data.init.call(this);\n\n                if (this.config.tree.use) { // 트리라면\n                    this.sortInfo = {};\n                    this.sortInfo[this.config.tree.columnKeys.selfHash] = {orderBy: \"asc\", seq: 0, fixed: true};\n                }\n\n                ///========\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n                initGrid.call(this);\n\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n                initColumns.call(this, grid.columns);\n                resetColGroupWidth.call(this);\n\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\n\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\n\n                // 그리드의 각 요소의 크기를 맞춤니다.\n                alignGrid.call(this, true);\n\n                // columns의 데이터로 header데이터를 만들고\n                GRID.header.init.call(this);\n                // header를 출력합니다.\n                GRID.header.repaint.call(this);\n\n                // columns의 데이터로 body데이터를 만들고\n                GRID.body.init.call(this);\n                // body를 출력합니다.\n                GRID.body.repaint.call(this);\n\n                // scroller\n                GRID.scroller.init.call(this);\n                GRID.scroller.resize.call(this);\n\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\n                    alignGrid.call(self);\n                    GRID.scroller.resize.call(self);\n                    GRID.body.repaint.call(self);  // window resize시 repaint 함수 호출\n                });\n\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, (function (e) {\n                    let isPickerClick = false,\n                        target = U.findParentNode(e.target, function (_target) {\n                            if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\n                                return true;\n                            }\n                            return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\n                        });\n\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\n                        self.focused = true;\n                    } else {\n                        self.focused = false;\n                        GRID.body.blur.call(this);\n                    }\n                }).bind(this));\n\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\n                    if (self.focused) {\n                        if (self.isInlineEditing) {\n\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                self.keyDown(\"ESC\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.RETURN) {\n                                self.keyDown(\"RETURN\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.TAB) {\n                                self.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.UP) {\n                                self.keyDown(\"RETURN\", {shiftKey: true});\n                            }\n                            else if (e.which == ax5.info.eventKeys.DOWN) {\n                                self.keyDown(\"RETURN\", {});\n                            }\n\n                        }\n                        else {\n\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) { // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                                    U.stopEvent(e);\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\n                                    if (self.focused) {\n                                        GRID.body.blur.call(self);\n                                    }\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                    self.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n\n                        }\n                    }\n                });\n\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n                setTimeout((function () {\n                    if (this.onLoad) {\n                        this.onLoad.call({\n                            self: this\n                        });\n                    }\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * align grid size\n             * @method ax5grid.align\n             * @returns {ax5grid}\n             */\n            this.align = function () {\n                if (alignGrid.call(this)) {\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.keyDown\n             * @param {String} _keyName\n             * @param {Event|Object} _data\n             * @return {ax5grid}\n             */\n            this.keyDown = (function () {\n                let processor = {\n                    \"KEY_UP\": function () {\n                        GRID.body.moveFocus.call(this, \"UP\");\n                    },\n                    \"KEY_DOWN\": function () {\n                        GRID.body.moveFocus.call(this, \"DOWN\");\n                    },\n                    \"KEY_LEFT\": function () {\n                        GRID.body.moveFocus.call(this, \"LEFT\");\n                    },\n                    \"KEY_RIGHT\": function () {\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\n                    },\n                    \"KEY_HOME\": function () {\n                        GRID.body.moveFocus.call(this, \"HOME\");\n                    },\n                    \"KEY_END\": function () {\n                        GRID.body.moveFocus.call(this, \"END\");\n                    },\n                    \"INLINE_EDIT\": function (_e) {\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                            U.stopEvent(_e);\n                        }\n                    },\n                    \"ESC\": function (_e) {\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\n                    },\n                    \"RETURN\": function (_e) {\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            if(!GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey)){\n                                return false;\n                                U.stopEvent(_e);\n                            }\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                                }\n                            }\n                        }\n                        if (activeEditLength == 0) {\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                            U.stopEvent(_e);\n                        } else {\n\n                        }\n                    },\n                    \"TAB\": function (_e) {\n\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n                                }\n                            }\n                        }\n                    }\n                };\n                return function (_act, _data) {\n                    if (_act in processor) processor[_act].call(this, _data);\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.copySelect\n             * @returns {Boolean} copysuccess\n             */\n            this.copySelect = function () {\n                let copysuccess,\n                    $clipBoard = this.$[\"form\"][\"clipboard\"],\n                    copyTextArray = [], copyText = \"\",\n                    _rowIndex, _colIndex, _dindex, _di = 0;\n\n                for (let c in this.selectedColumn) {\n                    let _column = this.selectedColumn[c];\n\n                    if (_column) {\n                        if (typeof _dindex === \"undefined\") {\n                            _dindex = _column.dindex;\n                            _rowIndex = _column.rowIndex;\n                            _colIndex = _column.rowIndex;\n                        }\n\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                            _di++;\n                        }\n\n                        if (!copyTextArray[_di]) {\n                            copyTextArray[_di] = [];\n                        }\n                        let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                        if (originalColumn) {\n                            if (this.list[_column.dindex].__isGrouping) {\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                            } else {\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                            }\n                        } else {\n                            copyTextArray[_di].push(\"\");\n                        }\n\n                        _dindex = _column.dindex;\n                        _rowIndex = _column.rowIndex;\n                    }\n                }\n\n                copyTextArray.forEach(function (r) {\n                    copyText += r.join('\\t') + \"\\n\";\n                });\n\n                $clipBoard.get(0).innerText = copyText;\n                $clipBoard.select();\n\n                try {\n                    copysuccess = document.execCommand(\"copy\");\n                } catch (e) {\n                    copysuccess = false;\n                }\n                return copysuccess;\n            };\n\n            /**\n             * @method ax5grid.setData\n             * @param {Array} _data\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setData({\n             *  list: [],\n             *  page: {\n             *      currentPage: 0,\n             *      pageSize: 50,\n             *      totalElements: 500,\n             *      totalPages: 100\n             *  }\n             * });\n             *\n             * // onlyList\n             * ax5Grid.setData([]);\n             * ```\n             */\n            this.setData = function (_data) {\n                let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\");\n\n                GRID.data.set.call(this, _data);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this);\n                GRID.scroller.resize.call(this);\n                GRID.page.navigationUpdate.call(this);\n\n                if (!isFirstPaint) GRID.body.scrollTo.call(this, {top: 0});\n\n                isFirstPaint = null;\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getList\n             * @param {String} _type - selected|modified|deleted\n             * @returns {Array}\n             * @example\n             * ```js\n             * ax5Grid.getList();\n             * ax5Grid.getList(\"selected\");\n             * ax5Grid.getList(\"modified\");\n             * ax5Grid.getList(\"deleted\");\n             * ```\n             */\n            this.getList = function (_type) {\n                return GRID.data.getList.call(this, _type);\n            };\n\n            /**\n             * @method ax5grid.setHeight\n             * @param {Number} _height\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setHeight(height);\n             * ```\n             */\n            this.setHeight = function (_height) {\n                //console.log(this.$target);\n                if (_height == \"100%\") {\n                    _height = this.$target.offsetParent().innerHeight();\n                }\n                this.$target.css({height: _height});\n                this.$[\"container\"][\"root\"].css({height: _height});\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addRow\n             * @param {Object} _row\n             * @param {Number|String} [_dindex=last]\n             * @param {Object} [_options] - options of addRow\n             * @param {Boolean} [_options.sort] - sortData\n             * @param {Number|String} [_options.focus] - HOME|END|[dindex]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"END\"});\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"HOME\"});\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: 10});\n             * ```\n             */\n            this.addRow = function (_row, _dindex, _options) {\n                GRID.data.add.call(this, _row, _dindex, _options);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                if(_options && _options.focus) {\n                    //GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                    GRID.body.moveFocus.call(this, _options.focus);\n                }\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.appendToList\n             * @param _list\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.appendToList([{},{},{}]);\n             * ax5Grid.appendToList([{},{},{}]);\n             * ```\n             */\n            this.appendToList = function (_list) {\n                GRID.data.append.call(this, _list, (function () {\n                    alignGrid.call(this);\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * @method ax5grid.removeRow\n             * @param {Number|String} [_dindex=last]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.removeRow();\n             * ax5Grid.removeRow(\"first\");\n             * ax5Grid.removeRow(\"last\");\n             * ax5Grid.removeRow(1);\n             * ```\n             */\n            this.removeRow = function (_dindex) {\n                GRID.data.remove.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateRow\n             * @param {Object} _row\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.updateRow({price: 100, amount: 100, cost: 10000}, 1);\n             * ```\n             */\n            this.updateRow = function (_row, _dindex) {\n                GRID.data.update.call(this, _row, _dindex);\n                // todo : mergeCells 옵션에 따라 예외처리\n\n                GRID.body.repaintRow.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateChildRows\n             * @param {Number} _dindex\n             * @param {Object} _updateData\n             * @param {Object} [_options]\n             * @param {Function} [_options.filter]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * onDataChanged: function () {\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked});\n             * }\n             *\n             * onDataChanged: function () {\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked}, {filter: function(){\n             *          return this.item.type == \"A\";\n             *      });\n             * }\n             * ```\n             */\n            this.updateChildRows = function (_dindex, _updateData, _options) {\n                GRID.data.updateChild.call(this, _dindex, _updateData, _options);\n                this.xvar.paintStartRowIndex = undefined;\n                this.xvar.paintStartColumnIndex = undefined;\n                GRID.body.repaint.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.deleteRow\n             * @param {Number|String} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.deleteRow(\"first\");\n             * ax5Grid.deleteRow(\"last\");\n             * ax5Grid.deleteRow(1);\n             * ax5Grid.deleteRow(\"selected\");\n             * ```\n             */\n            this.deleteRow = function (_dindex) {\n                GRID.data.deleteRow.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                // 삭제시엔 포커스 ?\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setValue\n             * @param _dindex\n             * @param _key\n             * @param _value\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setValue(0, \"price\", 100);\n             * ```\n             */\n            this.setValue = function (_dindex, _key, _value) {\n                // getPanelname;\n                if (GRID.data.setValue.call(this, _dindex, undefined, _key, _value)) {\n                    let repaintCell = function (_panelName, _rows, __dindex, __key, __value) {\n                        for (let r = 0, rl = _rows.length; r < rl; r++) {\n                            for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n                                if (_rows[r].cols[c].key == __key) {\n                                    if (this.xvar.frozenRowIndex > __dindex) {\n                                        GRID.body.repaintCell.call(this, \"top-\" + _panelName, __dindex, r, c, __value);\n                                    } else {\n                                        GRID.body.repaintCell.call(this, _panelName + \"-scroll\", __dindex, r, c, __value);\n                                    }\n                                }\n                            }\n                        }\n                    };\n\n                    repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, _key, _value);\n                    repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, _key, _value);\n\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addColumn\n             * @param {Object} _column\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.addColumn = (function () {\n                let processor = {\n                    \"first\": function (_column) {\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\n                    },\n                    \"last\": function (_column) {\n                        this.config.columns = this.config.columns.concat([].concat(_column));\n                    }\n                };\n\n                return function (_column, _cindex) {\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _column);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        if (U.isArray(_column)) {\n                            for (let _i = 0, _l = _column.length; _i < _l; _i++) {\n                                this.config.columns.splice(_cindex + _i, 0, _column[_i]);\n                            }\n                        } else {\n                            this.config.columns.splice(_cindex, 0, _column);\n                        }\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.removeColumn\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.removeColumn = (function () {\n                let processor = {\n                    \"first\": function (_cindex) {\n                        this.config.columns.splice(_cindex, 1);\n                    },\n                    \"last\": function () {\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\n                    }\n                };\n                return function (_cindex) {\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _cindex);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        //\n                        this.config.columns.splice(_cindex, 1);\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.updateColumn\n             * @param {Object} _column\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.updateColumn = function (_column, _cindex) {\n                if (!U.isNumber(_cindex)) {\n                    throw 'invalid argument _cindex';\n                }\n                //\n                this.config.columns.splice(_cindex, 1, _column);\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setColumnWidth\n             * @param {Number} _width\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.setColumnWidth = function (_width, _cindex) {\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n                this.needToPaintSum = true;\n\n                // 컬럼너비 변경사항 적용.\n                GRID.header.repaint.call(this);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n\n                alignGrid.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getColumnSortInfo\n             * @returns {Object} sortInfo\n             */\n            this.getColumnSortInfo = function () {\n                let that = {sortInfo: []};\n                for (let k in this.sortInfo) {\n                    that.sortInfo.push({\n                        key: k,\n                        orderBy: this.sortInfo[k].orderBy,\n                        seq: this.sortInfo[k].seq\n                    });\n                }\n                that.sortInfo.sort(function (a, b) {\n                    return a.seq > b.seq;\n                });\n                return that.sortInfo;\n            };\n\n            /**\n             * @method ax5grid.setColumnSort\n             * @param {Object} _sortInfo\n             * @param {Object} _sortInfo.key\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n             * ```\n             */\n            this.setColumnSort = function (_sortInfo) {\n                if (typeof _sortInfo !== \"undefined\") {\n                    this.sortInfo = _sortInfo;\n                    GRID.header.applySortStatus.call(this, _sortInfo);\n                }\n\n                sortColumns.call(this, _sortInfo || this.sortInfo);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.select\n             * @param {Number|Object} _selectObject\n             * @param {Number} _selectObject.index - index of row\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\n             * @param {Number} _selectObject.conIndex - colIndex of columns\n             * @param {Object} _options\n             * @param {Boolean} _options.selectedClear\n             * @param {Boolean} _options.selected\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.select(0);\n             * firstGrid.select(0, {selected: true});\n             * firstGrid.select(0, {selected: false});\n             * firstGrid.select(0, {selectedClear: true});\n             * ```\n             */\n            this.select = function (_selectObject, _options) {\n                if (U.isNumber(_selectObject)) {\n                    let dindex = _selectObject;\n\n                    if (!this.config.multipleSelect) {\n                        this.clearSelect();\n                    } else {\n                        if (_options && _options.selectedClear) {\n                            this.clearSelect();\n                        }\n                    }\n\n                    GRID.data.select.call(this, dindex, undefined, _options && _options.selected);\n                    GRID.body.updateRowState.call(this, [\"selected\"], dindex, undefined);\n                }\n                return this;\n            };\n\n            /**\n             * @method firstGrid.clickBody\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.clickBody = function (_dindex) {\n                GRID.body.click.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method firstGrid.DBLClickBody\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.DBLClickBody = function (_dindex) {\n                GRID.body.dblClick.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.clearSelect\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.clearSelect();\n             * ```\n             */\n            this.clearSelect = function () {\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\n                GRID.data.clearSelect.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.selectAll\n             * @param {Object} _options\n             * @param {Boolean} _options.selected\n             * @param {Function} _options.filter\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.selectAll();\n             * firstGrid.selectAll({selected: true});\n             * firstGrid.selectAll({selected: false});\n             * firstGrid.selectAll({filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * firstGrid.selectAll({selected: true, filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * ```\n             */\n            this.selectAll = function (_options) {\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.exportExcel\n             * @param {String} _fileName\n             * @returns {ax5grid|String}\n             * @example\n             * ```js\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\n             * console.log(firstGrid.exportExcel());\n             * ```\n             */\n            this.exportExcel = function (_fileName) {\n                let table = [];\n                table.push('<table border=\"1\">');\n                table.push(GRID.header.getExcelString.call(this));\n                table.push(GRID.body.getExcelString.call(this));\n                table.push('</table>');\n\n                if (typeof _fileName === \"undefined\") {\n                    return table.join('');\n                }\n                else {\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.focus\n             * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.focus(\"UP\");\n             * firstGrid.focus(\"DOWN\");\n             * firstGrid.focus(\"HOME\");\n             * firstGrid.focus(\"END\");\n             * ```\n             */\n            this.focus = function (_pos) {\n\n                if (GRID.body.moveFocus.call(this, _pos)) {\n                    let focusedColumn;\n                    for (let c in this.focusedColumn) {\n                        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                        break;\n                    }\n                    if (focusedColumn) {\n                        this.select(focusedColumn.dindex, {selectedClear: true});\n                    }\n                }\n                else {\n                    if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n                        this.select(0);\n                    } else {\n                        let selectedIndex = this.selectedDataIndexs[0];\n                        \n                        let processor = {\n                            \"UP\": function () {\n                                if (selectedIndex > 0) {\n                                    this.select(selectedIndex - 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex - 1);\n                                }\n                            },\n                            \"DOWN\": function () {\n                                if (selectedIndex < this.list.length - 1) {\n                                    this.select(selectedIndex + 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex + 1);\n                                }\n                            },\n                            \"HOME\": function () {\n                                this.select(0, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, 0);\n                            },\n                            \"END\": function () {\n                                this.select(this.list.length - 1, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, this.list.length - 1);\n                            }\n                        };\n\n                        if (_pos in processor) {\n                            processor[_pos].call(this);\n                        }\n                    }\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.destroy\n             * @returns {null}\n             */\n            this.destroy = function () {\n                const instanceId = this.instanceId;\n                this.$target.empty();\n                this.list = [];\n                UI.grid_instance = ax5.util.filter(UI.grid_instance, function () {\n                    return this.instanceId != instanceId;\n                });\n                return null;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.grid_instance = UI.grid_instance || [];\n                UI.grid_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n    })());\n\n    GRID = ax5.ui.grid;\n})();\n\n// todo : filter\n// todo : column reorder\n// todo : editor 필수값 속성 지정","// ax5.ui.grid.body\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const columnSelect = {\n        focusClear: function () {\n            let self = this, _column;\n            for (let c in self.focusedColumn) {\n                _column = self.focusedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-focused');\n                }\n            }\n            self.focusedColumn = {};\n        },\n        clear: function () {\n            let self = this, _column;\n            for (let c in self.selectedColumn) {\n                _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-selected');\n                }\n            }\n            self.selectedColumn = {};\n        },\n        init: function (column) {\n            let self = this;\n            if (this.isInlineEditing) {\n                for (let editKey in this.inlineEditing) {\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                        return this;\n                    }\n                }\n            }\n\n            // focus\n            columnSelect.focusClear.call(self);\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n                panelName: column.panelName,\n                dindex: column.dindex,\n                doindex: column.doindex,\n                rowIndex: column.rowIndex,\n                colIndex: column.colIndex,\n                colspan: column.colspan\n            };\n\n            // select\n            columnSelect.clear.call(self);\n            self.xvar.selectedRange = {\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n                end: null\n            };\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n                if (data) {\n                    return false;\n                } else {\n                    return {\n                        panelName: column.panelName,\n                        dindex: column.dindex,\n                        doindex: column.doindex,\n                        rowIndex: column.rowIndex,\n                        colIndex: column.colIndex,\n                        colspan: column.colspan\n                    }\n                }\n            })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n            this.$.panel[column.panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]')\n                .attr('data-ax5grid-column-focused', \"true\")\n                .attr('data-ax5grid-column-selected', \"true\");\n\n            if (this.isInlineEditing) {\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\n            }\n        },\n        update: function (column) {\n            const self = this;\n            let dindex, doindex, colIndex, rowIndex, trl;\n\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n            columnSelect.clear.call(self);\n\n            let range = {\n                r: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n                },\n                c: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n                }\n            };\n\n            dindex = range.r.s;\n            for (; dindex <= range.r.e; dindex++) {\n\n\n                trl = this.bodyRowTable.rows.length;\n                rowIndex = 0;\n                for (; rowIndex < trl; rowIndex++) {\n                    colIndex = range.c.s;\n                    for (; colIndex <= range.c.e; colIndex++) {\n                        var _panels = [],\n                            panelName = \"\";\n\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        panelName = _panels.join(\"-\");\n\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                            panelName: panelName,\n                            dindex: dindex,\n                            rowIndex: rowIndex,\n                            colIndex: colIndex,\n                            colspan: column.colspan\n                        };\n\n                        _panels = null;\n                        panelName = null;\n                    }\n                }\n            }\n            dindex = null;\n            doindex = null;\n            colIndex = null;\n            rowIndex = null;\n\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .attr('data-ax5grid-column-selected', 'true');\n                }\n            }\n\n        }\n    };\n\n    const columnSelector = {\n        \"on\": function (cell) {\n            let self = this;\n\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n                return;\n            }\n\n            columnSelect.init.call(self, cell);\n\n            this.$[\"container\"][\"body\"]\n                .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                    if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                        columnSelect.update.call(self, {\n                            panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                            dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                            doindex: Number(this.getAttribute(\"data-ax5grid-data-o-index\")),\n                            rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                            colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                            colspan: Number(this.getAttribute(\"colspan\"))\n                        });\n                        U.stopEvent(e);\n                    }\n                })\n                .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                })\n                .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            this.$[\"container\"][\"body\"]\n                .off(\"mousemove.ax5grid-\" + this.instanceId)\n                .off(\"mouseup.ax5grid-\" + this.instanceId)\n                .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const updateRowState = function (_states, _dindex, _doindex, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex, _doindex) {\n                    if (this.list[_doindex]) {\n                        let i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", this.list[_doindex][cfg.columnKeys.selected]);\n                        }\n                    }\n                },\n                \"selectedClear\": function () {\n                    let si = this.selectedDataIndexs.length;\n                    while (si--) {\n                        let dindex = this.selectedDataIndexs[si];\n                        let i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", false);\n\n                            if (this.proxyList) {\n                                this.proxyList[dindex][cfg.columnKeys.selected] = false;\n                                this.list[this.proxyList[dindex].__origin_index__][cfg.columnKeys.selected] = false;\n                            } else {\n                                this.list[dindex][cfg.columnKeys.selected] = false;\n                            }\n\n                        }\n                    }\n                },\n                \"cellChecked\": function (_dindex, _doindex, _data) {\n                    let key = _data.key,\n                        rowIndex = _data.rowIndex,\n                        colIndex = _data.colIndex;\n\n                    let panelName = (function () {\n                        let _panels = [];\n                        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                        if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        return _panels.join(\"-\");\n                    }).call(this);\n\n                    this.$.panel[panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                        .find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]')\n                        .find('[data-ax5grid-editor=\"checkbox\"]')\n                        .attr(\"data-ax5grid-checked\", '' + _data.checked);\n                }\n            };\n\n        if(typeof _doindex === \"undefined\") _doindex = _dindex;\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _dindex, _doindex, _data);\n        });\n    };\n\n    const updateRowStateAll = function (_states, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex) {\n                    GRID.body.repaint.call(this, true);\n                }\n            };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _data);\n        });\n    };\n\n    const init = function () {\n        let self = this;\n\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, doindex, rowIndex, colIndex, disableSelection,\n                targetClick = {\n                    \"default\": function (_column) {\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.doindex],\n                                dindex: _column.dindex,\n                                doindex: _column.doindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n\n                        if (column.editor && column.editor.type == \"checkbox\") { // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\n                            let value = GRID.data.getValue.call(self, _column.dindex, _column.doindex, column.key),\n                                checked, newValue;\n\n                            if (column.editor.config && column.editor.config.trueValue) {\n                                if (checked = !(value == column.editor.config.trueValue)) {\n                                    newValue = column.editor.config.trueValue;\n                                } else {\n                                    newValue = column.editor.config.falseValue;\n                                }\n                            } else {\n                                newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                            }\n\n                            GRID.data.setValue.call(self, _column.dindex, _column.doindex, column.key, newValue);\n\n                            updateRowState.call(self, [\"cellChecked\"], _column.dindex, _column.doindex, {\n                                key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                editorConfig: column.editor.config, checked: checked\n                            });\n                        } else {\n                            if (self.config.body.onClick) {\n                                self.config.body.onClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n                        let item = self.list[_column.doindex];\n                        if (item[self.config.columnKeys.disableSelection]) {\n                            return false;\n                        }\n\n                        if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.doindex) {\n                            updateRowState.call(self, [\"selectedClear\"]);\n                            GRID.data.clearSelect.call(self);\n                        }\n\n                        GRID.data.select.call(self, _column.dindex, _column.doindex, undefined, {\n                            internalCall: true\n                        });\n                        updateRowState.call(self, [\"selected\"], _column.dindex, _column.doindex);\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    },\n                    \"tree-control\": function (_column, _el) {\n                        //console.log(_column);\n                        toggleCollapse.call(self, _column.dindex, _column.doindex);\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n            doindex = Number(this.getAttribute(\"data-ax5grid-data-o-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    doindex: doindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                }, this);\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, doindex, rowIndex, colIndex,\n                targetDBLClick = {\n                    \"default\": function (_column) {\n                        if (self.isInlineEditing) {\n                            for (let columnKey in self.inlineEditing) {\n                                if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                    return this;\n                                }\n                            }\n                        }\n\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                        if (column) {\n                            if (!self.list[dindex].__isGrouping) {\n                                value = GRID.data.getValue.call(self, dindex, doindex, column.key);\n                            }\n                        }\n\n                        let editor = self.colGroup[_column.colIndex].editor;\n                        if (U.isObject(editor)) {\n                            GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\n                        } else {\n                            // 더블클릭 실행\n                            if (self.config.body.onDBLClick) {\n                                let that = {\n                                    self: self,\n                                    page: self.page,\n                                    list: self.list,\n                                    item: self.list[_column.dindex],\n                                    dindex: _column.dindex,\n                                    doindex: _column.doindex,\n                                    rowIndex: _column.rowIndex,\n                                    colIndex: _column.colIndex,\n                                    column: column,\n                                    value: self.list[_column.dindex][column.key]\n                                };\n                                self.config.body.onDBLClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n            doindex = Number(this.getAttribute(\"data-ax5grid-data-o-index\"));\n\n            if (attr in targetDBLClick) {\n                targetDBLClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    doindex: doindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n\n        if (this.config.contextMenu) {\n            this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n                let target, dindex, doindex, rowIndex, colIndex, item, column, param = {};\n\n                target = U.findParentNode(e.target, function (t) {\n                    if (t.getAttribute(\"data-ax5grid-column-attr\")) {\n                        return true;\n                    }\n                });\n\n                if (target) {\n                    // item 찾기\n                    rowIndex = Number(target.getAttribute(\"data-ax5grid-column-rowIndex\"));\n                    colIndex = Number(target.getAttribute(\"data-ax5grid-column-colIndex\"));\n                    dindex = Number(target.getAttribute(\"data-ax5grid-data-index\"));\n                    doindex = Number(target.getAttribute(\"data-ax5grid-data-o-index\"));\n                    column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n                    item = self.list[dindex];\n                }\n\n                if (!self.contextMenu) {\n                    self.contextMenu = new ax5.ui.menu();\n                }\n\n                self.contextMenu.setConfig(self.config.contextMenu);\n\n                param = {\n                    element: target,\n                    dindex: dindex,\n                    doindex: doindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex,\n                    item: item,\n                    column: column,\n                    gridSelf: self\n                };\n\n                self.contextMenu.popup(e, {\n                    filter: function () {\n                        return self.config.contextMenu.popupFilter.call(this, this, param);\n                    },\n                    param: param\n                });\n\n                U.stopEvent(e.originalEvent);\n                target = null;\n                dindex = null;\n                doindex = null;\n                rowIndex = null;\n                colIndex = null;\n                item = null;\n                column = null;\n                param = null;\n            });\n        }\n\n        this.$[\"container\"][\"body\"]\n            .on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                if (self.xvar.touchmoved) return false;\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                    columnSelector.on.call(self, {\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                        doindex: Number(this.getAttribute(\"data-ax5grid-data-o-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                }\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n\n        // 그리드 바디에 출력할 여유 카운트\n        this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n        this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n    };\n\n    const resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n        this.asideBodyRowData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyRowTable);\n        \n        //console.log(dividedBodyRowObj);\n        \n        this.leftBodyRowData = dividedBodyRowObj.leftData;\n        this.bodyRowData = dividedBodyRowObj.rightData;\n\n        if (cfg.body.grouping) {\n            let dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n            this.asideBodyGroupingData = (function (dataTable) {\n                let data = {rows: []};\n                for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                    data.rows[i] = {cols: []};\n                    if (i === 0) {\n                        let col = {\n                            label: \"\",\n                            colspan: 1,\n                            rowspan: dataTable.rows.length,\n                            colIndex: null\n                        }, _col = {};\n\n                        if (cfg.showLineNumber) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.lineNumberColumnWidth,\n                                _width: cfg.lineNumberColumnWidth,\n                                columnAttr: \"lineNumber\",\n                                label: \"&nbsp;\", key: \"__d-index__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                        if (cfg.showRowSelector) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.rowSelectorColumnWidth,\n                                _width: cfg.rowSelectorColumnWidth,\n                                columnAttr: \"rowSelector\",\n                                label: \"\", key: \"__d-checkbox__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                    }\n                }\n\n                return data;\n            }).call(this, this.bodyGroupingTable);\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n            this.bodyGroupingMap = GRID.util.makeBodyRowMap.call(this, this.bodyGroupingTable);\n        }\n\n        this.leftFootSumData = {};\n        this.footSumData = {};\n        if (this.config.footSum) {\n            let dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n            this.leftFootSumData = dividedFootSumObj.leftData;\n            this.footSumData = dividedFootSumObj.rightData;\n        }\n    };\n\n    const getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n        let _key = _col.key, tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__d-index__\") {\n            return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n        }\n        else {\n            if (_col.editor && (function (_editor) {\n                    if (_editor.type in GRID.inlineEditor) {\n                        return (GRID.inlineEditor[_editor.type].editMode == \"inline\");\n                    }\n                    return false;\n                })(_col.editor)) { // editor가 inline타입이라면\n\n                _value = _value || GRID.data.getValue.call(this, _index, _item.__origin_index__, _key);\n\n                if (U.isFunction(_col.editor.disabled)) {\n                    if (_col.editor.disabled.call({\n                            list: _list,\n                            dindex: _index,\n                            item: _list[_index],\n                            key: _key,\n                            value: _value\n                        })) {\n                        return _value;\n                    }\n                }\n\n                // print editor\n                return _returnPlainText ? _value : GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\n            }\n\n            const valueProcessor = {\n                \"formatter\": function () {\n                    let that = {\n                        key: _key,\n                        value: _value || GRID.data.getValue.call(this, _index, _item.__origin_index__, _key),\n                        dindex: _index,\n                        item: _item,\n                        list: _list\n                    };\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                },\n                \"default\": function () {\n                    let returnValue = \"\";\n\n                    if (typeof _value !== \"undefined\") {\n                        returnValue = _value;\n                    } else {\n                        if (/[\\.\\[\\]]/.test(_key)) {\n                            _value = GRID.data.getValue.call(this, _index, _item.__origin_index__, _key);\n                        }else{\n                            _value = _item[_key];\n                        }\n\n                        if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                    }\n\n                    // 키값이 Boolean일때 오류 발생하여 수정.\n                    return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                            return tagsToReplace[tag] || tag;\n                        });\n                },\n                \"treeControl\": function (__value) {\n                    let cfg = this.config,\n                        keys = this.config.tree.columnKeys,\n                        indentNodeHtml = '';\n\n                    if (_item[keys.children].length) {\n                        indentNodeHtml += '<a ' +\n                            'data-ax5grid-data-index=\"' + _index + '\" ' +\n                            'data-ax5grid-column-attr=\"tree-control\" ' +\n                            'data-ax5grid-tnode-arrow=\"\" ' +\n                            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                            '>';\n                        indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n                        indentNodeHtml += '</a>';\n                    } else {\n                        indentNodeHtml += '<span ' +\n                            'data-ax5grid-tnode-arrow=\"\" ' +\n                            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                            '>&nbsp;</span>';\n                    }\n\n                    indentNodeHtml += '<span ' +\n                        'data-ax5grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n                        'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n                        '>';\n                    indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n                    indentNodeHtml += '</span>';\n\n                    return indentNodeHtml + __value;\n                }\n            };\n\n            let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n            if (this.config.tree.use && _col.treeControl) {\n                returnValue = valueProcessor.treeControl.call(this, returnValue);\n            }\n\n            return returnValue;\n        }\n\n    };\n\n    const getGroupingValue = function (_item, _index, _col) {\n        let value, that, _key = _col.key, _label = _col.label;\n\n        if (typeof _key === \"undefined\") {\n            that = {\n                key: _key,\n                list: _item.__groupingList,\n                groupBy: _item.__groupingBy\n            };\n            if (U.isFunction(_label)) {\n                value = _label.call(that);\n            } else {\n                value = _label;\n            }\n            _item[_col.colIndex] = value;\n            return value;\n        }\n        else if (_key === \"__d-index__\") {\n            return '';\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return '';\n        }\n        else {\n            if (_col.collector) {\n                that = {\n                    key: _key,\n                    list: _item.__groupingList\n                };\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n                _item[_col.colIndex] = value;\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    const getSumFieldValue = function (_list, _col) {\n        let _key = _col.key, _label = _col.label;\n        //, _collector, _formatter\n        if (typeof _key === \"undefined\") {\n            return _label;\n        }\n        else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n            return '&nbsp;';\n        }\n        else {\n            if (_col.collector) {\n                let that = {\n                        key: _key,\n                        list: _list\n                    },\n                    value;\n\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    const repaint = function (_reset) {\n        // debugger;\n        let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n        /// repaint reset 타입이면 고정컬럼을 재조정\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n            this.xvar.paintStartRowIndex = undefined;\n            this.xvar.paintStartColumnIndex = undefined;\n        }\n\n        /// 출력시작 인덱스\n        let paintStartRowIndex, virtualPaintStartRowIndex;\n\n        if (this.config.virtualScrollY) {\n            virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n            if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n                paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n            }\n        }\n        else {\n            paintStartRowIndex = this.xvar.frozenRowIndex;\n        }\n\n        if (isNaN(paintStartRowIndex)) return this;\n\n        let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n        let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n        if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n            for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n                // bodyScrollLeft\n                this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n                this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n                if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                    paintStartColumnIndex = ci;\n                }\n                if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n                    paintEndColumnIndex = ci;\n\n                    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n                }\n            }\n\n            if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n            if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n            this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n            this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n            this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        }\n\n        let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n            headerColGroup = this.headerColGroup,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount, virtualPaintRowCount;\n\n        if (!this.config.virtualScrollY) {\n            virtualPaintRowCount = paintRowCount = list.length;\n        } else {\n            virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n            paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n        }\n\n        // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n            paintStartRowIndex = this.xvar.paintStartRowIndex;\n        }\n\n        if (\n            this.xvar.dataRowCount === list.length\n            && this.xvar.paintStartRowIndex === paintStartRowIndex\n            && this.xvar.paintRowCount === paintRowCount\n            && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n            && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n        ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n        // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n        if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n            bodyRowData = GRID.util.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n            if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n                this.needToPaintSum = true;\n            }\n        }\n\n        /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n        /// 사용된 패널들의 키 모음\n        this.$.livePanelKeys = [];\n\n        // 그리드 바디 영역 페인트 함수\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _groupRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n            \n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [],\n                cgi, cgl, di, dl, tri, trl, ci, cl, col,\n                cellHeight,\n                colAlign,\n                isScrolled = (function () {\n                    // 스크롤값이 변경되거나 처음 호출되었습니까?\n                    if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                        _scrollConfig = {\n                            paintStartRowIndex: 0,\n                            paintRowCount: _list.length\n                        };\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })(),\n                stripeString = '#fff 0px, #fff ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight - cfg.body.columnBorderWidth) + 'px, #eee ' + (cfg.body.columnHeight) + 'px';\n\n            if (isScrolled) {\n                SS.push('<div style=\"background:repeating-linear-gradient(to top, ' + stripeString + ');' +\n                    'font-size:0;' +\n                    'line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n            \n            di = _scrollConfig.paintStartRowIndex;\n\n            for (dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n\n                if (_list[di]) {\n                    let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n                    if (_groupRow && \"__isGrouping\" in _list[di]) {\n                        rowTable = _groupRow;\n                        isGroupingRow = true;\n                    } else {\n                        rowTable = _bodyRow;\n                    }\n\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                        SS.push('<tr class=\"tr-' + (di % 4) + '\"',\n                            (isGroupingRow) ? ' data-ax5grid-grouping-tr=\"true\"' : '',\n                            ' data-ax5grid-tr-data-index=\"' + di + '\"',\n                            ' data-ax5grid-tr-data-o-index=\"' + odi + '\"',\n                            ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                            ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                            '>');\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-data-o-index=\"' + odi + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                            })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-data-o-index=\"' + odi + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                        SS.push('</tr>');\n                    }\n                }\n            }\n            SS.push('</table>');\n\n            if (isScrolled && _list.length) {\n                SS.push('<div style=\"background:repeating-linear-gradient(to bottom, ' + stripeString + ');' +\n                    'font-size:0;' +\n                    'line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n\n            _elTarget.empty();\n            SS = SS.join('');\n\n            _elTarget.get(0).innerHTML = SS;\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty();\n            SS = SS.join('');\n\n            _elTarget.get(0).innerHTML = SS;\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let tblRowMaps = [];\n            let _elTarget = this.$.panel[_elTargetKey];\n            let token = {}, hasMergeTd;\n\n            // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n            let tableTrs = _elTarget.find(\"tr\");\n            for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n                let tableTrTds, trMaps;\n                    tableTrTds = tableTrs[ri].childNodes;\n                    trMaps = [];\n\n                for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                    let tdObj = {\n                        \"$\": jQuery(tableTrTds[ci])\n                    };\n\n                    if (tdObj[\"$\"].attr(\"data-ax5grid-column-col\") != \"null\") {\n                        tdObj.dindex = tdObj[\"$\"].attr(\"data-ax5grid-data-index\");\n                        tdObj.tri = tdObj[\"$\"].attr(\"data-ax5grid-column-row\");\n                        tdObj.ci = tdObj[\"$\"].attr(\"data-ax5grid-column-col\");\n                        tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-rowIndex\");\n                        tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-colIndex\");\n                        tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                        tdObj.text = tdObj[\"$\"].text();\n                        trMaps.push(tdObj);\n                    }\n\n                    tdObj = null;\n                }\n                tblRowMaps.push(trMaps);\n            }\n\n            // 두줄이상 일 때 의미가 있으니.\n            if (tblRowMaps.length > 1) {\n                hasMergeTd = false;\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    let prevTokenColIndexs = [];\n\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n\n                        if (!_colGroup[ci].editor && (() => {\n                                if (U.isArray(cfg.body.mergeCells)) {\n                                    return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                                } else {\n                                    return true;\n                                }\n                            })()) {\n\n                            // 앞줄과 값이 같다면.\n                            if (token[ci] && (() => {\n                                    if (prevTokenColIndexs.length > 0) {\n                                        let hasFalse = true;\n                                        prevTokenColIndexs.forEach(function (ti) {\n                                            if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                                hasFalse = false;\n                                            }\n                                        });\n                                        return hasFalse;\n                                    } else {\n                                        return true;\n                                    }\n                                })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                                tblRowMaps[ri][ci].rowspan = 0;\n                                tblRowMaps[token[ci].ri][ci].rowspan++;\n                                hasMergeTd = true;\n                            } else {\n                                token[ci] = {\n                                    ri: ri,\n                                    ci: ci,\n                                    text: tblRowMaps[ri][ci].text\n                                };\n                            }\n\n                            prevTokenColIndexs.push(ci);\n                        }\n                    }\n                }\n\n                // rowspan을 다 구했으면 적용합니다.\n                if (hasMergeTd) {\n                    for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                            if (tblRowMaps[ri][ci].rowspan == 0) {\n                                tblRowMaps[ri][ci][\"$\"].remove();\n                            } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                                tblRowMaps[ri][ci][\"$\"]\n                                    .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                    .addClass(\"merged\");\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        let scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            paintStartColumnIndex: paintStartColumnIndex,\n            paintEndColumnIndex: paintEndColumnIndex,\n            nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n            nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n            bodyTrHeight: this.xvar.bodyTrHeight,\n            virtualScrollX: this.config.virtualScrollX,\n            virtualScrollY: this.config.virtualScrollY,\n        };\n        let frozenScrollConfig = jQuery.extend({}, scrollConfig, {\n            paintStartRowIndex: 0,\n            paintRowCount: this.xvar.frozenRowIndex\n        });\n\n        // aside\n        if (cfg.asidePanelWidth > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n            }\n\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum) {\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\n                repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n            }\n        }\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n            }\n\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), frozenScrollConfig);\n        }\n        repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n        // 바닥 요약\n        if (cfg.footSum && this.needToPaintSum) {\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        /// mergeCells\n        if (cfg.body.mergeCells && this.list.length) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                    // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                    mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n        }\n\n        this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\n        this.xvar.paintRowCount = paintRowCount;\n        this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n        this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n        this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n        this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n        this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n        this.xvar.dataRowCount = list.length;\n        this.needToPaintSum = false;\n\n        GRID.page.statusUpdate.call(this);\n    };\n\n    const repaintCell = function (_panelName, _dindex, _doindex, _rowIndex, _colIndex, _newValue) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n\n        let updateCell = this.$[\"panel\"][_panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]')\n                .find('[data-ax5grid-cellholder]'),\n            colGroup = this.colGroup,\n            col = colGroup[_colIndex];\n\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n        if (col.editor && col.editor.updateWith) {\n            col.editor.updateWith.forEach(function (updateColumnKey) {\n                colGroup.forEach(function (col) {\n                    if (col.key == updateColumnKey) {\n                        let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                            panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                            updateWithCell = self.$[\"panel\"][panelName]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                                .find('[data-ax5grid-cellholder]');\n\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                    }\n                });\n            });\n        }\n\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            headerColGroup = this.headerColGroup,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n        }\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl,\n                col, cellHeight, colAlign;\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                        paintStartRowIndex: 0,\n                        paintRowCount: this.xvar.frozenRowIndex,\n                        bodyTrHeight: this.xvar.bodyTrHeight\n                    });\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    const repaintRow = function (_dindex) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                _scrollConfig = {\n                    paintStartRowIndex: 0,\n                    paintRowCount: _list.length\n                };\n            }\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n        let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow,\n                odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-data-index=\"' + di + '\" ',\n                        'data-ax5grid-data-o-index=\"' + odi + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            let attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                    })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-data-index=\"' + di + '\" ',\n                    'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n            }\n\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        };\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n            } else {\n                replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n        }\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > _dindex) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                else {\n                    replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n                }\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            else {\n                replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    const scrollTo = function (css, opts) {\n        let self = this;\n        if (typeof opts === \"undefined\") opts = {};\n        if (this.isInlineEditing) {\n            for (var key in this.inlineEditing) {\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\n            }\n        }\n\n        if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n            this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n            this.$.panel[\"left-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n            this.$.panel[\"top-body-scroll\"].css({left: css.left});\n        }\n\n        this.$.panel[\"body-scroll\"].css(css);\n\n        if (this.config.footSum && \"left\" in css) {\n            this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n        }\n\n        if (this.config.virtualScrollAccelerated) {\n\n            if (this.xvar.bodyScrollToTimer) clearTimeout(this.xvar.bodyScrollToTimer);\n            this.xvar.bodyScrollToTimer = setTimeout(function () {\n\n                if (self.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n                    repaint.call(self);\n                } else if (self.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n                    repaint.call(self);\n                }\n                if (opts.callback) {\n                    opts.callback();\n                }\n\n            }, this.config.virtualScrollAcceleratedDelayTime);\n\n        } else {\n\n            if (self.config.virtualScrollY && !opts.noRepaint && \"top\" in css) {\n                repaint.call(self);\n            } else if (self.config.virtualScrollX && !opts.noRepaint && \"left\" in css) {\n                repaint.call(self);\n            }\n            if (opts.callback) {\n                opts.callback();\n            }\n\n        }\n\n\n    };\n\n    const blur = function () {\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this);\n        }\n    };\n\n    const moveFocus = function (_position) {\n        let focus = {\n            \"UD\": function (_dy) {\n                let moveResult = true,\n                    focusedColumn, originalColumn, while_i,\n                    nPanelInfo;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dy > 0) {\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = 0;\n                        if (focusedColumn.dindex > this.list.length - 1) {\n                            focusedColumn.dindex = this.list.length - 1;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n                else {\n                    if (focusedColumn.rowIndex + _dy < 0) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                        if (focusedColumn.dindex < 0) {\n                            focusedColumn.dindex = 0;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        if (_dy > 0) {\n                            focusedColumn.dindex++;\n                        } else {\n                            focusedColumn.dindex--;\n                        }\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n                            let newTop = (focusedColumn.dindex - this.xvar.frozenRowIndex - 1) * this.xvar.bodyTrHeight;\n                            if (newTop < 0) newTop = 0;\n                            scrollTo.call(this, {top: -newTop});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 1) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            },\n            \"LR\": function (_dx) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dx < 0) {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex < 0) {\n                        focusedColumn.colIndex = 0;\n                        moveResult = false;\n                    }\n                }\n                else {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                        focusedColumn.colIndex = this.colGroup.length - 1;\n                        moveResult = false;\n                    }\n                }\n\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.rowIndex = 0;\n                }\n\n                if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                    if (_dx < 0) {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (_dx < 0) {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        focusedColumn.dindex--;\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리\n                let isScrollTo = (function () {\n                    if (!this.config.virtualScrollX) return false;\n                    let scrollLeft = 0;\n                    if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                        if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                            scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                            scrollTo.call(this, {left: scrollLeft});\n                            GRID.header.scrollTo.call(this, {left: scrollLeft});\n                            GRID.scroller.resize.call(this);\n                            return true;\n                        }\n                        else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                            if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                                scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                                scrollTo.call(this, {left: -scrollLeft});\n                                GRID.header.scrollTo.call(this, {left: -scrollLeft});\n                                GRID.scroller.resize.call(this);\n                            }\n                            return true;\n                        }\n                    }\n                    scrollLeft = null;\n                    return false;\n                }).call(this);\n\n                containerPanelName = nPanelInfo.containerPanelName;\n                isScrollPanel = nPanelInfo.isScrollPanel;\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n                var $column = this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n                    // todo : 컬럼이동할 때에도 scrollTo 체크\n                    var newLeft = (function () {\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                            return $column.position().left;\n                        } else {\n                            return;\n                        }\n                    }).call(this);\n\n                    if (typeof newLeft !== \"undefined\") {\n                        GRID.header.scrollTo.call(this, {left: -newLeft});\n                        scrollTo.call(this, {left: -newLeft});\n                        GRID.scroller.resize.call(this);\n                    }\n                }\n\n                return moveResult;\n            },\n            \"INDEX\": function (_dindex) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) {\n                    focusedColumn = {\n                        rowIndex: 0,\n                        colIndex: 0\n                    }\n                }\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n\n                if (_dindex == \"end\") {\n                    _dindex = this.list.length - 1;\n                }\n\n                focusedColumn.dindex = _dindex;\n                focusedColumn.rowIndex = 0;\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        break;\n                    }\n                    while_i++;\n                }\n\n                let nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            }\n        };\n\n        let processor = {\n            \"UP\": function () {\n                return focus[\"UD\"].call(this, -1);\n            },\n            \"DOWN\": function () {\n                return focus[\"UD\"].call(this, 1);\n            },\n            \"LEFT\": function () {\n                return focus[\"LR\"].call(this, -1);\n            },\n            \"RIGHT\": function () {\n                return focus[\"LR\"].call(this, 1);\n            },\n            \"HOME\": function () {\n                return focus[\"INDEX\"].call(this, 0);\n            },\n            \"END\": function () {\n                return focus[\"INDEX\"].call(this, \"end\");\n            },\n            \"position\": function (_position) {\n                return focus[\"INDEX\"].call(this, _position);\n            }\n        };\n\n        if (_position in processor) {\n            return processor[_position].call(this);\n        } else {\n            return processor[\"position\"].call(this, _position);\n        }\n    };\n\n    const inlineEdit = {\n        active(_focusedColumn, _e, _initValue) {\n            let self = this,\n                dindex, doindex, colIndex, rowIndex, panelName, colspan,\n                col, editor;\n\n            // this.inlineEditing = {};\n            for (var key in _focusedColumn) {\n                panelName = _focusedColumn[key].panelName;\n                dindex = _focusedColumn[key].dindex;\n                doindex = _focusedColumn[key].doindex;\n                colIndex = _focusedColumn[key].colIndex;\n                rowIndex = _focusedColumn[key].rowIndex;\n                colspan = _focusedColumn[key].colspan;\n\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\n                col = this.colGroup[colIndex];\n                if (!(editor = col.editor)) return this;\n\n                // editor disabled 체크\n                if (U.isFunction(editor.disabled)) {\n                    if (editor.disabled.call({\n                            list: this.list,\n                            dindex: dindex,\n                            item: this.list[dindex],\n                            key: col.key,\n                            value: _initValue\n                        })) {\n                        return this;\n                    }\n                }\n\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n                if (!(function (_editor, _type) {\n                        if (_editor.type in GRID.inlineEditor) {\n                            return (GRID.inlineEditor[_editor.type].editMode == \"popup\");\n                        }\n                    })(editor)) {\n                    // 체크 박스 타입이면 값 변경 시도\n                    if (editor.type == \"checkbox\") {\n                        let checked, newValue;\n                        if (editor.config && editor.config.trueValue) {\n                            if (checked = !(_initValue == editor.config.trueValue)) {\n                                newValue = editor.config.trueValue;\n                            } else {\n                                newValue = editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, dindex, doindex, col.key, newValue);\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                            editorConfig: col.editor.config, checked: checked\n                        });\n                    }\n                    return this;\n                }\n\n                if (this.list[dindex].__isGrouping) {\n                    return false;\n                }\n                if (key in this.inlineEditing) {\n                    return false;\n                }\n                this.inlineEditing[key] = {\n                    editor: editor,\n                    panelName: panelName,\n                    columnKey: key,\n                    column: _focusedColumn[key],\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\n                };\n                this.isInlineEditing = true;\n            }\n            if (this.isInlineEditing) {\n\n                let originalValue = GRID.data.getValue.call(self, dindex, doindex, col.key),\n                    initValue = (function (__value, __editor) {\n                        if (U.isNothing(__value)) {\n                            __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                        }\n\n                        if (__editor.type == \"money\") {\n                            return U.number(__value, {\"money\": true});\n                        }\n                        else {\n                            return __value;\n                        }\n                    }).call(this, _initValue, editor);\n\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                    .find('[data-ax5grid-cellholder]');\n\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n                return true;\n            }\n        },\n        deActive(_msg, _key, _value) {\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n            if (!this.inlineEditing[_key]) return this;\n\n            let panelName = this.inlineEditing[_key].panelName,\n                dindex = this.inlineEditing[_key].column.dindex,\n                doindex = this.inlineEditing[_key].column.doindex,\n                rowIndex = this.inlineEditing[_key].column.rowIndex,\n                colIndex = this.inlineEditing[_key].column.colIndex,\n                column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n                editorValue = (function ($inlineEditor) {\n                    if (typeof _value === \"undefined\") {\n                        if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                            return $inlineEditor.val();\n                        } else {\n                            _msg = \"CANCEL\";\n                            return false;\n                        }\n                    } else {\n                        return _value;\n                    }\n                })(this.inlineEditing[_key].$inlineEditor),\n                newValue = (function (__value, __editor) {\n                    if (__editor.type == \"money\") {\n                        return U.number(__value);\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, editorValue, column.editor);\n\n            let action = {\n                \"CANCEL\"(_dindex, _column, _newValue) {\n                    action[\"__clear\"].call(this);\n                },\n                \"RETURN\"(_dindex, _doindex, _column, _newValue) {\n                    if (GRID.data.setValue.call(this, _dindex, _doindex, _column.key, _newValue)) {\n                        action[\"__clear\"].call(this);\n                        GRID.body.repaintCell.call(this, panelName, _dindex, _doindex, rowIndex, colIndex, _newValue);\n                    } else {\n                        action[\"__clear\"].call(this);\n                    }\n                },\n                \"__clear\"() {\n                    this.isInlineEditing = false;\n                    let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                    if (bindedAx5ui == \"ax5picker\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                    } else if (bindedAx5ui == \"ax5select\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                    }\n\n                    this.inlineEditing[_key].$inlineEditor.remove();\n                    this.inlineEditing[_key].$inlineEditor = null;\n                    this.inlineEditing[_key].$inlineEditorCell = null;\n                    this.inlineEditing[_key] = undefined;\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n                }\n            };\n\n            if (_msg in action) {\n                action[_msg || \"RETURN\"].call(this, dindex, doindex, column, newValue);\n            } else {\n                action[\"__clear\"].call(this);\n            }\n        },\n        keydown(key, columnKey, _options) {\n            let processor = {\n                \"ESC\"() {\n                    for (var columnKey in this.inlineEditing) {\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                    }\n                },\n                \"RETURN\"() {\n                    if (this.isInlineEditing) {\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                        }else{\n                            return false;\n                        }\n                    } else {\n                        for (var k in this.focusedColumn) {\n                            let _column = this.focusedColumn[k],\n                                column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                                dindex = _column.dindex,\n                                value = \"\",\n                                col = this.colGroup[_column.colIndex];\n                            ;\n\n                            if (column) {\n                                if (!this.list[dindex].__isGrouping) {\n                                    value = GRID.data.getValue.call(this, dindex, column.key);\n                                }\n                            }\n\n                            if (col.editor && GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\n                                if (_options && _options.moveFocus) {\n\n                                }\n                                else {\n                                    if (column.editor && column.editor.type == \"checkbox\") {\n                                        value = GRID.data.getValue.call(this, dindex, column.key);\n\n                                        let checked, newValue;\n                                        if (column.editor.config && column.editor.config.trueValue) {\n                                            if (checked = !(value == column.editor.config.trueValue)) {\n                                                newValue = column.editor.config.trueValue;\n                                            } else {\n                                                newValue = column.editor.config.falseValue;\n                                            }\n                                        } else {\n                                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                        }\n\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\n                                        updateRowState.call(this, [\"cellChecked\"], dindex, {\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                            editorConfig: column.editor.config, checked: checked\n                                        });\n                                    }\n                                }\n                            } else {\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\n                            }\n                        }\n                    }\n                    return true;\n                }\n            };\n\n            if (key in processor) {\n                processor[key].call(this, key, columnKey, _options);\n            }\n        }\n    };\n\n    const getExcelString = function () {\n        let cfg = this.config,\n            list = this.list,\n            bodyRowData = this.bodyRowTable,\n            footSumData = this.footSumTable,\n            bodyGroupingData = this.bodyGroupingTable;\n\n        // body-scroll 의 포지션에 의존적이므로..\n        let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n            let SS = [],\n                di, dl,\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (di = 0, dl = _list.length; di < dl; di++) {\n                let isGroupingRow = false, rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    SS.push('\\n<tr>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, undefined, \"text\"), '&nbsp;</td>');\n                    }\n                    SS.push('\\n</tr>');\n                }\n            }\n            //SS.push('</table>');\n            return SS.join('');\n        };\n        let getSum = function (_colGroup, _bodyRow, _list) {\n            let SS = [],\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', getSumFieldValue.call(this, _list, col), '</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        let po = [];\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n        if (cfg.footSum) {\n            // 바닥 요약\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n        }\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        return po.join('');\n    };\n\n    const toggleCollapse = function (_dindex, _doindex, _collapse) {\n        if (GRID.data.toggleCollapse.call(this, _dindex, _doindex, _collapse)) {\n            this.proxyList = GRID.data.getProxyList.call(this, this.list);\n            repaint.call(this);\n        }\n    };\n\n    // todo : tree에서 dindex만으로 구현 했을 때 오류 발생 해결. (_doindex 이용)\n    const click = function (_dindex, _doindex) {\n        let that = {\n            self: this,\n            page: this.page,\n            list: this.list,\n            item: this.list[_dindex],\n            dindex: _dindex\n        };\n\n        moveFocus.call(this, _dindex);\n        if (this.config.body.onClick) {\n            this.config.body.onClick.call(that);\n        }\n\n        that = null;\n        // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n    };\n\n    const dblClick = function (_dindex, _doindex) {\n        let that = {\n            self: this,\n            page: this.page,\n            list: this.list,\n            item: this.list[_dindex],\n            dindex: _dindex\n        };\n\n        moveFocus.call(this, _dindex);\n\n        if (this.config.body.onDBLClick) {\n            this.config.body.onDBLClick.call(that);\n        }\n\n        that = null;\n    };\n\n\n    GRID.body = {\n        init: init,\n        repaint: repaint,\n        repaintCell: repaintCell,\n        repaintRow: repaintRow,\n        updateRowState: updateRowState,\n        updateRowStateAll: updateRowStateAll,\n        scrollTo: scrollTo,\n        blur: blur,\n        moveFocus: moveFocus,\n        inlineEdit: inlineEdit,\n        getExcelString: getExcelString,\n        toggleCollapse: toggleCollapse,\n        click: click,\n        dblClick: dblClick\n    };\n})();","// ax5.ui.grid.collector\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    let sum = function () {\n        let value = 0,\n            i = this.list.length;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n            }\n        }\n        return value;\n    };\n\n    let avg = function () {\n        let value = 0,\n            i = this.list.length, listLength = 0;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n                listLength++;\n            }\n        }\n        return U.number(value / (listLength || 1), {\"round\": 2});\n    };\n\n    GRID.collector = {\n        sum: sum,\n        avg: avg\n    };\n\n})();","// ax5.ui.grid.layout\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    const init = function () {\n\n    };\n\n    const clearGroupingData = function (_list) {\n        let i = 0, l = _list.length, returnList = [];\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n                returnList.push(jQuery.extend({}, _list[i]));\n            }\n        }\n        return returnList;\n    };\n\n    const initData = function (_list) {\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n\n        let i = 0, l = _list.length,\n            returnList = [],\n            appendIndex = 0,\n            dataRealRowCount = 0,\n            lineNumber = 0;\n\n        if (this.config.body.grouping) {\n\n            let groupingKeys = U.map(this.bodyGrouping.by, function () {\n                return {\n                    key: this,\n                    compareString: \"\",\n                    grouping: false,\n                    list: []\n                }\n            });\n\n            let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n            for (; i < l + 1; i++) {\n                gi = 0;\n\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                        this.deletedList.push(_list[i]);\n                }\n\n                compareString = \"\"; // 그룹핑 구문검사용\n                appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\n\n                // 그룹핑 구문검사\n                for (; gi < gl; gi++) {\n                    if (_list[i]) {\n                        compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                    }\n\n                    if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                        let appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n                        for (let ki = 0; ki < gi + 1; ki++) {\n                            appendRowItem.keys.push(groupingKeys[ki].key);\n                            appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                        }\n                        appendRow.push(appendRowItem);\n                        groupingKeys[gi].list = [];\n                    }\n\n                    groupingKeys[gi].list.push(_list[i]);\n                    groupingKeys[gi].compareString = compareString;\n                }\n\n                // 새로 추가해야할 그룹핑 row\n                ari = appendRow.length;\n                while (ari--) {\n                    returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n                }\n                //~ 그룹핑 구문 검사 완료\n\n                if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\n                    _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\n                    returnList.push(_list[i]);\n\n                    dataRealRowCount++;\n                    appendIndex++;\n                    lineNumber++;\n                }\n            }\n        }\n        else {\n            for (; i < l; i++) {\n                if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.deleted]) {\n                        this.deletedList.push(_list[i]);\n                    } else {\n\n                        if (_list[i][this.config.columnKeys.selected]) {\n                            this.selectedDataIndexs.push(i);\n                        }\n\n                        // __original_index 인덱스 키가 없다면 추가.\n                        if(typeof _list[i][\"__original_index\"] === \"undefined\"){\n                            _list[i][\"__original_index\"] = lineNumber;\n                        }\n                        _list[i][\"__index\"] = lineNumber;\n                        dataRealRowCount++;\n                        lineNumber++;\n                        returnList.push(_list[i]);\n                    }\n                }\n            }\n        }\n\n        // 원본 데이터의 갯수\n        // grouping은 제외하고 수집됨.\n        this.xvar.dataRealRowCount = dataRealRowCount;\n        return returnList;\n    };\n\n    const arrangeData4tree = function (_list) {\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n        let i = 0, seq = 0,\n            appendIndex = 0,\n            dataRealRowCount = 0,\n            lineNumber = 0;\n\n        let li = _list.length;\n        let keys = this.config.tree.columnKeys;\n        let hashDigit = this.config.tree.hashDigit;\n        let listIndexMap = {};\n\n        while (li--) {\n            delete _list[li][keys.parentHash];\n            delete _list[li][keys.selfHash];\n            //delete _list[li][keys.childrenLength];\n        }\n\n        /// 루트 아이템 수집\n        i = 0;\n        seq = 0;\n        li = _list.length;\n        for (; i < li; i++) {\n            if (_list[i]) {\n                listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n                if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") { // 최상위 아이템인 경우\n                    _list[i][keys.parentKey] = \"top\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.depth] = 0;\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                }\n            }\n        }\n\n        /// 자식 아이템 수집\n        i = 0;\n        lineNumber = 0;\n        for (; i < li; i++) {\n            let _parent, _parentHash;\n            if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n                if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n                    _parentHash = _parent[keys.selfHash];\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = _parentHash;\n                    _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\n                    _list[i][keys.depth] = _parent[keys.depth] + 1;\n                    if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n                    _parent[keys.children].push(_list[i][keys.selfKey]);\n                } else {\n                    _list[i][keys.parentKey] = \"top\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                }\n            }\n\n            if (_list[i]) {\n                if (_list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                    _list[i][keys.hidden] = true;\n                }\n                else if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n\n                _list[i][\"__index\"] = lineNumber;\n                dataRealRowCount++;\n                lineNumber++;\n            }\n        }\n\n        this.listIndexMap = listIndexMap;\n        this.xvar.dataRealRowCount = dataRealRowCount;\n\n        return _list;\n    };\n\n    const getProxyList = function (_list) {\n        let i = 0, l = _list.length, returnList = [];\n        for (; i < l; i++) {\n\n            if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\n                _list[i].__origin_index__ = i;\n                returnList.push(_list[i]);\n            }\n        }\n        return returnList;\n    };\n\n    const set = function (data) {\n\n        let list;\n        if (U.isArray(data)) {\n            this.page = null;\n            list = data;\n        } else if (\"page\" in data) {\n            this.page = jQuery.extend({}, data.page);\n            list = data.list;\n        }\n\n        // console.log(this.list.length);\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        } else {\n            this.proxyList = null;\n            this.list = initData.call(this,\n                (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, list) : list\n            );\n        }\n        this.deletedList = [];\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n\n        if (this.config.body.grouping) {\n\n        }\n        return this;\n    };\n\n    const get = function (_type) {\n        return {\n            list: this.list,\n            page: this.page\n        };\n    };\n\n    const getList = function (_type) {\n        let returnList = [];\n        //let list = (this.proxyList) ? this.proxyList : this.list;\n        let list = this.list;\n        let i = 0, l = list.length;\n        switch (_type) {\n            case \"modified\":\n                for (; i < l; i++) {\n                    if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.modified]) {\n                        returnList.push(jQuery.extend({}, list[i]));\n                    }\n                }\n                break;\n            case \"selected\":\n                for (; i < l; i++) {\n                    if (list[i] && !list[i][\"__isGrouping\"] && list[i][this.config.columnKeys.selected]) {\n                        returnList.push(jQuery.extend({}, list[i]));\n                    }\n                }\n                break;\n            case \"deleted\":\n                //_list = GRID.data.clearGroupingData(this.list);\n                returnList = [].concat(this.deletedList);\n                break;\n            default:\n                returnList = GRID.data.clearGroupingData.call(this, list);\n        }\n        return returnList;\n    };\n\n    const add = function (_row, _dindex, _options) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\"() {\n                list = [].concat(_row).concat(list);\n            },\n            \"last\"() {\n                list = list.concat([].concat(_row));\n            }\n        };\n\n        if (this.config.tree.use) {\n            let list = this.list.concat([].concat(_row));\n\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        }\n        else {\n            if (typeof _dindex === \"undefined\") _dindex = \"last\";\n            if (_dindex in processor) {\n                _row[this.config.columnKeys.modified] = true;\n                processor[_dindex].call(this, _row);\n            } else {\n                if (!U.isNumber(_dindex)) {\n                    throw 'invalid argument _dindex';\n                }\n                if (U.isArray(_row)) {\n                    for (let _i = 0, _l = _row.length; _i < _l; _i++) {\n                        list.splice(_dindex + _i, 0, _row[_i]);\n                    }\n                } else {\n                    list.splice(_dindex, 0, _row);\n                }\n            }\n\n            if (this.config.body.grouping) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            }\n            else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            }\n            else {\n                list = initData.call(this, list);\n            }\n\n            this.list = list;\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 완전 제거 하는 경우 사용.\n     * ax5grid.data.remove\n     */\n    const remove = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, 0);\n                } else {\n                    list.splice(0, 1);\n                }\n            },\n            \"last\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, list.length - 1);\n                } else {\n                    list.splice(list.length - 1, 1);\n                }\n            },\n            \"index\": function (_dindex) {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, _dindex);\n                } else {\n                    list.splice(_dindex, 1);\n                }\n            },\n            \"tree\": function (_dindex) {\n                let treeKeys = this.config.tree.columnKeys, selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\n                list = U.filter(list, function () {\n                    return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\n                });\n                treeKeys = null;\n                selfHash = null;\n            },\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            processor[\"index\"].call(this, _dindex);\n        }\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        }\n        else {\n            if (this.config.body.grouping) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else if (Object.keys(this.sortInfo).length) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else {\n                list = initData.call(this, list);\n            }\n            this.list = list;\n        }\n\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n\n    /**\n     * list에서 deleted 처리 repaint\n     * ax5grid.data.deleteRow\n     */\n    const deleteRow = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, 0);\n                } else {\n                    list[0][this.config.columnKeys.deleted] = true;\n                }\n            },\n            \"last\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, list.length - 1);\n                } else {\n                    list[list.length - 1][this.config.columnKeys.deleted] = true;\n                }\n            },\n            \"selected\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, \"selected\");\n                } else {\n                    let i = list.length;\n                    while (i--) {\n                        if (list[i][this.config.columnKeys.selected]) {\n                            list[i][this.config.columnKeys.deleted] = true;\n                        }\n                    }\n                    i = null;\n                }\n            },\n            \"tree\": function (_dindex) {\n                let keys = this.config.columnKeys,\n                    treeKeys = this.config.tree.columnKeys;\n\n                if (_dindex === \"selected\") {\n\n                    let i = list.length;\n                    while (i--) {\n                        if (list[i][this.config.columnKeys.selected]) {\n                            list[i][this.config.columnKeys.deleted] = true;\n\n                            let selfHash = list[i][treeKeys.selfHash];\n                            let ii = list.length;\n\n                            while (ii--) {\n                                if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\n                                    list[ii][keys.deleted] = true;\n                                }\n                            }\n\n                            selfHash = null;\n                            ii = null;\n                        }\n                    }\n                    i = null;\n\n                } else {\n                    let selfHash = list[_dindex][treeKeys.selfHash];\n                    let i = list.length;\n                    while (i--) {\n                        if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {\n                            list[i][keys.deleted] = true;\n                        }\n                    }\n                    selfHash = null;\n                    i = null;\n                }\n\n                keys = null;\n                treeKeys = null;\n            },\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            list[_dindex][this.config.columnKeys.deleted] = true;\n        }\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        }\n        else {\n            if (this.config.body.grouping) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else if (Object.keys(this.sortInfo).length) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else {\n                list = initData.call(this, list);\n            }\n\n            this.list = list;\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    const update = function (_row, _dindex) {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        //\n        this.needToPaintSum = true;\n        this.list.splice(_dindex, 1, _row);\n\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\n        }\n    };\n\n    const updateChild = function (_dindex, _updateData, _options) {\n        let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n        if (typeof _dindex === \"undefined\") return false;\n        originIndex = this.proxyList[_dindex].__origin_index__;\n\n        if (this.list[originIndex][keys.children]) {\n            this.proxyList = []; // 리셋 프록시\n\n            if (_options && _options.filter) {\n                if (_options.filter.call({item: this.list[originIndex], dindex: originIndex}, this.list[originIndex])) {\n                    for (let _k in _updateData) {\n                        this.list[originIndex][_k] = _updateData[_k];\n                    }\n                }\n            }\n            else {\n                for (let _k in _updateData) {\n                    this.list[originIndex][_k] = _updateData[_k];\n                }\n            }\n\n            selfHash = this.list[originIndex][keys.selfHash];\n\n            let i = 0, l = this.list.length;\n            for (; i < l; i++) {\n                if (this.list[i]) {\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n                        \n                        if (_options && _options.filter) {\n                            if (_options.filter.call({item: this.list[i], dindex: i}, this.list[i])) {\n                                for (let _k in _updateData) {\n                                    this.list[i][_k] = _updateData[_k];\n                                }\n                            }\n                        }\n                        else {\n                            for (let _k in _updateData) {\n                                this.list[i][_k] = _updateData[_k];\n                            }\n                        }\n                    }\n\n                    if (!this.list[i][keys.hidden]) {\n                        this.proxyList.push(this.list[i]);\n                    }\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const setValue = function (_dindex, _doindex, _key, _value) {\n        let originalValue = getValue.call(this, _dindex, _doindex, _key);\n        this.needToPaintSum = true;\n\n        if (originalValue !== _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\n                    (Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\")).call(this.list[_dindex], _value);\n                } catch (e) {\n\n                }\n            } else {\n                this.list[_dindex][this.config.columnKeys.modified] = true;\n                this.list[_dindex][_key] = _value;\n            }\n\n            if (this.onDataChanged) {\n                this.onDataChanged.call({\n                    self: this,\n                    list: this.list,\n                    dindex: _dindex,\n                    doindex: _doindex,\n                    item: this.list[_dindex],\n                    key: _key,\n                    value: _value\n                });\n            }\n        }\n\n        return true;\n    };\n\n    let getValue = function (_dindex, _doindex, _key, _value) {\n        let list = this.list;\n        let listIndex = (typeof _doindex === \"undefined\") ? _dindex : _doindex;\n\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(list[listIndex]);\n            } catch (e) {\n\n            }\n        } else {\n            _value = list[listIndex][_key];\n        }\n        return _value;\n    };\n\n    const clearSelect = function () {\n        this.selectedDataIndexs = [];\n    };\n\n    const select = function (_dindex, _doindex, _selected, _options) {\n        let cfg = this.config;\n\n        if(typeof _doindex === \"undefined\") _doindex = _dindex;\n\n        if (!this.list[_doindex]) return false;\n        if (this.list[_doindex].__isGrouping) return false;\n        if (this.list[_doindex][cfg.columnKeys.disableSelection]) return false;\n\n        if (typeof _selected === \"undefined\") {\n            if (this.list[_doindex][cfg.columnKeys.selected] = !this.list[_doindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(_doindex);\n            } else {\n                this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n                    return this == _doindex;\n                }), 1);\n            }\n        } else {\n            if (this.list[_doindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(_doindex);\n            } else {\n                this.selectedDataIndexs.splice(U.search(this.selectedDataIndexs, function () {\n                    return this == _doindex;\n                }), 1);\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                doindex: _doindex,\n                item: this.list[_doindex],\n                key: cfg.columnKeys.selected,\n                value: this.list[_doindex][cfg.columnKeys.selected]\n            });\n        }\n\n        return this.list[_doindex][cfg.columnKeys.selected];\n    };\n\n    const selectAll = function (_selected, _options) {\n        let cfg = this.config,\n            dindex = this.list.length;\n\n        this.selectedDataIndexs = [];\n\n        if (typeof _selected === \"undefined\") {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        } else {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list\n            });\n        }\n\n        return this.list;\n    };\n\n    const sort = function (_sortInfo, _list, _options) {\n        let self = this, list = _list || this.list, sortInfoArray = [], lineNumber = 0;\n        let getKeyValue = function (_item, _key, _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(_item);\n                } catch (e) {\n                }\n            } else {\n                _value = _item[_key];\n            }\n            return _value;\n        };\n\n        for (let k in _sortInfo) {\n            sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n        }\n        sortInfoArray = U.filter(sortInfoArray, function () {\n            return typeof this !== \"undefined\";\n        });\n\n        // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\n        if(_options && _options.resetLineNumber && sortInfoArray.length === 0) {\n            sortInfoArray[0] = {key: '__original_index', order: \"asc\"}\n        }\n\n        let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n        list.sort(function (_a, _b) {\n            for (i = 0; i < l; i++) {\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n                if (typeof _a_val !== typeof _b_val) {\n                    _a_val = '' + _a_val;\n                    _b_val = '' + _b_val;\n                }\n                if (_a_val < _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n                } else if (_a_val > _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n                }\n            }\n        });\n\n        if(_options && _options.resetLineNumber) {\n            i = 0, l = list.length, lineNumber = 0;\n            for (; i < l; i++) {\n                if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                    _list[i][\"__index\"] = lineNumber++;\n                }\n            }\n        }\n\n        if (_list) {\n            return list;\n        } else {\n            this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            GRID.page.navigationUpdate.call(this);\n            return this;\n        }\n    };\n\n    const append = function (_list, _callback) {\n        let self = this;\n\n        if (this.config.tree.use) {\n            let list = this.list.concat([].concat(_list));\n\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n            list = null;\n        } else {\n            this.list = this.list.concat([].concat(_list));\n        }\n\n        this.appendProgress = true;\n        GRID.page.statusUpdate.call(this);\n        \n        if (this.appendDebouncer) {\n            if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n                clearTimeout(this.appendDebouncer);\n                self.appendDebounceTimes++;\n            } else {\n                self.appendDebounceTimes = 0;\n                appendIdle.call(self);\n                _callback();\n                return false;\n            }\n        }\n\n        this.appendDebouncer = setTimeout(function () {\n            self.appendDebounceTimes = 0;\n            appendIdle.call(self);\n            _callback();\n        }, this.config.debounceTime);\n\n        // todo : append bounce animation\n    };\n\n    const appendIdle = function () {\n        this.appendProgress = false;\n        if (this.config.body.grouping) {\n            this.list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    this.list\n                )\n            );\n        } else {\n            this.list = initData.call(this, this.list);\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n    };\n\n    const toggleCollapse = function (_dindex, _doindx, _collapse) {\n        let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n        if (typeof _dindex === \"undefined\") return false;\n        originIndex = this.proxyList[_dindex].__origin_index__;\n\n        if (this.list[originIndex][keys.children]) {\n            this.proxyList = []; // 리셋 프록시\n            if (typeof _collapse == \"undefined\") {\n                _collapse = !(this.list[originIndex][keys.collapse] || false);\n            }\n\n            this.list[originIndex][keys.collapse] = _collapse;\n            selfHash = this.list[originIndex][keys.selfHash];\n\n            let i = this.list.length;\n            while (i--) {\n                if (this.list[i]) {\n                    // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n                        this.list[i][keys.hidden] = _collapse;\n                    }\n\n                    if (!this.list[i][keys.hidden]) {\n                        this.proxyList.push(this.list[i]);\n                    }\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    GRID.data = {\n        init: init,\n        set: set,\n        get: get,\n        getList: getList,\n        getProxyList: getProxyList,\n        setValue: setValue,\n        getValue: getValue,\n        clearSelect: clearSelect,\n        select: select,\n        selectAll: selectAll,\n        add: add,\n        remove: remove,\n        deleteRow: deleteRow,\n        update: update,\n        updateChild: updateChild,\n        sort: sort,\n        initData: initData,\n        clearGroupingData: clearGroupingData,\n        append: append,\n        toggleCollapse: toggleCollapse\n    };\n})();","/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid.excel\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const base64 = function (s) {\n        return window.btoa(unescape(encodeURIComponent(s)));\n    };\n\n    const uri = \"data:application/vnd.ms-excel;base64,\";\n\n    const getExcelTmpl = function () {\n        return `\\ufeff\n{{#tables}}{{{body}}}{{/tables}}\n`;\n    };\n\n    const tableToExcel = function (table, fileName) {\n        let link, a, output,\n            tables = [].concat(table);\n\n        output = ax5.mustache.render(getExcelTmpl(), {\n            worksheet: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({name: \"Sheet\" + (ti + 1)});\n                });\n                return arr;\n            })(),\n            tables: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({body: t});\n                });\n                return arr;\n            })()\n        });\n\n        let isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1,\n            isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1,\n            isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\n\n        let blob1, blankWindow, $iframe, iframe, anchor;\n\n        if (navigator.msSaveOrOpenBlob) {\n            blob1 = new Blob([output], {type: \"text/html\"});\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\n        }\n        else if (isSafari) {\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\n            //tables\n            blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\n            blankWindow.document.write(output);\n            blankWindow = null;\n        }\n        else {\n            if (isIE && typeof Blob === \"undefined\") {\n                //otherwise use the iframe and save\n                //requires a blank iframe on page called txtArea1\n                $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\n                jQuery(document.body).append($iframe);\n\n                iframe = window[this.id + '-excel-export'];\n                iframe.document.open(\"text/html\", \"replace\");\n                iframe.document.write(output);\n                iframe.document.close();\n                iframe.focus();\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\n                $iframe.remove();\n            } else {\n                // Attempt to use an alternative method\n                anchor = document.body.appendChild(\n                    document.createElement(\"a\")\n                );\n\n                // If the [download] attribute is supported, try to use it\n                if (\"download\" in anchor) {\n                    anchor.download = fileName;\n                    //anchor.href = URL.createObjectURL( blob );\n                    anchor.href = uri + base64(output);\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                }\n            }\n        }\n\n        return true;\n    };\n\n    GRID.excel = {\n        export: tableToExcel\n    };\n})();","// ax5.ui.grid.formatter\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const money = function () {\n        return U.number(this.value, {\"money\": true});\n    };\n\n    GRID.formatter = {\n        money: money\n    };\n\n})();","// ax5.ui.grid.header\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const columnResizerEvent = {\n        \"on\": function (_columnResizer, _colIndex) {\n            var self = this;\n            var $columnResizer = $(_columnResizer);\n            var columnResizerPositionLeft = $columnResizer.offset().left;\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\n            self.xvar.columnResizerIndex = _colIndex;\n            var resizeRange = {\n                min: -self.colGroup[_colIndex]._width + 2,\n                max: self.$[\"container\"][\"root\"].width() - self.colGroup[_colIndex]._width,\n            };\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n\n                    if (resizeRange.min > self.xvar.__da) {\n                        self.xvar.__da = resizeRange.min;\n                    } else if (resizeRange.max < self.xvar.__da) {\n                        self.xvar.__da = resizeRange.max;\n                    }\n\n                    if (!self.xvar.columnResizerLived) {\n                        self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\n                    }\n                    self.xvar.columnResizerLived = true;\n                    self.$[\"resizer\"][\"horizontal\"].css({\n                        left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\n                    });\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\n            this.xvar.columnResizerLived = false;\n\n            if (typeof this.xvar.__da === \"undefined\") {\n\n            }\n            else {\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\n            }\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const init = function () {\n        // 헤더 초기화\n        const self = this;\n\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let key = this.getAttribute(\"data-ax5grid-column-key\"),\n                colIndex = this.getAttribute(\"data-ax5grid-column-colindex\"),\n                //rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\"),\n                col = self.colGroup[colIndex];\n\n            if (key === \"__checkbox_header__\") {\n                let selected = this.getAttribute(\"data-ax5grid-selected\");\n                selected = (U.isNothing(selected)) ? true : (selected !== \"true\");\n\n                $(this).attr(\"data-ax5grid-selected\", selected);\n                self.selectAll({selected: selected});\n\n                selected = null;\n            }\n            else {\n                if (key && col && col.sortable !== false && !col.sortFixed) {\n                    if (col.sortable === true || self.config.sortable === true) {\n                        toggleSort.call(self, col.key);\n                    }\n                }\n            }\n\n            GRID.body.blur.call(self);\n\n            key = null;\n            colIndex = null;\n            col = null;\n        });\n        this.$[\"container\"][\"header\"]\n            .on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\n                let colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\n\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                columnResizerEvent.on.call(self, this, Number(colIndex));\n                U.stopEvent(e);\n\n                colIndex = null;\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    const resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.xvar.frozenColumnIndex);\n\n        this.asideHeaderData = (function (dataTable) {\n            let colGroup = [];\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            key: \"__index_header__\", label: \"&nbsp;\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            key: \"__checkbox_header__\", label: \"\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n\n                    col = null;\n                }\n            }\n\n            this.asideColGroup = colGroup;\n            return data;\n        }).call(this, this.headerTable);\n\n        this.leftHeaderData = dividedHeaderObj.leftData;\n        this.headerData = dividedHeaderObj.rightData;\n    };\n\n    const getFieldValue = function (_col) {\n        return (_col.key === \"__checkbox_header__\")\n            ? `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`\n            : (_col.label || \"&nbsp;\");\n    };\n\n    const repaint = function (_reset) {\n        let cfg = this.config,\n            colGroup = this.colGroup;\n\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        }\n        let asideHeaderData = this.asideHeaderData,\n            leftHeaderData = this.leftHeaderData,\n            headerData = this.headerData,\n            headerAlign = cfg.header.align;\n\n        // this.asideColGroup : asideHeaderData에서 처리 함.\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\n\n        var repaintHeader = function (_elTarget, _colGroup, _bodyRow) {\n            let tableWidth = 0,\n                SS = [];\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n                tableWidth += _colGroup[cgi]._width;\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                var trCSS_class = \"\";\n                SS.push('<tr class=\"' + trCSS_class + '\">');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\n                    var colAlign = headerAlign || col.align;\n                    SS.push('<td ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        (function () {\n                            return (typeof col.key !== \"undefined\") ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\n                        })(),\n                        'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.headerStyleClass) {\n                                if (U.isFunction(_col.headerStyleClass)) {\n                                    tdCSS_class += _col.headerStyleClass.call({\n                                            column: _col,\n                                            key: _col.key\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.headerStyleClass + \" \";\n                                }\n                            }\n                            if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n                    \n                    SS.push((function () {\n                        var lineHeight = (cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth);\n                        return '<span data-ax5grid-cellHolder=\"\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\n                    })(), (function () {\n                        var _SS = \"\";\n\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\n                        }\n                        return _SS;\n                    })(), getFieldValue.call(this, col), '</span>');\n\n                    if (!U.isNothing(col.colIndex)) {\n                        if (cfg.enableFilter) {\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\n                        }\n                    }\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'style=\"height: ' + (cfg.header.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n            SS.push('</table>');\n            _elTarget.html(SS.join(''));\n\n            /// append column-resizer\n            (function () {\n                let resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth,\n                    resizerLeft = 0,\n                    AS = [];\n\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                    var col = _colGroup[cgi];\n                    if (!U.isNothing(col.colIndex)) {\n                        //_colGroup[cgi]._width\n                        resizerLeft += col._width;\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\n                    }\n                }\n                _elTarget.append(AS);\n            }).call(this);\n\n\n            return tableWidth;\n        };\n\n        if (cfg.asidePanelWidth > 0) {\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\n        }\n        if (cfg.frozenColumnIndex > 0) {\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\n        }\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\n\n        if (cfg.rightSum) {\n\n        }\n    };\n\n    const scrollTo = function (css) {\n        this.$.panel[\"header-scroll\"].css(css);\n        return this;\n    };\n\n    const toggleSort = function (_key) {\n        let sortOrder = \"\",\n            sortInfo = {},\n            seq = 0;\n\n        for (var k in this.sortInfo) {\n            if (this.sortInfo[k].fixed) {\n                sortInfo[k] = this.sortInfo[k];\n                seq++;\n            }\n        }\n\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            if (this.colGroup[i].key == _key) {\n                if (sortOrder == \"\") {\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\n                        sortOrder = \"desc\";\n                    }\n                    else if (this.colGroup[i].sort === \"desc\") {\n                        sortOrder = \"asc\";\n                    }\n                    else {\n                        sortOrder = undefined;\n                    }\n                }\n                this.colGroup[i].sort = sortOrder;\n            } else if (!this.config.multiSort) {\n                this.colGroup[i].sort = undefined;\n            }\n\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\n                if (!sortInfo[this.colGroup[i].key]) {\n                    sortInfo[this.colGroup[i].key] = {\n                        seq: seq++,\n                        orderBy: this.colGroup[i].sort\n                    };\n                }\n            }\n        }\n\n        this.setColumnSort(sortInfo);\n        return this;\n    };\n\n    const applySortStatus = function (_sortInfo) {\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            for (var _key in _sortInfo) {\n                if (this.colGroup[i].key == _key) {\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\n                }\n            }\n        }\n        return this;\n    };\n\n    const select = function (_options) {\n        GRID.data.select.call(this, dindex, _options && _options.selected);\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n    };\n\n    const getExcelString = function () {\n        let cfg = this.config,\n            colGroup = this.colGroup,\n            headerData = this.headerTable,\n            getHeader = function (_colGroup, _bodyRow) {\n                var SS = [];\n                //SS.push('<table border=\"1\">');\n                for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                    SS.push('<tr>');\n                    for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                        var col = _bodyRow.rows[tri].cols[ci];\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', getFieldValue.call(this, col), '</td>');\n                    }\n                    SS.push('</tr>');\n                }\n                //SS.push('</table>');\n\n                return SS.join('');\n            };\n\n        return getHeader.call(this, colGroup, headerData);\n    };\n\n    GRID.header = {\n        init: init,\n        repaint: repaint,\n        scrollTo: scrollTo,\n        toggleSort: toggleSort,\n        applySortStatus: applySortStatus,\n        getExcelString: getExcelString\n    };\n\n})();","// ax5.ui.grid.inlineEditor\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const edit_text = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            if(typeof _editor.attributes !== \"undefined\"){\n                var attributesText  = \"\";\n                for (var k in _editor.attributes){\n                    attributesText += ` ${k}='${_editor.attributes[k]}'`;\n                }\n            }\n            return `<input type=\"text\" data-ax5grid-editor=\"text\" value=\"${_value}\" ${attributesText}>`;\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.focus().select();\n        }\n    };\n\n    const edit_money = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"money\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    const edit_number = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"number\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    const edit_date = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\n            _$el.ax5picker({\n                direction: \"auto\",\n                content: {\n                    type: 'date',\n                    formatter: {\n                        pattern: 'date'\n                    }\n                },\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\n                    }\n                }\n            });\n            _$el.focus().select();\n        }\n    };\n\n    const edit_select = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            var po = [];\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\n            po.push('</div>');\n\n            return po.join('');\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var eConfig = {\n                columnKeys: {\n                    optionValue: \"value\",\n                    optionText: \"text\",\n                    optionSelected: \"selected\"\n                }\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n\n            eConfig.options.forEach(function (n) {\n                if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\n            });\n\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\n            _$el.ax5select({\n                direction: \"auto\",\n                columnKeys: eConfig.columnKeys,\n                options: eConfig.options,\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\n                    } else if (this.state == \"changeValue\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\n                    }\n                }\n            });\n            _$el.ax5select(\"open\");\n            _$el.ax5select(\"setValue\", _value);\n            _$el.find(\"a\").focus();\n        }\n    };\n\n    const edit_checkbox = {\n        editMode: \"inline\",\n        getHtml: function (_root, _editor, _value) {\n\n            var lineHeight = (_root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth);\n            var checked;\n            if (_editor.config && _editor.config.trueValue) {\n                checked = (_value == _editor.config.trueValue) ? \"true\" : \"false\";\n            } else {\n                checked = (_value == false || _value == \"false\" || _value < \"1\") ? \"false\" : \"true\";\n            }\n\n            var eConfig = {\n                marginTop: 2,\n                height: lineHeight - 4\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\n\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\n        }\n    };\n\n    const edit_textarea = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        _getHtml: function (_root, _columnKey, _editor, _value) {\n            // init 에서 사용하게 될 HTML 태그를 만들어 줍니다.\n            return `<div data-ax5grid-editor=\"textarea\"></div>`;\n        },\n        _bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            // 위치와 크기를 구합니다.\n            let offset = _$el.offset();\n            let box = {\n                width: _$el.width()\n            };\n            let editorHeight = 150;\n            let buttonHeight = 30;\n\n            // 새로운 엘리먼트 생성\n            let $newDiv = jQuery(`<div data-ax5grid-popup=\"textarea\" style=\"z-index: 9999;\">\n    <textarea style=\"width:100%;height:${editorHeight-buttonHeight}px;\" class=\"form-control\">${_value}</textarea>\n    <div style=\"height:${buttonHeight}px;padding:5px;text-align: right;\">\n        <button class=\"btn btn-default\">OK</button>\n    </div>\n</div>`);\n            let $newTextarea = $newDiv.find(\"textarea\");\n            // 엘리먼트에 CSS 적용\n            $newDiv.css({\n                position: \"absolute\",\n                left: offset.left,\n                top: offset.top,\n                width: box.width,\n                height: editorHeight\n            });\n            $newDiv.find(\"textarea\");\n\n            // 새로운 엘리먼트를 document.body에 append\n            jQuery(document.body).append($newDiv);\n            $newTextarea.focus().select();\n\n            $newTextarea.on(\"blur\", function (e) {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value);\n                $newDiv.remove();\n                ax5.util.stopEvent(e.originalEvent);\n            });\n            $newTextarea.on(\"keydown\", function (e) {\n                if(e.which == ax5.info.eventKeys.ESC){\n                    GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\n                    $newDiv.remove();\n                    ax5.util.stopEvent(e.originalEvent);\n                }\n            });\n\n            /// 값 변경\n            /// GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n            /// 에디팅 취소\n            /// GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\n        },\n\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            // 인라인 에디팅 활성화 시작\n            /**\n             * _root : gridInstance\n             * _columnKey : di + \"_\" + col.colIndex + \"_\" + col.rowIndex\n             * _editor : col.editor\n             * _$parent : 셀\n             * _value : 값\n             */\n            let $el;\n            _$parent.append($el = jQuery(this._getHtml(_root, _columnKey, _editor, _value)));\n            // 셀에 HTML 컨텐츠 추가\n\n            this._bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            // 이벤트 바인딩\n\n            return $el;\n        },\n    };\n\n    GRID.inlineEditor = {\n        \"text\": edit_text,\n        \"money\": edit_money,\n        \"number\": edit_number,\n        \"date\": edit_date,\n        \"select\": edit_select,\n        \"checkbox\": edit_checkbox,\n        \"textarea\": edit_textarea\n    };\n\n})();","// ax5.ui.grid.page\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const onclickPageMove = function (_act) {\n        var callback = function (_pageNo) {\n            if (this.page.currentPage != _pageNo) {\n                this.page.selectPage = _pageNo;\n                if (this.config.page.onChange) {\n                    this.config.page.onChange.call({\n                        self: this,\n                        page: this.page,\n                        data: this.data\n                    });\n                }\n            }\n        };\n        var processor = {\n            \"first\": function () {\n                callback.call(this, 0);\n            },\n            \"prev\": function () {\n                var pageNo = this.page.currentPage - 1;\n                if (pageNo < 0) pageNo = 0;\n                callback.call(this, pageNo);\n            },\n            \"next\": function () {\n                var pageNo = this.page.currentPage + 1;\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\n                callback.call(this, pageNo);\n            },\n            \"last\": function () {\n                callback.call(this, this.page.totalPages - 1);\n            }\n        };\n\n        if (_act in processor) {\n            processor[_act].call(this);\n        }\n        else {\n            callback.call(this, _act-1);\n        }\n    };\n\n    const navigationUpdate = function () {\n        let self = this;\n        if (this.page) {\n            let page = {\n                hasPage: false,\n                currentPage: this.page.currentPage,\n                pageSize: this.page.pageSize,\n                totalElements: this.page.totalElements,\n                totalPages: this.page.totalPages,\n                firstIcon: this.config.page.firstIcon,\n                prevIcon: this.config.page.prevIcon || \"«\",\n                nextIcon: this.config.page.nextIcon || \"»\",\n                lastIcon: this.config.page.lastIcon,\n            };\n            let navigationItemCount = this.config.page.navigationItemCount;\n\n            page[\"@paging\"] = (function () {\n                let returns = [], startI, endI;\n\n                startI = page.currentPage - Math.floor(navigationItemCount / 2);\n                if (startI < 0) startI = 0;\n                endI = page.currentPage + navigationItemCount;\n                if (endI > page.totalPages) endI = page.totalPages;\n\n                if (endI - startI > navigationItemCount) {\n                    endI = startI + navigationItemCount;\n                }\n\n                if(endI - startI < navigationItemCount){\n                    startI = endI - navigationItemCount;\n                }\n                if (startI < 0) startI = 0;\n\n                for (let p = startI, l = endI; p < l; p++) {\n                    returns.push({'pageNo': (p + 1), 'selected': page.currentPage == p});\n                }\n                return returns;\n            })();\n\n            if(page[\"@paging\"].length > 0){\n                page.hasPage = true;\n            }\n\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\n                onclickPageMove.call(self, this.getAttribute(\"data-ax5grid-page-move\"));\n            });\n\n        } else {\n            this.$[\"page\"][\"navigation\"].empty();\n        }\n    };\n\n    const statusUpdate = function () {\n        if(!this.config.page.statusDisplay){\n            return;\n        }\n\n        let fromRowIndex = this.xvar.virtualPaintStartRowIndex;\n        let toRowIndex = this.xvar.virtualPaintStartRowIndex + this.xvar.virtualPaintRowCount;\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\n        let totalElements = this.xvar.dataRowCount;\n\n        if (toRowIndex > totalElements) {\n            toRowIndex = totalElements;\n        }\n\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\n            fromRowIndex: U.number(fromRowIndex + 1, {\"money\": true}),\n            toRowIndex: U.number(toRowIndex, {\"money\": true}),\n            totalElements: U.number(totalElements, {\"money\": true}),\n            dataRowCount: (totalElements !== this.xvar.dataRealRowCount) ? U.number(this.xvar.dataRealRowCount, {\"money\": true}) : false,\n            progress: (this.appendProgress) ? this.config.appendProgressIcon : \"\"\n        }));\n    };\n\n    GRID.page = {\n        navigationUpdate: navigationUpdate,\n        statusUpdate: statusUpdate\n    };\n\n})();","// ax5.ui.grid.scroller\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const convertScrollPosition = {\n        \"vertical\": function (css, _var) {\n            let _content_height = _var._content_height - _var._panel_height,\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n                top = (_content_height * css.top) / _scroller_height;\n\n            if (top < 0) top = 0;\n            else if (_content_height < top) {\n                top = _content_height;\n            }\n            return {\n                top: -top\n            }\n        },\n        \"horizontal\": function (css, _var) {\n            let _content_width = _var._content_width - _var._panel_width,\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n                left = (_content_width * css.left) / _scroller_width;\n\n            if (left < 0) left = 0;\n            else if (_content_width < left) {\n                left = _content_width;\n            }\n            return {\n                left: -left\n            }\n        }\n    };\n\n    const convertScrollBarPosition = {\n        \"vertical\": function (_top, _var) {\n\n            let self = this,\n                type = \"vertical\",\n                _content_height = _var._content_height - _var._panel_height,\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n                top = (_scroller_height * _top) / _content_height,\n                scrollPositon;\n\n            if (-top > _scroller_height) {\n                top = -_scroller_height;\n\n                scrollPositon = convertScrollPosition[type].call(this, {top: -top}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.body.scrollTo.call(self, scrollPositon);\n            }\n\n            return -top\n        },\n        \"horizontal\": function (_left, _var) {\n            let self = this,\n                type = \"horizontal\",\n                _content_width = _var._content_width - _var._panel_width,\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n                left = (_scroller_width * _left) / _content_width,\n                scrollPositon;\n\n            if (-left > _scroller_width) {\n                left = -_scroller_width;\n                scrollPositon = convertScrollPosition[type].call(this, {left: -left}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.header.scrollTo.call(self, scrollPositon);\n                GRID.body.scrollTo.call(self, scrollPositon);\n            }\n\n            return -left\n        }\n    };\n\n    const scrollBarMover = {\n        \"click\": function (track, bar, type, e) {\n\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n            if ((new Date()).getTime() - GRID.scroller.moveout_timer < 20) {\n                return false;\n            }\n\n            let self = this,\n                trackOffset = track.offset(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        let mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        let newTop = mouseObj.clientY - trackOffset.top;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        let mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        let newLeft = mouseObj.clientX - trackOffset.left;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                },\n                css = getScrollerPosition[type](e);\n\n            bar.css(css);\n\n            let scrollPositon = convertScrollPosition[type].call(self, css, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            });\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n            GRID.body.scrollTo.call(self, scrollPositon);\n\n            scrollPositon = null;\n        },\n        \"on\": function (track, bar, type, e) {\n            let self = this,\n                barOffset = bar.position(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = barOffset.top + self.xvar.__da;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = barOffset.left + self.xvar.__da;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    let css = getScrollerPosition[type](e);\n                    bar.css(css);\n\n                    let scrollPositon = convertScrollPosition[type].call(self, css, {\n                        _content_width: _content_width,\n                        _content_height: _content_height,\n                        _panel_width: _panel_width,\n                        _panel_height: _panel_height,\n                        _horizontal_scroller_width: _horizontal_scroller_width,\n                        _vertical_scroller_height: _vertical_scroller_height,\n                        verticalScrollBarHeight: verticalScrollBarHeight,\n                        horizontalScrollBarWidth: horizontalScrollBarWidth\n                    });\n\n                    if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n\n                        GRID.body.scrollTo.call(self, scrollPositon);\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n            GRID.scroller.moveout_timer = (new Date()).getTime();\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const scrollContentMover = {\n        \"wheel\": function (delta) {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.xvar.body_panel_height,\n                _panel_width = self.xvar.body_panel_width,\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth;\n\n            if (isNaN(_content_height) || isNaN(_content_width)) {\n                return false;\n            }\n\n            let newLeft, newTop,\n                _top_is_end = false,\n                _left_is_end = false;\n\n            newLeft = _body_scroll_position.left - delta.x;\n            newTop = _body_scroll_position.top - delta.y;\n\n            // newTop이 범위를 넘었는지 체크\n            if (newTop >= 0) {\n                newTop = 0;\n                _top_is_end = true;\n            } else if (newTop <= _panel_height - _content_height) {\n                newTop = _panel_height - _content_height;\n                if (newTop >= 0) newTop = 0;\n                _top_is_end = true;\n            } else {\n                if (delta.y == 0) _top_is_end = true;\n            }\n\n            // newLeft이 범위를 넘었는지 체크\n            if (newLeft >= 0) {\n                newLeft = 0;\n                _left_is_end = true;\n            } else if (newLeft <= _panel_width - _content_width) {\n                newLeft = _panel_width - _content_width;\n                if (newLeft >= 0) newLeft = 0;\n                _left_is_end = true;\n            } else {\n                if (delta.x == 0) _left_is_end = true;\n            }\n\n            GRID.header.scrollTo.call(self, {left: newLeft});\n            GRID.body.scrollTo.call(self, {left: newLeft, top: newTop}, {\n                callback: function () {\n                    resize.call(self);\n                }\n            });\n\n            return !_top_is_end || !_left_is_end;\n        },\n        \"on\": function () {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.xvar.body_panel_height,\n                _panel_width = self.xvar.body_panel_width,\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                getContentPosition = function (e) {\n                    let mouseObj = GRID.util.getMousePosition(e), newLeft, newTop;\n\n                    self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                    newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                    newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                    // newTop이 범위를 넘었는지 체크\n                    if (newTop >= 0) {\n                        newTop = 0;\n                    } else if (newTop <= _panel_height - _content_height) {\n                        newTop = _panel_height - _content_height;\n                        if (newTop >= 0) newTop = 0;\n                    }\n\n                    // newLeft이 범위를 넘었는지 체크\n                    if (newLeft >= 0) {\n                        newLeft = 0;\n                    } else if (newLeft <= _panel_width - _content_width) {\n                        newLeft = _panel_width - _content_width;\n                        if (newLeft >= 0) newLeft = 0;\n                    }\n\n                    return {\n                        left: newLeft, top: newTop\n                    }\n                };\n\n            this.xvar.__x_da = 0; // 이동량 변수 초기화\n            this.xvar.__y_da = 0; // 계산이 잘못 될까바\n            this.xvar.touchmoved = false;\n\n            jQuery(document.body)\n                .on(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    let css = getContentPosition(e);\n\n                    resize.call(self);\n                    //if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                    //self.xvar.scrollTimer = setTimeout(function () {\n                        GRID.header.scrollTo.call(self, {left: css.left});\n                    GRID.body.scrollTo.call(self, css, {noRepaint: \"noRepaint\"});\n                    //}, 0);\n                    U.stopEvent(e.originalEvent);\n                    self.xvar.touchmoved = true;\n                })\n                .on(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    if (self.xvar.touchmoved) {\n                        let css = getContentPosition(e);\n\n                        resize.call(self);\n                        //if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                        //self.xvar.scrollTimer = setTimeout(function () {\n                            GRID.header.scrollTo.call(self, {left: css.left});\n                            GRID.body.scrollTo.call(self, css);\n                        //}, 0);\n\n                        U.stopEvent(e.originalEvent);\n                        scrollContentMover.off.call(self);\n                    }\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            jQuery(document.body)\n                .off(\"touchmove\" + \".ax5grid-\" + this.instanceId)\n                .off(\"touchend\" + \".ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const init = function () {\n        let self = this,\n            margin = this.config.scroller.trackPadding;\n\n        if (margin == 0) {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size, left: -1});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size, top: -1});\n        } else {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size - (margin + 1), left: margin / 2});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size - (margin + 1), top: margin / 2});\n        }\n\n        this.$[\"scroller\"][\"vertical-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"vertical\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n                }\n            }).bind(this));\n\n        this.$[\"scroller\"][\"horizontal-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"horizontal\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n                }\n            }).bind(this));\n\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', (function (e) {\n            let E = e.originalEvent, delta = {x: 0, y: 0};\n\n            if (E.detail) {\n                delta.y = E.detail * 10;\n            } else {\n                if (typeof E.deltaY === \"undefined\") {\n                    delta.y = -E.wheelDelta;\n                    delta.x = 0;\n                } else {\n                    delta.y = E.deltaY;\n                    delta.x = E.deltaX;\n                }\n            }\n\n            if (scrollContentMover.wheel.call(this, delta)) {\n                U.stopEvent(e);\n            }\n        }).bind(this));\n\n        if (ax5.info.supportTouch) {\n            this.$[\"container\"][\"body\"]\n                .on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\n                    self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                    scrollContentMover.on.call(self);\n                });\n        }\n\n        this.xvar.body_panel_height = this.$[\"panel\"][\"body\"].height();\n        this.xvar.body_panel_width = this.$[\"panel\"][\"body\"].width();\n    };\n\n    const resize = function () {\n        let _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\n            _content_height = this.xvar.scrollContentHeight,\n            _content_width = this.xvar.scrollContentWidth,\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            height: verticalScrollBarHeight\n        });\n\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            width: horizontalScrollBarWidth\n        });\n\n        this.xvar.body_panel_height = _panel_height;\n        this.xvar.body_panel_width = _panel_width;\n\n        _vertical_scroller_height = null;\n        _horizontal_scroller_width = null;\n        _panel_height = null;\n        _panel_width = null;\n        _content_height = null;\n        _content_width = null;\n        verticalScrollBarHeight = null;\n        horizontalScrollBarWidth = null;\n    };\n\n    GRID.scroller = {\n        // 타이머\n        moveout_timer: (new Date()).getTime(),\n        init: init,\n        resize: resize\n    };\n\n})();","// ax5.ui.grid.tmpl\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const main = function () {\n        return `<div data-ax5grid-container=\"root\" data-ax5grid-instance=\"{{instanceId}}\">\n            <div data-ax5grid-container=\"hidden\">\n                <textarea data-ax5grid-form=\"clipboard\"></textarea>\n            </div>\n            <div data-ax5grid-container=\"header\">\n                <div data-ax5grid-panel=\"aside-header\"></div>\n                <div data-ax5grid-panel=\"left-header\"></div>\n                <div data-ax5grid-panel=\"header\">\n                    <div data-ax5grid-panel-scroll=\"header\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-header\"></div>\n            </div>\n            <div data-ax5grid-container=\"body\">\n                <div data-ax5grid-panel=\"top-aside-body\"></div>\n                <div data-ax5grid-panel=\"top-left-body\"></div>\n                <div data-ax5grid-panel=\"top-body\">\n                    <div data-ax5grid-panel-scroll=\"top-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"top-right-body\"></div>\n                <div data-ax5grid-panel=\"aside-body\">\n                    <div data-ax5grid-panel-scroll=\"aside-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"left-body\">\n                    <div data-ax5grid-panel-scroll=\"left-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"body\">\n                    <div data-ax5grid-panel-scroll=\"body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-body\">\n                  <div data-ax5grid-panel-scroll=\"right-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-aside-body\"></div>\n                <div data-ax5grid-panel=\"bottom-left-body\"></div>\n                <div data-ax5grid-panel=\"bottom-body\">\n                    <div data-ax5grid-panel-scroll=\"bottom-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-right-body\"></div>\n            </div>\n            <div data-ax5grid-container=\"page\">\n                <div data-ax5grid-page=\"holder\">\n                    <div data-ax5grid-page=\"navigation\"></div>\n                    <div data-ax5grid-page=\"status\"></div>\n                </div>\n            </div>\n            <div data-ax5grid-container=\"scroller\">\n                <div data-ax5grid-scroller=\"vertical\">\n                    <div data-ax5grid-scroller=\"vertical-bar\"></div>    \n                </div>\n                <div data-ax5grid-scroller=\"horizontal\">\n                    <div data-ax5grid-scroller=\"horizontal-bar\"></div>\n                </div>\n                <div data-ax5grid-scroller=\"corner\"></div>\n            </div>\n            <div data-ax5grid-resizer=\"vertical\"></div>\n            <div data-ax5grid-resizer=\"horizontal\"></div>\n        </div>`;\n    };\n\n    const page_navigation = function(){\n        return `<div data-ax5grid-page-navigation=\"holder\">\n            {{#hasPage}}\n            <div data-ax5grid-page-navigation=\"cell\">    \n                {{#firstIcon}}<button type=\"button\" data-ax5grid-page-move=\"first\">{{{firstIcon}}}</button>{{/firstIcon}}\n                <button type=\"button\" data-ax5grid-page-move=\"prev\">{{{prevIcon}}}</button>\n            </div>\n            <div data-ax5grid-page-navigation=\"cell-paging\">\n                {{#@paging}}\n                <button type=\"button\" data-ax5grid-page-move=\"{{pageNo}}\" data-ax5grid-page-selected=\"{{selected}}\">{{pageNo}}</button>\n                {{/@paging}}\n            </div>\n            <div data-ax5grid-page-navigation=\"cell\">\n                <button type=\"button\" data-ax5grid-page-move=\"next\">{{{nextIcon}}}</button>\n                {{#lastIcon}}<button type=\"button\" data-ax5grid-page-move=\"last\">{{{lastIcon}}}</button>{{/lastIcon}}\n            </div>\n            {{/hasPage}}\n        </div>`;\n    };\n\n    const page_status = function(){\n        return `<span>{{{progress}}} {{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>`;\n    };\n\n    GRID.tmpl = {\n        \"main\": main,\n        \"page_navigation\": page_navigation,\n        \"page_status\": page_status,\n\n        get: function (tmplName, data, columnKeys) {\n            let template = GRID.tmpl[tmplName].call(this, columnKeys);\n            ax5.mustache.parse(template);\n            return ax5.mustache.render(template, data);\n        }\n    };\n\n\n})();","// ax5.ui.grid.util\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    /**\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\n     * @param _table\n     * @param _frozenColumnIndex\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\n     */\n    const divideTableByFrozenColumnIndex = function (_table, _frozenColumnIndex) {\n\n        let tempTable_l = {rows: []},\n            tempTable_r = {rows: []};\n\n        for (let r = 0, rl = _table.rows.length; r < rl; r++) {\n            let row = _table.rows[r];\n\n            tempTable_l.rows[r] = {cols: []};\n            tempTable_r.rows[r] = {cols: []};\n\n            for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                let col = jQuery.extend({}, row.cols[c]),\n                    colStartIndex = col.colIndex,\n                    colEndIndex = col.colIndex + col.colspan;\n\n                if (colStartIndex < _frozenColumnIndex) {\n                    if (colEndIndex <= _frozenColumnIndex) {\n                        // 좌측편에 변형없이 추가\n                        tempTable_l.rows[r].cols.push(col);\n                    } else {\n                        let leftCol = jQuery.extend({}, col),\n                            rightCol = jQuery.extend({}, leftCol);\n\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\n                        rightCol.colIndex = _frozenColumnIndex;\n                        rightCol.colspan = col.colspan - leftCol.colspan;\n\n                        tempTable_l.rows[r].cols.push(leftCol);\n                        if (rightCol.colspan) {\n                            tempTable_r.rows[r].cols.push(rightCol);\n                        }\n                    }\n                }\n                else {\n                    // 오른편\n                    tempTable_r.rows[r].cols.push(col);\n                }\n\n                col = null;\n                colStartIndex = null;\n                colEndIndex = null;\n            }\n\n            row = null;\n        }\n\n        return {\n            leftData: tempTable_l,\n            rightData: tempTable_r\n        }\n    };\n\n    const getTableByStartEndColumnIndex = function (_table, _startColumnIndex, _endColumnIndex) {\n\n        let tempTable = {rows: []};\n        for (let r = 0, rl = _table.rows.length; r < rl; r++) {\n            let row = _table.rows[r];\n\n            tempTable.rows[r] = {cols: []};\n            for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                let col = jQuery.extend({}, row.cols[c]),\n                    colStartIndex = col.colIndex, colEndIndex = col.colIndex + col.colspan;\n\n                if (_startColumnIndex <= colStartIndex || colEndIndex <= _endColumnIndex) {\n                    if (_startColumnIndex <= colStartIndex && colEndIndex <= _endColumnIndex) {\n                        // 변형없이 추가\n                        tempTable.rows[r].cols.push(col);\n                    }\n                    else if (_startColumnIndex > colStartIndex && colEndIndex > _startColumnIndex) {\n                        // 앞에서 걸친경우\n                        col.colspan = colEndIndex - _startColumnIndex;\n                        tempTable.rows[r].cols.push(col);\n                    }\n                    else if (colEndIndex > _endColumnIndex && colStartIndex <= _endColumnIndex) {\n                        tempTable.rows[r].cols.push(col);\n                    }\n                }\n            }\n        }\n\n        return tempTable;\n    };\n\n    const getMousePosition = function (e) {\n        let mouseObj,\n            originalEvent = (e.originalEvent) ? e.originalEvent : e;\n\n        mouseObj = ('changedTouches' in originalEvent && originalEvent.changedTouches) ? originalEvent.changedTouches[0] : originalEvent;\n        // clientX, Y 쓰면 스크롤에서 문제 발생\n        return {\n            clientX: mouseObj.pageX,\n            clientY: mouseObj.pageY\n        }\n    };\n\n    const ENM = {\n        \"mousedown\": (ax5.info.supportTouch) ? \"touchstart\" : \"mousedown\",\n        \"mousemove\": (ax5.info.supportTouch) ? \"touchmove\" : \"mousemove\",\n        \"mouseup\": (ax5.info.supportTouch) ? \"touchend\" : \"mouseup\"\n    };\n\n    const makeHeaderTable = function (_columns) {\n        let columns = U.deepCopy(_columns),\n            cfg = this.config,\n            table = {\n                rows: []\n            },\n            colIndex = 0,\n            maekRows = function (_columns, depth, parentField) {\n                var row = {cols: []};\n                var i = 0, l = _columns.length;\n\n                for (; i < l; i++) {\n                    var field = _columns[i];\n                    var colspan = 1;\n\n                    if (!field.hidden) {\n                        field.colspan = 1;\n                        field.rowspan = 1;\n\n                        field.rowIndex = depth;\n                        field.colIndex = (function () {\n                            if (!parentField) {\n                                return colIndex++;\n                            } else {\n                                colIndex = parentField.colIndex + i + 1;\n                                return parentField.colIndex + i;\n                            }\n                        })();\n\n                        row.cols.push(field);\n\n                        if ('columns' in field) {\n                            colspan = maekRows(field.columns, depth + 1, field);\n                        } else {\n                            field.width = ('width' in field) ? field.width : cfg.columnMinWidth;\n                        }\n                        field.colspan = colspan;\n                    } else {\n\n\n                    }\n                }\n\n                if (row.cols.length > 0) {\n                    if (!table.rows[depth]) {\n                        table.rows[depth] = {cols: []};\n                    }\n                    table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                    return (row.cols.length - 1) + colspan;\n                } else {\n                    return colspan;\n                }\n\n            };\n\n        maekRows(columns, 0);\n\n        // set rowspan\n        for (let r = 0, rl = table.rows.length; r < rl; r++) {\n            for (let c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\n                if (!('columns' in table.rows[r].cols[c])) {\n                    table.rows[r].cols[c].rowspan = rl - r;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    const makeBodyRowTable = function (_columns) {\n        let columns = U.deepCopy(_columns),\n            table = {\n                rows: []\n            },\n            colIndex = 0,\n            maekRows = function (_columns, depth, parentField) {\n                let row = {cols: []},\n                    i = 0,\n                    l = _columns.length,\n                    colspan = 1;\n\n                let selfMakeRow = function (__columns) {\n                    let i = 0, l = __columns.length;\n                    for (; i < l; i++) {\n                        let field = __columns[i],\n                            colspan = 1;\n\n                        if (!field.hidden) {\n\n                            if ('key' in field) {\n                                field.colspan = 1;\n                                field.rowspan = 1;\n\n                                field.rowIndex = depth;\n                                field.colIndex = (function () {\n                                    if (!parentField) {\n                                        return colIndex++;\n                                    } else {\n                                        colIndex = parentField.colIndex + i + 1;\n                                        return parentField.colIndex + i;\n                                    }\n                                })();\n\n                                row.cols.push(field);\n                                if ('columns' in field) {\n                                    colspan = maekRows(field.columns, depth + 1, field);\n                                }\n                                field.colspan = colspan;\n                            }\n                            else {\n                                if ('columns' in field) {\n                                    selfMakeRow(field.columns, depth);\n                                }\n                            }\n                        }\n                        else {\n\n                        }\n                    }\n                };\n\n                for (; i < l; i++) {\n                    let field = _columns[i];\n                    colspan = 1;\n\n                    if (!field.hidden) {\n\n                        if ('key' in field) {\n                            field.colspan = 1;\n                            field.rowspan = 1;\n\n                            field.rowIndex = depth;\n                            field.colIndex = (function () {\n                                if (!parentField) {\n                                    return colIndex++;\n                                } else {\n                                    colIndex = parentField.colIndex + i + 1;\n                                    return parentField.colIndex + i;\n                                }\n                            })();\n\n                            row.cols.push(field);\n                            if ('columns' in field) {\n                                colspan = maekRows(field.columns, depth + 1, field);\n                            }\n                            field.colspan = colspan;\n                        }\n                        else {\n                            if ('columns' in field) {\n                                selfMakeRow(field.columns, depth);\n                            }\n                        }\n                    }\n                    else {\n\n                    }\n\n                    field = null;\n                }\n\n                if (row.cols.length > 0) {\n                    if (!table.rows[depth]) {\n                        table.rows[depth] = {cols: []};\n                    }\n                    table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                    return (row.cols.length - 1) + colspan;\n                }\n                else {\n                    return colspan;\n                }\n            };\n\n        maekRows(columns, 0);\n\n        (function (table) {\n            // set rowspan\n            for (let r = 0, rl = table.rows.length; r < rl; r++) {\n                let row = table.rows[r];\n                for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                    let col = row.cols[c];\n                    if (!('columns' in col)) {\n                        col.rowspan = rl - r;\n                    }\n                    col = null;\n                }\n                row = null;\n            }\n        })(table);\n\n        return table;\n    };\n\n    const makeBodyRowMap = function (_table) {\n        let map = {};\n        _table.rows.forEach(function (row) {\n            row.cols.forEach(function (col) {\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\n            });\n        });\n        return map;\n    };\n\n    let makeFootSumTable = function (_footSumColumns) {\n        let table = {\n            rows: []\n        };\n\n        for (let r = 0, rl = _footSumColumns.length; r < rl; r++) {\n            let footSumRow = _footSumColumns[r],\n                addC = 0;\n\n            table.rows[r] = {cols: []};\n\n            for (let c = 0, cl = footSumRow.length; c < cl; c++) {\n                if (addC > this.colGroup.length) break;\n                let colspan = footSumRow[c].colspan || 1;\n                if (footSumRow[c].label || footSumRow[c].key) {\n                    table.rows[r].cols.push({\n                        colspan: colspan,\n                        rowspan: 1,\n                        colIndex: addC,\n                        columnAttr: \"sum\",\n                        align: footSumRow[c].align,\n                        label: footSumRow[c].label,\n                        key: footSumRow[c].key,\n                        collector: footSumRow[c].collector,\n                        formatter: footSumRow[c].formatter\n                    });\n                } else {\n                    table.rows[r].cols.push({\n                        colIndex: addC,\n                        colspan: colspan,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n                addC += colspan;\n                colspan = null;\n            }\n\n            if (addC < this.colGroup.length) {\n                for (let c = addC; c < this.colGroup.length; c++) {\n                    table.rows[r].cols.push({\n                        colIndex: (c),\n                        colspan: 1,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n            }\n            footSumRow = null;\n            addC = null;\n        }\n\n        return table;\n    };\n\n    const makeBodyGroupingTable = function (_bodyGroupingColumns) {\n        let table = {\n                rows: []\n            },\n            r = 0,\n            addC = 0;\n\n        table.rows[r] = {cols: []};\n        for (let c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {\n            if (addC > this.columns.length) break;\n            let colspan = _bodyGroupingColumns[c].colspan || 1;\n            if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {\n                table.rows[r].cols.push({\n                    colspan: colspan,\n                    rowspan: 1,\n                    rowIndex: 0,\n                    colIndex: addC,\n                    columnAttr: \"default\",\n                    align: _bodyGroupingColumns[c].align,\n                    label: _bodyGroupingColumns[c].label,\n                    key: _bodyGroupingColumns[c].key,\n                    collector: _bodyGroupingColumns[c].collector,\n                    formatter: _bodyGroupingColumns[c].formatter\n                });\n            } else {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: addC,\n                    colspan: colspan,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n            addC += colspan;\n        }\n\n        if (addC < this.colGroup.length) {\n            for (var c = addC; c < this.colGroup.length; c++) {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: (c),\n                    colspan: 1,\n                    rowspan: 1,\n                    label: \"&nbsp;\",\n                });\n            }\n        }\n\n        return table;\n    };\n\n    const findPanelByColumnIndex = function (_dindex, _colIndex, _rowIndex) {\n        let _containerPanelName,\n            _isScrollPanel = false,\n            _panels = [];\n\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\n        _panels.push(\"body\");\n\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\n            _containerPanelName = _panels.join(\"-\");\n            _panels.push(\"scroll\");\n            _isScrollPanel = true;\n        }\n\n        return {\n            panelName: _panels.join(\"-\"),\n            containerPanelName: _containerPanelName,\n            isScrollPanel: _isScrollPanel\n        }\n    };\n\n    const getRealPathForDataItem = function (_dataPath) {\n        let path = [],\n            _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\n\n        _path.forEach(function (n) {\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n        });\n        _path = null;\n        return path.join(\"\");\n    };\n\n\n    GRID.util = {\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\n        getTableByStartEndColumnIndex: getTableByStartEndColumnIndex,\n        getMousePosition: getMousePosition,\n        ENM: ENM,\n        makeHeaderTable: makeHeaderTable,\n        makeBodyRowTable: makeBodyRowTable,\n        makeBodyRowMap: makeBodyRowMap,\n        makeFootSumTable: makeFootSumTable,\n        makeBodyGroupingTable: makeBodyGroupingTable,\n        findPanelByColumnIndex: findPanelByColumnIndex,\n        getRealPathForDataItem: getRealPathForDataItem,\n    };\n\n})();"]}