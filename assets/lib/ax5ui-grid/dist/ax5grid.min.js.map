{"version":3,"sources":["ax5grid.js","ax5grid-body.js","ax5grid-collector.js","ax5grid-data.js","ax5grid-excel.js","ax5grid-formatter.js","ax5grid-header.js","ax5grid-inline-editor.js","ax5grid-page.js","ax5grid-scroller.js","ax5grid-tmpl.js","ax5grid-util.js"],"names":["UI","ax5","ui","U","util","GRID","addClass","className","self","this","cfg","ctrlKeys","33","34","35","36","37","38","39","40","instanceId","getGuid","config","theme","animateTime","debounceTime","appendDebouncer","appendDebounceTimes","appendProgressIcon","appendProgress","frozenColumnIndex","frozenRowIndex","showLineNumber","showRowSelector","multipleSelect","virtualScrollY","virtualScrollX","virtualScrollYCountMargin","virtualScrollAccelerated","height","columnMinWidth","lineNumberColumnWidth","rowSelectorColumnWidth","sortable","undefined","remoteSort","header","display","align","columnHeight","columnPadding","columnBorderWidth","body","grouping","mergeCells","rightSum","footSum","page","statusDisplay","navigationItemCount","scroller","size","barMinSize","trackPadding","columnKeys","selected","modified","deleted","disableSelection","tree","use","hashDigit","indentWidth","arrowWidth","iconWidth","icons","openedArrow","collapsedArrow","groupIcon","collapsedGroupIcon","itemIcon","parentKey","selfKey","collapse","hidden","parentHash","selfHash","children","depth","xvar","bodyTrHeight","scrollContentWidth","scrollContentHeight","scrollTimer","columns","colGroup","footSumColumns","bodyGrouping","list","proxyList","selectedDataIndexs","deletedList","sortInfo","focusedColumn","selectedColumn","isInlineEditing","inlineEditing","listIndexMap","gridContextMenu","headerTable","leftHeaderData","headerData","rightHeaderData","bodyRowTable","leftBodyRowData","bodyRowData","rightBodyRowData","bodyRowMap","bodyGroupingTable","leftBodyGroupingData","bodyGroupingData","rightBodyGroupingData","bodyGroupingMap","footSumTable","leftFootSumData","footSumData","needToPaintSum","initGrid","data","id","$target","html","tmpl","get","$","container","find","root","panel","aside-header","left-header","header-scroll","right-header","top-aside-body","top-left-body","top-body","top-body-scroll","top-right-body","aside-body","aside-body-scroll","left-body","left-body-scroll","body-scroll","right-body","right-body-scroll","bottom-aside-body","bottom-left-body","bottom-body","bottom-body-scroll","bottom-right-body","livePanelKeys","vertical","vertical-bar","horizontal","horizontal-bar","corner","navigation","status","form","clipboard","resizer","css","_height","initColumns","_columns","deepCopy","makeHeaderTable","call","makeBodyRowTable","makeBodyRowMap","rows","length","colGroupMap","r","rl","row","c","cl","cols","colIndex","jQuery","extend","k","push","onResetColumns","resetColGroupWidth","initFootSum","initBodyGroup","alignGrid","repaint","resize","CT_WIDTH","width","totalWidth","computedWidth","autoWidthColgroupIndexs","i","l","isNumber","_width","right","left","_footSum","isArray","makeFootSumTable","_grouping","by","makeBodyGroupingTable","kl","orderBy","seq","fixed","key","sort","sortFixed","_isFirst","Math","min","innerWidth","innerHeight","CT_HEIGHT","CT_INNER_WIDTH","CT_INNER_HEIGHT","asidePanelWidth","frozenPanelWidth","endIndex","verticalScrollerWidth","horizontalScrollerHeight","bodyHeight","rightPanelWidth","frozenRowHeight","footSumHeight","headerHeight","pageHeight","totalColGroupWidth","bodyWidth","panelDisplayProcess","vPosition","hPosition","containerType","isHide","hide","show","scrollerDisplayProcess","scrollerWidth","scrollerHeight","sortColumns","_sortInfo","isFunction","that","a","b","initData","clearGroupingData","resetLineNumber","init","_config","target","console","log","info","getError","onStateChanged","onClick","onLoad","onDataChanged","isObject","error","parseJson","attr","grid","window","bind","document","on","e","isPickerClick","findParentNode","_target","getAttribute","focused","blur","which","eventKeys","ESC","keyDown","originalEvent","RETURN","TAB","stopEvent","UP","shiftKey","DOWN","metaKey","ctrlKey","copySelect","SPACE","Object","keys","setTimeout","processor","KEY_UP","moveFocus","KEY_DOWN","KEY_LEFT","KEY_RIGHT","KEY_HOME","KEY_END","INLINE_EDIT","_e","inlineEdit","active","test","keydown","activeEditLength","columnKey","_act","_data","copysuccess","$clipBoard","copyTextArray","copyText","_rowIndex","_colIndex","_dindex","_di","_column","dindex","rowIndex","originalColumn","__isGrouping","forEach","join","innerText","select","execCommand","setData","isFirstPaint","paintStartRowIndex","set","navigationUpdate","scrollTo","top","getList","_type","setHeight","offsetParent","addRow","_row","_options","add","focus","appendToList","_list","append","removeRow","remove","updateRow","update","repaintRow","updateChildRows","_updateData","updateChild","paintStartColumnIndex","deleteRow","setValue","_key","_value","repaintCell","_panelName","_rows","__dindex","__key","__value","addColumn","first","concat","last","_cindex","_i","_l","splice","removeColumn","updateColumn","setColumnWidth","columnResizerIndex","getColumnSortInfo","setColumnSort","applySortStatus","_selectObject","selectedClear","clearSelect","updateRowState","clickBody","click","DBLClickBody","dblClick","selectAll","updateRowStateAll","exportExcel","_fileName","table","getExcelString","excel","export","_pos","selectedIndex","HOME","END","destroy","empty","grid_instance","filter","main","arguments","setConfig","apply","columnSelect","focusClear","panelName","removeAttr","clear","column","editKey","colspan","selectedRange","start","end","deActive","trl","range","s","max","_panels","columnSelector","cell","Number","off","_states","si","cellChecked","checked","_state","col","targetClick","default","item","value","editor","type","getValue","newValue","trueValue","falseValue","editorConfig","rowSelector","internalCall","lineNumber","tree-control","_el","toggleCollapse","targetDBLClick","onDBLClick","contextMenu","param","t","menu","element","popup","popupFilter","touchmoved","resetFrozenColumn","paintRowCountMargin","paintRowCountTopMargin","floor","dividedBodyRowObj","divideTableByFrozenColumnIndex","asideBodyRowData","dataTable","label","rowspan","_col","columnAttr","leftData","rightData","dividedBodyGroupingObj","asideBodyGroupingData","dividedFootSumObj","getFieldValue","_item","_index","_returnPlainText","tagsToReplace","<",">","_editor","inlineEditor","editMode","__origin_index__","disabled","getHtml","valueProcessor","formatter","returnValue","replace","tag","treeControl","indentNodeHtml","getGroupingValue","_label","__groupingList","groupBy","__groupingBy","collector","getSumFieldValue","_reset","virtualPaintStartRowIndex","position","isNaN","paintEndColumnIndex","nopaintLeftColumnsWidth","nopaintRightColumnsWidth","bodyScrollLeft","ci","_sx","_ex","padding-left","padding-right","headerColGroup","bodyAlign","paintRowCount","virtualPaintRowCount","ceil","abs","dataRowCount","getTableByStartEndColumnIndex","repaintBody","_elTargetKey","_colGroup","_bodyRow","_groupRow","_scrollConfig","_elTarget","SS","cgi","cgl","di","dl","tri","cellHeight","colAlign","isScrolled","len","isGroupingRow","rowTable","odi","_focusedColumn","_selectedColumn","attrs","tdCSS_class","styleClass","index","_cellHeight","lineHeight","multiLine","innerHTML","repaintSum","isFootSum","mergeCellsBody","tblRowMaps","token","hasMergeTd","tableTrs","ri","tableTrTds","trMaps","childNodes","tdObj","text","_loop","prevTokenColIndexs","_loop2","search","hasFalse","ti","scrollConfig","asideColGroup","slice","leftHeaderColGroup","statusUpdate","_newValue","updateCell","updateWith","updateColumnKey","findPanelByColumnIndex","updateWithCell","replaceGroupTr","replaceTr","noRepaint","_position","UD","_dy","moveResult","while_i","nPanelInfo","LR","_dx","isScrollPanel","containerPanelName","isScrollTo","scrollLeft","$column","newLeft","outerWidth","INDEX","LEFT","RIGHT","_initValue","useReturnToSave","originalValue","initValue","__editor","isNothing","number","money","$inlineEditorCell","$inlineEditor","_msg","editorValue","tagName","val","action","CANCEL","__clear","bindedAx5ui","ax5picker","ax5select","getBody","getSum","po","_collapse","getProxyList","sum","avg","listLength","round","returnList","appendIndex","dataRealRowCount","groupingKeys","map","compareString","gi","gl","appendRow","ari","appendRowItem","labels","ki","arrangeData4tree","li","setDigit","_parent","_parentHash","treeKeys","substr","ii","originIndex","_k","Function","getRealPathForDataItem","_selected","sortInfoArray","getKeyValue","order","_a_val","_b_val","_a","_b","_typeof","_callback","appendIdle","clearTimeout","base64","btoa","unescape","encodeURIComponent","uri","getExcelTmpl","tableToExcel","fileName","output","tables","mustache","render","worksheet","arr","name","isChrome","navigator","userAgent","indexOf","isSafari","isIE","documentMode","blob1","blankWindow","$iframe","iframe","anchor","msSaveOrOpenBlob","Blob","open","write","close","appendChild","createElement","download","href","removeChild","columnResizerEvent","_columnResizer","$columnResizer","columnResizerPositionLeft","offset","gridTargetOffsetLeft","resizeRange","ENM","mouseObj","getMousePosition","__da","clientX","mousePosition","columnResizerLived","removeClass","unbind","toggleSort","dividedHeaderObj","asideHeaderData","headerAlign","repaintHeader","tableWidth","trCSS_class","headerStyleClass","_SS","enableFilter","resizerHeight","resizerLeft","AS","sortOrder","multiSort","getHeader","edit_text","_root","_columnKey","_$parent","$el","bindUI","_$el","edit_money","ax5formatter","pattern","edit_number","edit_date","direction","content","state","activePicker","edit_select","eConfig","optionValue","optionText","optionSelected","options","n","activeSelectOptionGroup","edit_checkbox","marginTop","edit_textarea","_getHtml","_bindUI","box","editorHeight","buttonHeight","$newDiv","$newTextarea","date","checkbox","textarea","onclickPageMove","callback","_pageNo","currentPage","selectPage","onChange","prev","pageNo","next","totalPages","hasPage","pageSize","totalElements","firstIcon","prevIcon","nextIcon","lastIcon","returns","startI","endI","p","fromRowIndex","toRowIndex","progress","convertScrollPosition","_var","_content_height","_panel_height","_scroller_height","_vertical_scroller_height","verticalScrollBarHeight","_content_width","_panel_width","_scroller_width","_horizontal_scroller_width","horizontalScrollBarWidth","convertScrollBarPosition","_top","scrollPositon","_left","scrollBarMover","track","bar","Date","getTime","moveout_timer","trackOffset","barBox","outerHeight","trackBox","getScrollerPosition","newTop","clientY","barOffset","scrollContentMover","wheel","delta","_body_scroll_position","_top_is_end","_left_is_end","x","y","getContentPosition","__x_da","__y_da","margin","E","detail","deltaY","wheelDelta","deltaX","supportTouch","page_navigation","page_status","tmplName","_table","_frozenColumnIndex","tempTable_l","tempTable_r","colStartIndex","colEndIndex","leftCol","rightCol","_startColumnIndex","_endColumnIndex","tempTable","changedTouches","pageX","pageY","mousedown","mousemove","mouseup","maekRows","parentField","field","selfMakeRow","__columns","_footSumColumns","footSumRow","addC","_bodyGroupingColumns","_containerPanelName","_isScrollPanel","_dataPath","path","_path","split"],"mappings":"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","file":"ax5grid.min.js","sourcesContent":["/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid\n(function () {\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n    let GRID;\n\n    UI.addClass({\n        className: \"grid\"\n    }, (function () {\n        /**\n         * @class ax5grid\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```\n         * var myGrid = new ax5.ui.grid();\n         * ```\n         */\n        return function () {\n            let self = this,\n                cfg,\n                ctrlKeys = {\n                    \"33\": \"KEY_PAGEUP\",\n                    \"34\": \"KEY_PAGEDOWN\",\n                    \"35\": \"KEY_END\",\n                    \"36\": \"KEY_HOME\",\n                    \"37\": \"KEY_LEFT\",\n                    \"38\": \"KEY_UP\",\n                    \"39\": \"KEY_RIGHT\",\n                    \"40\": \"KEY_DOWN\"\n                };\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                debounceTime: 250,\n                appendDebouncer: null,\n                appendDebounceTimes: 0,\n                appendProgressIcon: '...',\n                appendProgress: false,\n\n                // 틀고정 속성\n                frozenColumnIndex: 0,\n                frozenRowIndex: 0,\n                showLineNumber: false,\n                showRowSelector: false,\n                multipleSelect: true,\n                virtualScrollY: true,\n                virtualScrollX: true,\n                virtualScrollYCountMargin: 0,\n                virtualScrollAccelerated: false,\n                height: 0,\n                columnMinWidth: 100,\n                lineNumberColumnWidth: 30,\n                rowSelectorColumnWidth: 26,\n                sortable: undefined,\n                remoteSort: false,\n\n                header: {\n                    display: true,\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1\n                },\n                body: {\n                    align: false,\n                    columnHeight: 26,\n                    columnPadding: 3,\n                    columnBorderWidth: 1,\n                    grouping: false,\n                    mergeCells: false\n                },\n                rightSum: false,\n                footSum: false,\n                page: {\n                    height: 25,\n                    display: true,\n                    statusDisplay: true,\n                    navigationItemCount: 5\n                },\n                scroller: {\n                    size: 15,\n                    barMinSize: 15,\n                    trackPadding: 4\n                },\n                columnKeys: {\n                    selected: '__selected__',\n                    modified: '__modified__',\n                    deleted: '__deleted__',\n                    disableSelection: '__disable_selection__'\n                },\n                tree: {\n                    use: false,\n                    hashDigit: 8,\n                    indentWidth: 10,\n                    arrowWidth: 15,\n                    iconWidth: 18,\n                    icons: {\n                        openedArrow: '▾',\n                        collapsedArrow: '▸',\n                        groupIcon: '⊚',\n                        collapsedGroupIcon: '⊚',\n                        itemIcon: '⊙'\n                    },\n                    columnKeys: {\n                        parentKey: \"pid\",\n                        selfKey: \"id\",\n                        collapse: \"collapse\",\n                        hidden: \"hidden\",\n                        parentHash: \"__hp__\",\n                        selfHash: \"__hs__\",\n                        children: \"__children__\",\n                        depth: \"__depth__\",\n                    }\n                }\n            };\n            this.xvar = {\n                bodyTrHeight: 0, // 한줄의 높이\n                scrollContentWidth: 0, // 스크롤 될 내용물의 너비 (스크롤 될 내용물 : panel['body-scroll'] 안에 컬럼이 있는)\n                scrollContentHeight: 0, // 스크롤 된 내용물의 높이\n                scrollTimer: null\n            };\n\n            // 그리드 데이터셋\n            this.columns = []; // config.columns에서 복제된 오브젝트\n            this.colGroup = []; // columns를 table태그로 출력하기 좋게 변환한 오브젝트\n            this.footSumColumns = [];\n            this.bodyGrouping = {};\n\n            this.list = []; // 그리드의 데이터\n            this.proxyList = null; // 그리드 데이터의 대리자\n            this.page = {}; // 그리드의 페이지 정보\n            this.selectedDataIndexs = [];\n            this.deletedList = [];\n            this.sortInfo = {}; // 그리드의 헤더 정렬 정보\n            this.focusedColumn = {}; // 그리드 바디의 포커스된 셀 정보\n            this.selectedColumn = {}; // 그리드 바디의 선택된 셀 정보\n            this.isInlineEditing = false;\n            this.inlineEditing = {};\n            this.listIndexMap = {}; // tree데이터 사용시 데이터 인덱싱 맵\n            this.gridContextMenu = null; // contentMenu 의 인스턴스\n\n            // header\n            this.headerTable = {};\n            this.leftHeaderData = {};\n            this.headerData = {};\n            this.rightHeaderData = {};\n\n            // body\n            this.bodyRowTable = {};\n            this.leftBodyRowData = {};\n            this.bodyRowData = {};\n            this.rightBodyRowData = {};\n            this.bodyRowMap = {};\n\n            this.bodyGroupingTable = {};\n            this.leftBodyGroupingData = {};\n            this.bodyGroupingData = {};\n            this.rightBodyGroupingData = {};\n            this.bodyGroupingMap = {};\n\n            // footSum\n            this.footSumTable = {}; // footSum의 출력레이아웃\n            this.leftFootSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 왼쪽\n            this.footSumData = {}; // frozenColumnIndex 를 기준으로 나누어진 출력 레이아웃 오른쪽\n            this.needToPaintSum = true; // 데이터 셋이 변경되어 summary 변경 필요여부\n\n            cfg = this.config;\n\n            const initGrid = function () {\n                // 그리드 템플릿에 전달하고자 하는 데이터를 정리합시다.\n\n                let data = {\n                    instanceId: this.id\n                };\n\n                this.$target.html(GRID.tmpl.get(\"main\", data));\n\n                // 그리드 패널 프레임의 각 엘리먼트를 캐쉬합시다.\n                this.$ = {\n                    \"container\": {\n                        \"hidden\": this.$target.find('[data-ax5grid-container=\"hidden\"]'),\n                        \"root\": this.$target.find('[data-ax5grid-container=\"root\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-container=\"header\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-container=\"body\"]'),\n                        \"page\": this.$target.find('[data-ax5grid-container=\"page\"]'),\n                        \"scroller\": this.$target.find('[data-ax5grid-container=\"scroller\"]')\n                    },\n                    \"panel\": {\n                        \"aside-header\": this.$target.find('[data-ax5grid-panel=\"aside-header\"]'),\n                        \"left-header\": this.$target.find('[data-ax5grid-panel=\"left-header\"]'),\n                        \"header\": this.$target.find('[data-ax5grid-panel=\"header\"]'),\n                        \"header-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"header\"]'),\n                        \"right-header\": this.$target.find('[data-ax5grid-panel=\"right-header\"]'),\n                        \"top-aside-body\": this.$target.find('[data-ax5grid-panel=\"top-aside-body\"]'),\n                        \"top-left-body\": this.$target.find('[data-ax5grid-panel=\"top-left-body\"]'),\n                        \"top-body\": this.$target.find('[data-ax5grid-panel=\"top-body\"]'),\n                        \"top-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"top-body\"]'),\n                        \"top-right-body\": this.$target.find('[data-ax5grid-panel=\"top-right-body\"]'),\n                        \"aside-body\": this.$target.find('[data-ax5grid-panel=\"aside-body\"]'),\n                        \"aside-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"aside-body\"]'),\n                        \"left-body\": this.$target.find('[data-ax5grid-panel=\"left-body\"]'),\n                        \"left-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"left-body\"]'),\n                        \"body\": this.$target.find('[data-ax5grid-panel=\"body\"]'),\n                        \"body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"body\"]'),\n                        \"right-body\": this.$target.find('[data-ax5grid-panel=\"right-body\"]'),\n                        \"right-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"right-body\"]'),\n                        \"bottom-aside-body\": this.$target.find('[data-ax5grid-panel=\"bottom-aside-body\"]'),\n                        \"bottom-left-body\": this.$target.find('[data-ax5grid-panel=\"bottom-left-body\"]'),\n                        \"bottom-body\": this.$target.find('[data-ax5grid-panel=\"bottom-body\"]'),\n                        \"bottom-body-scroll\": this.$target.find('[data-ax5grid-panel-scroll=\"bottom-body\"]'),\n                        \"bottom-right-body\": this.$target.find('[data-ax5grid-panel=\"bottom-right-body\"]')\n                    },\n                    \"livePanelKeys\": [], // 현재 사용중인 패널들 (grid-body repaint에서 수집하여 처리)\n                    \"scroller\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-scroller=\"vertical\"]'),\n                        \"vertical-bar\": this.$target.find('[data-ax5grid-scroller=\"vertical-bar\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-scroller=\"horizontal\"]'),\n                        \"horizontal-bar\": this.$target.find('[data-ax5grid-scroller=\"horizontal-bar\"]'),\n                        \"corner\": this.$target.find('[data-ax5grid-scroller=\"corner\"]')\n                    },\n                    \"page\": {\n                        \"navigation\": this.$target.find('[data-ax5grid-page=\"navigation\"]'),\n                        \"status\": this.$target.find('[data-ax5grid-page=\"status\"]')\n                    },\n                    \"form\": {\n                        \"clipboard\": this.$target.find('[data-ax5grid-form=\"clipboard\"]')\n                    },\n                    \"resizer\": {\n                        \"vertical\": this.$target.find('[data-ax5grid-resizer=\"vertical\"]'),\n                        \"horizontal\": this.$target.find('[data-ax5grid-resizer=\"horizontal\"]')\n                    }\n                };\n\n                this.$[\"container\"][\"root\"].css({height: this.config.height || this.config._height});\n\n                return this;\n            };\n            const initColumns = function (_columns) {\n                this.columns = U.deepCopy(_columns);\n                this.headerTable = GRID.util.makeHeaderTable.call(this, this.columns);\n                this.xvar.frozenColumnIndex = cfg.frozenColumnIndex || 0;\n\n                this.bodyRowTable = GRID.util.makeBodyRowTable.call(this, this.columns);\n                this.bodyRowMap = GRID.util.makeBodyRowMap.call(this, this.bodyRowTable);\n                // 바디에 표현될 한줄의 높이를 계산합니다.\n                this.xvar.bodyTrHeight = this.bodyRowTable.rows.length * this.config.body.columnHeight;\n\n                let colGroupMap = {};\n                for (let r = 0, rl = this.headerTable.rows.length; r < rl; r++) {\n                    let row = this.headerTable.rows[r];\n                    for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                        colGroupMap[row.cols[c].colIndex] = jQuery.extend({}, row.cols[c]);\n                    }\n                }\n\n                this.colGroup = [];\n                for (var k in colGroupMap) {\n                    this.colGroup.push(colGroupMap[k]);\n                }\n\n                return this;\n            };\n            const onResetColumns = function () {\n                initColumns.call(this, this.config.columns);\n                resetColGroupWidth.call(this);\n                if (this.config.footSum) {\n                    initFootSum.call(this, this.config.footSum);\n                    this.needToPaintSum = true;\n                }\n                if (this.config.body.grouping) initBodyGroup.call(this, this.config.body.grouping);\n                alignGrid.call(this, true);\n                GRID.header.repaint.call(this, true);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n            };\n            const resetColGroupWidth = function () {\n                /// !! 그리드 target의 크기가 변경되면 이 함수를 호출하려 this.colGroup의 _width 값을 재 계산 하여야 함. [tom]\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width() - (function () {\n                            let width = 0;\n                            if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                            if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                            width += cfg.scroller.size;\n                            return width;\n                        })(),\n                    totalWidth = 0, computedWidth, autoWidthColgroupIndexs = [],\n                    colGroup = this.colGroup,\n                    i, l;\n\n                for (i = 0, l = colGroup.length; i < l; i++) {\n                    if (U.isNumber(colGroup[i].width)) {\n                        totalWidth += colGroup[i]._width = colGroup[i].width;\n                    } else if (colGroup[i].width === \"*\") {\n                        autoWidthColgroupIndexs.push(i);\n                    } else if (U.right(colGroup[i].width, 1) === \"%\") {\n                        totalWidth += colGroup[i]._width = CT_WIDTH * U.left(colGroup[i].width, \"%\") / 100;\n                    }\n                }\n                if (autoWidthColgroupIndexs.length > 0) {\n                    computedWidth = (CT_WIDTH - totalWidth) / autoWidthColgroupIndexs.length;\n                    for (i = 0, l = autoWidthColgroupIndexs.length; i < l; i++) {\n                        colGroup[autoWidthColgroupIndexs[i]]._width = computedWidth;\n                    }\n                }\n            };\n            const initFootSum = function (_footSum) {\n                if (U.isArray(_footSum)) {\n                    this.footSumTable = GRID.util.makeFootSumTable.call(this, this.footSumColumns = _footSum);\n                } else {\n                    this.footSumColumns = [];\n                    this.footSumTable = {};\n                }\n            };\n            const initBodyGroup = function (_grouping) {\n                let grouping = jQuery.extend({}, _grouping);\n                if (\"by\" in grouping && \"columns\" in grouping) {\n                    this.bodyGrouping = {\n                        by: grouping.by,\n                        columns: grouping.columns\n                    };\n                    this.bodyGroupingTable = GRID.util.makeBodyGroupingTable.call(this, this.bodyGrouping.columns);\n                    this.sortInfo = (function () {\n                        let sortInfo = {};\n                        for (let k = 0, kl = this.bodyGrouping.by.length; k < kl; k++) {\n                            sortInfo[this.bodyGrouping.by[k]] = {\n                                orderBy: \"asc\",\n                                seq: k,\n                                fixed: true\n                            };\n                            for (let c = 0, cl = this.colGroup.length; c < cl; c++) {\n                                if (this.colGroup[c].key === this.bodyGrouping.by[k]) {\n                                    this.colGroup[c].sort = \"asc\";\n                                    this.colGroup[c].sortFixed = true;\n                                }\n                            }\n                        }\n                        return sortInfo;\n                    }).call(this);\n                } else {\n                    cfg.body.grouping = false;\n                }\n            };\n            const alignGrid = function (_isFirst) {\n                // 대상이 크기가 컬럼의 최소 크기 보다 작업 금지\n                if (Math.min(this.$target.innerWidth(), this.$target.innerHeight()) < 5) {\n                    return false;\n                }\n\n                if (!this.config.height) {\n                    this.$[\"container\"][\"root\"].css({height: this.config._height = this.$target.height()});\n                }\n\n                let CT_WIDTH = this.$[\"container\"][\"root\"].width(),\n                    CT_HEIGHT = this.$[\"container\"][\"root\"].height(),\n                    CT_INNER_WIDTH = CT_WIDTH,\n                    CT_INNER_HEIGHT = CT_HEIGHT,\n                    asidePanelWidth = cfg.asidePanelWidth = (function () {\n                        let width = 0;\n                        if (cfg.showLineNumber) width += cfg.lineNumberColumnWidth;\n                        if (cfg.showRowSelector) width += cfg.rowSelectorColumnWidth;\n                        return width;\n                    })(),\n                    frozenPanelWidth = cfg.frozenPanelWidth = (function (colGroup, endIndex) {\n                        let width = 0;\n                        for (let i = 0, l = endIndex; i < l; i++) {\n                            width += colGroup[i]._width;\n                        }\n                        return width;\n                    })(this.colGroup, cfg.frozenColumnIndex),\n                    verticalScrollerWidth, horizontalScrollerHeight, bodyHeight;\n\n                // todo : 우측 함계컬럼 너비 계산\n                let rightPanelWidth = 0,\n                    frozenRowHeight = (function (bodyTrHeight) {\n                        return cfg.frozenRowIndex * bodyTrHeight;\n                    })(this.xvar.bodyTrHeight),\n                    footSumHeight = (function (bodyTrHeight) {\n                        return this.footSumColumns.length * bodyTrHeight;\n                    }).call(this, this.xvar.bodyTrHeight),\n                    headerHeight = (cfg.header.display) ? this.headerTable.rows.length * cfg.header.columnHeight : 0,\n                    pageHeight = (cfg.page.display) ? cfg.page.height : 0;\n\n                (function () {\n                    verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    // 남은 너비가 colGroup의 너비보다 넓을때. 수평 스크롤 활성화.\n                    horizontalScrollerHeight = (function () {\n                        let totalColGroupWidth = 0;\n                        // aside 빼고 너비\n                        // 수직 스크롤이 있으면 또 빼고 비교\n                        let bodyWidth = CT_WIDTH - asidePanelWidth - verticalScrollerWidth;\n                        for (let i = 0, l = this.colGroup.length; i < l; i++) {\n                            totalColGroupWidth += this.colGroup[i]._width;\n                        }\n                        return (totalColGroupWidth > bodyWidth) ? this.config.scroller.size : 0;\n                    }).call(this);\n\n                    if (horizontalScrollerHeight > 0) {\n                        verticalScrollerWidth = ((CT_HEIGHT - headerHeight - pageHeight - footSumHeight - horizontalScrollerHeight) < this.list.length * this.xvar.bodyTrHeight) ? this.config.scroller.size : 0;\n                    }\n                }).call(this);\n\n                // 수평 너비 결정\n                CT_INNER_WIDTH = CT_WIDTH - verticalScrollerWidth;\n                // 수직 스크롤러의 높이 결정.\n                CT_INNER_HEIGHT = CT_HEIGHT - pageHeight - horizontalScrollerHeight;\n\n                bodyHeight = CT_INNER_HEIGHT - headerHeight;\n\n                let panelDisplayProcess = function (panel, vPosition, hPosition, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (hPosition) {\n                        case \"aside\":\n                            if (asidePanelWidth === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = 0;\n                                css[\"width\"] = asidePanelWidth;\n                            }\n                            break;\n                        case \"left\":\n                            if (cfg.frozenColumnIndex === 0) {\n                                isHide = true;\n                            } else {\n                                css[\"left\"] = asidePanelWidth;\n                                css[\"width\"] = frozenPanelWidth;\n                            }\n                            break;\n                        case \"right\":\n                            if (!cfg.rightSum) {\n                                isHide = true;\n                            } else {\n\n                            }\n                            break;\n                        default:\n                            if (containerType !== \"page\") {\n                                if (cfg.frozenColumnIndex === 0) {\n                                    css[\"left\"] = asidePanelWidth;\n                                } else {\n                                    css[\"left\"] = frozenPanelWidth + asidePanelWidth;\n                                }\n                                css[\"width\"] = CT_INNER_WIDTH - asidePanelWidth - frozenPanelWidth - rightPanelWidth;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    if (containerType === \"body\") {\n                        switch (vPosition) {\n                            case \"top\":\n                                if (cfg.frozenRowIndex == 0) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = 0;\n                                    css[\"height\"] = frozenRowHeight;\n                                }\n                                break;\n                            case \"bottom\":\n                                if (!cfg.footSum) {\n                                    isHide = true;\n                                } else {\n                                    css[\"top\"] = bodyHeight - footSumHeight;\n                                    css[\"height\"] = footSumHeight; // footSum height\n                                }\n                                break;\n                            default:\n                                css[\"top\"] = frozenRowHeight;\n                                css[\"height\"] = bodyHeight - frozenRowHeight - footSumHeight;\n\n                                break;\n                        }\n                    } else if (containerType === \"header\") {\n                        css[\"height\"] = headerHeight;\n                    } else if (containerType === \"page\") {\n                        if (pageHeight == 0) {\n                            isHide = true;\n                        } else {\n                            css[\"height\"] = pageHeight;\n\n                        }\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                    return this;\n                };\n                let scrollerDisplayProcess = function (panel, scrollerWidth, scrollerHeight, containerType) {\n                    let css = {},\n                        isHide = false;\n\n                    switch (containerType) {\n                        case \"vertical\":\n                            if (scrollerWidth > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = CT_INNER_HEIGHT;\n                                css[\"bottom\"] = scrollerHeight + pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"horizontal\":\n                            if (scrollerHeight > 0) {\n                                css[\"width\"] = CT_INNER_WIDTH;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"right\"] = scrollerWidth;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                        case \"corner\":\n                            if (scrollerWidth > 0 && scrollerHeight > 0) {\n                                css[\"width\"] = scrollerWidth;\n                                css[\"height\"] = scrollerHeight;\n                                css[\"bottom\"] = pageHeight;\n                            } else {\n                                isHide = true;\n                            }\n                            break;\n                    }\n\n                    if (isHide) {\n                        panel.hide();\n                        // 프로세스 중지\n                        return this;\n                    }\n\n                    panel.show().css(css);\n                };\n\n                this.$[\"container\"][\"header\"].css({height: headerHeight});\n                this.$[\"container\"][\"body\"].css({height: bodyHeight});\n\n                // 각 패널들의 크기 표시여부를 결정합니다\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-header\"], \"\", \"aside\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-header\"], \"\", \"left\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"header\"], \"\", \"\", \"header\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-header\"], \"\", \"right\", \"header\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-aside-body\"], \"top\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-left-body\"], \"top\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-body\"], \"top\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"top-right-body\"], \"top\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"aside-body\"], \"\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"left-body\"], \"\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"body\"], \"\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"right-body\"], \"\", \"right\", \"body\");\n\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-aside-body\"], \"bottom\", \"aside\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-left-body\"], \"bottom\", \"left\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-body\"], \"bottom\", \"\", \"body\");\n                panelDisplayProcess.call(this, this.$[\"panel\"][\"bottom-right-body\"], \"bottom\", \"right\", \"body\");\n\n\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"vertical\"], verticalScrollerWidth, horizontalScrollerHeight, \"vertical\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"horizontal\"], verticalScrollerWidth, horizontalScrollerHeight, \"horizontal\");\n                scrollerDisplayProcess.call(this, this.$[\"scroller\"][\"corner\"], verticalScrollerWidth, horizontalScrollerHeight, \"corner\");\n\n                panelDisplayProcess.call(this, this.$[\"container\"][\"page\"], \"\", \"\", \"page\");\n\n                // 각 패널의 사이즈 결정\n                /// 다른 패널의 사이즈 정보가 필요한 경우 여기서 정의해주고 사용함.\n                this.xvar.bodyHeight = this.$.panel[\"body\"].height();\n                this.xvar.bodyWidth = this.$.panel[\"body\"].width();\n                // scrollContentWidth 는 grid-header repaint에서 결정합니다. 까먹지 맙시다. > this.xvar.scrollContentWidth\n\n                return true;\n            };\n            const sortColumns = function (_sortInfo) {\n                GRID.header.repaint.call(this);\n\n                if (U.isFunction(this.config.remoteSort)) {\n                    let that = {sortInfo: []};\n                    for (let k in _sortInfo) {\n                        that.sortInfo.push({\n                            key: k,\n                            orderBy: _sortInfo[k].orderBy,\n                            seq: _sortInfo[k].seq\n                        });\n                    }\n                    that.sortInfo.sort(function (a, b) {\n                        return a.seq > b.seq;\n                    });\n                    this.config.remoteSort.call(that, that);\n                } else {\n                    if (this.config.body.grouping) {\n                        this.list = GRID.data.initData.call(this,\n                            GRID.data.sort.call(this,\n                                _sortInfo,\n                                GRID.data.clearGroupingData.call(this,\n                                    this.list\n                                )\n                            )\n                        );\n                    }\n                    else {\n                        this.list = GRID.data.sort.call(this, _sortInfo,\n                            GRID.data.clearGroupingData.call(this,\n                                this.list\n                            ),\n                            {resetLineNumber: true}\n                        );\n                    }\n                    GRID.body.repaint.call(this, true);\n                    GRID.scroller.resize.call(this);\n                }\n            };\n            /// private end\n\n            /**\n            /**\n             * Preferences of grid UI\n             * @method ax5grid.setConfig\n             * @param {Object} _config - 클래스 속성값\n             * @param {Element} _config.target\n             * @param {Number} [_config.frozenColumnIndex=0]\n             * @param {Number} [_config.frozenRowIndex=0]\n             * @param {Boolean} [_config.showLineNumber=false]\n             * @param {Boolean} [_config.showRowSelector=false]\n             * @param {Boolean} [_config.multipleSelect=true]\n             * @param {Number} [_config.columnMinWidth=100]\n             * @param {Number} [_config.lineNumberColumnWidth=30]\n             * @param {Number} [_config.rowSelectorColumnWidth=25]\n             * @param {Boolean} [_config.sortable=false]\n             * @param {Boolean} [_config.multiSort=false]\n             * @param {Function} [_config.remoteSort=false]\n             * @param {Boolean} [_config.virtualScrollY=true] - 세로축 가상스크롤 처리여부\n             * @param {Boolean} [_config.virtualScrollX=true] - 가로축 가상스크롤 처리여부\n             * @param {Object} [_config.header]\n             * @param {String} [_config.header.align]\n             * @param {Number} [_config.header.columnHeight=25]\n             * @param {Number} [_config.header.columnPadding=3]\n             * @param {Number} [_config.header.columnBorderWidth=1]\n             * @param {Object} [_config.body]\n             * @param {Function} [_config.onClick]\n             * @param {Function} [_config.onDBLClick]\n             * @param {String|Array} [_config.body.mergeCells=false] -\n             * @param {String} [_config.body.align]\n             * @param {Number} [_config.body.columnHeight=25]\n             * @param {Number} [_config.body.columnPadding=3]\n             * @param {Number} [_config.body.columnBorderWidth=1]\n             * @param {Object} [_config.body.grouping]\n             * @param {Array} [_config.body.grouping.by] - list grouping keys\n             * @param {Array} [_config.body.grouping.columns] - list grouping columns\n             * @param {Object} [_config.page]\n             * @param {Number} [_config.page.height=25]\n             * @param {Boolean} [_config.page.display=true] - grid page display\n             * @param {Boolean} [_config.page.statusDisplay=true] - grid status display\n             * @param {Number} [_config.page.navigationItemCount=5]\n             * @param {Object} [_config.scroller]\n             * @param {Number} [_config.scroller.size=15]\n             * @param {Number} [_config.scroller.barMinSize=15]\n             * @param {Number} [_config.scroller.trackPadding=4]\n             * @param {Object} [_config.columnKeys]\n             * @param {String} [_config.columnKeys.selected=\"_SELECTED\"]\n             * @param {Object[]} _config.columns\n             * @param {String} _config.columns[].key\n             * @param {String} _config.columns[].label\n             * @param {Number} _config.columns[].width\n             * @param {(String|Function)} _config.columns[].styleClass\n             * @param {(String|Function)} _config.columns[].headerStyleClass\n             * @param {Boolean} _config.columns[].enableFilter\n             * @param {Boolean} _config.columns[].sortable\n             * @param {String} _config.columns[].align\n             * @param {(String|Function)} _config.columns[].formatter\n             * @param {Object} _config.columns[].editor\n             * @param {String} _config.columns[].editor.type - text,number,money,date\n             * @param {Object} _config.columns[].editor.config\n             * @param {Array} _config.columns[].editor.updateWith\n             * @param {Function} _config.columns[].editor.disabled - disable editor\n             * @param {Boolean} [_config.columns[].multiLine=false]\n             * @param {Object} [_config.tree]\n             * @param {Boolean} [_config.tree.use=false] - Whether tree-type data is used\n             * @param {Number} [_config.tree.hashDigit=8]\n             * @param {Number} [_config.tree.indentWidth=10]\n             * @param {Number} [_config.tree.arrowWidth=15]\n             * @param {Number} [_config.tree.iconWidth=18]\n             * @param {Object} [_config.tree.icons]\n             * @param {String} [_config.tree.icons.openedArrow='▾']\n             * @param {String} [_config.tree.icons.collapsedArrow='▸']\n             * @param {String} [_config.tree.icons.groupIcon='⊚']\n             * @param {String} [_config.tree.icons.collapsedGroupIcon='⊚']\n             * @param {String} [_config.tree.icons.itemIcon='⊙']\n             * @param {Object} [_config.tree.columnKeys]\n             * @param {String} [_config.tree.columnKeys.parentKey=\"pid\"]\n             * @param {String} [_config.tree.columnKeys.selfKey=\"id\"]\n             * @param {String} [_config.tree.columnKeys.collapse=\"collapse\"]\n             * @param {String} [_config.tree.columnKeys.hidden=\"hidden\"]\n             * @param {String} [_config.tree.columnKeys.parentHash=\"__hp__\"]\n             * @param {String} [_config.tree.columnKeys.selfHash=\"__hs__\"]\n             * @param {String} [_config.tree.columnKeys.children=\"__children__\"]\n             * @param {String} [_config.tree.columnKeys.depth=\"__depth__\"]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * var firstGrid = new ax5.ui.grid();\n             *\n             * ax5.ui.grid.formatter[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             * ax5.ui.grid.formatter[\"capital\"] = function(){\n             *     return (''+this.value).toUpperCase();\n             * };\n             *\n             * ax5.ui.grid.collector[\"myType\"] = function () {\n             *     return \"myType\" + (this.value || \"\");\n             * };\n             *\n             * var sampleData = [\n             *     {a: \"A\", b: \"A01\", price: 1000, amount: 12, cost: 12000, saleDt: \"2016-08-29\", customer: \"장기영\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1100, amount: 11, cost: 12100, saleDt: \"2016-08-28\", customer: \"장서우\", saleType: \"B\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"C01\", price: 1200, amount: 10, cost: 12000, saleDt: \"2016-08-27\", customer: \"이영희\", saleType: \"A\"},\n             *     {companyJson: {\"대표자명\":\"위세라\"}, a: \"A\", b: \"A01\", price: 1300, amount: 8, cost: 10400, saleDt: \"2016-08-25\", customer: \"황인서\", saleType: \"C\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"B01\", price: 1400, amount: 5, cost: 7000, saleDt: \"2016-08-29\", customer: \"황세진\", saleType: \"D\"},\n             *     {companyJson: {\"대표자명\":\"abcd\"}, a: \"A\", b: \"A01\", price: 1500, amount: 2, cost: 3000, saleDt: \"2016-08-26\", customer: \"이서연\", saleType: \"A\"}\n             * ];\n             *\n             * var gridView = {\n             *     initView: function () {\n             *         firstGrid.setConfig({\n             *             target: $('[data-ax5grid=\"first-grid\"]'),\n             *             columns: [\n             *                 {\n             *                     key: \"companyJson['대표자명']\",\n             *                     label: \"필드A\",\n             *                     width: 80,\n             *                     styleClass: function () {\n             *                         return \"ABC\";\n             *                     },\n             *                     enableFilter: true,\n             *                     align: \"center\",\n             *                     editor: {type:\"text\"}\n             *                 },\n             *                 {key: \"b\", label: \"필드B\", align: \"center\"},\n             *                 {\n             *                     key: undefined, label: \"필드C\", columns: [\n             *                         {key: \"price\", label: \"단가\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"amount\", label: \"수량\", formatter: \"money\", align: \"right\"},\n             *                         {key: \"cost\", label: \"금액\", align: \"right\", formatter: \"money\"}\n             *                     ]\n             *                 },\n             *                 {key: \"saleDt\", label: \"판매일자\", align: \"center\"},\n             *                 {key: \"customer\", label: \"고객명\"},\n             *                 {key: \"saleType\", label: \"판매타입\"}\n             *             ]\n             *         });\n             *         return this;\n             *     },\n             *     setData: function (_pageNo) {\n             *         firstGrid.setData(sampleData);\n             *         return this;\n             *     }\n             * };\n             *\n             * // onClick, onDBLClick, onDataChanged\n             * firstGrid.setConfig({\n             *      target: $('[data-ax5grid=\"first-grid\"]'),\n             *      columns: [...],\n             *      body: {\n             *          onClick: function(){\n             *              console.log(this);\n             *          },\n             *          onDBLClick: function(){\n             *              console.log(this);\n             *              // If the column does not have an editor attribute, an event is raised.\n             *          },\n             *          onDataChanged: function(){\n             *              console.log(this);\n             *              // If change Data\n             *          }\n             *      }\n             * });\n             * ```\n             */\n            this.init = function (_config) {\n                cfg = jQuery.extend(true, {}, cfg, _config);\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5grid\", \"401\", \"init\"));\n                    return this;\n                }\n\n                // 그리드의 이벤트 정의 구간\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onLoad = cfg.onLoad;\n                this.onDataChanged = cfg.body.onDataChanged;\n                // todo event에 대한 추가 정의 필요\n\n                this.$target = jQuery(cfg.target);\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        cfg = jQuery.extend(true, cfg, data);\n                    }\n                }).call(this, U.parseJson(this.$target.attr(\"data-ax5grid-config\"), true));\n\n                let grid = this.config = cfg;\n\n                if (!this.config.height) {\n                    this.config._height = this.$target.height();\n                }\n\n                if (!this.id) this.id = this.$target.data(\"data-ax5grid-id\");\n                if (!this.id) {\n                    //this.id = 'ax5grid-' + ax5.getGuid();\n                    this.id = 'ax5grid-' + this.instanceId;\n                    this.$target.data(\"data-ax5grid-id\", grid.id);\n                }\n\n\n                GRID.data.init.call(this);\n\n                if (this.config.tree.use) { // 트리라면\n                    this.sortInfo = {};\n                    this.sortInfo[this.config.tree.columnKeys.selfHash] = {orderBy: \"asc\", seq: 0, fixed: true};\n                }\n\n                ///========\n                // 그리드를 그리기 위한 가장 기초적인 작업 뼈대와 틀을 준비합니다. 이 메소드는 초기화 시 한번만 호출 되게 됩니다.\n                initGrid.call(this);\n\n                // columns데이터를 분석하여 미리 처리해야하는 데이터를 정리합니다.\n                initColumns.call(this, grid.columns);\n                resetColGroupWidth.call(this);\n\n                // footSum 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.footSum) initFootSum.call(this, grid.footSum);\n\n                // bodyGrouping 데이터를 분석하여 미리 처리해야 하는 데이터를 정리\n                if (grid.body.grouping) initBodyGroup.call(this, grid.body.grouping);\n\n                // 그리드의 각 요소의 크기를 맞춤니다.\n                alignGrid.call(this, true);\n\n                // columns의 데이터로 header데이터를 만들고\n                GRID.header.init.call(this);\n                // header를 출력합니다.\n                GRID.header.repaint.call(this);\n\n                // columns의 데이터로 body데이터를 만들고\n                GRID.body.init.call(this);\n                // body를 출력합니다.\n                GRID.body.repaint.call(this);\n\n                // scroller\n                GRID.scroller.init.call(this);\n                GRID.scroller.resize.call(this);\n\n                jQuery(window).bind(\"resize.ax5grid-\" + this.id, function () {\n                    alignGrid.call(self);\n                    GRID.scroller.resize.call(self);\n                    GRID.body.repaint.call(self);  // window resize시 repaint 함수 호출\n                });\n\n                jQuery(document.body).on(\"click.ax5grid-\" + this.id, (function (e) {\n                    let isPickerClick = false,\n                        target = U.findParentNode(e.target, function (_target) {\n                            if (isPickerClick = _target.getAttribute(\"data-ax5grid-inline-edit-picker\")) {\n                                return true;\n                            }\n                            return _target.getAttribute(\"data-ax5grid-container\") === \"root\";\n                        });\n\n                    if (target && target.getAttribute(\"data-ax5grid-instance\") === this.id) {\n                        self.focused = true;\n                    } else {\n                        self.focused = false;\n                        GRID.body.blur.call(this);\n                    }\n                }).bind(this));\n\n                jQuery(window).on(\"keydown.ax5grid-\" + this.instanceId, function (e) {\n                    if (self.focused) {\n                        if (self.isInlineEditing) {\n\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                self.keyDown(\"ESC\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.RETURN) {\n                                self.keyDown(\"RETURN\", e.originalEvent);\n                            }\n                            else if (e.which == ax5.info.eventKeys.TAB) {\n                                self.keyDown(\"TAB\", e.originalEvent);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.UP) {\n                                self.keyDown(\"RETURN\", {shiftKey: true});\n                            }\n                            else if (e.which == ax5.info.eventKeys.DOWN) {\n                                self.keyDown(\"RETURN\", {});\n                            }\n\n                        }\n                        else {\n\n                            if (e.metaKey || e.ctrlKey) {\n                                if (e.which == 67) { // c\n                                    self.copySelect();\n                                }\n                            } else {\n                                if (ctrlKeys[e.which]) {\n                                    self.keyDown(ctrlKeys[e.which], e.originalEvent); // 키다운 이벤트 호출\n                                    U.stopEvent(e);\n                                } else if (e.which == ax5.info.eventKeys.ESC) {\n                                    if (self.focused) {\n                                        GRID.body.blur.call(self);\n                                    }\n                                } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                    self.keyDown(\"RETURN\", e.originalEvent);\n                                } else if (e.which == ax5.info.eventKeys.TAB) {\n                                    //self.keyDown(\"RETURN\", e.originalEvent);\n                                    U.stopEvent(e);\n                                } else if (e.which != ax5.info.eventKeys.SPACE && Object.keys(self.focusedColumn).length) {\n                                    self.keyDown(\"INLINE_EDIT\", e.originalEvent);\n                                }\n                            }\n\n                        }\n                    }\n                });\n\n                // 그리드 레이아웃이 모든 준비를 마친시점에 onLoad존재 여부를 확인하고 호출하여 줍니다.\n                setTimeout((function () {\n                    if (this.onLoad) {\n                        this.onLoad.call({\n                            self: this\n                        });\n                    }\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * align grid size\n             * @method ax5grid.align\n             * @returns {ax5grid}\n             */\n            this.align = function () {\n                if (alignGrid.call(this)) {\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.keyDown\n             * @param {String} _keyName\n             * @param {Event|Object} _data\n             * @return {ax5grid}\n             */\n            this.keyDown = (function () {\n                let processor = {\n                    \"KEY_UP\": function () {\n                        GRID.body.moveFocus.call(this, \"UP\");\n                    },\n                    \"KEY_DOWN\": function () {\n                        GRID.body.moveFocus.call(this, \"DOWN\");\n                    },\n                    \"KEY_LEFT\": function () {\n                        GRID.body.moveFocus.call(this, \"LEFT\");\n                    },\n                    \"KEY_RIGHT\": function () {\n                        GRID.body.moveFocus.call(this, \"RIGHT\");\n                    },\n                    \"KEY_HOME\": function () {\n                        GRID.body.moveFocus.call(this, \"HOME\");\n                    },\n                    \"KEY_END\": function () {\n                        GRID.body.moveFocus.call(this, \"END\");\n                    },\n                    \"INLINE_EDIT\": function (_e) {\n                        GRID.body.inlineEdit.active.call(this, this.focusedColumn, _e);\n                        if (!/[0-9a-zA-Z]/.test(_e.key)) {\n                            U.stopEvent(_e);\n                        }\n                    },\n                    \"ESC\": function (_e) {\n                        GRID.body.inlineEdit.keydown.call(this, \"ESC\");\n                    },\n                    \"RETURN\": function (_e) {\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            if(!GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey)){\n                                return false;\n                                U.stopEvent(_e);\n                            }\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"UP\" : \"DOWN\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                                }\n                            }\n                        }\n                        if (activeEditLength == 0) {\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\");\n                            U.stopEvent(_e);\n                        } else {\n\n                        }\n                    },\n                    \"TAB\": function (_e) {\n\n                        var activeEditLength = 0;\n                        for (var columnKey in this.inlineEditing) {\n                            activeEditLength++;\n\n                            GRID.body.inlineEdit.keydown.call(this, \"RETURN\", columnKey, {moveFocus: true});\n                            // next focus\n                            if (activeEditLength == 1) {\n                                if (GRID.body.moveFocus.call(this, (_e.shiftKey) ? \"LEFT\" : \"RIGHT\")) {\n                                    GRID.body.inlineEdit.keydown.call(this, \"RETURN\", undefined, {moveFocus: true});\n                                }\n                            }\n                        }\n                    }\n                };\n                return function (_act, _data) {\n                    if (_act in processor) processor[_act].call(this, _data);\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.copySelect\n             * @returns {Boolean} copysuccess\n             */\n            this.copySelect = function () {\n                let copysuccess,\n                    $clipBoard = this.$[\"form\"][\"clipboard\"],\n                    copyTextArray = [], copyText = \"\",\n                    _rowIndex, _colIndex, _dindex, _di = 0;\n\n                for (let c in this.selectedColumn) {\n                    let _column = this.selectedColumn[c];\n\n                    if (_column) {\n                        if (typeof _dindex === \"undefined\") {\n                            _dindex = _column.dindex;\n                            _rowIndex = _column.rowIndex;\n                            _colIndex = _column.rowIndex;\n                        }\n\n                        if (_dindex != _column.dindex || _rowIndex != _column.rowIndex) {\n                            _di++;\n                        }\n\n                        if (!copyTextArray[_di]) {\n                            copyTextArray[_di] = [];\n                        }\n                        let originalColumn = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex];\n                        if (originalColumn) {\n                            if (this.list[_column.dindex].__isGrouping) {\n                                copyTextArray[_di].push(this.list[_column.dindex][_column.colIndex]);\n                            } else {\n                                copyTextArray[_di].push(this.list[_column.dindex][originalColumn.key]);\n                            }\n                        } else {\n                            copyTextArray[_di].push(\"\");\n                        }\n\n                        _dindex = _column.dindex;\n                        _rowIndex = _column.rowIndex;\n                    }\n                }\n\n                copyTextArray.forEach(function (r) {\n                    copyText += r.join('\\t') + \"\\n\";\n                });\n\n                $clipBoard.get(0).innerText = copyText;\n                $clipBoard.select();\n\n                try {\n                    copysuccess = document.execCommand(\"copy\");\n                } catch (e) {\n                    copysuccess = false;\n                }\n                return copysuccess;\n            };\n\n            /**\n             * @method ax5grid.setData\n             * @param {Array} _data\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setData({\n             *  list: [],\n             *  page: {\n             *      currentPage: 0,\n             *      pageSize: 50,\n             *      totalElements: 500,\n             *      totalPages: 100\n             *  }\n             * });\n             *\n             * // onlyList\n             * ax5Grid.setData([]);\n             * ```\n             */\n            this.setData = function (_data) {\n                let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\");\n\n                GRID.data.set.call(this, _data);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this);\n                GRID.scroller.resize.call(this);\n                GRID.page.navigationUpdate.call(this);\n\n                if (!isFirstPaint) GRID.body.scrollTo.call(this, {top: 0});\n\n                isFirstPaint = null;\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getList\n             * @param {String} _type - selected|modified|deleted\n             * @returns {Array}\n             * @example\n             * ```js\n             * ax5Grid.getList();\n             * ax5Grid.getList(\"selected\");\n             * ax5Grid.getList(\"modified\");\n             * ax5Grid.getList(\"deleted\");\n             * ```\n             */\n            this.getList = function (_type) {\n                return GRID.data.getList.call(this, _type);\n            };\n\n            /**\n             * @method ax5grid.setHeight\n             * @param {Number} _height\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setHeight(height);\n             * ```\n             */\n            this.setHeight = function (_height) {\n                //console.log(this.$target);\n                if (_height == \"100%\") {\n                    _height = this.$target.offsetParent().innerHeight();\n                }\n                this.$target.css({height: _height});\n                this.$[\"container\"][\"root\"].css({height: _height});\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addRow\n             * @param {Object} _row\n             * @param {Number|String} [_dindex=last]\n             * @param {Object} [_options] - options of addRow\n             * @param {Boolean} [_options.sort] - sortData\n             * @param {Number|String} [_options.focus] - HOME|END|[dindex]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.addRow($.extend({}, {...}), \"first\");\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"END\"});\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: \"HOME\"});\n             * ax5Grid.addRow($.extend({}, {...}), \"last\", {focus: 10});\n             * ```\n             */\n            this.addRow = function (_row, _dindex, _options) {\n                GRID.data.add.call(this, _row, _dindex, _options);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                if(_options && _options.focus) {\n                    //GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                    GRID.body.moveFocus.call(this, _options.focus);\n                }\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.appendToList\n             * @param _list\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.appendToList([{},{},{}]);\n             * ax5Grid.appendToList([{},{},{}]);\n             * ```\n             */\n            this.appendToList = function (_list) {\n                GRID.data.append.call(this, _list, (function () {\n                    alignGrid.call(this);\n                    GRID.body.repaint.call(this);\n                    GRID.scroller.resize.call(this);\n                }).bind(this));\n                return this;\n            };\n\n            /**\n             * @method ax5grid.removeRow\n             * @param {Number|String} [_dindex=last]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.removeRow();\n             * ax5Grid.removeRow(\"first\");\n             * ax5Grid.removeRow(\"last\");\n             * ax5Grid.removeRow(1);\n             * ```\n             */\n            this.removeRow = function (_dindex) {\n                GRID.data.remove.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateRow\n             * @param {Object} _row\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.updateRow({price: 100, amount: 100, cost: 10000}, 1);\n             * ```\n             */\n            this.updateRow = function (_row, _dindex) {\n                GRID.data.update.call(this, _row, _dindex);\n                // todo : mergeCells 옵션에 따라 예외처리\n\n                GRID.body.repaintRow.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.updateChildRows\n             * @param {Number} _dindex\n             * @param {Object} _updateData\n             * @param {Object} [_options]\n             * @param {Function} [_options.filter]\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * onDataChanged: function () {\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked});\n             * }\n             *\n             * onDataChanged: function () {\n             *      this.self.updateChildRows(this.dindex, {isChecked: this.item.isChecked}, {filter: function(){\n             *          return this.item.type == \"A\";\n             *      });\n             * }\n             * ```\n             */\n            this.updateChildRows = function (_dindex, _updateData, _options) {\n                GRID.data.updateChild.call(this, _dindex, _updateData, _options);\n                this.xvar.paintStartRowIndex = undefined;\n                this.xvar.paintStartColumnIndex = undefined;\n                GRID.body.repaint.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.deleteRow\n             * @param {Number|String} _dindex\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.deleteRow(\"first\");\n             * ax5Grid.deleteRow(\"last\");\n             * ax5Grid.deleteRow(1);\n             * ax5Grid.deleteRow(\"selected\");\n             * ```\n             */\n            this.deleteRow = function (_dindex) {\n                GRID.data.deleteRow.call(this, _dindex);\n                alignGrid.call(this);\n                GRID.body.repaint.call(this, \"reset\");\n                // 삭제시엔 포커스 ?\n                // GRID.body.moveFocus.call(this, (this.config.body.grouping) ? \"START\" : \"END\");\n                GRID.scroller.resize.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setValue\n             * @param _dindex\n             * @param _key\n             * @param _value\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5Grid.setValue(0, \"price\", 100);\n             * ```\n             */\n            this.setValue = function (_dindex, _key, _value) {\n                // getPanelname;\n                if (GRID.data.setValue.call(this, _dindex, _key, _value)) {\n                    let repaintCell = function (_panelName, _rows, __dindex, __key, __value) {\n                        for (let r = 0, rl = _rows.length; r < rl; r++) {\n                            for (let c = 0, cl = _rows[r].cols.length; c < cl; c++) {\n                                if (_rows[r].cols[c].key == __key) {\n                                    if (this.xvar.frozenRowIndex > __dindex) {\n                                        GRID.body.repaintCell.call(this, \"top-\" + _panelName, __dindex, r, c, __value);\n                                    } else {\n                                        GRID.body.repaintCell.call(this, _panelName + \"-scroll\", __dindex, r, c, __value);\n                                    }\n                                }\n                            }\n                        }\n                    };\n\n                    repaintCell.call(this, \"left-body\", this.leftBodyRowData.rows, _dindex, _key, _value);\n                    repaintCell.call(this, \"body\", this.bodyRowData.rows, _dindex, _key, _value);\n\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.addColumn\n             * @param {Object} _column\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.addColumn = (function () {\n                let processor = {\n                    \"first\": function (_column) {\n                        this.config.columns = [].concat(_column).concat(this.config.columns);\n                    },\n                    \"last\": function (_column) {\n                        this.config.columns = this.config.columns.concat([].concat(_column));\n                    }\n                };\n\n                return function (_column, _cindex) {\n                    if (typeof _column === \"undefined\") throw '_column must not be null';\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _column);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        if (U.isArray(_column)) {\n                            for (let _i = 0, _l = _column.length; _i < _l; _i++) {\n                                this.config.columns.splice(_cindex + _i, 0, _column[_i]);\n                            }\n                        } else {\n                            this.config.columns.splice(_cindex, 0, _column);\n                        }\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.removeColumn\n             * @param {Number|String} [_cindex=last]\n             * @returns {ax5grid}\n             */\n            this.removeColumn = (function () {\n                let processor = {\n                    \"first\": function (_cindex) {\n                        this.config.columns.splice(_cindex, 1);\n                    },\n                    \"last\": function () {\n                        this.config.columns.splice(this.config.columns.length - 1, 1);\n                    }\n                };\n                return function (_cindex) {\n                    if (typeof _cindex === \"undefined\") _cindex = \"last\";\n                    if (_cindex in processor) {\n                        processor[_cindex].call(this, _cindex);\n                    } else {\n                        if (!U.isNumber(_cindex)) {\n                            throw 'invalid argument _cindex';\n                        }\n                        //\n                        this.config.columns.splice(_cindex, 1);\n                    }\n                    onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5grid.updateColumn\n             * @param {Object} _column\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.updateColumn = function (_column, _cindex) {\n                if (!U.isNumber(_cindex)) {\n                    throw 'invalid argument _cindex';\n                }\n                //\n                this.config.columns.splice(_cindex, 1, _column);\n                onResetColumns.call(this); // 컬럼이 변경되었을 때.\n                return this;\n            };\n\n            /**\n             * @method ax5grid.setColumnWidth\n             * @param {Number} _width\n             * @param {Number} _cindex\n             * @returns {ax5grid}\n             */\n            this.setColumnWidth = function (_width, _cindex) {\n                this.colGroup[this.xvar.columnResizerIndex]._width = _width;\n                this.needToPaintSum = true;\n\n                // 컬럼너비 변경사항 적용.\n                GRID.header.repaint.call(this);\n                GRID.body.repaint.call(this, true);\n                GRID.scroller.resize.call(this);\n\n                alignGrid.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.getColumnSortInfo\n             * @returns {Object} sortInfo\n             */\n            this.getColumnSortInfo = function () {\n                let that = {sortInfo: []};\n                for (let k in this.sortInfo) {\n                    that.sortInfo.push({\n                        key: k,\n                        orderBy: this.sortInfo[k].orderBy,\n                        seq: this.sortInfo[k].seq\n                    });\n                }\n                that.sortInfo.sort(function (a, b) {\n                    return a.seq > b.seq;\n                });\n                return that.sortInfo;\n            };\n\n            /**\n             * @method ax5grid.setColumnSort\n             * @param {Object} _sortInfo\n             * @param {Object} _sortInfo.key\n             * @param {Number} _sortInfo.key.seq - seq of sortOrder\n             * @param {String} _sortInfo.key.orderBy - \"desc\"|\"asc\"\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * ax5grid.setColumnSort({a:{seq:0, orderBy:\"desc\"}, b:{seq:1, orderBy:\"asc\"}});\n             * ```\n             */\n            this.setColumnSort = function (_sortInfo) {\n                if (typeof _sortInfo !== \"undefined\") {\n                    this.sortInfo = _sortInfo;\n                    GRID.header.applySortStatus.call(this, _sortInfo);\n                }\n\n                sortColumns.call(this, _sortInfo || this.sortInfo);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.select\n             * @param {Number|Object} _selectObject\n             * @param {Number} _selectObject.index - index of row\n             * @param {Number} _selectObject.rowIndex - rowIndex of columns\n             * @param {Number} _selectObject.conIndex - colIndex of columns\n             * @param {Object} _options\n             * @param {Boolean} _options.selectedClear\n             * @param {Boolean} _options.selected\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.select(0);\n             * firstGrid.select(0, {selected: true});\n             * firstGrid.select(0, {selected: false});\n             * firstGrid.select(0, {selectedClear: true});\n             * ```\n             */\n            this.select = function (_selectObject, _options) {\n                if (U.isNumber(_selectObject)) {\n                    let dindex = _selectObject;\n\n                    if (!this.config.multipleSelect) {\n                        this.clearSelect();\n                    } else {\n                        if (_options && _options.selectedClear) {\n                            this.clearSelect();\n                        }\n                    }\n\n                    GRID.data.select.call(this, dindex, _options && _options.selected);\n                    GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n                }\n                return this;\n            };\n\n            /**\n             * @method firstGrid.clickBody\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.clickBody = function (_dindex) {\n                GRID.body.click.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method firstGrid.DBLClickBody\n             * @param {Number} _dindex\n             * @returns {ax5grid}\n             */\n            this.DBLClickBody = function (_dindex) {\n                GRID.body.dblClick.call(this, _dindex);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.clearSelect\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.clearSelect();\n             * ```\n             */\n            this.clearSelect = function () {\n                GRID.body.updateRowState.call(this, [\"selectedClear\"]);\n                GRID.data.clearSelect.call(this);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.selectAll\n             * @param {Object} _options\n             * @param {Boolean} _options.selected\n             * @param {Function} _options.filter\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.selectAll();\n             * firstGrid.selectAll({selected: true});\n             * firstGrid.selectAll({selected: false});\n             * firstGrid.selectAll({filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * firstGrid.selectAll({selected: true, filter: function(){\n             *      return this[\"b\"] == \"A01\";\n             * });\n             * ```\n             */\n            this.selectAll = function (_options) {\n                GRID.data.selectAll.call(this, _options && _options.selected, _options);\n                GRID.body.updateRowStateAll.call(this, [\"selected\"]);\n                return this;\n            };\n\n            /**\n             * @method ax5grid.exportExcel\n             * @param {String} _fileName\n             * @returns {ax5grid|String}\n             * @example\n             * ```js\n             * firstGrid.exportExcel(\"grid-to-excel.xls\");\n             * console.log(firstGrid.exportExcel());\n             * ```\n             */\n            this.exportExcel = function (_fileName) {\n                let table = [];\n                table.push('<table border=\"1\">');\n                table.push(GRID.header.getExcelString.call(this));\n                table.push(GRID.body.getExcelString.call(this));\n                table.push('</table>');\n\n                if (typeof _fileName === \"undefined\") {\n                    return table.join('');\n                }\n                else {\n                    GRID.excel.export.call(this, [table.join('')], _fileName);\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5grid.focus\n             * @param {String|Number} _pos - UP, DOWN, LEFT, RIGHT, HOME, END\n             * @returns {ax5grid}\n             * @example\n             * ```js\n             * firstGrid.focus(\"UP\");\n             * firstGrid.focus(\"DOWN\");\n             * firstGrid.focus(\"HOME\");\n             * firstGrid.focus(\"END\");\n             * ```\n             */\n            this.focus = function (_pos) {\n                if (GRID.body.moveFocus.call(this, _pos)) {\n                    let focusedColumn;\n                    for (let c in this.focusedColumn) {\n                        focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                        break;\n                    }\n                    if (focusedColumn) {\n                        this.select(focusedColumn.dindex, {selectedClear: true});\n                    }\n                }\n                else {\n                    if (typeof this.selectedDataIndexs[0] === \"undefined\") {\n                        this.select(0);\n                    } else {\n                        let selectedIndex = this.selectedDataIndexs[0];\n                        let processor = {\n                            \"UP\": function () {\n                                if (selectedIndex > 0) {\n                                    this.select(selectedIndex - 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex - 1);\n                                }\n                            },\n                            \"DOWN\": function () {\n                                if (selectedIndex < this.list.length - 1) {\n                                    this.select(selectedIndex + 1, {selectedClear: true});\n                                    GRID.body.moveFocus.call(this, selectedIndex + 1);\n                                }\n                            },\n                            \"HOME\": function () {\n                                this.select(0, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, 0);\n                            },\n                            \"END\": function () {\n                                this.select(this.list.length - 1, {selectedClear: true});\n                                GRID.body.moveFocus.call(this, this.list.length - 1);\n                            }\n                        };\n\n                        if (_pos in processor) {\n                            processor[_pos].call(this);\n                        }\n                    }\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5grid.destroy\n             * @returns {null}\n             */\n            this.destroy = function () {\n                const instanceId = this.instanceId;\n                this.$target.empty();\n                this.list = [];\n                UI.grid_instance = ax5.util.filter(UI.grid_instance, function () {\n                    return this.instanceId != instanceId;\n                });\n                return null;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                UI.grid_instance = UI.grid_instance || [];\n                UI.grid_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n    })());\n\n    GRID = ax5.ui.grid;\n})();\n\n// todo : filter\n// todo : column reorder\n// todo : editor 필수값 속성 지정","// ax5.ui.grid.body\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const columnSelect = {\n        focusClear: function () {\n            let self = this, _column;\n            for (let c in self.focusedColumn) {\n                _column = self.focusedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-focused');\n                }\n            }\n            self.focusedColumn = {};\n        },\n        clear: function () {\n            let self = this, _column;\n            for (let c in self.selectedColumn) {\n                _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .removeAttr('data-ax5grid-column-selected');\n                }\n            }\n            self.selectedColumn = {};\n        },\n        init: function (column) {\n            let self = this;\n            if (this.isInlineEditing) {\n                for (let editKey in this.inlineEditing) {\n                    if (editKey == column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex) {\n                        return this;\n                    }\n                }\n            }\n\n            // focus\n            columnSelect.focusClear.call(self);\n            self.focusedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = {\n                panelName: column.panelName,\n                dindex: column.dindex,\n                rowIndex: column.rowIndex,\n                colIndex: column.colIndex,\n                colspan: column.colspan\n            };\n\n            // select\n            columnSelect.clear.call(self);\n            self.xvar.selectedRange = {\n                start: [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1],\n                end: null\n            };\n            self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex] = (function (data) {\n                if (data) {\n                    return false;\n                } else {\n                    return {\n                        panelName: column.panelName,\n                        dindex: column.dindex,\n                        rowIndex: column.rowIndex,\n                        colIndex: column.colIndex,\n                        colspan: column.colspan\n                    }\n                }\n            })(self.selectedColumn[column.dindex + \"_\" + column.colIndex + \"_\" + column.rowIndex]);\n\n            this.$.panel[column.panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + column.dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + column.colIndex + '\"]')\n                .attr('data-ax5grid-column-focused', \"true\")\n                .attr('data-ax5grid-column-selected', \"true\");\n\n            if (this.isInlineEditing) {\n                GRID.body.inlineEdit.deActive.call(this, \"RETURN\");\n            }\n        },\n        update: function (column) {\n            var self = this;\n            var dindex, colIndex, rowIndex, trl;\n\n            self.xvar.selectedRange[\"end\"] = [column.dindex, column.rowIndex, column.colIndex, column.colspan - 1];\n            columnSelect.clear.call(self);\n\n            var range = {\n                r: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][0], self.xvar.selectedRange[\"end\"][0])\n                },\n                c: {\n                    s: Math.min(self.xvar.selectedRange[\"start\"][2], self.xvar.selectedRange[\"end\"][2]),\n                    e: Math.max(self.xvar.selectedRange[\"start\"][2] + self.xvar.selectedRange[\"start\"][3], self.xvar.selectedRange[\"end\"][2] + self.xvar.selectedRange[\"end\"][3])\n                }\n            };\n\n            dindex = range.r.s;\n            for (; dindex <= range.r.e; dindex++) {\n\n\n                trl = this.bodyRowTable.rows.length;\n                rowIndex = 0;\n                for (; rowIndex < trl; rowIndex++) {\n                    colIndex = range.c.s;\n                    for (; colIndex <= range.c.e; colIndex++) {\n                        var _panels = [],\n                            panelName = \"\";\n\n                        if (self.xvar.frozenRowIndex > dindex) _panels.push(\"top\");\n                        if (self.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        panelName = _panels.join(\"-\");\n\n                        self.selectedColumn[dindex + \"_\" + colIndex + \"_\" + rowIndex] = {\n                            panelName: panelName,\n                            dindex: dindex,\n                            rowIndex: rowIndex,\n                            colIndex: colIndex,\n                            colspan: column.colspan\n                        };\n\n                        _panels = null;\n                        panelName = null;\n                    }\n                }\n            }\n            dindex = null;\n            colIndex = null;\n            rowIndex = null;\n\n            for (var c in self.selectedColumn) {\n                var _column = self.selectedColumn[c];\n                if (_column) {\n                    self.$.panel[_column.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _column.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + _column.rowIndex + '\"][data-ax5grid-column-colindex=\"' + _column.colIndex + '\"]')\n                        .attr('data-ax5grid-column-selected', 'true');\n                }\n            }\n\n        }\n    };\n\n    const columnSelector = {\n        \"on\": function (cell) {\n            let self = this;\n\n            if (this.inlineEditing[cell.dindex + \"_\" + cell.colIndex + \"_\" + cell.rowIndex]) {\n                return;\n            }\n\n            columnSelect.init.call(self, cell);\n\n            this.$[\"container\"][\"body\"]\n                .on(\"mousemove.ax5grid-\" + this.instanceId, '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                    if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                        columnSelect.update.call(self, {\n                            panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                            dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                            rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                            colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                            colspan: Number(this.getAttribute(\"colspan\"))\n                        });\n                        U.stopEvent(e);\n                    }\n                })\n                .on(\"mouseup.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                })\n                .on(\"mouseleave.ax5grid-\" + this.instanceId, function () {\n                    columnSelector.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            this.$[\"container\"][\"body\"]\n                .off(\"mousemove.ax5grid-\" + this.instanceId)\n                .off(\"mouseup.ax5grid-\" + this.instanceId)\n                .off(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const updateRowState = function (_states, _dindex, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex) {\n                    if (this.list[_dindex]) {\n                        var i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", this.list[_dindex][cfg.columnKeys.selected]);\n\n                        }\n                    }\n                },\n                \"selectedClear\": function () {\n                    var si = this.selectedDataIndexs.length;\n                    while (si--) {\n                        var dindex = this.selectedDataIndexs[si];\n                        var i = this.$.livePanelKeys.length;\n                        while (i--) {\n                            this.$.panel[this.$.livePanelKeys[i]]\n                                .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                                .attr(\"data-ax5grid-selected\", false);\n                            this.list[dindex][cfg.columnKeys.selected] = false;\n                        }\n                    }\n                },\n                \"cellChecked\": function (_dindex, _data) {\n                    var key = _data.key;\n                    var rowIndex = _data.rowIndex;\n                    var colIndex = _data.colIndex;\n\n                    var panelName = (function () {\n                        var _panels = [];\n                        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n                        if (this.xvar.frozenColumnIndex > colIndex) _panels.push(\"left\");\n                        _panels.push(\"body\");\n                        if (_panels[0] !== \"top\") _panels.push(\"scroll\");\n                        return _panels.join(\"-\");\n                    }).call(this);\n\n                    this.$.panel[panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                        .find('[data-ax5grid-column-rowIndex=\"' + rowIndex + '\"][data-ax5grid-column-colIndex=\"' + colIndex + '\"]')\n                        .find('[data-ax5grid-editor=\"checkbox\"]')\n                        .attr(\"data-ax5grid-checked\", '' + _data.checked);\n                }\n            };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _dindex, _data);\n        });\n    };\n\n    const updateRowStateAll = function (_states, _data) {\n        let self = this,\n            cfg = this.config,\n            processor = {\n                \"selected\": function (_dindex) {\n                    GRID.body.repaint.call(this, true);\n                }\n            };\n\n        _states.forEach(function (_state) {\n            if (!processor[_state]) throw 'invaild state name';\n            processor[_state].call(self, _data);\n        });\n    };\n\n    const init = function () {\n        let self = this;\n\n        this.$[\"container\"][\"body\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, rowIndex, colIndex, disableSelection,\n                targetClick = {\n                    \"default\": function (_column) {\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                            that = {\n                                self: self,\n                                page: self.page,\n                                list: self.list,\n                                item: self.list[_column.dindex],\n                                dindex: _column.dindex,\n                                rowIndex: _column.rowIndex,\n                                colIndex: _column.colIndex,\n                                column: column,\n                                value: self.list[_column.dindex][column.key]\n                            };\n\n                        if (column.editor && column.editor.type == \"checkbox\") { // todo : GRID.inlineEditor에서 처리 할수 있도록 구문 변경 필요.\n                            let value = GRID.data.getValue.call(self, _column.dindex, column.key),\n                                checked, newValue;\n\n                            if (column.editor.config && column.editor.config.trueValue) {\n                                if (checked = !(value == column.editor.config.trueValue)) {\n                                    newValue = column.editor.config.trueValue;\n                                } else {\n                                    newValue = column.editor.config.falseValue;\n                                }\n                            } else {\n                                newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                            }\n\n                            GRID.data.setValue.call(self, _column.dindex, column.key, newValue);\n\n                            updateRowState.call(self, [\"cellChecked\"], _column.dindex, {\n                                key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                editorConfig: column.editor.config, checked: checked\n                            });\n                        } else {\n                            if (self.config.body.onClick) {\n                                self.config.body.onClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n                        if (self.list[_column.dindex][self.config.columnKeys.disableSelection]) {\n                            return false;\n                        }\n\n                        if (!self.config.multipleSelect && self.selectedDataIndexs[0] !== _column.dindex) {\n                            updateRowState.call(self, [\"selectedClear\"]);\n                            GRID.data.clearSelect.call(self);\n                        }\n\n                        GRID.data.select.call(self, _column.dindex, undefined, {\n                            internalCall: true\n                        });\n                        updateRowState.call(self, [\"selected\"], _column.dindex);\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    },\n                    \"tree-control\": function (_column, _el) {\n                        //console.log(_column);\n                        toggleCollapse.call(self, _column.dindex);\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetClick) {\n                targetClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                }, this);\n            }\n        });\n        this.$[\"container\"][\"body\"].on(\"dblclick\", '[data-ax5grid-column-attr]', function (e) {\n            let panelName, attr,\n                row, col, dindex, rowIndex, colIndex,\n                targetDBLClick = {\n                    \"default\": function (_column) {\n                        if (self.isInlineEditing) {\n                            for (let columnKey in self.inlineEditing) {\n                                if (columnKey == _column.dindex + \"_\" + _column.colIndex + \"_\" + _column.rowIndex) {\n                                    return this;\n                                }\n                            }\n                        }\n\n                        let column = self.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex], value = \"\";\n                        if (column) {\n                            if (!self.list[dindex].__isGrouping) {\n                                value = GRID.data.getValue.call(self, dindex, column.key);\n                            }\n                        }\n\n                        let editor = self.colGroup[_column.colIndex].editor;\n                        if (U.isObject(editor)) {\n                            GRID.body.inlineEdit.active.call(self, self.focusedColumn, e, value);\n                        } else {\n                            // 더블클릭 실행\n                            if (self.config.body.onDBLClick) {\n                                let that = {\n                                    self: self,\n                                    page: self.page,\n                                    list: self.list,\n                                    item: self.list[_column.dindex],\n                                    dindex: _column.dindex,\n                                    rowIndex: _column.rowIndex,\n                                    colIndex: _column.colIndex,\n                                    column: column,\n                                    value: self.list[_column.dindex][column.key]\n                                };\n                                self.config.body.onDBLClick.call(that);\n                            }\n                        }\n                    },\n                    \"rowSelector\": function (_column) {\n\n                    },\n                    \"lineNumber\": function (_column) {\n\n                    }\n                };\n\n            panelName = this.getAttribute(\"data-ax5grid-panel-name\");\n            attr = this.getAttribute(\"data-ax5grid-column-attr\");\n            row = Number(this.getAttribute(\"data-ax5grid-column-row\"));\n            col = Number(this.getAttribute(\"data-ax5grid-column-col\"));\n            rowIndex = Number(this.getAttribute(\"data-ax5grid-column-rowIndex\"));\n            colIndex = Number(this.getAttribute(\"data-ax5grid-column-colIndex\"));\n            dindex = Number(this.getAttribute(\"data-ax5grid-data-index\"));\n\n            if (attr in targetDBLClick) {\n                targetDBLClick[attr]({\n                    panelName: panelName,\n                    attr: attr,\n                    row: row,\n                    col: col,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex\n                });\n            }\n        });\n\n        if (this.config.contextMenu) {\n            this.$[\"container\"][\"body\"].on(\"contextmenu\", function (e) {\n                let target, dindex, rowIndex, colIndex, item, column, param = {};\n\n                target = U.findParentNode(e.target, function (t) {\n                    if (t.getAttribute(\"data-ax5grid-column-attr\")) {\n                        return true;\n                    }\n                });\n\n                if (target) {\n                    // item 찾기\n                    rowIndex = Number(target.getAttribute(\"data-ax5grid-column-rowIndex\"));\n                    colIndex = Number(target.getAttribute(\"data-ax5grid-column-colIndex\"));\n                    dindex = Number(target.getAttribute(\"data-ax5grid-data-index\"));\n                    column = self.bodyRowMap[rowIndex + \"_\" + colIndex];\n                    item = self.list[dindex];\n                }\n\n                if (!self.contextMenu) {\n                    self.contextMenu = new ax5.ui.menu();\n                }\n\n                self.contextMenu.setConfig(self.config.contextMenu);\n\n                param = {\n                    element: target,\n                    dindex: dindex,\n                    rowIndex: rowIndex,\n                    colIndex: colIndex,\n                    item: item,\n                    column: column\n                };\n\n                self.contextMenu.popup(e, {\n                    filter: function () {\n                        return self.config.contextMenu.popupFilter.call(this, this, param);\n                    },\n                    param: param\n                });\n\n                U.stopEvent(e.originalEvent);\n                target = null;\n                dindex = null;\n                rowIndex = null;\n                colIndex = null;\n                item = null;\n                column = null;\n                param = null;\n            });\n        }\n\n        this.$[\"container\"][\"body\"]\n            .on(\"mousedown\", '[data-ax5grid-column-attr=\"default\"]', function (e) {\n                if (self.xvar.touchmoved) return false;\n                if (this.getAttribute(\"data-ax5grid-column-rowIndex\")) {\n                    columnSelector.on.call(self, {\n                        panelName: this.getAttribute(\"data-ax5grid-panel-name\"),\n                        dindex: Number(this.getAttribute(\"data-ax5grid-data-index\")),\n                        rowIndex: Number(this.getAttribute(\"data-ax5grid-column-rowIndex\")),\n                        colIndex: Number(this.getAttribute(\"data-ax5grid-column-colIndex\")),\n                        colspan: Number(this.getAttribute(\"colspan\"))\n                    });\n                }\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n\n        // 그리드 바디에 출력할 여유 카운트\n        this.xvar.paintRowCountMargin = this.config.virtualScrollYCountMargin;\n        this.xvar.paintRowCountTopMargin = this.config.virtualScrollYCountMargin - Math.floor(this.config.virtualScrollYCountMargin / 2);\n    };\n\n    const resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedBodyRowObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyRowTable, this.xvar.frozenColumnIndex);\n\n\n        this.asideBodyRowData = (function (dataTable) {\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            label: \"&nbsp;\", key: \"__d-index__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            label: \"\", key: \"__d-checkbox__\"\n                        });\n                        data.rows[i].cols.push(_col);\n                    }\n                }\n            }\n\n            return data;\n        }).call(this, this.bodyRowTable);\n        \n        //console.log(dividedBodyRowObj);\n        \n        this.leftBodyRowData = dividedBodyRowObj.leftData;\n        this.bodyRowData = dividedBodyRowObj.rightData;\n\n        if (cfg.body.grouping) {\n            let dividedBodyGroupingObj = GRID.util.divideTableByFrozenColumnIndex(this.bodyGroupingTable, this.xvar.frozenColumnIndex);\n            this.asideBodyGroupingData = (function (dataTable) {\n                let data = {rows: []};\n                for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                    data.rows[i] = {cols: []};\n                    if (i === 0) {\n                        let col = {\n                            label: \"\",\n                            colspan: 1,\n                            rowspan: dataTable.rows.length,\n                            colIndex: null\n                        }, _col = {};\n\n                        if (cfg.showLineNumber) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.lineNumberColumnWidth,\n                                _width: cfg.lineNumberColumnWidth,\n                                columnAttr: \"lineNumber\",\n                                label: \"&nbsp;\", key: \"__d-index__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                        if (cfg.showRowSelector) {\n                            _col = jQuery.extend({}, col, {\n                                width: cfg.rowSelectorColumnWidth,\n                                _width: cfg.rowSelectorColumnWidth,\n                                columnAttr: \"rowSelector\",\n                                label: \"\", key: \"__d-checkbox__\"\n                            });\n                            data.rows[i].cols.push(_col);\n                        }\n                    }\n                }\n\n                return data;\n            }).call(this, this.bodyGroupingTable);\n            this.leftBodyGroupingData = dividedBodyGroupingObj.leftData;\n            this.bodyGroupingData = dividedBodyGroupingObj.rightData;\n            this.bodyGroupingMap = GRID.util.makeBodyRowMap.call(this, this.bodyGroupingTable);\n        }\n\n        this.leftFootSumData = {};\n        this.footSumData = {};\n        if (this.config.footSum) {\n            let dividedFootSumObj = GRID.util.divideTableByFrozenColumnIndex(this.footSumTable, this.xvar.frozenColumnIndex);\n            this.leftFootSumData = dividedFootSumObj.leftData;\n            this.footSumData = dividedFootSumObj.rightData;\n        }\n    };\n\n    const getFieldValue = function (_list, _item, _index, _col, _value, _returnPlainText) {\n        let _key = _col.key, tagsToReplace = {\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        if (_key === \"__d-index__\") {\n            return (typeof _item[\"__index\"] !== \"undefined\") ? _item[\"__index\"] + 1 : \"\";\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`;\n        }\n        else {\n            if (_col.editor && (function (_editor) {\n                    if (_editor.type in GRID.inlineEditor) {\n                        return (GRID.inlineEditor[_editor.type].editMode == \"inline\");\n                    }\n                    return false;\n                })(_col.editor)) { // editor가 inline타입이라면\n\n                _value = _value || GRID.data.getValue.call(this, (typeof _item.__origin_index__ === \"undefined\") ? _index : _item.__origin_index__, _key);\n\n                if (U.isFunction(_col.editor.disabled)) {\n                    if (_col.editor.disabled.call({\n                            list: _list,\n                            dindex: _index,\n                            item: _list[_index],\n                            key: _key,\n                            value: _value\n                        })) {\n                        return _value;\n                    }\n                }\n\n                // print editor\n                return _returnPlainText ? _value : GRID.inlineEditor[_col.editor.type].getHtml(this, _col.editor, _value);\n            }\n\n            const valueProcessor = {\n                \"formatter\": function () {\n                    let that = {\n                        key: _key,\n                        value: _value || GRID.data.getValue.call(this, (typeof _item.__origin_index__ === \"undefined\") ? _index : _item.__origin_index__, _key),\n                        dindex: _index,\n                        item: _item,\n                        list: _list\n                    };\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                },\n                \"default\": function () {\n                    let returnValue = \"\";\n\n                    if (typeof _value !== \"undefined\") {\n                        returnValue = _value;\n                    } else {\n                        _value = GRID.data.getValue.call(this, (typeof _item.__origin_index__ === \"undefined\") ? _index : _item.__origin_index__, _key);\n                        if (_value !== null && typeof _value !== \"undefined\") returnValue = _value;\n                    }\n\n                    // 키값이 Boolean일때 오류 발생하여 수정.\n                    return (typeof returnValue !== \"string\") ? returnValue : returnValue.replace(/[<>]/g, function (tag) {\n                            return tagsToReplace[tag] || tag;\n                        });\n                },\n                \"treeControl\": function (__value) {\n                    let cfg = this.config,\n                        keys = this.config.tree.columnKeys,\n                        indentNodeHtml = '';\n\n                    if (_item[keys.children].length) {\n                        indentNodeHtml += '<a ' +\n                            'data-ax5grid-data-index=\"' + _index + '\" ' +\n                            'data-ax5grid-column-attr=\"tree-control\" ' +\n                            'data-ax5grid-tnode-arrow=\"\" ' +\n                            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                            '>';\n                        indentNodeHtml += (_item[keys.collapse]) ? cfg.tree.icons.collapsedArrow : cfg.tree.icons.openedArrow;\n                        indentNodeHtml += '</a>';\n                    } else {\n                        indentNodeHtml += '<span ' +\n                            'data-ax5grid-tnode-arrow=\"\" ' +\n                            'style=\"width: ' + cfg.tree.arrowWidth + 'px;padding-left:' + (_item[keys.depth] * cfg.tree.indentWidth) + 'px;\"' +\n                            '>&nbsp;</span>';\n                    }\n\n                    indentNodeHtml += '<span ' +\n                        'data-ax5grid-tnode-item=\"' + ((_item[keys.children].length) ? 'group' : 'item') + '\" ' +\n                        'style=\"width: ' + cfg.tree.iconWidth + 'px;\"' +\n                        '>';\n                    indentNodeHtml += (_item[keys.children].length) ? (_item[keys.collapse]) ? cfg.tree.icons.collapsedGroupIcon : cfg.tree.icons.groupIcon : cfg.tree.icons.itemIcon;\n                    indentNodeHtml += '</span>';\n\n                    return indentNodeHtml + __value;\n                }\n            };\n\n            let returnValue = (_col.formatter) ? valueProcessor.formatter.call(this) : valueProcessor.default.call(this);\n            if (this.config.tree.use && _col.treeControl) {\n                returnValue = valueProcessor.treeControl.call(this, returnValue);\n            }\n\n            return returnValue;\n        }\n\n    };\n\n    const getGroupingValue = function (_item, _index, _col) {\n        let value, that, _key = _col.key, _label = _col.label;\n\n        if (typeof _key === \"undefined\") {\n            that = {\n                key: _key,\n                list: _item.__groupingList,\n                groupBy: _item.__groupingBy\n            };\n            if (U.isFunction(_label)) {\n                value = _label.call(that);\n            } else {\n                value = _label;\n            }\n            _item[_col.colIndex] = value;\n            return value;\n        }\n        else if (_key === \"__d-index__\") {\n            return '';\n        }\n        else if (_key === \"__d-checkbox__\") {\n            return '';\n        }\n        else {\n            if (_col.collector) {\n                that = {\n                    key: _key,\n                    list: _item.__groupingList\n                };\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n                _item[_col.colIndex] = value;\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    const getSumFieldValue = function (_list, _col) {\n        let _key = _col.key, _label = _col.label;\n        //, _collector, _formatter\n        if (typeof _key === \"undefined\") {\n            return _label;\n        }\n        else if (_key === \"__d-index__\" || _key === \"__d-checkbox__\") {\n            return '&nbsp;';\n        }\n        else {\n            if (_col.collector) {\n                let that = {\n                        key: _key,\n                        list: _list\n                    },\n                    value;\n\n                if (U.isFunction(_col.collector)) {\n                    value = _col.collector.call(that);\n                } else {\n                    value = GRID.collector[_col.collector].call(that);\n                }\n\n                if (_col.formatter) {\n                    that.value = value;\n                    if (U.isFunction(_col.formatter)) {\n                        return _col.formatter.call(that);\n                    } else {\n                        return GRID.formatter[_col.formatter].call(that);\n                    }\n                } else {\n                    return value;\n                }\n\n            } else {\n                return \"&nbsp;\";\n            }\n        }\n    };\n\n    const repaint = function (_reset) {\n        // debugger;\n        let cfg = this.config, list = (this.proxyList) ? this.proxyList : this.list;\n\n        /// repaint reset 타입이면 고정컬럼을 재조정\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            // 틀고정 이 변경되면 출력 시작 인덱스 값을 초기화\n            this.xvar.paintStartRowIndex = undefined;\n            this.xvar.paintStartColumnIndex = undefined;\n        }\n\n        /// 출력시작 인덱스\n        let paintStartRowIndex, virtualPaintStartRowIndex;\n\n        if (this.config.virtualScrollY) {\n            virtualPaintStartRowIndex = paintStartRowIndex = Math.floor(-(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex;\n            if (this.xvar.paintRowCountTopMargin < paintStartRowIndex) {\n                paintStartRowIndex -= this.xvar.paintRowCountTopMargin;\n            }\n        }\n        else {\n            paintStartRowIndex = this.xvar.frozenRowIndex;\n        }\n\n        if (isNaN(paintStartRowIndex)) return this;\n\n        let paintStartColumnIndex = 0, paintEndColumnIndex = 0, nopaintLeftColumnsWidth = null, nopaintRightColumnsWidth = null;\n\n        let bodyScrollLeft = -(this.$.panel[\"body-scroll\"].position().left);\n\n        if (this.config.virtualScrollX) { // 페인트 시작컬럼위치와 종료컬럼위치 구하기\n            for (let ci = this.xvar.frozenColumnIndex; ci < this.colGroup.length; ci++) {\n                // bodyScrollLeft\n                this.colGroup[ci]._sx = (ci == this.xvar.frozenColumnIndex) ? 0 : this.colGroup[ci - 1]._ex;\n                this.colGroup[ci]._ex = this.colGroup[ci]._sx + this.colGroup[ci]._width;\n\n                if (this.colGroup[ci]._sx <= bodyScrollLeft && this.colGroup[ci]._ex >= bodyScrollLeft) {\n                    paintStartColumnIndex = ci;\n                }\n                if (this.colGroup[ci]._sx <= (bodyScrollLeft + this.xvar.bodyWidth) && this.colGroup[ci]._ex >= (bodyScrollLeft + this.xvar.bodyWidth)) {\n                    paintEndColumnIndex = ci;\n\n                    if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = this.colGroup[paintStartColumnIndex]._sx;\n                    if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = this.xvar.scrollContentWidth - this.colGroup[ci]._ex;\n                }\n            }\n\n            if (nopaintLeftColumnsWidth === null) nopaintLeftColumnsWidth = 0;\n            if (nopaintRightColumnsWidth === null) nopaintRightColumnsWidth = 0;\n            this.$.panel[\"top-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n            this.$.panel[\"body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n            this.$.panel[\"bottom-body-scroll\"].css({\"padding-left\": nopaintLeftColumnsWidth, \"padding-right\": nopaintRightColumnsWidth});\n        }\n\n        let isFirstPaint = (typeof this.xvar.paintStartRowIndex === \"undefined\"),\n            headerColGroup = this.headerColGroup,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount, virtualPaintRowCount;\n\n        if (!this.config.virtualScrollY) {\n            virtualPaintRowCount = paintRowCount = list.length;\n        } else {\n            virtualPaintRowCount = Math.ceil(this.xvar.bodyHeight / this.xvar.bodyTrHeight);\n            paintRowCount = virtualPaintRowCount + (this.xvar.paintRowCountMargin || 1);\n        }\n\n        // 여유범위 안에 있으면 페인팅 안할수 있게 paintStartRowIndex 변경하지 않음.\n        if (this.xvar.paintRowCountTopMargin < paintStartRowIndex && Math.abs(this.xvar.paintStartRowIndex - paintStartRowIndex) <= this.xvar.paintRowCountTopMargin) {\n            paintStartRowIndex = this.xvar.paintStartRowIndex;\n        }\n\n        if (\n            this.xvar.dataRowCount === list.length\n            && this.xvar.paintStartRowIndex === paintStartRowIndex\n            && this.xvar.paintRowCount === paintRowCount\n            && this.xvar.paintStartColumnIndex === paintStartColumnIndex\n            && this.xvar.paintEndColumnIndex === paintEndColumnIndex\n        ) return this; // 스크롤 포지션 변경 여부에 따라 프로세스 진행여부 결정\n\n        // bodyRowData 수정 : 페인트 컬럼 포지션이 달라지므로\n        if (nopaintLeftColumnsWidth || nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(paintStartColumnIndex - this.xvar.frozenColumnIndex, paintEndColumnIndex - paintStartColumnIndex + 1 + this.xvar.frozenColumnIndex);\n            bodyRowData = GRID.util.getTableByStartEndColumnIndex(bodyRowData, paintStartColumnIndex, paintEndColumnIndex);\n\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, paintStartColumnIndex, paintEndColumnIndex);\n            }\n            if (this.xvar.paintStartColumnIndex !== paintStartColumnIndex || this.xvar.paintEndColumnIndex !== paintEndColumnIndex) {\n                this.needToPaintSum = true;\n            }\n        }\n\n\n        /*\n        if (!this.config.virtualScrollX && document.addEventListener && ax5.info.supportTouch) {\n            paintRowCount = paintRowCount * 2;\n        }\n         */\n\n        /// 스크롤 컨텐츠의 높이 : 그리드 스크롤의 실제 크기와는 관계 없이 데이터 갯수에 따라 스크롤 컨텐츠 높이값 구해서 저장해두기.\n        this.xvar.scrollContentHeight = this.xvar.bodyTrHeight * (this.list.length - this.xvar.frozenRowIndex);\n        /// 사용된 패널들의 키 모음\n        this.$.livePanelKeys = [];\n\n        // 그리드 바디 영역 페인트 함수\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _groupRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintBody = function (_elTargetKey, _colGroup, _bodyRow, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [],\n                cgi, cgl, di, dl, tri, trl, ci, cl, col, cellHeight, colAlign,\n                isScrolled = (function () {\n                    // 스크롤값이 변경되거나 처음 호출되었습니까?\n                    if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                        _scrollConfig = {\n                            paintStartRowIndex: 0,\n                            paintRowCount: _list.length\n                        };\n                        return false;\n                    } else {\n                        return true;\n                    }\n                })();\n\n            if (isScrolled) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_scrollConfig.paintStartRowIndex - this.xvar.frozenRowIndex) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            // 가로 가상 스크롤 적용하지 않는 경우\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_list[di]) {\n                    let isGroupingRow = false, rowTable, odi = (typeof _list[di].__origin_index__ !== \"undefined\") ? _list[di].__origin_index__ : di;\n                    if (_groupRow && \"__isGrouping\" in _list[di]) {\n                        rowTable = _groupRow;\n                        isGroupingRow = true;\n                    } else {\n                        rowTable = _bodyRow;\n                    }\n\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n\n                        SS.push('<tr class=\"tr-' + (di % 4) + '\"',\n                            (isGroupingRow) ? ' data-ax5grid-grouping-tr=\"true\"' : '',\n                            ' data-ax5grid-tr-data-index=\"' + di + '\"',\n                            ' data-ax5grid-selected=\"' + (_list[di][cfg.columnKeys.selected] || \"false\") + '\"',\n                            ' data-ax5grid-disable-selection=\"' + (_list[di][cfg.columnKeys.disableSelection] || \"false\") + '\"',\n                            '>');\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                            })(cellHeight), (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + odi + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                        SS.push('</tr>');\n                    }\n                }\n            }\n            SS.push('</table>');\n\n            if (isScrolled && _list.length) {\n                SS.push('<div style=\"font-size:0;line-height:0;height: ' + (_list.length - di) * _scrollConfig.bodyTrHeight + 'px;\"></div>');\n            }\n\n            _elTarget.empty();\n            SS = SS.join('');\n\n            if (this.config.virtualScrollAccelerated && _elTargetKey !== \"aside-body-scroll\") {\n                setTimeout(function () {\n                    _elTarget.get(0).innerHTML = SS;\n                });\n            } else {\n                _elTarget.get(0).innerHTML = SS;\n            }\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey];\n\n            if (!isFirstPaint && !_scrollConfig) {\n                this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n                return false;\n            }\n\n            let SS = [], cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty();\n            SS = SS.join('');\n            if (this.config.virtualScrollAccelerated) {\n                setTimeout(function () {\n                    _elTarget.get(0).innerHTML = SS;\n                });\n            } else {\n                _elTarget.get(0).innerHTML = SS;\n            }\n\n            this.$.livePanelKeys.push(_elTargetKey); // 사용중인 패널키를 모아둠. (뷰의 상태 변경시 사용하려고)\n            return true;\n        };\n\n        /**\n         * @param _elTargetKey\n         * @param _colGroup\n         * @param _bodyRow\n         * @param _list\n         * @param [_scrollConfig]\n         * @returns {boolean}\n         */\n        let mergeCellsBody = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let tblRowMaps = [];\n            let _elTarget = this.$.panel[_elTargetKey];\n            let token = {}, hasMergeTd;\n            //console.log(_elTarget);\n\n            // 테이블의 td들을 수잡하여 저장해두고 스크립트로 반복하여 정리.\n            let tableTrs = _elTarget.find(\"tr\");\n            for (let ri = 0, rl = tableTrs.length; ri < rl; ri++) {\n                let tableTrTds, trMaps;\n\n                if (!tableTrs[ri].getAttribute(\"data-ax5grid-grouping-tr\")) {\n                    tableTrTds = tableTrs[ri].childNodes;\n                    trMaps = [];\n                    for (let ci = 0, cl = tableTrTds.length; ci < cl; ci++) {\n                        let tdObj = {\n                            \"$\": jQuery(tableTrTds[ci])\n                        };\n\n                        if (tdObj[\"$\"].attr(\"data-ax5grid-column-col\") != \"null\") {\n                            tdObj.dindex = tdObj[\"$\"].attr(\"data-ax5grid-data-index\");\n                            tdObj.tri = tdObj[\"$\"].attr(\"data-ax5grid-column-row\");\n                            tdObj.ci = tdObj[\"$\"].attr(\"data-ax5grid-column-col\");\n                            tdObj.rowIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-rowIndex\");\n                            tdObj.colIndex = tdObj[\"$\"].attr(\"data-ax5grid-column-colIndex\");\n                            tdObj.rowspan = tdObj[\"$\"].attr(\"rowspan\");\n                            tdObj.text = tdObj[\"$\"].text();\n                            trMaps.push(tdObj);\n                        }\n\n                        tdObj = null;\n                    }\n                    tblRowMaps.push(trMaps);\n                }\n\n            }\n\n\n            // 두줄이상 일 때 의미가 있으니.\n            if (tblRowMaps.length > 1) {\n                hasMergeTd = false;\n                for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                    let prevTokenColIndexs = [];\n                    for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                        // 적용 하려는 컬럼에 editor 속성이 없다면 머지 대상입니다.\n                        if (!_colGroup[ci].editor && (() => {\n                                if (U.isArray(cfg.body.mergeCells)) {\n                                    return ax5.util.search(cfg.body.mergeCells, _colGroup[ci].key) > -1;\n                                } else {\n                                    return true;\n                                }\n                            })()) {\n\n                            // 앞줄과 값이 같다면.\n                            if (token[ci] && (() => {\n                                    if (prevTokenColIndexs.length > 0) {\n                                        let hasFalse = true;\n                                        prevTokenColIndexs.forEach(function (ti) {\n                                            if (tblRowMaps[ri - 1][ti].text != tblRowMaps[ri][ti].text) {\n                                                hasFalse = false;\n                                            }\n                                        });\n                                        return hasFalse;\n                                    } else {\n                                        return true;\n                                    }\n                                })() && token[ci].text == tblRowMaps[ri][ci].text) {\n                                tblRowMaps[ri][ci].rowspan = 0;\n                                tblRowMaps[token[ci].ri][ci].rowspan++;\n                                hasMergeTd = true;\n                            } else {\n                                token[ci] = {\n                                    ri: ri,\n                                    ci: ci,\n                                    text: tblRowMaps[ri][ci].text\n                                };\n                            }\n\n                            prevTokenColIndexs.push(ci);\n                        }\n                    }\n                }\n\n                // rowspan을 다 구했으면 적용합니다.\n                if (hasMergeTd) {\n                    for (let ri = 0, rl = tblRowMaps.length; ri < rl; ri++) {\n                        for (let ci = 0, cl = tblRowMaps[ri].length; ci < cl; ci++) {\n                            if (tblRowMaps[ri][ci].rowspan == 0) {\n                                tblRowMaps[ri][ci][\"$\"].remove();\n                            } else if (tblRowMaps[ri][ci].rowspan > 1) {\n                                tblRowMaps[ri][ci][\"$\"]\n                                    .attr(\"rowspan\", tblRowMaps[ri][ci].rowspan)\n                                    .addClass(\"merged\");\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        let scrollConfig = {\n            paintStartRowIndex: paintStartRowIndex,\n            paintRowCount: paintRowCount,\n            paintStartColumnIndex: paintStartColumnIndex,\n            paintEndColumnIndex: paintEndColumnIndex,\n            nopaintLeftColumnsWidth: nopaintLeftColumnsWidth,\n            nopaintRightColumnsWidth: nopaintRightColumnsWidth,\n            bodyTrHeight: this.xvar.bodyTrHeight,\n            virtualScrollX: this.config.virtualScrollX,\n            virtualScrollY: this.config.virtualScrollY,\n        };\n\n        // aside\n        if (cfg.asidePanelWidth > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-aside-body\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n\n            repaintBody.call(this, \"aside-body-scroll\", this.asideColGroup, asideBodyRowData, asideBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum) {\n                // 바닥 요약 (footSum에 대한 aside 사용안함)\n                //repaintSum.call(this, \"bottom-aside-body\", this.asideColGroup, asideBodyRowData, null, list);\n            }\n        }\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                repaintBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), jQuery.extend({}, scrollConfig, {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex\n                }));\n            }\n\n            repaintBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, leftBodyGroupingData, list, scrollConfig);\n\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > 0) {\n            // 상단 행고정\n            repaintBody.call(this, \"top-body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), jQuery.extend({}, scrollConfig, {\n                paintStartRowIndex: 0,\n                paintRowCount: this.xvar.frozenRowIndex\n            }));\n        }\n        repaintBody.call(this, \"body-scroll\", headerColGroup, bodyRowData, bodyGroupingData, list, scrollConfig);\n\n        // 바닥 요약\n        if (cfg.footSum && this.needToPaintSum) {\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        /// mergeCells\n        if (cfg.body.mergeCells && this.list.length) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                    // console.log(this.leftHeaderColGroup, leftBodyRowData);\n                    mergeCellsBody.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                mergeCellsBody.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) { // 상단 행고정\n                mergeCellsBody.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            mergeCellsBody.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, scrollConfig);\n        }\n\n        this.xvar.virtualPaintStartRowIndex = virtualPaintStartRowIndex;\n        this.xvar.paintStartRowIndex = paintStartRowIndex;\n        this.xvar.paintRowCount = paintRowCount;\n        this.xvar.virtualPaintRowCount = virtualPaintRowCount;\n        this.xvar.paintStartColumnIndex = paintStartColumnIndex;\n        this.xvar.paintEndColumnIndex = paintEndColumnIndex;\n        this.xvar.nopaintLeftColumnsWidth = nopaintLeftColumnsWidth;\n        this.xvar.nopaintRightColumnsWidth = nopaintRightColumnsWidth;\n        this.xvar.dataRowCount = list.length;\n        this.needToPaintSum = false;\n\n        GRID.page.statusUpdate.call(this);\n    };\n\n    const repaintCell = function (_panelName, _dindex, _rowIndex, _colIndex, _newValue) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n\n        let updateCell = this.$[\"panel\"][_panelName]\n                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                .find('[data-ax5grid-column-rowindex=\"' + _rowIndex + '\"][data-ax5grid-column-colindex=\"' + _colIndex + '\"]')\n                .find('[data-ax5grid-cellholder]'),\n            colGroup = this.colGroup,\n            col = colGroup[_colIndex];\n\n        updateCell.html(getFieldValue.call(this, list, list[_dindex], _dindex, col));\n\n        if (col.editor && col.editor.updateWith) {\n            col.editor.updateWith.forEach(function (updateColumnKey) {\n                colGroup.forEach(function (col) {\n                    if (col.key == updateColumnKey) {\n                        let rowIndex = col.rowIndex, colIndex = col.colIndex,\n                            panelName = GRID.util.findPanelByColumnIndex.call(self, _dindex, colIndex, rowIndex).panelName,\n                            updateWithCell = self.$[\"panel\"][panelName]\n                                .find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]')\n                                .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                                .find('[data-ax5grid-cellholder]');\n\n                        updateWithCell.html(getFieldValue.call(self, list, list[_dindex], _dindex, col));\n                    }\n                });\n            });\n        }\n\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            headerColGroup = this.headerColGroup,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        if (this.xvar.nopaintLeftColumnsWidth || this.xvar.nopaintRightColumnsWidth) {\n            headerColGroup = [].concat(headerColGroup).splice(this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex - this.xvar.paintStartColumnIndex + 1);\n            if (cfg.body.grouping) {\n                bodyGroupingData = GRID.util.getTableByStartEndColumnIndex(bodyGroupingData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n            if (cfg.footSum) {\n                footSumData = GRID.util.getTableByStartEndColumnIndex(footSumData, this.xvar.paintStartColumnIndex, this.xvar.paintEndColumnIndex);\n            }\n        }\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl,\n                col, cellHeight, colAlign;\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > 0) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", headerColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                        paintStartRowIndex: 0,\n                        paintRowCount: this.xvar.frozenRowIndex,\n                        bodyTrHeight: this.xvar.bodyTrHeight\n                    });\n                }\n                replaceGroupTr.call(this, \"left-body-scroll\", headerColGroup, leftBodyGroupingData, list, scrollConfig);\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > 0) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex), {\n                    paintStartRowIndex: 0,\n                    paintRowCount: this.xvar.frozenRowIndex,\n                    bodyTrHeight: this.xvar.bodyTrHeight\n                });\n            }\n\n            replaceGroupTr.call(this, \"body-scroll\", headerColGroup, bodyGroupingData, list, scrollConfig);\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", headerColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    const repaintRow = function (_dindex) {\n        let self = this,\n            cfg = this.config,\n            list = this.list;\n        /// ~~~~~~\n\n        let paintStartRowIndex = Math.floor(Math.abs(this.$.panel[\"body-scroll\"].position().top) / this.xvar.bodyTrHeight) + this.xvar.frozenRowIndex,\n            asideBodyRowData = this.asideBodyRowData,\n            leftBodyRowData = this.leftBodyRowData,\n            bodyRowData = this.bodyRowData,\n            leftFootSumData = this.leftFootSumData,\n            footSumData = this.footSumData,\n            asideBodyGroupingData = this.asideBodyGroupingData,\n            leftBodyGroupingData = this.leftBodyGroupingData,\n            bodyGroupingData = this.bodyGroupingData,\n            bodyAlign = cfg.body.align,\n            paintRowCount = Math.ceil(this.$.panel[\"body\"].height() / this.xvar.bodyTrHeight) + 1,\n            scrollConfig = {\n                paintStartRowIndex: paintStartRowIndex,\n                paintRowCount: paintRowCount,\n                bodyTrHeight: this.xvar.bodyTrHeight\n            };\n\n        let repaintSum = function (_elTargetKey, _colGroup, _bodyRow, _list) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                cgi, cgl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('<tr class=\"tr-sum\">');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + tri + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"sum\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            var attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[\"sum_\" + col.colIndex + \"_\" + tri], this.selectedColumn[\"sum_\" + col.colIndex + \"_\" + tri]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            isFootSum: true\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        var lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                    })(cellHeight), getSumFieldValue.call(this, _list, col), '</span>');\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-column-attr=\"' + (\"sum\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n\n            SS.push('</table>');\n\n            _elTarget.empty().get(0).innerHTML = SS.join('');\n            return true;\n        };\n        let replaceGroupTr = function (_elTargetKey, _colGroup, _groupRow, _list, _scrollConfig) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                di, dl, tri, trl, ci, cl, col, cellHeight, colAlign;\n\n            if (typeof _scrollConfig === \"undefined\" || typeof _scrollConfig['paintStartRowIndex'] === \"undefined\") {\n                _scrollConfig = {\n                    paintStartRowIndex: 0,\n                    paintRowCount: _list.length\n                };\n            }\n\n            for (di = _scrollConfig.paintStartRowIndex, dl = (function () {\n                let len;\n                len = _list.length;\n                if (_scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex < len) {\n                    len = _scrollConfig.paintRowCount + _scrollConfig.paintStartRowIndex;\n                }\n                return len;\n            })(); di < dl; di++) {\n                if (_list[di] && _groupRow && \"__isGrouping\" in _list[di]) {\n                    let rowTable = _groupRow;\n                    SS = [];\n                    for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                        for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                            col = rowTable.rows[tri].cols[ci];\n                            cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                            colAlign = col.align || bodyAlign;\n\n                            SS.push('<td ',\n                                'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                                'data-ax5grid-data-index=\"' + di + '\" ',\n                                'data-ax5grid-column-row=\"' + tri + '\" ',\n                                'data-ax5grid-column-col=\"' + ci + '\" ',\n                                'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                                'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                                'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                                (function (_focusedColumn, _selectedColumn) {\n                                    let attrs = \"\";\n                                    if (_focusedColumn) {\n                                        attrs += 'data-ax5grid-column-focused=\"true\" ';\n                                    }\n                                    if (_selectedColumn) {\n                                        attrs += 'data-ax5grid-column-selected=\"true\" ';\n                                    }\n                                    return attrs;\n                                })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                                'colspan=\"' + col.colspan + '\" ',\n                                'rowspan=\"' + col.rowspan + '\" ',\n                                'class=\"' + (function (_col) {\n                                    let tdCSS_class = \"\";\n                                    if (_col.styleClass) {\n                                        if (U.isFunction(_col.styleClass)) {\n                                            tdCSS_class += _col.styleClass.call({\n                                                    column: _col,\n                                                    key: _col.key,\n                                                    item: _list[di],\n                                                    index: di\n                                                }) + \" \";\n                                        } else {\n                                            tdCSS_class += _col.styleClass + \" \";\n                                        }\n                                    }\n                                    if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                                    if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                                    return tdCSS_class;\n                                }).call(this, col) + '\" ',\n                                'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                            SS.push((function (_cellHeight) {\n                                let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                                if (!col.multiLine) {\n                                    _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                                }\n\n                                return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                                    ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                                    '\" style=\"height:' + _cellHeight + 'px;line-height: ' + lineHeight + 'px;\">';\n\n                            })(cellHeight), getGroupingValue.call(this, _list[di], di, col), '</span>');\n\n                            SS.push('</td>');\n                        }\n                        SS.push('<td ',\n                            'data-ax5grid-column-row=\"null\" ',\n                            'data-ax5grid-column-col=\"null\" ',\n                            'data-ax5grid-data-index=\"' + di + '\" ',\n                            'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                            'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                            '></td>');\n                    }\n                    _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n                }\n            }\n        };\n        let replaceTr = function (_elTargetKey, _colGroup, _bodyRow, _list, di) {\n            let _elTarget = this.$.panel[_elTargetKey],\n                SS = [],\n                tri, trl, ci, cl, col, cellHeight, colAlign, rowTable = _bodyRow;\n\n            for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                    col = rowTable.rows[tri].cols[ci];\n                    cellHeight = cfg.body.columnHeight * col.rowspan - cfg.body.columnBorderWidth;\n                    colAlign = col.align || bodyAlign;\n\n                    SS.push('<td ',\n                        'data-ax5grid-panel-name=\"' + _elTargetKey + '\" ',\n                        'data-ax5grid-data-index=\"' + di + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        'data-ax5grid-column-rowIndex=\"' + col.rowIndex + '\" ',\n                        'data-ax5grid-column-colIndex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        (function (_focusedColumn, _selectedColumn) {\n                            let attrs = \"\";\n                            if (_focusedColumn) {\n                                attrs += 'data-ax5grid-column-focused=\"true\" ';\n                            }\n                            if (_selectedColumn) {\n                                attrs += 'data-ax5grid-column-selected=\"true\" ';\n                            }\n                            return attrs;\n                        })(this.focusedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex], this.selectedColumn[di + \"_\" + col.colIndex + \"_\" + col.rowIndex]),\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            let tdCSS_class = \"\";\n                            if (_col.styleClass) {\n                                if (U.isFunction(_col.styleClass)) {\n                                    tdCSS_class += _col.styleClass.call({\n                                            column: _col,\n                                            key: _col.key,\n                                            item: _list[di],\n                                            index: di\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.styleClass + \" \";\n                                }\n                            }\n                            if (cfg.body.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n\n                    SS.push((function (_cellHeight) {\n                        let lineHeight = (cfg.body.columnHeight - cfg.body.columnPadding * 2 - cfg.body.columnBorderWidth);\n                        if (!col.multiLine) {\n                            _cellHeight = cfg.body.columnHeight - cfg.body.columnBorderWidth;\n                        }\n\n                        return '<span data-ax5grid-cellHolder=\"' + ((col.multiLine) ? 'multiLine' : '') + '\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            '\" style=\"height:' + _cellHeight + 'px;' + ((col.multiLine) ? '':'line-height: ' + lineHeight + 'px;') + '\">';\n\n                    })(cellHeight), getFieldValue.call(this, _list, _list[di], di, col), '</span>');\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'data-ax5grid-data-index=\"' + di + '\" ',\n                    'data-ax5grid-column-attr=\"' + (\"default\") + '\" ',\n                    'style=\"height: ' + (cfg.body.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n            }\n\n            _elTarget.find('tr[data-ax5grid-tr-data-index=\"' + di + '\"]').empty().get(0).innerHTML = SS.join('');\n        };\n\n        // left\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n            } else {\n                replaceTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyRowData, list, _dindex);\n            }\n        }\n\n        // body\n        if (this.xvar.frozenRowIndex > _dindex) {\n            // 상단 행고정\n            replaceTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyRowData, list.slice(0, this.xvar.frozenRowIndex), _dindex);\n        } else {\n            replaceTr.call(this, \"body-scroll\", this.headerColGroup, bodyRowData, list, _dindex);\n        }\n\n        // body.grouping tr 다시 그리기..\n        if (cfg.body.grouping) {\n            // left\n            if (this.xvar.frozenColumnIndex > 0) {\n                if (this.xvar.frozenRowIndex > _dindex) {\n                    // 상단 행고정\n                    replaceGroupTr.call(this, \"top-left-body\", this.leftHeaderColGroup, leftBodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n                }\n                else {\n                    replaceGroupTr.call(this, \"left-body-scroll\", this.leftHeaderColGroup, leftBodyGroupingData, list, scrollConfig);\n                }\n            }\n\n            // body\n            if (this.xvar.frozenRowIndex > _dindex) {\n                // 상단 행고정\n                replaceGroupTr.call(this, \"top-body-scroll\", this.headerColGroup, bodyGroupingData, list.slice(0, this.xvar.frozenRowIndex));\n            }\n            else {\n                replaceGroupTr.call(this, \"body-scroll\", this.headerColGroup, bodyGroupingData, list, scrollConfig);\n            }\n        }\n\n        if (this.xvar.frozenColumnIndex > 0) {\n            if (cfg.footSum && this.needToPaintSum) {\n                // 바닥 요약\n                repaintSum.call(this, \"bottom-left-body\", this.leftHeaderColGroup, leftFootSumData, list);\n            }\n        }\n\n        if (cfg.footSum && this.needToPaintSum) {\n            // 바닥 요약\n            repaintSum.call(this, \"bottom-body-scroll\", this.headerColGroup, footSumData, list, scrollConfig);\n        }\n    };\n\n    const scrollTo = function (css, noRepaint) {\n\n        if (this.isInlineEditing) {\n            for (var key in this.inlineEditing) {\n                //if(this.inlineEditing[key].editor.type === \"select\") {}\n                // 인라인 에디팅 인데 스크롤 이벤트가 발생하면 디액티브 처리\n                GRID.body.inlineEdit.deActive.call(this, \"ESC\", key);\n            }\n        }\n\n        if (this.config.asidePanelWidth > 0 && \"top\" in css) {\n            this.$.panel[\"aside-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenColumnIndex > 0 && \"top\" in css) {\n            this.$.panel[\"left-body-scroll\"].css({top: css.top});\n        }\n        if (this.xvar.frozenRowIndex > 0 && \"left\" in css) {\n            this.$.panel[\"top-body-scroll\"].css({left: css.left});\n        }\n\n        this.$.panel[\"body-scroll\"].css(css);\n\n        if (this.config.footSum && \"left\" in css) {\n            this.$.panel[\"bottom-body-scroll\"].css({left: css.left});\n        }\n\n        if (this.config.virtualScrollY && !noRepaint && \"top\" in css) {\n            repaint.call(this);\n        } else if (this.config.virtualScrollX && !noRepaint && \"left\" in css) {\n            repaint.call(this);\n        }\n    };\n\n    const blur = function () {\n        columnSelect.focusClear.call(this);\n        columnSelect.clear.call(this);\n        if (this.isInlineEditing) {\n            inlineEdit.deActive.call(this);\n        }\n    };\n\n    const moveFocus = function (_position) {\n        let focus = {\n            \"UD\": function (_dy) {\n                let moveResult = true,\n                    focusedColumn, originalColumn, while_i,\n                    nPanelInfo;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dy > 0) {\n                    if (focusedColumn.rowIndex + (originalColumn.rowspan - 1) + _dy > this.bodyRowTable.rows.length - 1) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = 0;\n                        if (focusedColumn.dindex > this.list.length - 1) {\n                            focusedColumn.dindex = this.list.length - 1;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n                else {\n                    if (focusedColumn.rowIndex + _dy < 0) {\n                        focusedColumn.dindex = focusedColumn.dindex + _dy;\n                        focusedColumn.rowIndex = this.bodyRowTable.rows.length - 1;\n                        if (focusedColumn.dindex < 0) {\n                            focusedColumn.dindex = 0;\n                            moveResult = false;\n                        }\n                    } else {\n                        focusedColumn.rowIndex = focusedColumn.rowIndex + _dy;\n                    }\n                }\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        moveResult = false;\n                        break;\n                    }\n                    while_i++;\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        if (_dy > 0) {\n                            focusedColumn.dindex++;\n                        } else {\n                            focusedColumn.dindex--;\n                        }\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.ㅊㅇ\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex <= this.xvar.virtualPaintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n\n            },\n            \"LR\": function (_dx) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i = 0, isScrollPanel = false, containerPanelName = \"\", nPanelInfo;\n\n                for (var c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) return false;\n\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n                if (_dx < 0) {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex < 0) {\n                        focusedColumn.colIndex = 0;\n                        moveResult = false;\n                    }\n                } else {\n                    focusedColumn.colIndex = focusedColumn.colIndex + _dx;\n                    if (focusedColumn.colIndex > this.colGroup.length - 1) {\n                        focusedColumn.colIndex = this.colGroup.length - 1;\n                        moveResult = false;\n                    }\n                }\n\n                if (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    focusedColumn.rowIndex = 0;\n                }\n\n                if (this.list[focusedColumn.dindex] && this.list[focusedColumn.dindex].__isGrouping) {\n                    if (_dx < 0) {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyGroupingMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (_dx < 0) {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex--;\n                            if (focusedColumn.colIndex <= 0) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    } else {\n                        while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                            focusedColumn.colIndex++;\n                            if (focusedColumn.colIndex >= this.colGroup.length) {\n                                // find fail\n                                moveResult = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n\n                // if mergeCells\n                if (this.config.body.mergeCells && this.list.length && focusedColumn.dindex > 1) {\n                    while (!this.$.panel[nPanelInfo.panelName]\n                        .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                        .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]').get(0)) {\n\n                        focusedColumn.dindex--;\n\n                        if (focusedColumn.dindex < 0 || focusedColumn.dindex > this.list.length - 1) {\n                            break;\n                        }\n                    }\n                    nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                }\n\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리\n                let isScrollTo = (function () {\n                    if (!this.config.virtualScrollX) return false;\n                    let scrollLeft = 0;\n                    if (focusedColumn.colIndex + 1 > this.xvar.frozenColumnIndex) {\n                        if (focusedColumn.colIndex <= this.xvar.paintStartColumnIndex && this.colGroup[focusedColumn.colIndex]) {\n                            scrollLeft = -this.colGroup[Number(focusedColumn.colIndex)]._sx;\n                            scrollTo.call(this, {left: scrollLeft});\n                            GRID.header.scrollTo.call(this, {left: scrollLeft});\n                            GRID.scroller.resize.call(this);\n                            return true;\n                        }\n                        else if (focusedColumn.colIndex >= this.xvar.paintEndColumnIndex && this.colGroup[Number(focusedColumn.colIndex)]) {\n                            if (this.colGroup[Number(focusedColumn.colIndex)]._ex > this.xvar.bodyWidth) {\n                                scrollLeft = (this.colGroup[Number(focusedColumn.colIndex)]._ex - this.xvar.bodyWidth);\n                                scrollTo.call(this, {left: -scrollLeft});\n                                GRID.header.scrollTo.call(this, {left: -scrollLeft});\n                                GRID.scroller.resize.call(this);\n                            }\n                            return true;\n                        }\n                    }\n                    scrollLeft = null;\n                    return false;\n                }).call(this);\n\n                containerPanelName = nPanelInfo.containerPanelName;\n                isScrollPanel = nPanelInfo.isScrollPanel;\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n\n                var $column = this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                if (!isScrollTo && $column && isScrollPanel) {// 스크롤 패널 이라면~\n                    // todo : 컬럼이동할 때에도 scrollTo 체크\n                    var newLeft = (function () {\n                        if ($column.position().left + $column.outerWidth() > Math.abs(this.$.panel[focusedColumn.panelName].position().left) + this.$.panel[containerPanelName].width()) {\n                            return $column.position().left + $column.outerWidth() - this.$.panel[containerPanelName].width();\n                        } else if (Math.abs(this.$.panel[focusedColumn.panelName].position().left) > $column.position().left) {\n                            return $column.position().left;\n                        } else {\n                            return;\n                        }\n                    }).call(this);\n\n                    if (typeof newLeft !== \"undefined\") {\n                        GRID.header.scrollTo.call(this, {left: -newLeft});\n                        scrollTo.call(this, {left: -newLeft});\n                        GRID.scroller.resize.call(this);\n                    }\n                }\n\n                return moveResult;\n            },\n            \"INDEX\": function (_dindex) {\n                let moveResult = true,\n                    focusedColumn, originalColumn,\n                    while_i;\n\n                for (let c in this.focusedColumn) {\n                    focusedColumn = jQuery.extend({}, this.focusedColumn[c], true);\n                    break;\n                }\n                if (!focusedColumn) {\n                    focusedColumn = {\n                        rowIndex: 0,\n                        colIndex: 0\n                    }\n                }\n                originalColumn = this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex];\n\n                columnSelect.focusClear.call(this);\n                columnSelect.clear.call(this);\n\n\n                if (_dindex == \"end\") {\n                    _dindex = this.list.length - 1;\n                }\n\n                focusedColumn.dindex = _dindex;\n                focusedColumn.rowIndex = 0;\n\n                while_i = 0;\n                while (typeof this.bodyRowMap[focusedColumn.rowIndex + \"_\" + focusedColumn.colIndex] === \"undefined\") {\n                    if (focusedColumn.rowIndex == 0 || while_i % 2 == ((_dy > 0) ? 0 : 1)) {\n                        focusedColumn.colIndex--;\n                    } else {\n                        focusedColumn.rowIndex--;\n                    }\n\n                    if (focusedColumn.rowIndex <= 0 && focusedColumn.colIndex <= 0) {\n                        // find fail\n                        break;\n                    }\n                    while_i++;\n                }\n\n                let nPanelInfo = GRID.util.findPanelByColumnIndex.call(this, focusedColumn.dindex, focusedColumn.colIndex);\n                focusedColumn.panelName = nPanelInfo.panelName;\n\n                // 포커스 컬럼의 위치에 따라 스크롤 처리.\n                (function () {\n                    if (focusedColumn.dindex + 1 > this.xvar.frozenRowIndex) {\n                        if (focusedColumn.dindex < this.xvar.virtualPaintStartRowIndex) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                        else if (focusedColumn.dindex + 1 > this.xvar.virtualPaintStartRowIndex + (this.xvar.virtualPaintRowCount - 2)) {\n                            scrollTo.call(this, {top: -(focusedColumn.dindex - this.xvar.frozenRowIndex - this.xvar.virtualPaintRowCount + 3) * this.xvar.bodyTrHeight});\n                            GRID.scroller.resize.call(this);\n                        }\n                    }\n                }).call(this);\n\n                this.focusedColumn[focusedColumn.dindex + \"_\" + focusedColumn.colIndex + \"_\" + focusedColumn.rowIndex] = focusedColumn;\n                this.$.panel[focusedColumn.panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + focusedColumn.dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + focusedColumn.rowIndex + '\"][data-ax5grid-column-colindex=\"' + focusedColumn.colIndex + '\"]')\n                    .attr('data-ax5grid-column-focused', \"true\");\n\n                return moveResult;\n            }\n        };\n\n        let processor = {\n            \"UP\": function () {\n                return focus[\"UD\"].call(this, -1);\n            },\n            \"DOWN\": function () {\n                return focus[\"UD\"].call(this, 1);\n            },\n            \"LEFT\": function () {\n                return focus[\"LR\"].call(this, -1);\n            },\n            \"RIGHT\": function () {\n                return focus[\"LR\"].call(this, 1);\n            },\n            \"HOME\": function () {\n                return focus[\"INDEX\"].call(this, 0);\n            },\n            \"END\": function () {\n                return focus[\"INDEX\"].call(this, \"end\");\n            },\n            \"position\": function (_position) {\n                return focus[\"INDEX\"].call(this, _position);\n            }\n        };\n\n        if (_position in processor) {\n            return processor[_position].call(this);\n        } else {\n            return processor[\"position\"].call(this, _position);\n        }\n    };\n\n    const inlineEdit = {\n        active(_focusedColumn, _e, _initValue) {\n            var self = this,\n                dindex, colIndex, rowIndex, panelName, colspan,\n                col, editor;\n\n            // this.inlineEditing = {};\n            for (var key in _focusedColumn) {\n                panelName = _focusedColumn[key].panelName;\n                dindex = _focusedColumn[key].dindex;\n                colIndex = _focusedColumn[key].colIndex;\n                rowIndex = _focusedColumn[key].rowIndex;\n                colspan = _focusedColumn[key].colspan;\n\n                // 인라인 에디팅을 멈춰야 하는 경우 조건\n                col = this.colGroup[colIndex];\n                if (!(editor = col.editor)) return this;\n\n                // editor disabled 체크\n                if (U.isFunction(editor.disabled)) {\n                    if (editor.disabled.call({\n                            list: this.list,\n                            dindex: dindex,\n                            item: this.list[dindex],\n                            key: col.key,\n                            value: _initValue\n                        })) {\n                        return this;\n                    }\n                }\n\n                // 조건에 맞지 않는 에디팅 타입이면 반응 없음.\n                if (!(function (_editor, _type) {\n                        if (_editor.type in GRID.inlineEditor) {\n                            return (GRID.inlineEditor[_editor.type].editMode == \"popup\");\n                        }\n                    })(editor)) {\n                    // 체크 박스 타입이면 값 변경 시도\n                    if (editor.type == \"checkbox\") {\n                        var checked, newValue;\n                        if (editor.config && editor.config.trueValue) {\n                            if (checked = !(_initValue == editor.config.trueValue)) {\n                                newValue = editor.config.trueValue;\n                            } else {\n                                newValue = editor.config.falseValue;\n                            }\n                        } else {\n                            newValue = checked = (_initValue == false || _initValue == \"false\" || _initValue < \"1\") ? \"true\" : \"false\";\n                        }\n\n                        GRID.data.setValue.call(self, dindex, col.key, newValue);\n                        updateRowState.call(self, [\"cellChecked\"], dindex, {\n                            key: col.key, rowIndex: rowIndex, colIndex: colIndex,\n                            editorConfig: col.editor.config, checked: checked\n                        });\n                    }\n                    return this;\n                }\n\n                if (this.list[dindex].__isGrouping) {\n                    return false;\n                }\n                if (key in this.inlineEditing) {\n                    return false;\n                }\n                this.inlineEditing[key] = {\n                    editor: editor,\n                    panelName: panelName,\n                    columnKey: key,\n                    column: _focusedColumn[key],\n                    useReturnToSave: GRID.inlineEditor[editor.type].useReturnToSave\n                };\n                this.isInlineEditing = true;\n            }\n            if (this.isInlineEditing) {\n\n                let originalValue = GRID.data.getValue.call(self, dindex, col.key),\n                    initValue = (function (__value, __editor) {\n                        if (U.isNothing(__value)) {\n                            __value = U.isNothing(originalValue) ? \"\" : originalValue;\n                        }\n\n                        if (__editor.type == \"money\") {\n                            return U.number(__value, {\"money\": true});\n                        }\n                        else {\n                            return __value;\n                        }\n                    }).call(this, _initValue, editor);\n\n                this.inlineEditing[key].$inlineEditorCell = this.$[\"panel\"][panelName]\n                    .find('[data-ax5grid-tr-data-index=\"' + dindex + '\"]')\n                    .find('[data-ax5grid-column-rowindex=\"' + rowIndex + '\"][data-ax5grid-column-colindex=\"' + colIndex + '\"]')\n                    .find('[data-ax5grid-cellholder]');\n\n                this.inlineEditing[key].$inlineEditor = GRID.inlineEditor[editor.type].init(this, key, editor, this.inlineEditing[key].$inlineEditorCell, initValue);\n\n                return true;\n            }\n        },\n        deActive(_msg, _key, _value) {\n            // console.log(this.inlineEditing.column.dindex, this.inlineEditing.$inlineEditor.val());\n            if (!this.inlineEditing[_key]) return this;\n\n            let panelName = this.inlineEditing[_key].panelName,\n                dindex = this.inlineEditing[_key].column.dindex,\n                rowIndex = this.inlineEditing[_key].column.rowIndex,\n                colIndex = this.inlineEditing[_key].column.colIndex,\n                column = this.bodyRowMap[this.inlineEditing[_key].column.rowIndex + \"_\" + this.inlineEditing[_key].column.colIndex],\n                editorValue = (function ($inlineEditor) {\n                    if (typeof _value === \"undefined\") {\n                        if ($inlineEditor.get(0).tagName == \"SELECT\" || $inlineEditor.get(0).tagName == \"INPUT\" || $inlineEditor.get(0).tagName == \"TEXTAREA\") {\n                            return $inlineEditor.val();\n                        } else {\n                            _msg = \"CANCEL\";\n                            return false;\n                        }\n                    } else {\n                        return _value;\n                    }\n                })(this.inlineEditing[_key].$inlineEditor),\n                newValue = (function (__value, __editor) {\n                    if (__editor.type == \"money\") {\n                        return U.number(__value);\n                    }\n                    else {\n                        return __value;\n                    }\n                }).call(this, editorValue, column.editor);\n\n            let action = {\n                \"CANCEL\"(_dindex, _column, _newValue) {\n                    action[\"__clear\"].call(this);\n                },\n                \"RETURN\"(_dindex, _column, _newValue) {\n                    if (GRID.data.setValue.call(this, _dindex, _column.key, _newValue)) {\n                        action[\"__clear\"].call(this);\n                        GRID.body.repaintCell.call(this, panelName, dindex, rowIndex, colIndex, _newValue);\n                    } else {\n                        action[\"__clear\"].call(this);\n                    }\n                },\n                \"__clear\"() {\n                    this.isInlineEditing = false;\n                    let bindedAx5ui = this.inlineEditing[_key].$inlineEditor.data(\"binded-ax5ui\");\n                    if (bindedAx5ui == \"ax5picker\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5picker(\"close\");\n                    } else if (bindedAx5ui == \"ax5select\") {\n                        this.inlineEditing[_key].$inlineEditor.ax5select(\"close\");\n                    }\n\n                    this.inlineEditing[_key].$inlineEditor.remove();\n                    this.inlineEditing[_key].$inlineEditor = null;\n                    this.inlineEditing[_key].$inlineEditorCell = null;\n                    this.inlineEditing[_key] = undefined;\n                    delete this.inlineEditing[_key]; // delete 지원안하는 브라우저 테스트..\n                }\n            };\n\n            if (_msg in action) {\n                action[_msg || \"RETURN\"].call(this, dindex, column, newValue);\n            } else {\n                action[\"__clear\"].call(this);\n            }\n        },\n        keydown(key, columnKey, _options) {\n            let processor = {\n                \"ESC\"() {\n                    for (var columnKey in this.inlineEditing) {\n                        inlineEdit.deActive.call(this, \"CANCEL\", columnKey);\n                    }\n                },\n                \"RETURN\"() {\n                    if (this.isInlineEditing) {\n                        if (this.inlineEditing[columnKey] && this.inlineEditing[columnKey].useReturnToSave) { // todo : 네이밍 검증 할 필요있음.\n                            inlineEdit.deActive.call(this, \"RETURN\", columnKey);\n                        }else{\n                            return false;\n                        }\n                    } else {\n                        for (var k in this.focusedColumn) {\n                            let _column = this.focusedColumn[k],\n                                column = this.bodyRowMap[_column.rowIndex + \"_\" + _column.colIndex],\n                                dindex = _column.dindex,\n                                value = \"\",\n                                col = this.colGroup[_column.colIndex];\n                            ;\n\n                            if (column) {\n                                if (!this.list[dindex].__isGrouping) {\n                                    value = GRID.data.getValue.call(this, dindex, column.key);\n                                }\n                            }\n\n                            if (col.editor && GRID.inlineEditor[col.editor.type].editMode === \"inline\") {\n                                if (_options && _options.moveFocus) {\n\n                                }\n                                else {\n                                    if (column.editor && column.editor.type == \"checkbox\") {\n                                        value = GRID.data.getValue.call(this, dindex, column.key);\n\n                                        let checked, newValue;\n                                        if (column.editor.config && column.editor.config.trueValue) {\n                                            if (checked = !(value == column.editor.config.trueValue)) {\n                                                newValue = column.editor.config.trueValue;\n                                            } else {\n                                                newValue = column.editor.config.falseValue;\n                                            }\n                                        } else {\n                                            newValue = checked = (value == false || value == \"false\" || value < \"1\") ? \"true\" : \"false\";\n                                        }\n\n                                        GRID.data.setValue.call(this, _column.dindex, column.key, newValue);\n                                        updateRowState.call(this, [\"cellChecked\"], dindex, {\n                                            key: column.key, rowIndex: _column.rowIndex, colIndex: _column.colIndex,\n                                            editorConfig: column.editor.config, checked: checked\n                                        });\n                                    }\n                                }\n                            } else {\n                                GRID.body.inlineEdit.active.call(this, this.focusedColumn, null, value);\n                            }\n                        }\n                    }\n                    return true;\n                }\n            };\n\n            if (key in processor) {\n                processor[key].call(this, key, columnKey, _options);\n            }\n        }\n    };\n\n    const getExcelString = function () {\n        let cfg = this.config,\n            list = this.list,\n            bodyRowData = this.bodyRowTable,\n            footSumData = this.footSumTable,\n            bodyGroupingData = this.bodyGroupingTable;\n\n        // body-scroll 의 포지션에 의존적이므로..\n        let getBody = function (_colGroup, _bodyRow, _groupRow, _list) {\n            let SS = [],\n                di, dl,\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (di = 0, dl = _list.length; di < dl; di++) {\n                let isGroupingRow = false, rowTable;\n\n                if (_groupRow && \"__isGrouping\" in _list[di]) {\n                    rowTable = _groupRow;\n                    isGroupingRow = true;\n                } else {\n                    rowTable = _bodyRow;\n                }\n\n                for (tri = 0, trl = rowTable.rows.length; tri < trl; tri++) {\n                    SS.push('\\n<tr>');\n                    for (ci = 0, cl = rowTable.rows[tri].cols.length; ci < cl; ci++) {\n                        col = rowTable.rows[tri].cols[ci];\n\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', (isGroupingRow) ? getGroupingValue.call(this, _list[di], di, col) : getFieldValue.call(this, _list, _list[di], di, col, undefined, \"text\"), '&nbsp;</td>');\n                    }\n                    SS.push('\\n</tr>');\n                }\n            }\n            //SS.push('</table>');\n            return SS.join('');\n        };\n        let getSum = function (_colGroup, _bodyRow, _list) {\n            let SS = [],\n                tri, trl,\n                ci, cl,\n                col;\n\n            //SS.push('<table border=\"1\">');\n            for (tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                SS.push('\\n<tr>');\n                for (ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    col = _bodyRow.rows[tri].cols[ci];\n                    SS.push('<td ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        '>', getSumFieldValue.call(this, _list, col), '</td>');\n                }\n                SS.push('\\n</tr>');\n            }\n            //SS.push('</table>');\n\n            return SS.join('');\n        };\n\n        let po = [];\n        po.push(getBody.call(this, this.headerColGroup, bodyRowData, bodyGroupingData, list));\n        if (cfg.footSum) {\n            // 바닥 요약\n            po.push(getSum.call(this, this.headerColGroup, footSumData, list));\n        }\n\n        // right\n        if (cfg.rightSum) {\n            // todo : right 표현 정리\n        }\n\n        return po.join('');\n    };\n\n    const toggleCollapse = function (_dindex, _collapse) {\n        if (GRID.data.toggleCollapse.call(this, _dindex, _collapse)) {\n            this.proxyList = GRID.data.getProxyList.call(this, this.list);\n            repaint.call(this);\n        }\n    };\n\n    const click = function (_dindex) {\n        let that = {\n            self: this,\n            page: this.page,\n            list: this.list,\n            item: this.list[_dindex],\n            dindex: _dindex\n        };\n\n        moveFocus.call(this, _dindex);\n        if (this.config.body.onClick) {\n            this.config.body.onClick.call(that);\n        }\n\n        that = null;\n        // console.log(this.$[\"panel\"][\"body-scroll\"].find('[data-ax5grid-tr-data-index=\"' + _dindex + '\"]>td:first-child'));\n    };\n\n    const dblClick = function (_dindex) {\n        let that = {\n            self: this,\n            page: this.page,\n            list: this.list,\n            item: this.list[_dindex],\n            dindex: _dindex\n        };\n\n        moveFocus.call(this, _dindex);\n\n        if (this.config.body.onDBLClick) {\n            this.config.body.onDBLClick.call(that);\n        }\n\n        that = null;\n    };\n\n\n    GRID.body = {\n        init: init,\n        repaint: repaint,\n        repaintCell: repaintCell,\n        repaintRow: repaintRow,\n        updateRowState: updateRowState,\n        updateRowStateAll: updateRowStateAll,\n        scrollTo: scrollTo,\n        blur: blur,\n        moveFocus: moveFocus,\n        inlineEdit: inlineEdit,\n        getExcelString: getExcelString,\n        toggleCollapse: toggleCollapse,\n        click: click,\n        dblClick: dblClick\n    };\n})();","// ax5.ui.grid.collector\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    let sum = function () {\n        let value = 0,\n            i = this.list.length;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n            }\n        }\n        return value;\n    };\n\n    let avg = function () {\n        let value = 0,\n            i = this.list.length, listLength = 0;\n        while (i--) {\n            if (!(\"__groupingList\" in this.list[i])) {\n                value += U.number(this.list[i][this.key]);\n                listLength++;\n            }\n        }\n        return U.number(value / (listLength || 1), {\"round\": 2});\n    };\n\n    GRID.collector = {\n        sum: sum,\n        avg: avg\n    };\n\n})();","// ax5.ui.grid.layout\n(function () {\n\n    let GRID = ax5.ui.grid,\n        U = ax5.util;\n\n    const init = function () {\n\n    };\n\n    const clearGroupingData = function (_list) {\n        let i = 0, l = _list.length, returnList = [];\n        for (; i < l; i++) {\n            if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n                returnList.push(jQuery.extend({}, _list[i]));\n            }\n        }\n        return returnList;\n    };\n\n    const initData = function (_list) {\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n\n        let i = 0, l = _list.length,\n            returnList = [],\n            appendIndex = 0,\n            dataRealRowCount = 0,\n            lineNumber = 0;\n\n        if (this.config.body.grouping) {\n\n            let groupingKeys = U.map(this.bodyGrouping.by, function () {\n                return {\n                    key: this,\n                    compareString: \"\",\n                    grouping: false,\n                    list: []\n                }\n            });\n\n            let gi = 0, gl = groupingKeys.length, compareString, appendRow = [], ari;\n            for (; i < l + 1; i++) {\n                gi = 0;\n\n                if (_list[i] && _list[i][this.config.columnKeys.deleted]) {\n                        this.deletedList.push(_list[i]);\n                }\n\n                compareString = \"\"; // 그룹핑 구문검사용\n                appendRow = []; // 현재줄 앞에 추가해줘야 하는 줄\n\n                // 그룹핑 구문검사\n                for (; gi < gl; gi++) {\n                    if (_list[i]) {\n                        compareString += \"$|$\" + _list[i][groupingKeys[gi].key];\n                    }\n\n                    if (appendIndex > 0 && compareString != groupingKeys[gi].compareString) {\n                        let appendRowItem = {keys: [], labels: [], list: groupingKeys[gi].list};\n                        for (let ki = 0; ki < gi + 1; ki++) {\n                            appendRowItem.keys.push(groupingKeys[ki].key);\n                            appendRowItem.labels.push(_list[i - 1][groupingKeys[ki].key]);\n                        }\n                        appendRow.push(appendRowItem);\n                        groupingKeys[gi].list = [];\n                    }\n\n                    groupingKeys[gi].list.push(_list[i]);\n                    groupingKeys[gi].compareString = compareString;\n                }\n\n                // 새로 추가해야할 그룹핑 row\n                ari = appendRow.length;\n                while (ari--) {\n                    returnList.push({__isGrouping: true, __groupingList: appendRow[ari].list, __groupingBy: {keys: appendRow[ari].keys, labels: appendRow[ari].labels}});\n                }\n                //~ 그룹핑 구문 검사 완료\n\n                if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.selected]) {\n                        this.selectedDataIndexs.push(i);\n                    }\n                    // 그룹핑이 적용된 경우 오리지널 인덱스 의미 없음 : 정렬보다 그룹핑이 더 중요하므로.\n                    _list[i][\"__original_index\"] = _list[i][\"__index\"] = lineNumber;\n                    returnList.push(_list[i]);\n\n                    dataRealRowCount++;\n                    appendIndex++;\n                    lineNumber++;\n                }\n            }\n        }\n        else {\n            for (; i < l; i++) {\n                if (_list[i]) {\n                    if (_list[i][this.config.columnKeys.deleted]) {\n                        this.deletedList.push(_list[i]);\n                    } else {\n\n                        if (_list[i][this.config.columnKeys.selected]) {\n                            this.selectedDataIndexs.push(i);\n                        }\n\n                        // __original_index 인덱스 키가 없다면 추가.\n                        if(typeof _list[i][\"__original_index\"] === \"undefined\"){\n                            _list[i][\"__original_index\"] = lineNumber;\n                        }\n                        _list[i][\"__index\"] = lineNumber;\n                        dataRealRowCount++;\n                        lineNumber++;\n                        returnList.push(_list[i]);\n                    }\n                }\n            }\n        }\n\n        // 원본 데이터의 갯수\n        // grouping은 제외하고 수집됨.\n        this.xvar.dataRealRowCount = dataRealRowCount;\n        return returnList;\n    };\n\n    const arrangeData4tree = function (_list) {\n        this.selectedDataIndexs = [];\n        this.deletedList = [];\n        let i = 0, seq = 0,\n            appendIndex = 0,\n            dataRealRowCount = 0,\n            lineNumber = 0;\n\n        let li = _list.length;\n        let keys = this.config.tree.columnKeys;\n        let hashDigit = this.config.tree.hashDigit;\n        let listIndexMap = {};\n\n        while (li--) {\n            delete _list[li][keys.parentHash];\n            delete _list[li][keys.selfHash];\n            //delete _list[li][keys.childrenLength];\n        }\n\n        /// 루트 아이템 수집\n        i = 0;\n        seq = 0;\n        li = _list.length;\n        for (; i < li; i++) {\n            if (_list[i]) {\n                listIndexMap[_list[i][keys.selfKey]] = i; // 인덱싱\n\n                if (U.isNothing(_list[i][keys.parentKey]) || _list[i][keys.parentKey] === \"top\") { // 최상위 아이템인 경우\n                    _list[i][keys.parentKey] = \"top\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.depth] = 0;\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                }\n            }\n        }\n\n        /// 자식 아이템 수집\n        i = 0;\n        lineNumber = 0;\n        for (; i < li; i++) {\n            let _parent, _parentHash;\n            if (_list[i] && _list[i][keys.parentKey] !== \"top\" && typeof _list[i][keys.parentHash] === \"undefined\") {\n\n                if (_parent = _list[listIndexMap[_list[i][keys.parentKey]]]) {\n                    _parentHash = _parent[keys.selfHash];\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = _parentHash;\n                    _list[i][keys.selfHash] = _parentHash + \".\" + U.setDigit(_parent[keys.children].length, hashDigit);\n                    _list[i][keys.depth] = _parent[keys.depth] + 1;\n                    if (_parent[keys.collapse] || _parent[keys.hidden]) _list[i][keys.hidden] = true;\n                    _parent[keys.children].push(_list[i][keys.selfKey]);\n                } else {\n                    _list[i][keys.parentKey] = \"top\";\n                    _list[i][keys.children] = [];\n                    _list[i][keys.parentHash] = U.setDigit(\"0\", hashDigit);\n                    _list[i][keys.selfHash] = U.setDigit(\"0\", hashDigit) + \".\" + U.setDigit(seq, hashDigit);\n                    _list[i][keys.hidden] = false;\n\n                    seq++;\n                }\n            }\n\n            if (_list[i]) {\n                if (_list[i][this.config.columnKeys.deleted]) {\n                    this.deletedList.push(_list[i]);\n                    _list[i][keys.hidden] = true;\n                }\n                else if (_list[i][this.config.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(i);\n                }\n\n                _list[i][\"__index\"] = lineNumber;\n                dataRealRowCount++;\n                lineNumber++;\n            }\n        }\n\n        this.listIndexMap = listIndexMap;\n        this.xvar.dataRealRowCount = dataRealRowCount;\n\n        return _list;\n    };\n\n    const getProxyList = function (_list) {\n        let i = 0, l = _list.length, returnList = [];\n        for (; i < l; i++) {\n\n            if (_list[i] && !_list[i][this.config.tree.columnKeys.hidden]) {\n                _list[i].__origin_index__ = i;\n                returnList.push(_list[i]);\n            }\n        }\n        return returnList;\n    };\n\n    const set = function (data) {\n\n        let list;\n        if (U.isArray(data)) {\n            this.page = null;\n            list = data;\n        } else if (\"page\" in data) {\n            this.page = jQuery.extend({}, data.page);\n            list = data.list;\n        }\n\n        // console.log(this.list.length);\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        } else {\n            this.proxyList = null;\n            this.list = initData.call(this,\n                (!this.config.remoteSort && Object.keys(this.sortInfo).length) ? sort.call(this, this.sortInfo, list) : list\n            );\n        }\n        this.deletedList = [];\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n\n        if (this.config.body.grouping) {\n\n        }\n        return this;\n    };\n\n    const get = function (_type) {\n        return {\n            list: this.list,\n            page: this.page\n        };\n    };\n\n    const getList = function (_type) {\n        let returnList = [];\n        let i = 0, l = this.list.length;\n        switch (_type) {\n            case \"modified\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.modified]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"selected\":\n                for (; i < l; i++) {\n                    if (this.list[i] && !this.list[i][\"__isGrouping\"] && this.list[i][this.config.columnKeys.selected]) {\n                        returnList.push(jQuery.extend({}, this.list[i]));\n                    }\n                }\n                break;\n            case \"deleted\":\n                //_list = GRID.data.clearGroupingData(this.list);\n                returnList = [].concat(this.deletedList);\n                break;\n            default:\n                returnList = GRID.data.clearGroupingData.call(this, this.list);\n        }\n        return returnList;\n    };\n\n    const add = function (_row, _dindex, _options) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\"() {\n                list = [].concat(_row).concat(list);\n            },\n            \"last\"() {\n                list = list.concat([].concat(_row));\n            }\n        };\n\n        if (this.config.tree.use) {\n            let list = this.list.concat([].concat(_row));\n\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        }\n        else {\n            if (typeof _dindex === \"undefined\") _dindex = \"last\";\n            if (_dindex in processor) {\n                _row[this.config.columnKeys.modified] = true;\n                processor[_dindex].call(this, _row);\n            } else {\n                if (!U.isNumber(_dindex)) {\n                    throw 'invalid argument _dindex';\n                }\n                if (U.isArray(_row)) {\n                    for (let _i = 0, _l = _row.length; _i < _l; _i++) {\n                        list.splice(_dindex + _i, 0, _row[_i]);\n                    }\n                } else {\n                    list.splice(_dindex, 0, _row);\n                }\n            }\n\n            if (this.config.body.grouping) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            }\n            else if (_options && _options.sort && Object.keys(this.sortInfo).length) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            }\n            else {\n                list = initData.call(this, list);\n            }\n\n            this.list = list;\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    /**\n     * list에서 완전 제거 하는 경우 사용.\n     * ax5grid.data.remove\n     */\n    const remove = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, 0);\n                } else {\n                    list.splice(0, 1);\n                }\n            },\n            \"last\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, list.length - 1);\n                } else {\n                    list.splice(list.length - 1, 1);\n                }\n            },\n            \"index\": function (_dindex) {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, _dindex);\n                } else {\n                    list.splice(_dindex, 1);\n                }\n            },\n            \"tree\": function (_dindex) {\n                let treeKeys = this.config.tree.columnKeys, selfHash = list[_dindex][this.config.tree.columnKeys.selfHash];\n                list = U.filter(list, function () {\n                    return this[treeKeys.selfHash].substr(0, selfHash.length) != selfHash;\n                });\n                treeKeys = null;\n                selfHash = null;\n            },\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            processor[\"index\"].call(this, _dindex);\n        }\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        }\n        else {\n            if (this.config.body.grouping) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else if (Object.keys(this.sortInfo).length) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else {\n                list = initData.call(this, list);\n            }\n            this.list = list;\n        }\n\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n\n    /**\n     * list에서 deleted 처리 repaint\n     * ax5grid.data.deleteRow\n     */\n    const deleteRow = function (_dindex) {\n        let list = (this.config.body.grouping) ? clearGroupingData.call(this, this.list) : this.list;\n        let processor = {\n            \"first\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, 0);\n                } else {\n                    list[0][this.config.columnKeys.deleted] = true;\n                }\n            },\n            \"last\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, list.length - 1);\n                } else {\n                    list[list.length - 1][this.config.columnKeys.deleted] = true;\n                }\n            },\n            \"selected\": function () {\n                if (this.config.tree.use) {\n                    processor.tree.call(this, \"selected\");\n                } else {\n                    let i = list.length;\n                    while (i--) {\n                        if (list[i][this.config.columnKeys.selected]) {\n                            list[i][this.config.columnKeys.deleted] = true;\n                        }\n                    }\n                    i = null;\n                }\n            },\n            \"tree\": function (_dindex) {\n                let keys = this.config.columnKeys,\n                    treeKeys = this.config.tree.columnKeys;\n\n                if (_dindex === \"selected\") {\n\n                    let i = list.length;\n                    while (i--) {\n                        if (list[i][this.config.columnKeys.selected]) {\n                            list[i][this.config.columnKeys.deleted] = true;\n\n                            let selfHash = list[i][treeKeys.selfHash];\n                            let ii = list.length;\n\n                            while (ii--) {\n                                if (list[ii][treeKeys.selfHash].substr(0, selfHash.length) === selfHash) {\n                                    list[ii][keys.deleted] = true;\n                                }\n                            }\n\n                            selfHash = null;\n                            ii = null;\n                        }\n                    }\n                    i = null;\n\n                } else {\n                    let selfHash = list[_dindex][treeKeys.selfHash];\n                    let i = list.length;\n                    while (i--) {\n                        if (list[i][treeKeys.selfHash].substr(0, selfHash.length) !== selfHash) {\n                            list[i][keys.deleted] = true;\n                        }\n                    }\n                    selfHash = null;\n                    i = null;\n                }\n\n                keys = null;\n                treeKeys = null;\n            },\n        };\n\n        if (typeof _dindex === \"undefined\") _dindex = \"last\";\n\n        if (_dindex in processor) {\n            processor[_dindex].call(this, _dindex);\n        } else {\n            if (!U.isNumber(_dindex)) {\n                throw 'invalid argument _dindex';\n            }\n            list[_dindex][this.config.columnKeys.deleted] = true;\n        }\n\n        if (this.config.tree.use) {\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n        }\n        else {\n            if (this.config.body.grouping) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else if (Object.keys(this.sortInfo).length) {\n                list = initData.call(this,\n                    sort.call(this,\n                        this.sortInfo,\n                        list\n                    )\n                );\n            } else {\n                list = initData.call(this, list);\n            }\n\n            this.list = list;\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n        return this;\n    };\n\n    const update = function (_row, _dindex) {\n        if (!U.isNumber(_dindex)) {\n            throw 'invalid argument _dindex';\n        }\n        //\n        this.needToPaintSum = true;\n        this.list.splice(_dindex, 1, _row);\n\n        if (this.config.body.grouping) {\n            this.list = initData.call(this, clearGroupingData.call(this, this.list));\n        }\n    };\n\n    const updateChild = function (_dindex, _updateData, _options) {\n        let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n        if (typeof _dindex === \"undefined\") return false;\n        originIndex = this.proxyList[_dindex].__origin_index__;\n\n        if (this.list[originIndex][keys.children]) {\n            this.proxyList = []; // 리셋 프록시\n\n            if (_options && _options.filter) {\n                if (_options.filter.call({item: this.list[originIndex], dindex: originIndex}, this.list[originIndex])) {\n                    for (let _k in _updateData) {\n                        this.list[originIndex][_k] = _updateData[_k];\n                    }\n                }\n            }\n            else {\n                for (let _k in _updateData) {\n                    this.list[originIndex][_k] = _updateData[_k];\n                }\n            }\n\n            selfHash = this.list[originIndex][keys.selfHash];\n\n            let i = 0, l = this.list.length;\n            for (; i < l; i++) {\n                if (this.list[i]) {\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n                        if (_options && _options.filter) {\n                            if (_options.filter.call({item: this.list[i], dindex: i}, this.list[i])) {\n                                for (let _k in _updateData) {\n                                    this.list[i][_k] = _updateData[_k];\n                                }\n                            }\n                        }\n                        else {\n                            for (let _k in _updateData) {\n                                this.list[i][_k] = _updateData[_k];\n                            }\n                        }\n                    }\n\n                    if (!this.list[i][keys.hidden]) {\n                        this.proxyList.push(this.list[i]);\n                    }\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const setValue = function (_dindex, _key, _value) {\n        let originalValue = getValue.call(this, _dindex, _key);\n        this.needToPaintSum = true;\n\n        if (originalValue !== _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    this.list[_dindex][this.config.columnKeys.modified] = true;\n                    (Function(\"val\", \"this\" + GRID.util.getRealPathForDataItem(_key) + \" = val;\")).call(this.list[_dindex], _value);\n                } catch (e) {\n\n                }\n            } else {\n                this.list[_dindex][this.config.columnKeys.modified] = true;\n                this.list[_dindex][_key] = _value;\n            }\n\n            if (this.onDataChanged) {\n                this.onDataChanged.call({\n                    self: this,\n                    list: this.list,\n                    dindex: _dindex,\n                    item: this.list[_dindex],\n                    key: _key,\n                    value: _value\n                });\n            }\n        }\n\n        return true;\n    };\n\n    let getValue = function (_dindex, _key, _value) {\n        let list = this.list;\n\n        if (/[\\.\\[\\]]/.test(_key)) {\n            try {\n                _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(list[_dindex]);\n            } catch (e) {\n\n            }\n        } else {\n            _value = list[_dindex][_key];\n        }\n        return _value;\n    };\n\n    const clearSelect = function () {\n        this.selectedDataIndexs = [];\n    };\n\n    const select = function (_dindex, _selected, _options) {\n        let cfg = this.config;\n\n        if (!this.list[_dindex]) return false;\n        if (this.list[_dindex].__isGrouping) return false;\n        if (this.list[_dindex][cfg.columnKeys.disableSelection]) return false;\n\n        if (typeof _selected === \"undefined\") {\n            if (this.list[_dindex][cfg.columnKeys.selected] = !this.list[_dindex][cfg.columnKeys.selected]) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        } else {\n            if (this.list[_dindex][cfg.columnKeys.selected] = _selected) {\n                this.selectedDataIndexs.push(_dindex);\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list,\n                dindex: _dindex,\n                item: this.list[_dindex],\n                key: cfg.columnKeys.selected,\n                value: this.list[_dindex][cfg.columnKeys.selected]\n            });\n        }\n\n        return this.list[_dindex][cfg.columnKeys.selected];\n    };\n\n    const selectAll = function (_selected, _options) {\n        let cfg = this.config,\n            dindex = this.list.length;\n\n        if (typeof _selected === \"undefined\") {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = !this.list[dindex][cfg.columnKeys.selected]) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        } else {\n            while (dindex--) {\n                if (this.list[dindex].__isGrouping) continue;\n                if (_options && _options.filter) {\n                    if (_options.filter.call(this.list[dindex]) !== true) {\n                        continue;\n                    }\n                }\n                if (this.list[dindex][cfg.columnKeys.disableSelection]) continue;\n\n                if (this.list[dindex][cfg.columnKeys.selected] = _selected) {\n                    this.selectedDataIndexs.push(dindex);\n                }\n            }\n        }\n\n        if (this.onDataChanged && _options && _options.internalCall) {\n            this.onDataChanged.call({\n                self: this,\n                list: this.list\n            });\n        }\n\n        return this.list;\n    };\n\n    const sort = function (_sortInfo, _list, _options) {\n        let self = this, list = _list || this.list, sortInfoArray = [], lineNumber = 0;\n        let getKeyValue = function (_item, _key, _value) {\n            if (/[\\.\\[\\]]/.test(_key)) {\n                try {\n                    _value = (Function(\"\", \"return this\" + GRID.util.getRealPathForDataItem(_key) + \";\")).call(_item);\n                } catch (e) {\n                }\n            } else {\n                _value = _item[_key];\n            }\n            return _value;\n        };\n\n        for (let k in _sortInfo) {\n            sortInfoArray[_sortInfo[k].seq] = {key: k, order: _sortInfo[k].orderBy};\n        }\n        sortInfoArray = U.filter(sortInfoArray, function () {\n            return typeof this !== \"undefined\";\n        });\n\n        // 정렬조건이 없으면 original_index값을 이용하여 정렬처리\n        if(_options && _options.resetLineNumber && sortInfoArray.length === 0) {\n            sortInfoArray[0] = {key: '__original_index', order: \"asc\"}\n        }\n\n        let i = 0, l = sortInfoArray.length, _a_val, _b_val;\n\n        list.sort(function (_a, _b) {\n            for (i = 0; i < l; i++) {\n                _a_val = getKeyValue(_a, sortInfoArray[i].key);\n                _b_val = getKeyValue(_b, sortInfoArray[i].key);\n\n                if (typeof _a_val !== typeof _b_val) {\n                    _a_val = '' + _a_val;\n                    _b_val = '' + _b_val;\n                }\n                if (_a_val < _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? -1 : 1;\n                } else if (_a_val > _b_val) {\n                    return (sortInfoArray[i].order === \"asc\") ? 1 : -1;\n                }\n            }\n        });\n\n        if(_options && _options.resetLineNumber) {\n            i = 0, l = list.length, lineNumber = 0;\n            for (; i < l; i++) {\n                if (_list[i] && !_list[i][\"__isGrouping\"]) {\n                    _list[i][\"__index\"] = lineNumber++;\n                }\n            }\n        }\n\n        if (_list) {\n            return list;\n        } else {\n            this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n            this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n            GRID.page.navigationUpdate.call(this);\n            return this;\n        }\n    };\n\n    const append = function (_list, _callback) {\n        let self = this;\n\n        if (this.config.tree.use) {\n            let list = this.list.concat([].concat(_list));\n\n            this.list = arrangeData4tree.call(this, list);\n            this.proxyList = getProxyList.call(this, sort.call(this, this.sortInfo, this.list));\n            list = null;\n        } else {\n            this.list = this.list.concat([].concat(_list));\n        }\n\n        this.appendProgress = true;\n        GRID.page.statusUpdate.call(this);\n\n\n        if (this.appendDebouncer) {\n            if (self.appendDebounceTimes < this.config.debounceTime / 10) {\n                clearTimeout(this.appendDebouncer);\n                self.appendDebounceTimes++;\n            } else {\n                self.appendDebounceTimes = 0;\n                appendIdle.call(self);\n                _callback();\n                return false;\n            }\n        }\n\n        this.appendDebouncer = setTimeout(function () {\n            self.appendDebounceTimes = 0;\n            appendIdle.call(self);\n            _callback();\n        }, this.config.debounceTime);\n\n        // todo : append bounce animation\n    };\n\n    const appendIdle = function () {\n        this.appendProgress = false;\n        if (this.config.body.grouping) {\n            this.list = initData.call(this,\n                sort.call(this,\n                    this.sortInfo,\n                    this.list\n                )\n            );\n        } else {\n            this.list = initData.call(this, this.list);\n        }\n\n        this.needToPaintSum = true;\n        this.xvar.frozenRowIndex = (this.config.frozenRowIndex > this.list.length) ? this.list.length : this.config.frozenRowIndex;\n        this.xvar.paintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        GRID.page.navigationUpdate.call(this);\n    };\n\n    const toggleCollapse = function (_dindex, _collapse) {\n        let keys = this.config.tree.columnKeys, selfHash, originIndex;\n\n        if (typeof _dindex === \"undefined\") return false;\n        originIndex = this.proxyList[_dindex].__origin_index__;\n\n        if (this.list[originIndex][keys.children]) {\n            this.proxyList = []; // 리셋 프록시\n            if (typeof _collapse == \"undefined\") {\n                _collapse = !(this.list[originIndex][keys.collapse] || false);\n            }\n\n            this.list[originIndex][keys.collapse] = _collapse;\n            selfHash = this.list[originIndex][keys.selfHash];\n\n            let i = this.list.length;\n            while (i--) {\n                if (this.list[i]) {\n                    // console.log(this.list[i][keys.parentHash].substr(0, selfHash.length), selfHash);\n                    if (this.list[i][keys.parentHash].substr(0, selfHash.length) === selfHash) {\n                        this.list[i][keys.hidden] = _collapse;\n                    }\n\n                    if (!this.list[i][keys.hidden]) {\n                        this.proxyList.push(this.list[i]);\n                    }\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    GRID.data = {\n        init: init,\n        set: set,\n        get: get,\n        getList: getList,\n        getProxyList: getProxyList,\n        setValue: setValue,\n        getValue: getValue,\n        clearSelect: clearSelect,\n        select: select,\n        selectAll: selectAll,\n        add: add,\n        remove: remove,\n        deleteRow: deleteRow,\n        update: update,\n        updateChild: updateChild,\n        sort: sort,\n        initData: initData,\n        clearGroupingData: clearGroupingData,\n        append: append,\n        toggleCollapse: toggleCollapse\n    };\n})();","/*\n * Copyright (c) 2016. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n// ax5.ui.grid.excel\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const base64 = function (s) {\n        return window.btoa(unescape(encodeURIComponent(s)));\n    };\n\n    const uri = \"data:application/vnd.ms-excel;base64,\";\n\n    const getExcelTmpl = function () {\n        return `\\ufeff\n{{#tables}}{{{body}}}{{/tables}}\n`;\n    };\n\n    const tableToExcel = function (table, fileName) {\n        let link, a, output,\n            tables = [].concat(table);\n\n        output = ax5.mustache.render(getExcelTmpl(), {\n            worksheet: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({name: \"Sheet\" + (ti + 1)});\n                });\n                return arr;\n            })(),\n            tables: (function () {\n                var arr = [];\n                tables.forEach(function (t, ti) {\n                    arr.push({body: t});\n                });\n                return arr;\n            })()\n        });\n\n        let isChrome = navigator.userAgent.indexOf(\"Chrome\") > -1,\n            isSafari = !isChrome && navigator.userAgent.indexOf(\"Safari\") > -1,\n            isIE = /*@cc_on!@*/false || !!document.documentMode; // this works with IE10 and IE11 both :)\n\n        let blob1, blankWindow, $iframe, iframe, anchor;\n\n        if (navigator.msSaveOrOpenBlob) {\n            blob1 = new Blob([output], {type: \"text/html\"});\n            window.navigator.msSaveOrOpenBlob(blob1, fileName);\n        }\n        else if (isSafari) {\n            // 사파리는 지원이 안되므로 그냥 테이블을 클립보드에 복사처리\n            //tables\n            blankWindow = window.open('about:blank', this.id + '-excel-export', 'width=600,height=400');\n            blankWindow.document.write(output);\n            blankWindow = null;\n        }\n        else {\n            if (isIE && typeof Blob === \"undefined\") {\n                //otherwise use the iframe and save\n                //requires a blank iframe on page called txtArea1\n                $iframe = jQuery('<iframe id=\"' + this.id + '-excel-export\" style=\"display:none\"></iframe>');\n                jQuery(document.body).append($iframe);\n\n                iframe = window[this.id + '-excel-export'];\n                iframe.document.open(\"text/html\", \"replace\");\n                iframe.document.write(output);\n                iframe.document.close();\n                iframe.focus();\n                iframe.document.execCommand(\"SaveAs\", true, fileName);\n                $iframe.remove();\n            } else {\n                // Attempt to use an alternative method\n                anchor = document.body.appendChild(\n                    document.createElement(\"a\")\n                );\n\n                // If the [download] attribute is supported, try to use it\n                if (\"download\" in anchor) {\n                    anchor.download = fileName;\n                    //anchor.href = URL.createObjectURL( blob );\n                    anchor.href = uri + base64(output);\n                    anchor.click();\n                    document.body.removeChild(anchor);\n                }\n            }\n        }\n\n        return true;\n    };\n\n    GRID.excel = {\n        export: tableToExcel\n    };\n})();","// ax5.ui.grid.formatter\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const money = function () {\n        return U.number(this.value, {\"money\": true});\n    };\n\n    GRID.formatter = {\n        money: money\n    };\n\n})();","// ax5.ui.grid.header\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const columnResizerEvent = {\n        \"on\": function (_columnResizer, _colIndex) {\n            var self = this;\n            var $columnResizer = $(_columnResizer);\n            var columnResizerPositionLeft = $columnResizer.offset().left;\n            var gridTargetOffsetLeft = self.$[\"container\"][\"root\"].offset().left;\n            self.xvar.columnResizerIndex = _colIndex;\n            var resizeRange = {\n                min: -self.colGroup[_colIndex]._width + 2,\n                max: self.$[\"container\"][\"root\"].width() - self.colGroup[_colIndex]._width,\n            };\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    var mouseObj = GRID.util.getMousePosition(e);\n                    self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n\n                    if (resizeRange.min > self.xvar.__da) {\n                        self.xvar.__da = resizeRange.min;\n                    } else if (resizeRange.max < self.xvar.__da) {\n                        self.xvar.__da = resizeRange.max;\n                    }\n\n                    if (!self.xvar.columnResizerLived) {\n                        self.$[\"resizer\"][\"horizontal\"].addClass(\"live\");\n                    }\n                    self.xvar.columnResizerLived = true;\n                    self.$[\"resizer\"][\"horizontal\"].css({\n                        left: columnResizerPositionLeft + self.xvar.__da - gridTargetOffsetLeft\n                    });\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    columnResizerEvent.off.call(self);\n                    U.stopEvent(e);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n            this.$[\"resizer\"][\"horizontal\"].removeClass(\"live\");\n            this.xvar.columnResizerLived = false;\n\n            if (typeof this.xvar.__da === \"undefined\") {\n\n            }\n            else {\n                this.setColumnWidth(this.colGroup[this.xvar.columnResizerIndex]._width + this.xvar.__da, this.xvar.columnResizerIndex);\n            }\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const init = function () {\n        // 헤더 초기화\n        const self = this;\n\n        this.$[\"container\"][\"header\"].on(\"click\", '[data-ax5grid-column-attr]', function (e) {\n            let key = this.getAttribute(\"data-ax5grid-column-key\"),\n                colIndex = this.getAttribute(\"data-ax5grid-column-colindex\"),\n                //rowIndex = this.getAttribute(\"data-ax5grid-column-rowindex\"),\n                col = self.colGroup[colIndex];\n\n            if (key === \"__checkbox_header__\") {\n                let selected = this.getAttribute(\"data-ax5grid-selected\");\n                selected = (U.isNothing(selected)) ? true : (selected !== \"true\");\n\n                $(this).attr(\"data-ax5grid-selected\", selected);\n                self.selectAll({selected: selected});\n\n                selected = null;\n            }\n            else {\n                if (key && col && col.sortable !== false && !col.sortFixed) {\n                    if (col.sortable === true || self.config.sortable === true) {\n                        toggleSort.call(self, col.key);\n                    }\n                }\n            }\n\n            GRID.body.blur.call(self);\n\n            key = null;\n            colIndex = null;\n            col = null;\n        });\n        this.$[\"container\"][\"header\"]\n            .on(\"mousedown\", '[data-ax5grid-column-resizer]', function (e) {\n                let colIndex = this.getAttribute(\"data-ax5grid-column-resizer\");\n\n                self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                columnResizerEvent.on.call(self, this, Number(colIndex));\n                U.stopEvent(e);\n\n                colIndex = null;\n            })\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        resetFrozenColumn.call(this);\n    };\n\n    const resetFrozenColumn = function () {\n        let cfg = this.config,\n            dividedHeaderObj = GRID.util.divideTableByFrozenColumnIndex(this.headerTable, this.xvar.frozenColumnIndex);\n\n        this.asideHeaderData = (function (dataTable) {\n            let colGroup = [];\n            let data = {rows: []};\n            for (let i = 0, l = dataTable.rows.length; i < l; i++) {\n                data.rows[i] = {cols: []};\n                if (i === 0) {\n                    let col = {\n                        label: \"\",\n                        colspan: 1,\n                        rowspan: dataTable.rows.length,\n                        colIndex: null\n                    }, _col = {};\n\n                    if (cfg.showLineNumber) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.lineNumberColumnWidth,\n                            _width: cfg.lineNumberColumnWidth,\n                            columnAttr: \"lineNumber\",\n                            key: \"__index_header__\", label: \"&nbsp;\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n                    if (cfg.showRowSelector) {\n                        _col = jQuery.extend({}, col, {\n                            width: cfg.rowSelectorColumnWidth,\n                            _width: cfg.rowSelectorColumnWidth,\n                            columnAttr: \"rowSelector\",\n                            key: \"__checkbox_header__\", label: \"\"\n                        });\n                        colGroup.push(_col);\n                        data.rows[i].cols.push(_col);\n                    }\n\n                    col = null;\n                }\n            }\n\n            this.asideColGroup = colGroup;\n            return data;\n        }).call(this, this.headerTable);\n\n        this.leftHeaderData = dividedHeaderObj.leftData;\n        this.headerData = dividedHeaderObj.rightData;\n    };\n\n    const getFieldValue = function (_col) {\n        return (_col.key === \"__checkbox_header__\")\n            ? `<div class=\"checkBox\" style=\"max-height: ${_col.width - 10}px;min-height: ${_col.width - 10}px;\"></div>`\n            : (_col.label || \"&nbsp;\");\n    };\n\n    const repaint = function (_reset) {\n        let cfg = this.config,\n            colGroup = this.colGroup;\n\n        if (_reset) {\n            resetFrozenColumn.call(this);\n            this.xvar.paintStartRowIndex = undefined;\n            this.xvar.virtualPaintStartRowIndex = undefined; // 스크롤 포지션 저장변수 초기화\n        }\n        let asideHeaderData = this.asideHeaderData,\n            leftHeaderData = this.leftHeaderData,\n            headerData = this.headerData,\n            headerAlign = cfg.header.align;\n\n        // this.asideColGroup : asideHeaderData에서 처리 함.\n        this.leftHeaderColGroup = colGroup.slice(0, this.config.frozenColumnIndex);\n        this.headerColGroup = colGroup.slice(this.config.frozenColumnIndex);\n\n        var repaintHeader = function (_elTarget, _colGroup, _bodyRow) {\n            let tableWidth = 0,\n                SS = [];\n            SS.push('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">');\n            SS.push('<colgroup>');\n            for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                SS.push('<col style=\"width:' + _colGroup[cgi]._width + 'px;\"  />');\n                tableWidth += _colGroup[cgi]._width;\n            }\n            SS.push('<col  />');\n            SS.push('</colgroup>');\n\n            for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                var trCSS_class = \"\";\n                SS.push('<tr class=\"' + trCSS_class + '\">');\n                for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                    var col = _bodyRow.rows[tri].cols[ci];\n                    var cellHeight = cfg.header.columnHeight * col.rowspan - cfg.header.columnBorderWidth;\n                    var colAlign = headerAlign || col.align;\n                    SS.push('<td ',\n                        'data-ax5grid-column-attr=\"' + (col.columnAttr || \"default\") + '\" ',\n                        'data-ax5grid-column-row=\"' + tri + '\" ',\n                        'data-ax5grid-column-col=\"' + ci + '\" ',\n                        (function () {\n                            return (typeof col.key !== \"undefined\") ? 'data-ax5grid-column-key=\"' + col.key + '\" ' : '';\n                        })(),\n                        'data-ax5grid-column-colindex=\"' + col.colIndex + '\" ',\n                        'data-ax5grid-column-rowindex=\"' + col.rowIndex + '\" ',\n                        'colspan=\"' + col.colspan + '\" ',\n                        'rowspan=\"' + col.rowspan + '\" ',\n                        'class=\"' + (function (_col) {\n                            var tdCSS_class = \"\";\n                            if (_col.headerStyleClass) {\n                                if (U.isFunction(_col.headerStyleClass)) {\n                                    tdCSS_class += _col.headerStyleClass.call({\n                                            column: _col,\n                                            key: _col.key\n                                        }) + \" \";\n                                } else {\n                                    tdCSS_class += _col.headerStyleClass + \" \";\n                                }\n                            }\n                            if (cfg.header.columnBorderWidth) tdCSS_class += \"hasBorder \";\n                            if (ci == cl - 1) tdCSS_class += \"isLastColumn \";\n                            return tdCSS_class;\n                        }).call(this, col) + '\" ',\n                        'style=\"height: ' + cellHeight + 'px;min-height: 1px;\">');\n                    \n                    SS.push((function () {\n                        var lineHeight = (cfg.header.columnHeight - cfg.header.columnPadding * 2 - cfg.header.columnBorderWidth);\n                        return '<span data-ax5grid-cellHolder=\"\" ' +\n                            ((colAlign) ? 'data-ax5grid-text-align=\"' + colAlign + '\"' : '') +\n                            ' style=\"height: ' + (cfg.header.columnHeight - cfg.header.columnBorderWidth) + 'px;line-height: ' + lineHeight + 'px;\">';\n                    })(), (function () {\n                        var _SS = \"\";\n\n                        if (!U.isNothing(col.key) && !U.isNothing(col.colIndex) && (cfg.sortable === true || col.sortable === true) && col.sortable !== false) {\n                            _SS += '<span data-ax5grid-column-sort=\"' + col.colIndex + '\" data-ax5grid-column-sort-order=\"' + (colGroup[col.colIndex].sort || \"\") + '\" />';\n                        }\n                        return _SS;\n                    })(), getFieldValue.call(this, col), '</span>');\n\n                    if (!U.isNothing(col.colIndex)) {\n                        if (cfg.enableFilter) {\n                            SS.push('<span data-ax5grid-column-filter=\"' + col.colIndex + '\" data-ax5grid-column-filter-value=\"\"  />');\n                        }\n                    }\n\n                    SS.push('</td>');\n                }\n                SS.push('<td ',\n                    'data-ax5grid-column-row=\"null\" ',\n                    'data-ax5grid-column-col=\"null\" ',\n                    'style=\"height: ' + (cfg.header.columnHeight) + 'px;min-height: 1px;\" ',\n                    '></td>');\n                SS.push('</tr>');\n            }\n            SS.push('</table>');\n            _elTarget.html(SS.join(''));\n\n            /// append column-resizer\n            (function () {\n                let resizerHeight = cfg.header.columnHeight * _bodyRow.rows.length - cfg.header.columnBorderWidth,\n                    resizerLeft = 0,\n                    AS = [];\n\n                for (var cgi = 0, cgl = _colGroup.length; cgi < cgl; cgi++) {\n                    var col = _colGroup[cgi];\n                    if (!U.isNothing(col.colIndex)) {\n                        //_colGroup[cgi]._width\n                        resizerLeft += col._width;\n                        AS.push('<div data-ax5grid-column-resizer=\"' + col.colIndex + '\" style=\"height:' + resizerHeight + 'px;left: ' + (resizerLeft - 4) + 'px;\"  />');\n                    }\n                }\n                _elTarget.append(AS);\n            }).call(this);\n\n\n            return tableWidth;\n        };\n\n        if (cfg.asidePanelWidth > 0) {\n            repaintHeader.call(this, this.$.panel[\"aside-header\"], this.asideColGroup, asideHeaderData);\n        }\n        if (cfg.frozenColumnIndex > 0) {\n            repaintHeader.call(this, this.$.panel[\"left-header\"], this.leftHeaderColGroup, leftHeaderData);\n        }\n        this.xvar.scrollContentWidth = repaintHeader.call(this, this.$.panel[\"header-scroll\"], this.headerColGroup, headerData);\n\n        if (cfg.rightSum) {\n\n        }\n    };\n\n    const scrollTo = function (css) {\n        this.$.panel[\"header-scroll\"].css(css);\n        return this;\n    };\n\n    const toggleSort = function (_key) {\n        let sortOrder = \"\",\n            sortInfo = {},\n            seq = 0;\n\n        for (var k in this.sortInfo) {\n            if (this.sortInfo[k].fixed) {\n                sortInfo[k] = this.sortInfo[k];\n                seq++;\n            }\n        }\n\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            if (this.colGroup[i].key == _key) {\n                if (sortOrder == \"\") {\n                    if (typeof this.colGroup[i].sort === \"undefined\") {\n                        sortOrder = \"desc\";\n                    }\n                    else if (this.colGroup[i].sort === \"desc\") {\n                        sortOrder = \"asc\";\n                    }\n                    else {\n                        sortOrder = undefined;\n                    }\n                }\n                this.colGroup[i].sort = sortOrder;\n            } else if (!this.config.multiSort) {\n                this.colGroup[i].sort = undefined;\n            }\n\n            if (typeof this.colGroup[i].sort !== \"undefined\") {\n                if (!sortInfo[this.colGroup[i].key]) {\n                    sortInfo[this.colGroup[i].key] = {\n                        seq: seq++,\n                        orderBy: this.colGroup[i].sort\n                    };\n                }\n            }\n        }\n\n        this.setColumnSort(sortInfo);\n        return this;\n    };\n\n    const applySortStatus = function (_sortInfo) {\n        for (var i = 0, l = this.colGroup.length; i < l; i++) {\n            for (var _key in _sortInfo) {\n                if (this.colGroup[i].key == _key) {\n                    this.colGroup[i].sort = _sortInfo[_key].orderBy;\n                }\n            }\n        }\n        return this;\n    };\n\n    const select = function (_options) {\n        GRID.data.select.call(this, dindex, _options && _options.selected);\n        GRID.body.updateRowState.call(this, [\"selected\"], dindex);\n    };\n\n    const getExcelString = function () {\n        let cfg = this.config,\n            colGroup = this.colGroup,\n            headerData = this.headerTable,\n            getHeader = function (_colGroup, _bodyRow) {\n                var SS = [];\n                //SS.push('<table border=\"1\">');\n                for (var tri = 0, trl = _bodyRow.rows.length; tri < trl; tri++) {\n                    SS.push('<tr>');\n                    for (var ci = 0, cl = _bodyRow.rows[tri].cols.length; ci < cl; ci++) {\n                        var col = _bodyRow.rows[tri].cols[ci];\n                        SS.push('<td ',\n                            'colspan=\"' + col.colspan + '\" ',\n                            'rowspan=\"' + col.rowspan + '\" ',\n                            '>', getFieldValue.call(this, col), '</td>');\n                    }\n                    SS.push('</tr>');\n                }\n                //SS.push('</table>');\n\n                return SS.join('');\n            };\n\n        return getHeader.call(this, colGroup, headerData);\n    };\n\n    GRID.header = {\n        init: init,\n        repaint: repaint,\n        scrollTo: scrollTo,\n        toggleSort: toggleSort,\n        applySortStatus: applySortStatus,\n        getExcelString: getExcelString\n    };\n\n})();","// ax5.ui.grid.inlineEditor\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const edit_text = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"text\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.focus().select();\n        }\n    };\n\n    const edit_money = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"money\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"money\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    const edit_number = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"number\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            $el.on(\"blur\", function () {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey);\n            });\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            _$el.data(\"binded-ax5ui\", \"ax5formater\");\n            _$el.ax5formatter({\n                pattern: \"number\"\n            });\n            _$el.focus().select();\n        }\n    };\n\n    const edit_date = {\n        useReturnToSave: true,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            return '<input type=\"text\" data-ax5grid-editor=\"calendar\" value=\"' + _value + '\" >';\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5picker\");\n            _$el.ax5picker({\n                direction: \"auto\",\n                content: {\n                    type: 'date',\n                    formatter: {\n                        pattern: 'date'\n                    }\n                },\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activePicker.attr(\"data-ax5grid-inline-edit-picker\", \"date\");\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey);\n                    }\n                }\n            });\n            _$el.focus().select();\n        }\n    };\n\n    const edit_select = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        getHtml: function (_root, _columnKey, _editor, _value) {\n            var po = [];\n            po.push('<div data-ax5select=\"ax5grid-editor\" data-ax5select-config=\"{}\">');\n            po.push('</div>');\n\n            return po.join('');\n        },\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            var $el;\n            _$parent.append($el = jQuery(this.getHtml(_root, _columnKey, _editor, _value)));\n            this.bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            return $el;\n        },\n        bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            var eConfig = {\n                columnKeys: {\n                    optionValue: \"value\",\n                    optionText: \"text\",\n                    optionSelected: \"selected\"\n                }\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n\n            eConfig.options.forEach(function (n) {\n                if (n[eConfig.columnKeys.optionValue] == _value) n[eConfig.columnKeys.optionSelected] = true;\n            });\n\n            var self = _root;\n            _$el.data(\"binded-ax5ui\", \"ax5select\");\n            _$el.ax5select({\n                direction: \"auto\",\n                columnKeys: eConfig.columnKeys,\n                options: eConfig.options,\n                onStateChanged: function () {\n                    if (this.state == \"open\") {\n                        this.self.activeSelectOptionGroup.attr(\"data-ax5grid-inline-edit-picker\", \"select\");\n                    } else if (this.state == \"changeValue\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n                    } else if (this.state == \"close\") {\n                        GRID.body.inlineEdit.deActive.call(self, \"ESC\", _columnKey);\n                    }\n                }\n            });\n            _$el.ax5select(\"open\");\n            _$el.ax5select(\"setValue\", _value);\n            _$el.find(\"a\").focus();\n        }\n    };\n\n    const edit_checkbox = {\n        editMode: \"inline\",\n        getHtml: function (_root, _editor, _value) {\n\n            var lineHeight = (_root.config.body.columnHeight - _root.config.body.columnPadding * 2 - _root.config.body.columnBorderWidth);\n            var checked;\n            if (_editor.config && _editor.config.trueValue) {\n                checked = (_value == _editor.config.trueValue) ? \"true\" : \"false\";\n            } else {\n                checked = (_value == false || _value == \"false\" || _value < \"1\") ? \"false\" : \"true\";\n            }\n\n            var eConfig = {\n                marginTop: 2,\n                height: lineHeight - 4\n            };\n            jQuery.extend(true, eConfig, _editor.config);\n            eConfig.marginTop = (lineHeight - eConfig.height) / 2;\n\n            return '<div data-ax5grid-editor=\"checkbox\" data-ax5grid-checked=\"' + checked + '\" style=\"height:' + eConfig.height + 'px;width:' + eConfig.height + 'px;margin-top:' + eConfig.marginTop + 'px;\"></div>';\n        }\n    };\n\n    const edit_textarea = {\n        useReturnToSave: false,\n        editMode: \"popup\",\n        _getHtml: function (_root, _columnKey, _editor, _value) {\n            // init 에서 사용하게 될 HTML 태그를 만들어 줍니다.\n            return `<div data-ax5grid-editor=\"textarea\"></div>`;\n        },\n        _bindUI: function (_root, _columnKey, _$el, _editor, _$parent, _value) {\n            // 위치와 크기를 구합니다.\n            let offset = _$el.offset();\n            let box = {\n                width: _$el.width()\n            };\n            let editorHeight = 150;\n            let buttonHeight = 30;\n\n            // 새로운 엘리먼트 생성\n            let $newDiv = jQuery(`<div data-ax5grid-popup=\"textarea\" style=\"z-index: 9999;\">\n    <textarea style=\"width:100%;height:${editorHeight-buttonHeight}px;\" class=\"form-control\">${_value}</textarea>\n    <div style=\"height:${buttonHeight}px;padding:5px;text-align: right;\">\n        <button class=\"btn btn-default\">OK</button>\n    </div>\n</div>`);\n            let $newTextarea = $newDiv.find(\"textarea\");\n            // 엘리먼트에 CSS 적용\n            $newDiv.css({\n                position: \"absolute\",\n                left: offset.left,\n                top: offset.top,\n                width: box.width,\n                height: editorHeight\n            });\n            $newDiv.find(\"textarea\");\n\n            // 새로운 엘리먼트를 document.body에 append\n            jQuery(document.body).append($newDiv);\n            $newTextarea.focus().select();\n\n            $newTextarea.on(\"blur\", function (e) {\n                GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value);\n                $newDiv.remove();\n                ax5.util.stopEvent(e.originalEvent);\n            });\n            $newTextarea.on(\"keydown\", function (e) {\n                if(e.which == ax5.info.eventKeys.ESC){\n                    GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\n                    $newDiv.remove();\n                    ax5.util.stopEvent(e.originalEvent);\n                }\n            });\n\n            /// 값 변경\n            /// GRID.body.inlineEdit.deActive.call(_root, \"RETURN\", _columnKey, this.value[0][eConfig.columnKeys.optionValue]);\n            /// 에디팅 취소\n            /// GRID.body.inlineEdit.deActive.call(_root, \"ESC\", _columnKey);\n        },\n\n        init: function (_root, _columnKey, _editor, _$parent, _value) {\n            // 인라인 에디팅 활성화 시작\n            /**\n             * _root : gridInstance\n             * _columnKey : di + \"_\" + col.colIndex + \"_\" + col.rowIndex\n             * _editor : col.editor\n             * _$parent : 셀\n             * _value : 값\n             */\n            let $el;\n            _$parent.append($el = jQuery(this._getHtml(_root, _columnKey, _editor, _value)));\n            // 셀에 HTML 컨텐츠 추가\n\n            this._bindUI(_root, _columnKey, $el, _editor, _$parent, _value);\n            // 이벤트 바인딩\n\n            return $el;\n        },\n    };\n\n    GRID.inlineEditor = {\n        \"text\": edit_text,\n        \"money\": edit_money,\n        \"number\": edit_number,\n        \"date\": edit_date,\n        \"select\": edit_select,\n        \"checkbox\": edit_checkbox,\n        \"textarea\": edit_textarea\n    };\n\n})();","// ax5.ui.grid.page\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const onclickPageMove = function (_act) {\n        var callback = function (_pageNo) {\n            if (this.page.currentPage != _pageNo) {\n                this.page.selectPage = _pageNo;\n                if (this.config.page.onChange) {\n                    this.config.page.onChange.call({\n                        self: this,\n                        page: this.page,\n                        data: this.data\n                    });\n                }\n            }\n        };\n        var processor = {\n            \"first\": function () {\n                callback.call(this, 0);\n            },\n            \"prev\": function () {\n                var pageNo = this.page.currentPage - 1;\n                if (pageNo < 0) pageNo = 0;\n                callback.call(this, pageNo);\n            },\n            \"next\": function () {\n                var pageNo = this.page.currentPage + 1;\n                if (pageNo > this.page.totalPages - 1) pageNo = this.page.totalPages - 1;\n                callback.call(this, pageNo);\n            },\n            \"last\": function () {\n                callback.call(this, this.page.totalPages - 1);\n            }\n        };\n\n        if (_act in processor) {\n            processor[_act].call(this);\n        }\n        else {\n            callback.call(this, _act-1);\n        }\n    };\n\n    const navigationUpdate = function () {\n        let self = this;\n        if (this.page) {\n            let page = {\n                hasPage: false,\n                currentPage: this.page.currentPage,\n                pageSize: this.page.pageSize,\n                totalElements: this.page.totalElements,\n                totalPages: this.page.totalPages,\n                firstIcon: this.config.page.firstIcon,\n                prevIcon: this.config.page.prevIcon || \"«\",\n                nextIcon: this.config.page.nextIcon || \"»\",\n                lastIcon: this.config.page.lastIcon,\n            };\n            let navigationItemCount = this.config.page.navigationItemCount;\n\n            page[\"@paging\"] = (function () {\n                let returns = [], startI, endI;\n\n                startI = page.currentPage - Math.floor(navigationItemCount / 2);\n                if (startI < 0) startI = 0;\n                endI = page.currentPage + navigationItemCount;\n                if (endI > page.totalPages) endI = page.totalPages;\n\n                if (endI - startI > navigationItemCount) {\n                    endI = startI + navigationItemCount;\n                }\n\n                if(endI - startI < navigationItemCount){\n                    startI = endI - navigationItemCount;\n                }\n                if (startI < 0) startI = 0;\n\n                for (let p = startI, l = endI; p < l; p++) {\n                    returns.push({'pageNo': (p + 1), 'selected': page.currentPage == p});\n                }\n                return returns;\n            })();\n\n            if(page[\"@paging\"].length > 0){\n                page.hasPage = true;\n            }\n\n            this.$[\"page\"][\"navigation\"].html(GRID.tmpl.get(\"page_navigation\", page));\n            this.$[\"page\"][\"navigation\"].find(\"[data-ax5grid-page-move]\").on(\"click\", function () {\n                onclickPageMove.call(self, this.getAttribute(\"data-ax5grid-page-move\"));\n            });\n\n        } else {\n            this.$[\"page\"][\"navigation\"].empty();\n        }\n    };\n\n    const statusUpdate = function () {\n        if(!this.config.page.statusDisplay){\n            return;\n        }\n\n        let fromRowIndex = this.xvar.virtualPaintStartRowIndex;\n        let toRowIndex = this.xvar.virtualPaintStartRowIndex + this.xvar.virtualPaintRowCount;\n        //var totalElements = (this.page && this.page.totalElements) ? this.page.totalElements : this.xvar.dataRowCount;\n        let totalElements = this.xvar.dataRowCount;\n\n        if (toRowIndex > totalElements) {\n            toRowIndex = totalElements;\n        }\n\n        this.$[\"page\"][\"status\"].html(GRID.tmpl.get(\"page_status\", {\n            fromRowIndex: U.number(fromRowIndex + 1, {\"money\": true}),\n            toRowIndex: U.number(toRowIndex, {\"money\": true}),\n            totalElements: U.number(totalElements, {\"money\": true}),\n            dataRowCount: (totalElements !== this.xvar.dataRealRowCount) ? U.number(this.xvar.dataRealRowCount, {\"money\": true}) : false,\n            progress: (this.appendProgress) ? this.config.appendProgressIcon : \"\"\n        }));\n    };\n\n    GRID.page = {\n        navigationUpdate: navigationUpdate,\n        statusUpdate: statusUpdate\n    };\n\n})();","// ax5.ui.grid.scroller\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    const convertScrollPosition = {\n        \"vertical\": function (css, _var) {\n            let _content_height = _var._content_height - _var._panel_height,\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n                top = (_content_height * css.top) / _scroller_height;\n\n            if (top < 0) top = 0;\n            else if (_content_height < top) {\n                top = _content_height;\n            }\n            return {\n                top: -top\n            }\n        },\n        \"horizontal\": function (css, _var) {\n            let _content_width = _var._content_width - _var._panel_width,\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n                left = (_content_width * css.left) / _scroller_width;\n\n            if (left < 0) left = 0;\n            else if (_content_width < left) {\n                left = _content_width;\n            }\n            return {\n                left: -left\n            }\n        }\n    };\n\n    const convertScrollBarPosition = {\n        \"vertical\": function (_top, _var) {\n\n            let self = this,\n                type = \"vertical\",\n                _content_height = _var._content_height - _var._panel_height,\n                _scroller_height = _var._vertical_scroller_height - _var.verticalScrollBarHeight,\n                top = (_scroller_height * _top) / _content_height,\n                scrollPositon;\n\n            if (-top > _scroller_height) {\n                top = -_scroller_height;\n\n                scrollPositon = convertScrollPosition[type].call(this, {top: -top}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.body.scrollTo.call(self, scrollPositon);\n\n                /*\n                if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\n                this.xvar.scrollTimer = setTimeout(function () {\n                    GRID.body.scrollTo.call(self, scrollPositon);\n                });\n                */\n            }\n\n            return -top\n        },\n        \"horizontal\": function (_left, _var) {\n            let self = this,\n                type = \"horizontal\",\n                _content_width = _var._content_width - _var._panel_width,\n                _scroller_width = _var._horizontal_scroller_width - _var.horizontalScrollBarWidth,\n                left = (_scroller_width * _left) / _content_width,\n                scrollPositon;\n\n            if (-left > _scroller_width) {\n                left = -_scroller_width;\n                scrollPositon = convertScrollPosition[type].call(this, {left: -left}, {\n                    _content_width: _var._content_width,\n                    _content_height: _var._content_height,\n                    _panel_width: _var._panel_width,\n                    _panel_height: _var._panel_height,\n                    _horizontal_scroller_width: _var._horizontal_scroller_width,\n                    _vertical_scroller_height: _var._vertical_scroller_height,\n                    verticalScrollBarHeight: _var.verticalScrollBarHeight,\n                    horizontalScrollBarWidth: _var.horizontalScrollBarWidth\n                });\n\n                GRID.header.scrollTo.call(self, scrollPositon);\n                GRID.body.scrollTo.call(self, scrollPositon);\n\n                /*\n                if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\n                this.xvar.scrollTimer = setTimeout(function () {\n\n                });\n                */\n            }\n\n            return -left\n        }\n    };\n\n    const scrollBarMover = {\n        \"click\": function (track, bar, type, e) {\n\n            // 마우스 무브 완료 타임과 클릭타임 차이가 20 보다 작으면 클릭이벤트 막기.\n            if ((new Date()).getTime() - GRID.scroller.moveout_timer < 20) {\n                return false;\n            }\n\n            let self = this,\n                trackOffset = track.offset(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        let mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        let newTop = mouseObj.clientY - trackOffset.top;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        let mouseObj = GRID.util.getMousePosition(e);\n                        // track을 벗어 나지 안도록 범위 체크\n                        let newLeft = mouseObj.clientX - trackOffset.left;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                },\n                css = getScrollerPosition[type](e);\n\n            bar.css(css);\n\n            let scrollPositon = convertScrollPosition[type].call(self, css, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            });\n            if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n            GRID.body.scrollTo.call(self, scrollPositon);\n\n            scrollPositon = null;\n        },\n        \"on\": function (track, bar, type, e) {\n            let self = this,\n                barOffset = bar.position(),\n                barBox = {\n                    width: bar.outerWidth(), height: bar.outerHeight()\n                },\n                trackBox = {\n                    width: track.innerWidth(), height: track.innerHeight()\n                },\n\n                _vertical_scroller_height = self.$[\"scroller\"][\"vertical\"].innerHeight(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _horizontal_scroller_width = self.$[\"scroller\"][\"horizontal\"].innerWidth(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                verticalScrollBarHeight = self.$[\"scroller\"][\"vertical-bar\"].outerHeight(),\n                horizontalScrollBarWidth = self.$[\"scroller\"][\"horizontal-bar\"].outerWidth(),\n\n                getScrollerPosition = {\n                    \"vertical\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newTop = barOffset.top + self.xvar.__da;\n                        if (newTop < 0) {\n                            newTop = 0;\n                        }\n                        else if ((newTop + barBox.height) > trackBox.height) {\n                            newTop = trackBox.height - barBox.height;\n                        }\n                        return {top: newTop};\n                    },\n                    \"horizontal\": function (e) {\n                        var mouseObj = GRID.util.getMousePosition(e);\n                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                        // track을 벗어 나지 안도록 범위 체크\n                        var newLeft = barOffset.left + self.xvar.__da;\n                        if (newLeft < 0) {\n                            newLeft = 0;\n                        }\n                        else if ((newLeft + barBox.width) > trackBox.width) {\n                            newLeft = trackBox.width - barBox.width;\n                        }\n                        return {left: newLeft};\n                    }\n                };\n\n            self.xvar.__da = 0; // 이동량 변수 초기화 (계산이 잘못 될까바)\n\n            jQuery(document.body)\n                .bind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    let css = getScrollerPosition[type](e);\n                    bar.css(css);\n\n                    let scrollPositon = convertScrollPosition[type].call(self, css, {\n                        _content_width: _content_width,\n                        _content_height: _content_height,\n                        _panel_width: _panel_width,\n                        _panel_height: _panel_height,\n                        _horizontal_scroller_width: _horizontal_scroller_width,\n                        _vertical_scroller_height: _vertical_scroller_height,\n                        verticalScrollBarHeight: verticalScrollBarHeight,\n                        horizontalScrollBarWidth: horizontalScrollBarWidth\n                    });\n\n                    if (type === \"horizontal\") GRID.header.scrollTo.call(self, scrollPositon);\n\n                    if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                    self.xvar.scrollTimer = setTimeout(function () {\n                        GRID.body.scrollTo.call(self, scrollPositon);\n                    });\n                })\n                .bind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                })\n                .bind(\"mouseleave.ax5grid-\" + this.instanceId, function (e) {\n                    scrollBarMover.off.call(self);\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n            GRID.scroller.moveout_timer = (new Date()).getTime();\n\n            jQuery(document.body)\n                .unbind(GRID.util.ENM[\"mousemove\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(GRID.util.ENM[\"mouseup\"] + \".ax5grid-\" + this.instanceId)\n                .unbind(\"mouseleave.ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const scrollContentMover = {\n        \"wheel\": function (delta) {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth;\n\n            if (isNaN(_content_height) || isNaN(_content_width)) {\n                return false;\n            }\n\n            let newLeft, newTop,\n                _top_is_end = false,\n                _left_is_end = false;\n\n            newLeft = _body_scroll_position.left - delta.x;\n            newTop = _body_scroll_position.top - delta.y;\n\n            // newTop이 범위를 넘었는지 체크\n            if (newTop >= 0) {\n                newTop = 0;\n                _top_is_end = true;\n            } else if (newTop <= _panel_height - _content_height) {\n                newTop = _panel_height - _content_height;\n                if (newTop >= 0) newTop = 0;\n                _top_is_end = true;\n            } else {\n                if (delta.y == 0) _top_is_end = true;\n            }\n\n            // newLeft이 범위를 넘었는지 체크\n            if (newLeft >= 0) {\n                newLeft = 0;\n                _left_is_end = true;\n            } else if (newLeft <= _panel_width - _content_width) {\n                newLeft = _panel_width - _content_width;\n                if (newLeft >= 0) newLeft = 0;\n                _left_is_end = true;\n            } else {\n                if (delta.x == 0) _left_is_end = true;\n            }\n\n            resize.call(this);\n            GRID.header.scrollTo.call(self, {left: newLeft});\n\n            if (this.xvar.scrollTimer) clearTimeout(this.xvar.scrollTimer);\n            this.xvar.scrollTimer = setTimeout(function () {\n                GRID.body.scrollTo.call(self, {left: newLeft, top: newTop});\n            }, 0);\n\n            return !_top_is_end || !_left_is_end;\n        },\n        \"on\": function () {\n            let self = this,\n                _body_scroll_position = self.$[\"panel\"][\"body-scroll\"].position(),\n                _panel_height = self.$[\"panel\"][\"body\"].height(),\n                _panel_width = self.$[\"panel\"][\"body\"].width(),\n                _content_height = self.xvar.scrollContentHeight,\n                _content_width = self.xvar.scrollContentWidth,\n                getContentPosition = function (e) {\n                    let mouseObj = GRID.util.getMousePosition(e), newLeft, newTop;\n\n                    self.xvar.__x_da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                    self.xvar.__y_da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n\n                    newLeft = _body_scroll_position.left + self.xvar.__x_da;\n                    newTop = _body_scroll_position.top + self.xvar.__y_da;\n\n                    // newTop이 범위를 넘었는지 체크\n                    if (newTop >= 0) {\n                        newTop = 0;\n                    } else if (newTop <= _panel_height - _content_height) {\n                        newTop = _panel_height - _content_height;\n                        if (newTop >= 0) newTop = 0;\n                    }\n\n                    // newLeft이 범위를 넘었는지 체크\n                    if (newLeft >= 0) {\n                        newLeft = 0;\n                    } else if (newLeft <= _panel_width - _content_width) {\n                        newLeft = _panel_width - _content_width;\n                        if (newLeft >= 0) newLeft = 0;\n                    }\n\n                    return {\n                        left: newLeft, top: newTop\n                    }\n                };\n\n            this.xvar.__x_da = 0; // 이동량 변수 초기화\n            this.xvar.__y_da = 0; // 계산이 잘못 될까바\n            this.xvar.touchmoved = false;\n\n            jQuery(document.body)\n                .on(\"touchmove\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    let css = getContentPosition(e);\n\n                    resize.call(self);\n                    if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                    self.xvar.scrollTimer = setTimeout(function () {\n                        GRID.header.scrollTo.call(self, {left: css.left});\n                        GRID.body.scrollTo.call(self, css, \"noRepaint\");\n                    }, 0);\n                    U.stopEvent(e.originalEvent);\n                    self.xvar.touchmoved = true;\n                })\n                .on(\"touchend\" + \".ax5grid-\" + this.instanceId, function (e) {\n                    if (self.xvar.touchmoved) {\n                        let css = getContentPosition(e);\n\n                        resize.call(self);\n                        if (self.xvar.scrollTimer) clearTimeout(self.xvar.scrollTimer);\n                        self.xvar.scrollTimer = setTimeout(function () {\n                            GRID.header.scrollTo.call(self, {left: css.left});\n                            GRID.body.scrollTo.call(self, css);\n                        }, 0);\n\n                        U.stopEvent(e.originalEvent);\n                        scrollContentMover.off.call(self);\n                    }\n                });\n\n            jQuery(document.body)\n                .attr('unselectable', 'on')\n                .css('user-select', 'none')\n                .on('selectstart', false);\n        },\n        \"off\": function () {\n\n            jQuery(document.body)\n                .off(\"touchmove\" + \".ax5grid-\" + this.instanceId)\n                .off(\"touchend\" + \".ax5grid-\" + this.instanceId);\n\n            jQuery(document.body)\n                .removeAttr('unselectable')\n                .css('user-select', 'auto')\n                .off('selectstart');\n        }\n    };\n\n    const init = function () {\n        let self = this,\n            margin = this.config.scroller.trackPadding;\n\n        if (margin == 0) {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size, left: -1});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size, top: -1});\n        } else {\n            this.$[\"scroller\"][\"vertical-bar\"].css({width: this.config.scroller.size - (margin + 1), left: margin / 2});\n            this.$[\"scroller\"][\"horizontal-bar\"].css({height: this.config.scroller.size - (margin + 1), top: margin / 2});\n        }\n\n        this.$[\"scroller\"][\"vertical-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"vertical\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"vertical\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"vertical\"], this.$[\"scroller\"][\"vertical-bar\"], \"vertical\", e);\n                }\n            }).bind(this));\n\n        this.$[\"scroller\"][\"horizontal-bar\"]\n            .on(GRID.util.ENM[\"mousedown\"], (function (e) {\n                this.xvar.mousePosition = GRID.util.getMousePosition(e);\n                scrollBarMover.on.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n            }).bind(this))\n            .on(\"dragstart\", function (e) {\n                U.stopEvent(e);\n                return false;\n            });\n\n        this.$[\"scroller\"][\"horizontal\"]\n            .on(\"click\", (function (e) {\n                if (e.target.getAttribute(\"data-ax5grid-scroller\") == \"horizontal\") {\n                    scrollBarMover.click.call(this, this.$[\"scroller\"][\"horizontal\"], this.$[\"scroller\"][\"horizontal-bar\"], \"horizontal\", e);\n                }\n            }).bind(this));\n\n        this.$[\"container\"][\"body\"].on('mousewheel DOMMouseScroll', (function (e) {\n            let E = e.originalEvent, delta = {x: 0, y: 0};\n\n            if (E.detail) {\n                delta.y = E.detail * 10;\n            } else {\n                if (typeof E.deltaY === \"undefined\") {\n                    delta.y = -E.wheelDelta;\n                    delta.x = 0;\n                } else {\n                    delta.y = E.deltaY;\n                    delta.x = E.deltaX;\n                }\n            }\n\n            if (scrollContentMover.wheel.call(this, delta)) {\n                U.stopEvent(e);\n            }\n        }).bind(this));\n\n\n        if (ax5.info.supportTouch) {\n            this.$[\"container\"][\"body\"]\n                .on(\"touchstart\", '[data-ax5grid-panel]', function (e) {\n                    self.xvar.mousePosition = GRID.util.getMousePosition(e);\n                    scrollContentMover.on.call(self);\n                });\n        }\n\n    };\n\n    const resize = function () {\n        let _vertical_scroller_height = this.$[\"scroller\"][\"vertical\"].height(),\n            _horizontal_scroller_width = this.$[\"scroller\"][\"horizontal\"].width(),\n            _panel_height = this.$[\"panel\"][\"body\"].height(),\n            _panel_width = this.$[\"panel\"][\"body\"].width(),\n            _content_height = this.xvar.scrollContentHeight,\n            _content_width = this.xvar.scrollContentWidth,\n            verticalScrollBarHeight = _panel_height * _vertical_scroller_height / _content_height,\n            horizontalScrollBarWidth = _panel_width * _horizontal_scroller_width / _content_width;\n\n        if (verticalScrollBarHeight < this.config.scroller.barMinSize) verticalScrollBarHeight = this.config.scroller.barMinSize;\n        if (horizontalScrollBarWidth < this.config.scroller.barMinSize) horizontalScrollBarWidth = this.config.scroller.barMinSize;\n\n        this.$[\"scroller\"][\"vertical-bar\"].css({\n            top: convertScrollBarPosition.vertical.call(this, this.$.panel[\"body-scroll\"].position().top, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            height: verticalScrollBarHeight\n        });\n\n        this.$[\"scroller\"][\"horizontal-bar\"].css({\n            left: convertScrollBarPosition.horizontal.call(this, this.$.panel[\"body-scroll\"].position().left, {\n                _content_width: _content_width,\n                _content_height: _content_height,\n                _panel_width: _panel_width,\n                _panel_height: _panel_height,\n                _horizontal_scroller_width: _horizontal_scroller_width,\n                _vertical_scroller_height: _vertical_scroller_height,\n                verticalScrollBarHeight: verticalScrollBarHeight,\n                horizontalScrollBarWidth: horizontalScrollBarWidth\n            }),\n            width: horizontalScrollBarWidth\n        });\n\n        _vertical_scroller_height = null;\n        _horizontal_scroller_width = null;\n        _panel_height = null;\n        _panel_width = null;\n        _content_height = null;\n        _content_width = null;\n        verticalScrollBarHeight = null;\n        horizontalScrollBarWidth = null;\n    };\n\n    GRID.scroller = {\n        // 타이머\n        moveout_timer: (new Date()).getTime(),\n        init: init,\n        resize: resize\n    };\n\n})();","// ax5.ui.grid.tmpl\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const main = function () {\n        return `<div data-ax5grid-container=\"root\" data-ax5grid-instance=\"{{instanceId}}\">\n            <div data-ax5grid-container=\"hidden\">\n                <textarea data-ax5grid-form=\"clipboard\"></textarea>\n            </div>\n            <div data-ax5grid-container=\"header\">\n                <div data-ax5grid-panel=\"aside-header\"></div>\n                <div data-ax5grid-panel=\"left-header\"></div>\n                <div data-ax5grid-panel=\"header\">\n                    <div data-ax5grid-panel-scroll=\"header\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-header\"></div>\n            </div>\n            <div data-ax5grid-container=\"body\">\n                <div data-ax5grid-panel=\"top-aside-body\"></div>\n                <div data-ax5grid-panel=\"top-left-body\"></div>\n                <div data-ax5grid-panel=\"top-body\">\n                    <div data-ax5grid-panel-scroll=\"top-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"top-right-body\"></div>\n                <div data-ax5grid-panel=\"aside-body\">\n                    <div data-ax5grid-panel-scroll=\"aside-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"left-body\">\n                    <div data-ax5grid-panel-scroll=\"left-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"body\">\n                    <div data-ax5grid-panel-scroll=\"body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"right-body\">\n                  <div data-ax5grid-panel-scroll=\"right-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-aside-body\"></div>\n                <div data-ax5grid-panel=\"bottom-left-body\"></div>\n                <div data-ax5grid-panel=\"bottom-body\">\n                    <div data-ax5grid-panel-scroll=\"bottom-body\"></div>\n                </div>\n                <div data-ax5grid-panel=\"bottom-right-body\"></div>\n            </div>\n            <div data-ax5grid-container=\"page\">\n                <div data-ax5grid-page=\"holder\">\n                    <div data-ax5grid-page=\"navigation\"></div>\n                    <div data-ax5grid-page=\"status\"></div>\n                </div>\n            </div>\n            <div data-ax5grid-container=\"scroller\">\n                <div data-ax5grid-scroller=\"vertical\">\n                    <div data-ax5grid-scroller=\"vertical-bar\"></div>    \n                </div>\n                <div data-ax5grid-scroller=\"horizontal\">\n                    <div data-ax5grid-scroller=\"horizontal-bar\"></div>\n                </div>\n                <div data-ax5grid-scroller=\"corner\"></div>\n            </div>\n            <div data-ax5grid-resizer=\"vertical\"></div>\n            <div data-ax5grid-resizer=\"horizontal\"></div>\n        </div>`;\n    };\n\n    const page_navigation = function(){\n        return `<div data-ax5grid-page-navigation=\"holder\">\n            {{#hasPage}}\n            <div data-ax5grid-page-navigation=\"cell\">    \n                {{#firstIcon}}<button type=\"button\" data-ax5grid-page-move=\"first\">{{{firstIcon}}}</button>{{/firstIcon}}\n                <button type=\"button\" data-ax5grid-page-move=\"prev\">{{{prevIcon}}}</button>\n            </div>\n            <div data-ax5grid-page-navigation=\"cell-paging\">\n                {{#@paging}}\n                <button type=\"button\" data-ax5grid-page-move=\"{{pageNo}}\" data-ax5grid-page-selected=\"{{selected}}\">{{pageNo}}</button>\n                {{/@paging}}\n            </div>\n            <div data-ax5grid-page-navigation=\"cell\">\n                <button type=\"button\" data-ax5grid-page-move=\"next\">{{{nextIcon}}}</button>\n                {{#lastIcon}}<button type=\"button\" data-ax5grid-page-move=\"last\">{{{lastIcon}}}</button>{{/lastIcon}}\n            </div>\n            {{/hasPage}}\n        </div>`;\n    };\n\n    const page_status = function(){\n        return `<span>{{{progress}}} {{fromRowIndex}} - {{toRowIndex}} of {{totalElements}}{{#dataRowCount}} ({{dataRowCount}}){{/dataRowCount}}</span>`;\n    };\n\n    GRID.tmpl = {\n        \"main\": main,\n        \"page_navigation\": page_navigation,\n        \"page_status\": page_status,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(GRID.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();","// ax5.ui.grid.util\n(function () {\n\n    const GRID = ax5.ui.grid;\n\n    const U = ax5.util;\n\n    /**\n     * @method ax5grid.util.divideTableByFrozenColumnIndex\n     * @param _table\n     * @param _frozenColumnIndex\n     * @returns {{leftHeaderData: {rows: Array}, headerData: {rows: Array}}}\n     */\n    const divideTableByFrozenColumnIndex = function (_table, _frozenColumnIndex) {\n\n        let tempTable_l = {rows: []},\n            tempTable_r = {rows: []};\n\n        for (let r = 0, rl = _table.rows.length; r < rl; r++) {\n            let row = _table.rows[r];\n\n            tempTable_l.rows[r] = {cols: []};\n            tempTable_r.rows[r] = {cols: []};\n\n            for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                let col = jQuery.extend({}, row.cols[c]),\n                    colStartIndex = col.colIndex,\n                    colEndIndex = col.colIndex + col.colspan;\n\n                if (colStartIndex < _frozenColumnIndex) {\n                    if (colEndIndex <= _frozenColumnIndex) {\n                        // 좌측편에 변형없이 추가\n                        tempTable_l.rows[r].cols.push(col);\n                    } else {\n                        let leftCol = jQuery.extend({}, col),\n                            rightCol = jQuery.extend({}, leftCol);\n\n                        leftCol.colspan = _frozenColumnIndex - leftCol.colIndex;\n                        rightCol.colIndex = _frozenColumnIndex;\n                        rightCol.colspan = col.colspan - leftCol.colspan;\n\n                        tempTable_l.rows[r].cols.push(leftCol);\n                        if (rightCol.colspan) {\n                            tempTable_r.rows[r].cols.push(rightCol);\n                        }\n                    }\n                }\n                else {\n                    // 오른편\n                    tempTable_r.rows[r].cols.push(col);\n                }\n\n                col = null;\n                colStartIndex = null;\n                colEndIndex = null;\n            }\n\n            row = null;\n        }\n\n        return {\n            leftData: tempTable_l,\n            rightData: tempTable_r\n        }\n    };\n\n    const getTableByStartEndColumnIndex = function (_table, _startColumnIndex, _endColumnIndex) {\n\n        let tempTable = {rows: []};\n        for (let r = 0, rl = _table.rows.length; r < rl; r++) {\n            let row = _table.rows[r];\n\n            tempTable.rows[r] = {cols: []};\n            for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                let col = jQuery.extend({}, row.cols[c]),\n                    colStartIndex = col.colIndex, colEndIndex = col.colIndex + col.colspan;\n\n                if (_startColumnIndex <= colStartIndex || colEndIndex <= _endColumnIndex) {\n                    if (_startColumnIndex <= colStartIndex && colEndIndex <= _endColumnIndex) {\n                        // 변형없이 추가\n                        tempTable.rows[r].cols.push(col);\n                    }\n                    else if (_startColumnIndex > colStartIndex && colEndIndex > _startColumnIndex) {\n                        // 앞에서 걸친경우\n                        col.colspan = colEndIndex - _startColumnIndex;\n                        tempTable.rows[r].cols.push(col);\n                    }\n                    else if (colEndIndex > _endColumnIndex && colStartIndex <= _endColumnIndex) {\n                        tempTable.rows[r].cols.push(col);\n                    }\n                }\n            }\n        }\n\n        return tempTable;\n    };\n\n    const getMousePosition = function (e) {\n        let mouseObj,\n            originalEvent = (e.originalEvent) ? e.originalEvent : e;\n\n        mouseObj = ('changedTouches' in originalEvent && originalEvent.changedTouches) ? originalEvent.changedTouches[0] : originalEvent;\n        // clientX, Y 쓰면 스크롤에서 문제 발생\n        return {\n            clientX: mouseObj.pageX,\n            clientY: mouseObj.pageY\n        }\n    };\n\n    const ENM = {\n        \"mousedown\": (ax5.info.supportTouch) ? \"touchstart\" : \"mousedown\",\n        \"mousemove\": (ax5.info.supportTouch) ? \"touchmove\" : \"mousemove\",\n        \"mouseup\": (ax5.info.supportTouch) ? \"touchend\" : \"mouseup\"\n    };\n\n    const makeHeaderTable = function (_columns) {\n        let columns = U.deepCopy(_columns),\n            cfg = this.config,\n            table = {\n                rows: []\n            },\n            colIndex = 0,\n            maekRows = function (_columns, depth, parentField) {\n                var row = {cols: []};\n                var i = 0, l = _columns.length;\n\n                for (; i < l; i++) {\n                    var field = _columns[i];\n                    var colspan = 1;\n\n                    if (!field.hidden) {\n                        field.colspan = 1;\n                        field.rowspan = 1;\n\n                        field.rowIndex = depth;\n                        field.colIndex = (function () {\n                            if (!parentField) {\n                                return colIndex++;\n                            } else {\n                                colIndex = parentField.colIndex + i + 1;\n                                return parentField.colIndex + i;\n                            }\n                        })();\n\n                        row.cols.push(field);\n\n                        if ('columns' in field) {\n                            colspan = maekRows(field.columns, depth + 1, field);\n                        } else {\n                            field.width = ('width' in field) ? field.width : cfg.columnMinWidth;\n                        }\n                        field.colspan = colspan;\n                    } else {\n\n\n                    }\n                }\n\n                if (row.cols.length > 0) {\n                    if (!table.rows[depth]) {\n                        table.rows[depth] = {cols: []};\n                    }\n                    table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                    return (row.cols.length - 1) + colspan;\n                } else {\n                    return colspan;\n                }\n\n            };\n\n        maekRows(columns, 0);\n\n        // set rowspan\n        for (let r = 0, rl = table.rows.length; r < rl; r++) {\n            for (let c = 0, cl = table.rows[r].cols.length; c < cl; c++) {\n                if (!('columns' in table.rows[r].cols[c])) {\n                    table.rows[r].cols[c].rowspan = rl - r;\n                }\n            }\n        }\n\n        return table;\n    };\n\n    const makeBodyRowTable = function (_columns) {\n        let columns = U.deepCopy(_columns),\n            table = {\n                rows: []\n            },\n            colIndex = 0,\n            maekRows = function (_columns, depth, parentField) {\n                let row = {cols: []},\n                    i = 0,\n                    l = _columns.length,\n                    colspan = 1;\n\n                let selfMakeRow = function (__columns) {\n                    let i = 0, l = __columns.length;\n                    for (; i < l; i++) {\n                        let field = __columns[i],\n                            colspan = 1;\n\n                        if (!field.hidden) {\n\n                            if ('key' in field) {\n                                field.colspan = 1;\n                                field.rowspan = 1;\n\n                                field.rowIndex = depth;\n                                field.colIndex = (function () {\n                                    if (!parentField) {\n                                        return colIndex++;\n                                    } else {\n                                        colIndex = parentField.colIndex + i + 1;\n                                        return parentField.colIndex + i;\n                                    }\n                                })();\n\n                                row.cols.push(field);\n                                if ('columns' in field) {\n                                    colspan = maekRows(field.columns, depth + 1, field);\n                                }\n                                field.colspan = colspan;\n                            }\n                            else {\n                                if ('columns' in field) {\n                                    selfMakeRow(field.columns, depth);\n                                }\n                            }\n                        }\n                        else {\n\n                        }\n                    }\n                };\n\n                for (; i < l; i++) {\n                    let field = _columns[i];\n                    colspan = 1;\n\n                    if (!field.hidden) {\n\n                        if ('key' in field) {\n                            field.colspan = 1;\n                            field.rowspan = 1;\n\n                            field.rowIndex = depth;\n                            field.colIndex = (function () {\n                                if (!parentField) {\n                                    return colIndex++;\n                                } else {\n                                    colIndex = parentField.colIndex + i + 1;\n                                    return parentField.colIndex + i;\n                                }\n                            })();\n\n                            row.cols.push(field);\n                            if ('columns' in field) {\n                                colspan = maekRows(field.columns, depth + 1, field);\n                            }\n                            field.colspan = colspan;\n                        }\n                        else {\n                            if ('columns' in field) {\n                                selfMakeRow(field.columns, depth);\n                            }\n                        }\n                    }\n                    else {\n\n                    }\n\n                    field = null;\n                }\n\n                if (row.cols.length > 0) {\n                    if (!table.rows[depth]) {\n                        table.rows[depth] = {cols: []};\n                    }\n                    table.rows[depth].cols = table.rows[depth].cols.concat(row.cols);\n                    return (row.cols.length - 1) + colspan;\n                }\n                else {\n                    return colspan;\n                }\n            };\n\n        maekRows(columns, 0);\n\n        (function (table) {\n            // set rowspan\n            for (let r = 0, rl = table.rows.length; r < rl; r++) {\n                let row = table.rows[r];\n                for (let c = 0, cl = row.cols.length; c < cl; c++) {\n                    let col = row.cols[c];\n                    if (!('columns' in col)) {\n                        col.rowspan = rl - r;\n                    }\n                    col = null;\n                }\n                row = null;\n            }\n        })(table);\n\n        return table;\n    };\n\n    const makeBodyRowMap = function (_table) {\n        let map = {};\n        _table.rows.forEach(function (row) {\n            row.cols.forEach(function (col) {\n                map[col.rowIndex + \"_\" + col.colIndex] = jQuery.extend({}, col);\n            });\n        });\n        return map;\n    };\n\n    let makeFootSumTable = function (_footSumColumns) {\n        let table = {\n            rows: []\n        };\n\n        for (let r = 0, rl = _footSumColumns.length; r < rl; r++) {\n            let footSumRow = _footSumColumns[r],\n                addC = 0;\n\n            table.rows[r] = {cols: []};\n\n            for (let c = 0, cl = footSumRow.length; c < cl; c++) {\n                if (addC > this.colGroup.length) break;\n                let colspan = footSumRow[c].colspan || 1;\n                if (footSumRow[c].label || footSumRow[c].key) {\n                    table.rows[r].cols.push({\n                        colspan: colspan,\n                        rowspan: 1,\n                        colIndex: addC,\n                        columnAttr: \"sum\",\n                        align: footSumRow[c].align,\n                        label: footSumRow[c].label,\n                        key: footSumRow[c].key,\n                        collector: footSumRow[c].collector,\n                        formatter: footSumRow[c].formatter\n                    });\n                } else {\n                    table.rows[r].cols.push({\n                        colIndex: addC,\n                        colspan: colspan,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n                addC += colspan;\n                colspan = null;\n            }\n\n            if (addC < this.colGroup.length) {\n                for (let c = addC; c < this.colGroup.length; c++) {\n                    table.rows[r].cols.push({\n                        colIndex: (c),\n                        colspan: 1,\n                        rowspan: 1,\n                        label: \"&nbsp;\",\n                    });\n                }\n            }\n            footSumRow = null;\n            addC = null;\n        }\n\n        return table;\n    };\n\n    const makeBodyGroupingTable = function (_bodyGroupingColumns) {\n        let table = {\n                rows: []\n            },\n            r = 0,\n            addC = 0;\n\n        table.rows[r] = {cols: []};\n        for (let c = 0, cl = _bodyGroupingColumns.length; c < cl; c++) {\n            if (addC > this.columns.length) break;\n            let colspan = _bodyGroupingColumns[c].colspan || 1;\n            if (_bodyGroupingColumns[c].label || _bodyGroupingColumns[c].key) {\n                table.rows[r].cols.push({\n                    colspan: colspan,\n                    rowspan: 1,\n                    rowIndex: 0,\n                    colIndex: addC,\n                    columnAttr: \"default\",\n                    align: _bodyGroupingColumns[c].align,\n                    label: _bodyGroupingColumns[c].label,\n                    key: _bodyGroupingColumns[c].key,\n                    collector: _bodyGroupingColumns[c].collector,\n                    formatter: _bodyGroupingColumns[c].formatter\n                });\n            } else {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: addC,\n                    colspan: colspan,\n                    rowspan: 1,\n                    label: \"&nbsp;\"\n                });\n            }\n            addC += colspan;\n        }\n\n        if (addC < this.colGroup.length) {\n            for (var c = addC; c < this.colGroup.length; c++) {\n                table.rows[r].cols.push({\n                    rowIndex: 0,\n                    colIndex: (c),\n                    colspan: 1,\n                    rowspan: 1,\n                    label: \"&nbsp;\",\n                });\n            }\n        }\n\n        return table;\n    };\n\n    const findPanelByColumnIndex = function (_dindex, _colIndex, _rowIndex) {\n        let _containerPanelName,\n            _isScrollPanel = false,\n            _panels = [];\n\n        if (this.xvar.frozenRowIndex > _dindex) _panels.push(\"top\");\n        if (this.xvar.frozenColumnIndex > _colIndex) _panels.push(\"left\");\n        _panels.push(\"body\");\n\n        if (this.xvar.frozenColumnIndex <= _colIndex || this.xvar.frozenRowIndex <= _dindex) {\n            _containerPanelName = _panels.join(\"-\");\n            _panels.push(\"scroll\");\n            _isScrollPanel = true;\n        }\n\n        return {\n            panelName: _panels.join(\"-\"),\n            containerPanelName: _containerPanelName,\n            isScrollPanel: _isScrollPanel\n        }\n    };\n\n    const getRealPathForDataItem = function (_dataPath) {\n        let path = [],\n            _path = [].concat(_dataPath.split(/[\\.\\[\\]]/g));\n\n        _path.forEach(function (n) {\n            if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n        });\n        _path = null;\n        return path.join(\"\");\n    };\n\n\n    GRID.util = {\n        divideTableByFrozenColumnIndex: divideTableByFrozenColumnIndex,\n        getTableByStartEndColumnIndex: getTableByStartEndColumnIndex,\n        getMousePosition: getMousePosition,\n        ENM: ENM,\n        makeHeaderTable: makeHeaderTable,\n        makeBodyRowTable: makeBodyRowTable,\n        makeBodyRowMap: makeBodyRowMap,\n        makeFootSumTable: makeFootSumTable,\n        makeBodyGroupingTable: makeBodyGroupingTable,\n        findPanelByColumnIndex: findPanelByColumnIndex,\n        getRealPathForDataItem: getRealPathForDataItem,\n    };\n\n})();"]}