{"version":3,"sources":["ax5mask.min.js","ax5mask.js","ax5mask-tmpl.js"],"names":["MASK","UI","ax5","ui","U","util","addClass","className","version","ax5mask","cfg","self","this","instanceId","getGuid","config","theme","target","jQuery","document","body","get","animateTime","maskContent","status","onStateChanged","opts","that","call","getBodyTmpl","data","templateName","tmpl","setBody","content","init","onClick","open","options","close","maskConfig","extend","$mask","_cfg","$target","maskId","css","append","position","left","offset","top","width","outerWidth","height","outerHeight","zIndex","window","bind","_$target","align","on","e","state","type","_delay","_this","_close","remove","removeClass","unbind","setTimeout","fadeOut","_this2","pullRequest","console","log","main","mask_instance","push","arguments","isObject","setConfig","apply","mask","defaultMask","columnKeys","tmplName","mustache","render"],"mappings":"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","file":"ax5mask.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.mask\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var MASK;\n\n    UI.addClass({\n        className: \"mask\",\n        version: \"${VERSION}\"\n    }, function () {\n        /**\n         * @class ax5mask\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * var customMask = function customMask() {\n         *     var cTmpl = '' +\n         *         '<div class=\"ax-mask\" id=\"{{maskId}}\" >' +\n         *         '    <div class=\"ax-mask-bg\" style=\"background-color:red !important;\"></div>' +\n         *         '    <div class=\"ax-mask-content\">' +\n         *         '        {{{body}}}' +\n         *         '    </div>' +\n         *         '</div>';\n         *     return cTmpl;\n         * };\n         * ax5.ui.mask.tmpl.customMask = customMask;\n         *\n         * var mask = new ax5.ui.mask();\n         *\n         * mask.open({\n         *     templateName: 'customMask',\n         *     content: 'custom MASK on target',\n         *     target: $(\"#user-content\").get(0),\n         *     onClick: function(){\n         *         console.log(this);\n         *     }\n         * });\n         * ```\n         */\n        var ax5mask = function ax5mask() {\n            var self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: '',\n                target: jQuery(document.body).get(0),\n                animateTime: 250\n            };\n            this.maskContent = '';\n            this.status = \"off\";\n\n            cfg = this.config;\n\n            var onStateChanged = function onStateChanged(opts, that) {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                } else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                opts = null;\n                that = null;\n                return true;\n            },\n                getBodyTmpl = function getBodyTmpl(data) {\n                if (typeof data.templateName === \"undefined\") data.templateName = \"defaultMask\";\n                return MASK.tmpl.get.call(this, data.templateName, data);\n            },\n                setBody = function setBody(content) {\n                this.maskContent = content;\n            };\n\n            /**\n             * Preferences of Mask UI\n             * @method ax5mask.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @returns {ax5mask}\n             * @example\n             * ```\n             * setConfig({\n             *      target : {Element|AX5 nodelist}, // 마스크 처리할 대상\n             *      content : {String}, // 마스크안에 들어가는 내용물\n             *      onStateChanged: function(){} // 마스크 상태변경 시 호출되는 함수 this.type으로 예외처리 가능\n             * }\n             * ```\n             */\n            this.init = function () {\n                // after setConfig();\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                if (this.config.content) setBody.call(this, this.config.content);\n            };\n\n            /**\n             * open mask\n             * target 을 주지 않으면 기본적으로 body 에 마스크가 적용되고 원하는 타겟을 지정해서 마스크를 씌울 수 있습니다.\n             * 기본 정의된 마스크 외에 사용자가 템플릿을 정의해서 마스크를 사용 가능합니다.\n             * @method ax5mask.open\n             * @param {Object} config\n             * @param {String} config\n             * @returns {ax5mask}\n             * @example\n             * ```js\n             * my_mask.open({\n             *     target: document.body,\n             *     content: \"<h1>Loading..</h1>\",\n             *     onStateChanged: function () {\n             *\n             *     }\n             * });\n             *\n             * my_mask.open({\n             *     target: $(\"#mask-target\").get(0), // dom Element\n             *     content: \"<h1>Loading..</h1>\",\n             *     onStateChanged: function () {\n             *\n             *     }\n             * });\n             *\n             *\n             * var customMask = function customMask() {\n             *     var cTmpl = '' +\n             *             '<div class=\"ax-mask\" id=\"{{maskId}}\" >' +\n             *             '    <div class=\"ax-mask-bg\" style=\"background-color:red   !important;\"></div>' +\n             *             '    <div class=\"ax-mask-content\">' +\n             *             '        {{{body}}}' +\n             *             '    </div>' +\n             *             '</div>';\n             *     return cTmpl;\n             * };\n             * ax5.ui.mask.tmpl.customMask = customMask;\n             *\n             * my_mask.open({\n             *     target: $(\"#mask-target\").get(0), // dom Element\n             *     content: \"<h1>Loading..</h1>\",\n             *     \n             *     onStateChanged: function () {\n             *\n             *     }\n             * });\n             * ```\n             */\n            this.open = function (options) {\n\n                if (this.status === \"on\") this.close();\n                if (options && options.content) setBody.call(this, options.content);\n                if (options && typeof options.templateName === \"undefined\") options.templateName = \"defaultMask\";\n                self.maskConfig = {};\n\n                jQuery.extend(true, self.maskConfig, this.config, options);\n\n                var _cfg = self.maskConfig,\n                    target = _cfg.target,\n                    $target = jQuery(target),\n                    maskId = 'ax-mask-' + ax5.getGuid(),\n                    $mask,\n                    css = {},\n                    that = {},\n                    templateName = _cfg.templateName,\n\n                /*\n                 bodyTmpl = getBodyTmpl(),\n                 body = ax5.mustache.render(bodyTmpl, {\n                 theme: _cfg.theme,\n                 maskId: maskId,\n                 body: this.maskContent\n                 });\n                 */\n                body = getBodyTmpl({\n                    theme: _cfg.theme,\n                    maskId: maskId,\n                    body: this.maskContent,\n                    templateName: templateName\n                });\n\n                jQuery(document.body).append(body);\n\n                // 마스크의 타겟이 html body 가 아니라면\n                if (target && target !== jQuery(document.body).get(0)) {\n                    css = {\n                        position: _cfg.position || \"absolute\",\n                        left: $target.offset().left,\n                        top: $target.offset().top,\n                        width: $target.outerWidth(),\n                        height: $target.outerHeight()\n                    };\n\n                    if (typeof self.maskConfig.zIndex !== \"undefined\") {\n                        css[\"z-index\"] = self.maskConfig.zIndex;\n                    }\n                    $target.addClass(\"ax-masking\");\n\n                    // 마스크의 타겟이 html body가 아닌경우 window resize 이벤트를 추적하여 엘리먼트 마스크의 CSS 속성 변경\n                    jQuery(window).bind(\"resize.ax5mask-\" + this.instanceId, function (_$target) {\n                        this.align();\n                    }.bind(this));\n                }\n\n                this.$mask = $mask = jQuery(\"#\" + maskId);\n                this.$target = $target;\n                this.status = \"on\";\n                $mask.css(css);\n\n                if (_cfg.onClick) {\n                    $mask.on(\"click\", function (e) {\n                        that = {\n                            self: self,\n                            state: \"open\",\n                            type: \"click\"\n                        };\n                        self.maskConfig.onClick.call(that, that);\n                    });\n                }\n\n                onStateChanged.call(this, null, {\n                    self: this,\n                    state: \"open\"\n                });\n\n                options = null;\n                _cfg = null;\n                target = null;\n                $target = null;\n                maskId = null;\n                $mask = null;\n                css = null;\n                that = null;\n                templateName = null;\n                body = null;\n\n                return this;\n            };\n\n            /**\n             * close mask\n             * @method ax5mask.close\n             * @param {Number} [_delay=0]\n             * @returns {ax5mask}\n             * @example\n             * ```\n             * my_mask.close();\n             * ```\n             */\n            this.close = function (_delay) {\n                var _this = this;\n\n                if (this.$mask) {\n                    (function () {\n                        var _close = function _close() {\n                            this.status = \"off\";\n                            this.$mask.remove();\n                            this.$target.removeClass(\"ax-masking\");\n\n                            onStateChanged.call(this, null, {\n                                self: this,\n                                state: \"close\"\n                            });\n\n                            jQuery(window).unbind(\"resize.ax5mask-\" + this.instanceId);\n                        };\n\n                        if (_delay) {\n                            setTimeout(function () {\n                                _close.call(this);\n                            }.bind(_this), _delay);\n                        } else {\n                            _close.call(_this);\n                        }\n                    })();\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5mask.fadeOut\n             * @returns {ax5mask}\n             */\n            this.fadeOut = function () {\n                var _this2 = this;\n\n                if (this.$mask) {\n                    (function () {\n                        var _close = function _close() {\n                            this.status = \"off\";\n                            this.$mask.remove();\n                            this.$target.removeClass(\"ax-masking\");\n\n                            onStateChanged.call(this, null, {\n                                self: this,\n                                state: \"close\"\n                            });\n\n                            jQuery(window).unbind(\"resize.ax5mask-\" + this.instanceId);\n                        };\n\n                        _this2.$mask.addClass(\"fade-out\");\n                        setTimeout(function () {\n                            _close.call(this);\n                        }.bind(_this2), cfg.animateTime);\n                    })();\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5mask.align\n             * @returns {ax5mask}\n             */\n            this.align = function () {\n                if (this.maskConfig && this.maskConfig.target && this.maskConfig.target !== jQuery(document.body).get(0)) {\n                    try {\n                        var css = {\n                            position: this.maskConfig.position || \"absolute\",\n                            left: this.$target.offset().left,\n                            top: this.$target.offset().top,\n                            width: this.$target.outerWidth(),\n                            height: this.$target.outerHeight()\n                        };\n                        this.$mask.css(css);\n                    } catch (e) {}\n                }\n                return this;\n            };\n\n            this.pullRequest = function () {\n                console.log(\"test pullRequest01\");\n                console.log(\"test pullRequest02\");\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n\n                UI.mask_instance = UI.mask_instance || [];\n                UI.mask_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }.apply(this, arguments);\n        };\n        return ax5mask;\n    }());\n    MASK = ax5.ui.mask;\n})();\n// ax5.ui.mask.tmpl\n(function () {\n\n    var MASK = ax5.ui.mask;\n\n    var defaultMask = function defaultMask(columnKeys) {\n        return \"\\n            <div class=\\\"ax-mask {{theme}}\\\" id=\\\"{{maskId}}\\\">\\n                <div class=\\\"ax-mask-bg\\\"></div>\\n                <div class=\\\"ax-mask-content\\\">\\n                    <div class=\\\"ax-mask-body\\\">\\n                    {{{body}}}\\n                    </div>\\n                </div>\\n            </div>\\n        \";\n    };\n\n    MASK.tmpl = {\n        \"defaultMask\": defaultMask,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(MASK.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.mask\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var MASK;\n\n    UI.addClass({\n        className: \"mask\",\n        version: \"${VERSION}\"\n    }, (function () {\n        /**\n         * @class ax5mask\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * var customMask = function customMask() {\n         *     var cTmpl = '' +\n         *         '<div class=\"ax-mask\" id=\"{{maskId}}\" >' +\n         *         '    <div class=\"ax-mask-bg\" style=\"background-color:red !important;\"></div>' +\n         *         '    <div class=\"ax-mask-content\">' +\n         *         '        {{{body}}}' +\n         *         '    </div>' +\n         *         '</div>';\n         *     return cTmpl;\n         * };\n         * ax5.ui.mask.tmpl.customMask = customMask;\n         *\n         * var mask = new ax5.ui.mask();\n         *\n         * mask.open({\n         *     templateName: 'customMask',\n         *     content: 'custom MASK on target',\n         *     target: $(\"#user-content\").get(0),\n         *     onClick: function(){\n         *         console.log(this);\n         *     }\n         * });\n         * ```\n         */\n        var ax5mask = function () {\n            var self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: '',\n                target: jQuery(document.body).get(0),\n                animateTime: 250\n            };\n            this.maskContent = '';\n            this.status = \"off\";\n\n            cfg = this.config;\n\n            var\n                onStateChanged = function (opts, that) {\n                    if (opts && opts.onStateChanged) {\n                        opts.onStateChanged.call(that, that);\n                    }\n                    else if (this.onStateChanged) {\n                        this.onStateChanged.call(that, that);\n                    }\n\n                    opts = null;\n                    that = null;\n                    return true;\n                },\n                getBodyTmpl = function (data) {\n                    if (typeof data.templateName === \"undefined\") data.templateName = \"defaultMask\";\n                    return MASK.tmpl.get.call(this, data.templateName, data);\n                },\n                setBody = function (content) {\n                    this.maskContent = content;\n                };\n\n            /**\n             * Preferences of Mask UI\n             * @method ax5mask.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @returns {ax5mask}\n             * @example\n             * ```\n             * setConfig({\n             *      target : {Element|AX5 nodelist}, // 마스크 처리할 대상\n             *      content : {String}, // 마스크안에 들어가는 내용물\n             *      onStateChanged: function(){} // 마스크 상태변경 시 호출되는 함수 this.type으로 예외처리 가능\n             * }\n             * ```\n             */\n            this.init = function () {\n                // after setConfig();\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                if (this.config.content) setBody.call(this, this.config.content);\n            };\n\n            /**\n             * open mask\n             * target 을 주지 않으면 기본적으로 body 에 마스크가 적용되고 원하는 타겟을 지정해서 마스크를 씌울 수 있습니다.\n             * 기본 정의된 마스크 외에 사용자가 템플릿을 정의해서 마스크를 사용 가능합니다.\n             * @method ax5mask.open\n             * @param {Object} config\n             * @param {String} config\n             * @returns {ax5mask}\n             * @example\n             * ```js\n             * my_mask.open({\n             *     target: document.body,\n             *     content: \"<h1>Loading..</h1>\",\n             *     onStateChanged: function () {\n             *\n             *     }\n             * });\n             *\n             * my_mask.open({\n             *     target: $(\"#mask-target\").get(0), // dom Element\n             *     content: \"<h1>Loading..</h1>\",\n             *     onStateChanged: function () {\n             *\n             *     }\n             * });\n             *\n             *\n             * var customMask = function customMask() {\n             *     var cTmpl = '' +\n             *             '<div class=\"ax-mask\" id=\"{{maskId}}\" >' +\n             *             '    <div class=\"ax-mask-bg\" style=\"background-color:red   !important;\"></div>' +\n             *             '    <div class=\"ax-mask-content\">' +\n             *             '        {{{body}}}' +\n             *             '    </div>' +\n             *             '</div>';\n             *     return cTmpl;\n             * };\n             * ax5.ui.mask.tmpl.customMask = customMask;\n             *\n             * my_mask.open({\n             *     target: $(\"#mask-target\").get(0), // dom Element\n             *     content: \"<h1>Loading..</h1>\",\n             *     \n             *     onStateChanged: function () {\n             *\n             *     }\n             * });\n             * ```\n             */\n            this.open = function (options) {\n\n                if (this.status === \"on\") this.close();\n                if (options && options.content) setBody.call(this, options.content);\n                if (options && typeof options.templateName === \"undefined\") options.templateName = \"defaultMask\";\n                self.maskConfig = {};\n\n                jQuery.extend(true, self.maskConfig, this.config, options);\n\n                var _cfg = self.maskConfig,\n                    target = _cfg.target,\n                    $target = jQuery(target),\n                    maskId = 'ax-mask-' + ax5.getGuid(),\n                    $mask,\n                    css = {},\n                    that = {},\n                    templateName = _cfg.templateName,\n                    /*\n                     bodyTmpl = getBodyTmpl(),\n                     body = ax5.mustache.render(bodyTmpl, {\n                     theme: _cfg.theme,\n                     maskId: maskId,\n                     body: this.maskContent\n                     });\n                     */\n                    body = getBodyTmpl({\n                        theme: _cfg.theme,\n                        maskId: maskId,\n                        body: this.maskContent,\n                        templateName: templateName\n                    });\n\n                jQuery(document.body).append(body);\n\n\n                // 마스크의 타겟이 html body 가 아니라면\n                if (target && target !== jQuery(document.body).get(0)) {\n                    css = {\n                        position: _cfg.position || \"absolute\",\n                        left: $target.offset().left,\n                        top: $target.offset().top,\n                        width: $target.outerWidth(),\n                        height: $target.outerHeight()\n                    };\n\n                    if (typeof self.maskConfig.zIndex !== \"undefined\") {\n                        css[\"z-index\"] = self.maskConfig.zIndex;\n                    }\n                    $target.addClass(\"ax-masking\");\n\n                    // 마스크의 타겟이 html body가 아닌경우 window resize 이벤트를 추적하여 엘리먼트 마스크의 CSS 속성 변경\n                    jQuery(window).bind(\"resize.ax5mask-\" + this.instanceId, (function (_$target) {\n                        this.align();\n                    }).bind(this));\n                }\n\n                this.$mask = $mask = jQuery(\"#\" + maskId);\n                this.$target = $target;\n                this.status = \"on\";\n                $mask.css(css);\n\n                if (_cfg.onClick) {\n                    $mask.on(\"click\", function (e) {\n                        that = {\n                            self: self,\n                            state: \"open\",\n                            type: \"click\"\n                        };\n                        self.maskConfig.onClick.call(that, that);\n                    });\n                }\n\n                onStateChanged.call(this, null, {\n                    self: this,\n                    state: \"open\"\n                });\n\n                options = null;\n                _cfg = null;\n                target = null;\n                $target = null;\n                maskId = null;\n                $mask = null;\n                css = null;\n                that = null;\n                templateName = null;\n                body = null;\n\n                return this;\n            };\n\n            /**\n             * close mask\n             * @method ax5mask.close\n             * @param {Number} [_delay=0]\n             * @returns {ax5mask}\n             * @example\n             * ```\n             * my_mask.close();\n             * ```\n             */\n            this.close = function (_delay) {\n                if (this.$mask) {\n                    let _close = function () {\n                        this.status = \"off\";\n                        this.$mask.remove();\n                        this.$target.removeClass(\"ax-masking\");\n\n                        onStateChanged.call(this, null, {\n                            self: this,\n                            state: \"close\"\n                        });\n\n                        jQuery(window).unbind(\"resize.ax5mask-\" + this.instanceId);\n                    };\n\n                    if (_delay) {\n                        setTimeout((function () {\n                            _close.call(this);\n                        }).bind(this), _delay);\n                    } else {\n                        _close.call(this);\n                    }\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5mask.fadeOut\n             * @returns {ax5mask}\n             */\n            this.fadeOut = function () {\n                if (this.$mask) {\n                    let _close = function () {\n                        this.status = \"off\";\n                        this.$mask.remove();\n                        this.$target.removeClass(\"ax-masking\");\n\n                        onStateChanged.call(this, null, {\n                            self: this,\n                            state: \"close\"\n                        });\n\n                        jQuery(window).unbind(\"resize.ax5mask-\" + this.instanceId);\n                    };\n\n\n                    this.$mask.addClass(\"fade-out\");\n                    setTimeout((function () {\n                        _close.call(this);\n                    }).bind(this), cfg.animateTime);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5mask.align\n             * @returns {ax5mask}\n             */\n            this.align = function () {\n                if (this.maskConfig && this.maskConfig.target && this.maskConfig.target !== jQuery(document.body).get(0)) {\n                    try {\n                        var css = {\n                            position: this.maskConfig.position || \"absolute\",\n                            left: this.$target.offset().left,\n                            top: this.$target.offset().top,\n                            width: this.$target.outerWidth(),\n                            height: this.$target.outerHeight()\n                        };\n                        this.$mask.css(css);\n                    } catch (e) {\n\n                    }\n                }\n                return this;\n            };\n\n\n            this.pullRequest = function () {\n                console.log(\"test pullRequest01\");\n                console.log(\"test pullRequest02\");\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.mask_instance = UI.mask_instance || [];\n                UI.mask_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n        return ax5mask;\n    })());\n    MASK = ax5.ui.mask;\n})();","// ax5.ui.mask.tmpl\n(function () {\n\n    var MASK = ax5.ui.mask;\n\n    var defaultMask = function(columnKeys) {\n        return `\n            <div class=\"ax-mask {{theme}}\" id=\"{{maskId}}\">\n                <div class=\"ax-mask-bg\"></div>\n                <div class=\"ax-mask-content\">\n                    <div class=\"ax-mask-body\">\n                    {{{body}}}\n                    </div>\n                </div>\n            </div>\n        `;\n    };\n\n    MASK.tmpl = {\n        \"defaultMask\": defaultMask,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(MASK.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}