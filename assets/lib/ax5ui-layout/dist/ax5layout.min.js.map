{"version":3,"sources":["ax5layout.min.js","ax5layout.js","jQuery-extender.js"],"names":["UI","ax5","ui","U","util","addClass","className","ax5layout","cfg","self","this","ENM","mousedown","info","supportTouch","mousemove","mouseup","getMousePosition","e","mouseObj","originalEvent","changedTouches","clientX","clientY","instanceId","getGuid","config","theme","animateTime","splitter","size","autoResize","queue","openTimer","closeTimer","resizer","alignLayoutAll","i","length","parentQueIdx","alignLayout","call","getDockPanelOuterSize","width","item","panel","__width","split","height","__height","getPixel","parentSize","right","number","Number","beforeSetCSS","horizontal","panelIndex","splitPanel","asteriskLength","undefined","vertical","setCSS","top","$target","css","$splitter","bottom","left","targetDimension","dockPanel","center","minWidth","minHeight","withoutAsteriskSize","windowResize","display","prevPosition","offsetEnd","offsetStart","layoutProcessor","dock-panel","get","split-panel","forEach","orientation","sum","n","childResize","callback","childQueIdxs","queIdx","innerHeight","innerWidth","layout","onResize","setTimeout","bind","resizeSplitter","on","splitterOffset","position","splitterBox","getResizerPosition","__da","mousePosition","maxWidth","maxHeight","prevPanel","nextPanel","prePanelMinHeight","nextPanelMinHeight","prePanelMinWidth","nextPanelMinWidth","jQuery","document","body","resizerType","append","off","attr","setPanelSize","tab-panel","remove","unbind","removeAttr","tabControl","open","activePanelIndex","tabPanel","active","find","onOpenTab","that","name","id","activePanel","getTabLabesTmpl","bindLayoutTarget","applyLayout","each","panelInfo","data","isObject","error","extend","parseJson","getAttribute","dock","toString","stopEvent","ELIndex","push","hasActivePanel","mustache","render","index","parents","hooksResizeLayout","getQueIdx","boundID","isString","search","childQueIdx","isNumber","init","onStateChanged","onClick","window","UIConfig","target","options","JSON","parse","stringify","console","log","getError","align","fn","resize","resizeLayoutPanel","resizeOption","reset","resetLayoutPanel","hide","tabOpen","tabIndex","getActiveTab","main","arguments","setConfig","apply","layout_instance","methodName","defaultConfig"],"mappings":"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","file":"ax5layout.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.layout\n(function () {\n    var UI = ax5.ui;\n    var U = ax5.util;\n\n    UI.addClass({\n        className: \"layout\"\n    }, function () {\n        /**\n         * @class ax5layout\n         * @alias ax5.ui.layout\n         * @author tom@axisj.com\n         */\n\n        var ax5layout = function ax5layout() {\n            var self = this,\n                cfg,\n                ENM = {\n                \"mousedown\": ax5.info.supportTouch ? \"touchstart\" : \"mousedown\",\n                \"mousemove\": ax5.info.supportTouch ? \"touchmove\" : \"mousemove\",\n                \"mouseup\": ax5.info.supportTouch ? \"touchend\" : \"mouseup\"\n            },\n                getMousePosition = function getMousePosition(e) {\n                var mouseObj = 'changedTouches' in e.originalEvent && e.changedTouches ? e.originalEvent.changedTouches[0] : e;\n                return {\n                    clientX: mouseObj.clientX,\n                    clientY: mouseObj.clientY\n                };\n            };\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                splitter: {\n                    size: 1\n                },\n                autoResize: true\n            };\n            this.queue = [];\n\n            this.openTimer = null;\n            this.closeTimer = null;\n            this.resizer = null;\n\n            cfg = this.config;\n\n            var onStateChanged = function onStateChanged(opts, that) {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                } else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n                return true;\n            },\n                alignLayoutAll = function alignLayoutAll() {\n                var i = this.queue.length;\n                while (i--) {\n                    if (typeof this.queue[i].parentQueIdx === \"undefined\" && this.queue[i].autoResize) {\n                        alignLayout.call(this, i, null, \"windowResize\");\n                    }\n                }\n            },\n                getDockPanelOuterSize = {\n                \"width\": function width(item, panel) {\n                    return panel ? panel.__width + (panel.split ? item.splitter.size : 0) : 0;\n                },\n                \"height\": function height(item, panel) {\n                    return panel ? panel.__height + (panel.split ? item.splitter.size : 0) : 0;\n                }\n            },\n                getPixel = function getPixel(size, parentSize) {\n                if (size == \"*\") {\n                    return;\n                } else if (U.right(size, 1) == \"%\") {\n                    return parentSize * U.number(size) / 100;\n                } else {\n                    return Number(size);\n                }\n            },\n                alignLayout = function () {\n\n                var beforeSetCSS = {\n                    \"split\": {\n                        \"horizontal\": function horizontal(item, panel, panelIndex) {\n                            if (panel.splitter) {\n                                panel.__height = item.splitter.size;\n                            } else {\n                                if (panelIndex == item.splitPanel.length - 1) {\n                                    if (item.splitPanel.asteriskLength == 0) {\n                                        panel.height = \"*\";\n                                        panel.__height = undefined;\n                                        item.splitPanel.asteriskLength++;\n                                    } else {\n                                        if (panel.height == \"*\") {\n                                            item.splitPanel.asteriskLength++;\n                                        } else {\n                                            //panel.__height = getPixel(panel.height, item.targetDimension.height);\n                                        }\n                                    }\n                                } else {\n                                    if (panel.height == \"*\") {\n                                        item.splitPanel.asteriskLength++;\n                                    } else {\n                                        //panel.__height = getPixel(panel.height, item.targetDimension.height);\n                                    }\n                                }\n                            }\n                        },\n                        \"vertical\": function vertical(item, panel, panelIndex) {\n                            if (panel.splitter) {\n                                panel.__width = item.splitter.size;\n                            } else {\n                                if (panelIndex == item.splitPanel.length - 1) {\n                                    if (item.splitPanel.asteriskLength == 0) {\n                                        panel.width = \"*\";\n                                        panel.__width = undefined;\n                                        item.splitPanel.asteriskLength++;\n                                    } else {\n                                        if (panel.width == \"*\") {\n                                            item.splitPanel.asteriskLength++;\n                                        }\n                                    }\n                                } else {\n                                    if (panel.width == \"*\") {\n                                        item.splitPanel.asteriskLength++;\n                                    } else {\n                                        //panel.__width = getPixel(panel.width, item.targetDimension.width);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                };\n                var setCSS = {\n                    \"top\": function top(item, panel) {\n                        panel.$target.css({ height: panel.__height || 0 });\n                        if (panel.split) {\n                            panel.$splitter.css({ height: item.splitter.size, top: panel.__height || 0 });\n                        }\n                    },\n                    \"bottom\": function bottom(item, panel) {\n                        panel.$target.css({ height: panel.__height || 0 });\n                        if (panel.split) {\n                            panel.$splitter.css({ height: item.splitter.size, bottom: panel.__height || 0 });\n                        }\n                    },\n                    \"left\": function left(item, panel) {\n                        var css = {\n                            width: panel.__width || 0,\n                            height: item.targetDimension.height\n                        };\n\n                        if (item.dockPanel.top) {\n                            css.height -= item.dockPanel.top.__height;\n                            css.top = item.dockPanel.top.__height;\n                            if (item.dockPanel.top.split) {\n                                css.height -= item.splitter.size;\n                                css.top += item.splitter.size;\n                            }\n                        }\n                        if (item.dockPanel.bottom) {\n                            css.height -= item.dockPanel.bottom.__height;\n                            if (item.dockPanel.bottom.split) {\n                                css.height -= item.splitter.size;\n                            }\n                        }\n\n                        panel.$target.css(css);\n\n                        if (panel.split) {\n                            panel.$splitter.css({ width: item.splitter.size, height: css.height, top: css.top, left: css.width });\n                        }\n                    },\n                    \"right\": function right(item, panel) {\n                        var css = {\n                            width: panel.__width || 0,\n                            height: item.targetDimension.height\n                        };\n\n                        if (item.dockPanel.top) {\n                            css.height -= item.dockPanel.top.__height;\n                            css.top = item.dockPanel.top.__height;\n                            if (item.dockPanel.top.split) {\n                                css.height -= item.splitter.size;\n                                css.top += item.splitter.size;\n                            }\n                        }\n                        if (item.dockPanel.bottom) {\n                            css.height -= item.dockPanel.bottom.__height;\n                            if (item.dockPanel.bottom.split) {\n                                css.height -= item.splitter.size;\n                            }\n                        }\n\n                        panel.$target.css(css);\n\n                        if (panel.split) {\n                            panel.$splitter.css({ width: item.splitter.size, height: css.height, top: css.top, right: css.width });\n                        }\n                    },\n                    \"center\": function center(item, panel) {\n                        var css = {\n                            width: item.targetDimension.width,\n                            height: item.targetDimension.height\n                        };\n\n                        if (item.dockPanel.top) {\n                            css.height -= item.dockPanel.top.__height || 0;\n                            css.top = item.dockPanel.top.__height || 0;\n                            if (item.dockPanel.top.split) {\n                                css.height -= item.splitter.size;\n                                css.top += item.splitter.size;\n                            }\n                        }\n                        if (item.dockPanel.bottom) {\n                            css.height -= item.dockPanel.bottom.__height || 0;\n                            if (item.dockPanel.bottom.split) {\n                                css.height -= item.splitter.size;\n                            }\n                        }\n                        if (item.dockPanel.left) {\n                            css.width -= item.dockPanel.left.__width || 0;\n                            css.left = item.dockPanel.left.__width || 0;\n                            if (item.dockPanel.left.split) {\n                                css.width -= item.splitter.size;\n                                css.left += item.splitter.size;\n                            }\n                        }\n                        if (item.dockPanel.right) {\n                            css.width -= item.dockPanel.right.__width || 0;\n                            if (item.dockPanel.right.split) {\n                                css.width -= item.splitter.size;\n                            }\n                        }\n\n                        var minWidth = panel.minWidth || 0;\n                        var minHeight = panel.minHeight || 0;\n\n                        // 레이아웃의 최소 너비 높이를 주어 레이아웃 덕패널이 겹치는 일이 없게 합니다\n                        if (css.width < minWidth) {\n                            css.width = minWidth;\n                            item.$target.css({ minWidth: minWidth + getDockPanelOuterSize[\"width\"](item.dockPanel.left, item.splitter.size) + getDockPanelOuterSize[\"width\"](item.dockPanel.right, item.splitter.size) });\n                        }\n                        if (css.height < minHeight) {\n                            css.height = minHeight;\n                            item.$target.css({ minHeight: minHeight + getDockPanelOuterSize[\"height\"](item.dockPanel.top, item.splitter.size) + getDockPanelOuterSize[\"height\"](item.dockPanel.bottom, item.splitter.size) });\n                        }\n\n                        panel.$target.css(css);\n                    },\n                    \"split\": {\n                        \"horizontal\": function horizontal(item, panel, panelIndex, withoutAsteriskSize, windowResize) {\n                            var css = {\n                                display: \"block\"\n                            };\n                            var prevPosition = panelIndex ? Number(item.splitPanel[panelIndex - 1].offsetEnd) : 0;\n                            if (panel.splitter) {\n                                css.height = item.splitter.size;\n                            } else {\n                                if (panel.height == \"*\" && (typeof panel.__height === \"undefined\" || windowResize)) {\n                                    // 남은 전체 공간을 사용\n                                    css.height = panel.__height = (item.targetDimension.height - withoutAsteriskSize) / item.splitPanel.asteriskLength;\n                                } else {\n                                    css.height = panel.__height || 0;\n                                }\n                            }\n                            css.top = prevPosition;\n                            panel.offsetStart = prevPosition;\n                            panel.offsetEnd = Number(prevPosition) + Number(css.height);\n                            panel.$target.css(css);\n                        },\n                        \"vertical\": function vertical(item, panel, panelIndex, withoutAsteriskSize, windowResize) {\n                            var css = {\n                                display: \"block\"\n                            };\n                            var prevPosition = panelIndex ? Number(item.splitPanel[panelIndex - 1].offsetEnd) : 0;\n\n                            if (panel.splitter) {\n                                css.width = item.splitter.size;\n                            } else {\n                                if (panel.width == \"*\" && (typeof panel.__width === \"undefined\" || windowResize)) {\n                                    // 남은 전체 공간을 사용\n                                    css.width = panel.__width = (item.targetDimension.width - withoutAsteriskSize) / item.splitPanel.asteriskLength;\n                                } else {\n                                    css.width = panel.__width || 0;\n                                }\n                            }\n                            css.left = prevPosition;\n                            panel.offsetStart = prevPosition;\n                            panel.offsetEnd = Number(prevPosition) + Number(css.width);\n\n                            panel.$target.css(css);\n                        }\n                    }\n                };\n                var layoutProcessor = {\n                    \"dock-panel\": function dockPanel(item) {\n                        for (var panel in item.dockPanel) {\n                            if (item.dockPanel[panel].$target && item.dockPanel[panel].$target.get(0)) {\n                                if (panel in setCSS) {\n                                    setCSS[panel].call(this, item, item.dockPanel[panel]);\n                                }\n                            }\n                        }\n                    },\n                    \"split-panel\": function splitPanel(item, windowResize) {\n                        //console.log(item.splitPanel);\n                        var withoutAsteriskSize;\n                        item.splitPanel.asteriskLength = 0;\n                        item.splitPanel.forEach(function (panel, panelIndex) {\n                            beforeSetCSS[\"split\"][item.orientation].call(this, item, panel, panelIndex);\n                        });\n\n                        if (item.orientation == \"horizontal\") {\n                            withoutAsteriskSize = U.sum(item.splitPanel, function (n) {\n                                if (n.height != \"*\") return U.number(n.__height);\n                            });\n                        } else {\n                            withoutAsteriskSize = U.sum(item.splitPanel, function (n) {\n                                if (n.width != \"*\") return U.number(n.__width);\n                            });\n                        }\n\n                        item.splitPanel.forEach(function (panel, panelIndex) {\n                            setCSS[\"split\"][item.orientation].call(this, item, panel, panelIndex, withoutAsteriskSize, windowResize);\n                        });\n                    }\n                };\n                var childResize = function childResize(item, callback, windowResize) {\n                    var i = item.childQueIdxs.length;\n                    while (i--) {\n                        alignLayout.call(this, item.childQueIdxs[i], callback, windowResize);\n                    }\n                };\n\n                return function (queIdx, callback, windowResize) {\n                    var item = this.queue[queIdx];\n\n                    // 레이아웃 타겟의 CSS속성을 미리 저장해 둡니다. 왜? 패널별로 크기 계산 할 때 쓰려고\n                    item.targetDimension = {\n                        height: item.$target.innerHeight(),\n                        width: item.$target.innerWidth()\n                    };\n\n                    if (item.layout in layoutProcessor) {\n                        layoutProcessor[item.layout].call(this, item, windowResize);\n                    }\n\n                    if (item.childQueIdxs) childResize.call(this, item, callback, windowResize);\n                    if (item.onResize) {\n                        setTimeout(function () {\n                            this.onResize.call(this, this);\n                        }.bind(item), 1);\n                    }\n                    if (callback) {\n                        callback.call(item, item);\n                    }\n                };\n            }(),\n                resizeSplitter = {\n                \"on\": function on(queIdx, panel, $splitter) {\n                    var item = this.queue[queIdx];\n                    var splitterOffset = $splitter.position();\n                    var splitterBox = {\n                        width: $splitter.width(), height: $splitter.height()\n                    };\n                    var getResizerPosition = {\n                        \"left\": function left(e) {\n                            var mouseObj = 'changedTouches' in e.originalEvent && e.changedTouches ? e.originalEvent.changedTouches[0] : e;\n\n                            panel.__da = mouseObj.clientX - panel.mousePosition.clientX;\n                            var minWidth = panel.minWidth || 0;\n                            var maxWidth = panel.maxWidth || item.targetDimension.width - getDockPanelOuterSize[\"width\"](item, item.dockPanel.left) - getDockPanelOuterSize[\"width\"](item, item.dockPanel.right);\n\n                            if (panel.__width + panel.__da < minWidth) {\n                                panel.__da = -panel.__width + minWidth;\n                            } else if (maxWidth < panel.__width + panel.__da) {\n                                panel.__da = maxWidth - panel.__width;\n                            }\n                            return { left: panel.$splitter.position().left + panel.__da };\n                        },\n                        \"right\": function right(e) {\n                            var mouseObj = 'changedTouches' in e.originalEvent && e.changedTouches ? e.originalEvent.changedTouches[0] : e;\n\n                            panel.__da = mouseObj.clientX - panel.mousePosition.clientX;\n                            var minWidth = panel.minWidth || 0;\n                            var maxWidth = panel.maxWidth || item.targetDimension.width - getDockPanelOuterSize[\"width\"](item, item.dockPanel.left) - getDockPanelOuterSize[\"width\"](item, item.dockPanel.right);\n\n                            if (panel.__width - panel.__da < minWidth) {\n                                panel.__da = panel.__width - minWidth;\n                            } else if (maxWidth < panel.__width - panel.__da) {\n                                panel.__da = -maxWidth + panel.__width;\n                            }\n                            return { left: panel.$splitter.position().left + panel.__da };\n                        },\n                        \"top\": function top(e) {\n                            var mouseObj = 'changedTouches' in e.originalEvent && e.changedTouches ? e.originalEvent.changedTouches[0] : e;\n\n                            panel.__da = mouseObj.clientY - panel.mousePosition.clientY;\n                            var minHeight = panel.minHeight || 0;\n                            var maxHeight = panel.maxHeight || item.targetDimension.height - getDockPanelOuterSize[\"height\"](item, item.dockPanel.top) - getDockPanelOuterSize[\"height\"](item, item.dockPanel.bottom);\n\n                            if (panel.__height + panel.__da < minHeight) {\n                                panel.__da = -panel.__height + minHeight;\n                            } else if (maxHeight < panel.__height + panel.__da) {\n                                panel.__da = maxHeight - panel.__height;\n                            }\n                            return { top: panel.$splitter.position().top + panel.__da };\n                        },\n                        \"bottom\": function bottom(e) {\n                            var mouseObj = 'changedTouches' in e.originalEvent && e.changedTouches ? e.originalEvent.changedTouches[0] : e;\n\n                            panel.__da = mouseObj.clientY - panel.mousePosition.clientY;\n                            var minHeight = panel.minHeight || 0;\n                            var maxHeight = panel.maxHeight || item.targetDimension.height - getDockPanelOuterSize[\"height\"](item, item.dockPanel.top) - getDockPanelOuterSize[\"height\"](item, item.dockPanel.bottom);\n\n                            if (panel.__height - panel.__da < minHeight) {\n                                panel.__da = panel.__height - minHeight;\n                            } else if (maxHeight < panel.__height - panel.__da) {\n                                panel.__da = -maxHeight + panel.__height;\n                            }\n                            return { top: panel.$splitter.position().top + panel.__da };\n                        },\n                        \"split\": function split(e) {\n                            var mouseObj = 'changedTouches' in e.originalEvent && e.changedTouches ? e.originalEvent.changedTouches[0] : e;\n\n                            if (item.orientation == \"horizontal\") {\n                                panel.__da = mouseObj.clientY - panel.mousePosition.clientY;\n\n                                var prevPanel = item.splitPanel[panel.panelIndex - 1];\n                                var nextPanel = item.splitPanel[panel.panelIndex + 1];\n\n                                var prePanelMinHeight = prevPanel.minHeight || 0;\n                                var nextPanelMinHeight = nextPanel.minHeight || 0;\n\n                                if (panel.offsetStart + panel.__da < prevPanel.offsetStart + prePanelMinHeight) {\n                                    panel.__da = prevPanel.offsetStart - panel.offsetStart + prePanelMinHeight;\n                                } else if (panel.offsetStart + panel.__da > nextPanel.offsetEnd - nextPanelMinHeight) {\n                                    panel.__da = nextPanel.offsetEnd - panel.offsetEnd - nextPanelMinHeight;\n                                }\n\n                                return { top: panel.$target.position().top + panel.__da };\n                            } else {\n                                /// todo : min & max 범위 정하기\n                                panel.__da = mouseObj.clientX - panel.mousePosition.clientX;\n\n                                var prevPanel = item.splitPanel[panel.panelIndex - 1];\n                                var nextPanel = item.splitPanel[panel.panelIndex + 1];\n                                var prePanelMinWidth = prevPanel.minWidth || 0;\n                                var nextPanelMinWidth = nextPanel.minWidth || 0;\n\n                                if (panel.offsetStart + panel.__da < prevPanel.offsetStart + prePanelMinWidth) {\n                                    panel.__da = prevPanel.offsetStart - panel.offsetStart + prePanelMinWidth;\n                                } else if (panel.offsetStart + panel.__da > nextPanel.offsetEnd - nextPanelMinWidth) {\n                                    panel.__da = nextPanel.offsetEnd - panel.offsetEnd - nextPanelMinWidth;\n                                }\n                                return { left: Number(panel.$target.position().left) + Number(panel.__da) };\n                            }\n                        }\n                    };\n                    panel.__da = 0; // 패널의 변화량\n\n                    jQuery(document.body).bind(ENM[\"mousemove\"] + \".ax5layout-\" + this.instanceId, function (e) {\n                        if (!self.resizer) {\n\n                            self.resizer = jQuery('<div class=\"ax5layout-resizer panel-' + panel.resizerType + '\" ondragstart=\"return false;\"></div>');\n                            self.resizer.css({\n                                left: splitterOffset.left,\n                                top: splitterOffset.top,\n                                width: splitterBox.width,\n                                height: splitterBox.height\n                            });\n                            item.$target.append(self.resizer);\n                        }\n                        self.resizer.css(getResizerPosition[panel.resizerType](e));\n                    }).bind(ENM[\"mouseup\"] + \".ax5layout-\" + this.instanceId, function (e) {\n                        resizeSplitter.off.call(self, queIdx, panel, $splitter);\n                    }).bind(\"mouseleave.ax5layout-\" + this.instanceId, function (e) {\n                        resizeSplitter.off.call(self, queIdx, panel, $splitter);\n                    });\n\n                    jQuery(document.body).attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);\n                },\n                \"off\": function off(queIdx, panel, $splitter) {\n                    var item = this.queue[queIdx];\n                    var setPanelSize = {\n                        \"dock-panel\": {\n                            \"left\": function left(queIdx, panel) {\n                                panel.__width += panel.__da;\n                            },\n                            \"right\": function right() {\n                                panel.__width -= panel.__da;\n                            },\n                            \"top\": function top() {\n                                panel.__height += panel.__da;\n                            },\n                            \"bottom\": function bottom() {\n                                panel.__height -= panel.__da;\n                            }\n                        },\n                        \"split-panel\": {\n                            \"split\": function split() {\n                                if (item.orientation == \"horizontal\") {\n                                    // 앞과 뒤의 높이 조절\n                                    item.splitPanel[panel.panelIndex - 1].__height += panel.__da;\n                                    item.splitPanel[panel.panelIndex + 1].__height -= panel.__da;\n                                } else {\n                                    // 앞과 뒤의 높이 조절\n\n                                    item.splitPanel[panel.panelIndex - 1].__width += panel.__da;\n                                    item.splitPanel[panel.panelIndex + 1].__width -= panel.__da;\n                                }\n                            }\n                        },\n                        \"tab-panel\": {}\n                    };\n\n                    if (self.resizer) {\n                        self.resizer.remove();\n                        self.resizer = null;\n                        setPanelSize[this.queue[queIdx].layout][panel.resizerType].call(this, queIdx, panel);\n                        alignLayout.call(this, queIdx);\n                    }\n\n                    jQuery(document.body).unbind(ENM[\"mousemove\"] + \".ax5layout-\" + this.instanceId).unbind(ENM[\"mouseup\"] + \".ax5layout-\" + this.instanceId).unbind(\"mouseleave.ax5layout-\" + this.instanceId);\n\n                    jQuery(document.body).removeAttr('unselectable').css('user-select', 'auto').off('selectstart');\n                }\n            },\n                tabControl = {\n                \"open\": function open(queIdx, layout, panelIndex) {\n                    if (layout.activePanelIndex != panelIndex) {\n                        layout.tabPanel[panelIndex].active = true;\n                        layout.tabPanel[layout.activePanelIndex].active = false;\n                        layout.$target.find('[data-tab-panel-label=\"' + panelIndex + '\"]').attr(\"data-tab-active\", \"true\");\n                        layout.$target.find('[data-tab-panel-label=\"' + layout.activePanelIndex + '\"]').removeAttr(\"data-tab-active\");\n                        layout.tabPanel[panelIndex].$target.attr(\"data-tab-active\", \"true\");\n                        layout.tabPanel[layout.activePanelIndex].$target.removeAttr(\"data-tab-active\");\n                        layout.activePanelIndex = panelIndex;\n\n                        if (layout.onOpenTab) {\n                            var that = {\n                                '$target': layout.$target,\n                                name: layout.name,\n                                id: layout.id,\n                                layout: layout.layout,\n                                activePanelIndex: layout.activePanelIndex,\n                                activePanel: layout.tabPanel[layout.activePanelIndex],\n                                tabPanel: layout.tabPanel\n                            };\n                            layout.onOpenTab.call(that);\n                        }\n                    }\n                }\n            },\n                getTabLabesTmpl = function getTabLabesTmpl() {\n                return \"\\n<div data-tab-panel-label-holder=\\\"{{id}}\\\">\\n    <div data-tab-panel-label-border=\\\"{{id}}\\\"></div>\\n    <div data-tab-panel-label-table=\\\"{{id}}\\\">\\n        <div data-tab-panel-aside=\\\"left\\\"></div>\\n    {{#tabPanel}}\\n        <div data-tab-panel-label=\\\"{{panelIndex}}\\\" data-tab-active=\\\"{{active}}\\\">\\n            <div data-tab-label=\\\"{{panelIndex}}\\\">{{{label}}}</div>\\n        </div>\\n    {{/tabPanel}}\\n        <div data-tab-panel-aside=\\\"right\\\"></div>\\n    </div>\\n</div>\\n\";\n            },\n                bindLayoutTarget = function () {\n\n                var applyLayout = {\n                    \"dock-panel\": function dockPanel(queIdx) {\n                        var item = this.queue[queIdx];\n                        item.dockPanel = {};\n                        item.$target.find('>[data-dock-panel]').each(function () {\n\n                            var panelInfo = {};\n                            (function (data) {\n                                if (U.isObject(data) && !data.error) {\n                                    panelInfo = jQuery.extend(true, panelInfo, data);\n                                }\n                            })(U.parseJson(this.getAttribute(\"data-dock-panel\"), true));\n\n                            if ('dock' in panelInfo) {\n                                panelInfo.$target = jQuery(this);\n                                panelInfo.$target.addClass(\"dock-panel-\" + panelInfo.dock);\n\n                                if (panelInfo.split = panelInfo.split && panelInfo.split.toString() == \"true\") {\n                                    panelInfo.$splitter = jQuery('<div data-splitter=\"\" class=\"dock-panel-' + panelInfo.dock + '\"></div>');\n                                    panelInfo.$splitter.bind(ENM[\"mousedown\"], function (e) {\n                                        panelInfo.mousePosition = getMousePosition(e);\n                                        resizeSplitter.on.call(self, queIdx, panelInfo, panelInfo.$splitter);\n                                    }).bind(\"dragstart\", function (e) {\n                                        U.stopEvent(e);\n                                        return false;\n                                    });\n                                    item.$target.append(panelInfo.$splitter);\n                                }\n\n                                if (panelInfo.dock == \"top\" || panelInfo.dock == \"bottom\") {\n                                    panelInfo.__height = getPixel(panelInfo.height, item.targetDimension.height);\n                                } else {\n                                    panelInfo.__width = getPixel(panelInfo.width, item.targetDimension.width);\n                                }\n                                panelInfo.resizerType = panelInfo.dock;\n                                item.dockPanel[panelInfo.dock] = panelInfo;\n                            }\n                        });\n                    },\n                    \"split-panel\": function splitPanel(queIdx) {\n                        var item = this.queue[queIdx];\n                        item.splitPanel = [];\n                        item.$target.find('>[data-split-panel], >[data-splitter]').each(function (ELIndex) {\n\n                            var panelInfo = {};\n                            (function (data) {\n                                if (U.isObject(data) && !data.error) {\n                                    panelInfo = jQuery.extend(true, panelInfo, data);\n                                }\n                            })(U.parseJson(this.getAttribute(\"data-split-panel\") || this.getAttribute(\"data-splitter\"), true));\n\n                            panelInfo.$target = jQuery(this);\n                            panelInfo.$target.addClass(\"split-panel-\" + item.orientation);\n                            panelInfo.panelIndex = ELIndex;\n\n                            if (this.getAttribute(\"data-splitter\")) {\n\n                                panelInfo.splitter = true;\n                                panelInfo.$target.bind(ENM[\"mousedown\"], function (e) {\n                                    if (panelInfo.panelIndex > 0 && panelInfo.panelIndex < item.splitPanel.length - 1) {\n                                        panelInfo.mousePosition = getMousePosition(e);\n                                        resizeSplitter.on.call(self, queIdx, panelInfo, panelInfo.$target);\n                                    }\n                                }).bind(\"dragstart\", function (e) {\n                                    U.stopEvent(e);\n                                    return false;\n                                });\n                                panelInfo.resizerType = \"split\";\n                            } else {\n\n                                if (item.orientation == \"horizontal\") {\n                                    panelInfo.__height = getPixel(panelInfo.height, item.targetDimension.height);\n                                } else {\n                                    item.orientation = \"vertical\";\n                                    panelInfo.__width = getPixel(panelInfo.width, item.targetDimension.width);\n                                }\n                            }\n\n                            item.splitPanel.push(panelInfo);\n                        });\n                    },\n                    \"tab-panel\": function tabPanel(queIdx) {\n                        var item = this.queue[queIdx];\n\n                        var hasActivePanel = false;\n                        var activePanelIndex = -1;\n                        item.tabPanel = [];\n                        item.$target.find('>[data-tab-panel]').each(function (ELIndex) {\n                            var panelInfo = {};\n                            (function (data) {\n                                if (U.isObject(data) && !data.error) {\n                                    panelInfo = jQuery.extend(true, panelInfo, data);\n                                }\n                            })(U.parseJson(this.getAttribute(\"data-tab-panel\"), true));\n\n                            if (hasActivePanel) {\n                                panelInfo.active = false;\n                            }\n\n                            panelInfo.$target = jQuery(this);\n\n                            if (panelInfo.active && panelInfo.active != \"false\") {\n                                hasActivePanel = true;\n                                item.activePanelIndex = ELIndex;\n                                panelInfo.$target.attr(\"data-tab-active\", \"true\");\n                            }\n\n                            panelInfo.panelIndex = ELIndex;\n                            item.tabPanel.push(panelInfo);\n                        });\n\n                        if (!hasActivePanel) {\n                            item.tabPanel[0].active = true;\n                            item.tabPanel[0].$target.attr(\"data-tab-active\", \"true\");\n                            item.activePanelIndex = 0;\n                        }\n\n                        // make tabLabel\n                        item.$target.append(jQuery(ax5.mustache.render(getTabLabesTmpl.call(this, queIdx), item)));\n                        item.$target.on(\"click\", '[data-tab-panel-label]', function (e) {\n                            var index = this.getAttribute(\"data-tab-panel-label\");\n                            tabControl.open.call(self, queIdx, item, index);\n                        });\n                    }\n                };\n\n                return function (queIdx) {\n                    var item = this.queue[queIdx];\n                    var data = {};\n\n                    // 레이아웃 타겟의 CSS속성을 미리 저장해 둡니다. 왜? 패널별로 크기 계산 할 때 쓰려고\n                    item.targetDimension = {\n                        height: item.$target.innerHeight(),\n                        width: item.$target.innerWidth()\n                    };\n\n                    // 부모 컨테이너가 ax5layout인지 판단 필요.\n                    if (item.$target.parents(\"[data-ax5layout]\").get(0)) {\n                        hooksResizeLayout.call(this, item.$target.parents(\"[data-ax5layout]\").get(0), queIdx);\n                    }\n\n                    if (item.layout in applyLayout) {\n                        applyLayout[item.layout].call(this, queIdx);\n                    }\n                    alignLayout.call(this, queIdx);\n                };\n            }(),\n                getQueIdx = function getQueIdx(boundID) {\n                if (!U.isString(boundID)) {\n                    boundID = jQuery(boundID).data(\"data-ax5layout-id\");\n                }\n                if (!U.isString(boundID)) {\n                    //console.log(ax5.info.getError(\"ax5layout\", \"402\", \"getQueIdx\"));\n                    return -1;\n                }\n                return U.search(this.queue, function () {\n                    return this.id == boundID;\n                });\n            },\n                hooksResizeLayout = function hooksResizeLayout(boundID, childQueIdx) {\n                var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                if (!this.queue[queIdx].childQueIdxs) this.queue[queIdx].childQueIdxs = [];\n                this.queue[queIdx].childQueIdxs.push(childQueIdx);\n                this.queue[childQueIdx].parentQueIdx = queIdx;\n            };\n\n            /**\n             * Preferences of layout UI\n             * @method ax5layout.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @param {Number} [config.animateTime=250]\n             * @param {Object} [config.splitter]\n             * @param {Number} [config.splitter.size=4]\n             * @param {Boolean} [config.autoResize=true]\n             * @returns {ax5layout}\n             * @example\n             * ```js\n             * jQuery('[data-ax5layout=\"ax1\"]').ax5layout({\n             *     onResize: function () {\n             *     }\n             * });\n             *\n             * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"resize\", {\n             *     top: {height: 100},\n             *     bottom: 100,\n             *     left: 100,\n             *     right: 100\n             * });\n             * ```\n             */\n            this.init = function () {\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                jQuery(window).bind(\"resize.ax5layout-\" + this.instanceId, function () {\n                    alignLayoutAll.call(this);\n                }.bind(this));\n            };\n\n            /**\n             * @method ax5layout.bind\n             * @param {Object} item\n             * @param {String} [item.layout]\n             * @param {String} [item.theme]\n             * @param {Element} item.target\n             * @param {Object[]} item.options\n             * @param {Object} [item.splitter]\n             * @param {Number} [item.splitter.size=4]\n             * @param {Boolean} [item.autoResize=true]\n             * @returns {ax5layout}\n             */\n            this.bind = function (item) {\n                var UIConfig = {},\n                    queIdx;\n\n                item = jQuery.extend(true, UIConfig, cfg, item);\n                if (!item.target) {\n                    console.log(ax5.info.getError(\"ax5layout\", \"401\", \"bind\"));\n                    return this;\n                }\n\n                item.$target = jQuery(item.target);\n\n                if (!item.id) item.id = item.$target.data(\"data-ax5layout-id\");\n                if (!item.id) {\n                    item.id = 'ax5layout-' + ax5.getGuid();\n                    item.$target.data(\"data-ax5layout-id\", item.id);\n                }\n                item.name = item.$target.attr(\"data-ax5layout\");\n                if (item.options) {\n                    item.options = JSON.parse(JSON.stringify(item.options));\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        item = jQuery.extend(true, item, data);\n                    }\n                })(U.parseJson(item.$target.attr(\"data-config\"), true));\n\n                queIdx = U.search(this.queue, function () {\n                    return this.id == item.id;\n                });\n\n                if (queIdx === -1) {\n                    this.queue.push(item);\n                    bindLayoutTarget.call(this, this.queue.length - 1);\n                } else {\n                    this.queue[queIdx] = jQuery.extend(true, {}, this.queue[queIdx], item);\n                    bindLayoutTarget.call(this, queIdx);\n                }\n\n                UIConfig = null;\n                queIdx = null;\n                return this;\n            };\n\n            /**\n             * @method ax5layout.align\n             * @param boundID\n             * @param {Function} [callback]\n             * @param {String} [windowResize]\n             * @returns {ax5layout}\n             */\n            this.align = function (boundID, windowResize) {\n                var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n\n                if (queIdx === -1) {\n\n                    var i = this.queue.length;\n                    while (i--) {\n                        alignLayout.call(this, i, null, windowResize);\n                    }\n                } else {\n                    alignLayout.call(this, queIdx, null, windowResize);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5layout.onResize\n             * @param boundID\n             * @param fn\n             * @returns {ax5layout}\n             */\n            this.onResize = function (boundID, fn) {\n                var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5layout\", \"402\", \"onResize\"));\n                    return;\n                }\n                this.queue[queIdx].onResize = fn;\n                return this;\n            };\n\n            /**\n             * @method ax5layout.resize\n             * @param boundID\n             * @param {Object} resizeOption\n             * @param {Function} [callback]\n             * @returns {ax5layout}\n             */\n            this.resize = function () {\n\n                var resizeLayoutPanel = {\n                    \"dock-panel\": function dockPanel(item, resizeOption) {\n                        [\"top\", \"bottom\", \"left\", \"right\"].forEach(function (dock) {\n                            if (resizeOption[dock] && item.dockPanel[dock]) {\n                                if (dock == \"top\" || dock == \"bottom\") {\n                                    item.dockPanel[dock].__height = U.isObject(resizeOption[dock]) ? resizeOption[dock].height : resizeOption[dock];\n                                } else if (dock == \"left\" || dock == \"right\") {\n                                    item.dockPanel[dock].__width = U.isObject(resizeOption[dock]) ? resizeOption[dock].width : resizeOption[dock];\n                                }\n                            }\n                        });\n                    },\n                    \"split-panel\": function splitPanel() {},\n                    \"tab-panel\": function tabPanel() {}\n                };\n\n                return function (boundID, resizeOption, callback) {\n                    var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                    if (queIdx === -1) {\n                        var i = this.queue.length;\n                        while (i--) {\n                            resizeLayoutPanel[this.queue[i].layout].call(this, this.queue[i], resizeOption);\n                            alignLayout.call(this, i, callback);\n                        }\n                    } else {\n                        if (this.queue[queIdx]) {\n                            resizeLayoutPanel[this.queue[queIdx].layout].call(this, this.queue[queIdx], resizeOption);\n                            alignLayout.call(this, queIdx, callback);\n                        }\n                    }\n\n                    return this;\n                };\n            }();\n\n            this.reset = function () {\n\n                var resetLayoutPanel = {\n                    \"dock-panel\": function dockPanel(item) {\n                        [\"top\", \"bottom\", \"left\", \"right\"].forEach(function (dock) {\n                            if (item.dockPanel[dock]) {\n                                if (dock == \"top\" || dock == \"bottom\") {\n                                    item.dockPanel[dock].__height = item.dockPanel[dock].height;\n                                } else if (dock == \"left\" || dock == \"right\") {\n                                    item.dockPanel[dock].__width = item.dockPanel[dock].width;\n                                }\n                            }\n                        });\n                    },\n                    \"split-panel\": function splitPanel(item) {\n                        item.splitPanel.forEach(function (panel) {\n                            if (item.orientation == \"vertical\") {\n                                panel.__width = getPixel(panel.width, item.targetDimension.width);\n                            } else if (item.orientation == \"horizontal\") {\n                                panel.__height = getPixel(panel.height, item.targetDimension.height);\n                            }\n                        });\n                    },\n                    \"tab-panel\": function tabPanel() {}\n                };\n\n                return function (boundID, callback) {\n                    var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                    if (queIdx === -1) {} else {\n                        resetLayoutPanel[this.queue[queIdx].layout].call(this, this.queue[queIdx]);\n                        alignLayout.call(this, queIdx, callback);\n                    }\n\n                    return this;\n                };\n            }();\n\n            this.hide = function () {};\n\n            /**\n             * @method ax5layout.tabOpen\n             * @param boundID\n             * @param tabIndex\n             * @returns {ax5.ui.ax5layout}\n             */\n            this.tabOpen = function () {\n                return function (boundID, tabIndex) {\n                    var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                    if (queIdx === -1) {\n                        console.log(ax5.info.getError(\"ax5layout\", \"402\", \"tabOpen\"));\n                        return;\n                    }\n\n                    tabControl.open.call(this, queIdx, this.queue[queIdx], tabIndex);\n                    return this;\n                };\n            }();\n\n            this.getActiveTab = function (boundID) {\n                var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5layout\", \"402\", \"tabOpen\"));\n                    return;\n                }\n\n                if (typeof this.queue[queIdx].activePanelIndex != \"undefined\") {\n                    return this.queue[queIdx].tabPanel[this.queue[queIdx].activePanelIndex];\n                }\n            };\n\n            /// 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5layout;\n    }());\n})();\n\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\nax5.ui.layout_instance = new ax5.ui.layout();\n\n/**\n * ax5layout jquery extends\n * @namespace jQueryExtends\n */\n\n/**\n * @method jQueryExtends.ax5layout\n * @param {String} methodName\n * @example\n * ```js\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"align\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"resize\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"reset\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"hide\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"onResize\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"tabOpen\", 1);\n * ```\n */\njQuery.fn.ax5layout = function () {\n    return function (config) {\n        if (ax5.util.isString(arguments[0])) {\n            var methodName = arguments[0];\n\n            switch (methodName) {\n                case \"align\":\n                    return ax5.ui.layout_instance.align(this, arguments[1]);\n                    break;\n                case \"resize\":\n                    return ax5.ui.layout_instance.resize(this, arguments[1], arguments[2]);\n                    break;\n                case \"reset\":\n                    return ax5.ui.layout_instance.reset(this, arguments[1]);\n                    break;\n                case \"hide\":\n                    return ax5.ui.layout_instance.hide(this, arguments[1]);\n                    break;\n                case \"onResize\":\n                    return ax5.ui.layout_instance.onResize(this, arguments[1]);\n                    break;\n                case \"tabOpen\":\n                    return ax5.ui.layout_instance.tabOpen(this, arguments[1]);\n                    break;\n                case \"getActiveTab\":\n                    return ax5.ui.layout_instance.getActiveTab(this, arguments[1]);\n                    break;\n                default:\n                    return this;\n            }\n        } else {\n            if (typeof config == \"undefined\") config = {};\n            jQuery.each(this, function () {\n                var defaultConfig = {\n                    target: this\n                };\n                config = jQuery.extend({}, config, defaultConfig);\n                ax5.ui.layout_instance.bind(config);\n            });\n        }\n        return this;\n    };\n}();","// ax5.ui.layout\n(function () {\n    var UI = ax5.ui;\n    var U = ax5.util;\n\n    UI.addClass({\n        className: \"layout\"\n    }, (function () {\n        /**\n         * @class ax5layout\n         * @alias ax5.ui.layout\n         * @author tom@axisj.com\n         */\n\n        var ax5layout = function () {\n            var self = this,\n                cfg,\n                ENM = {\n                    \"mousedown\": (ax5.info.supportTouch) ? \"touchstart\" : \"mousedown\",\n                    \"mousemove\": (ax5.info.supportTouch) ? \"touchmove\" : \"mousemove\",\n                    \"mouseup\": (ax5.info.supportTouch) ? \"touchend\" : \"mouseup\"\n                },\n                getMousePosition = function (e) {\n                    let mouseObj = ('changedTouches' in e.originalEvent && e.changedTouches) ? e.originalEvent.changedTouches[0] : e;\n                    return {\n                        clientX: mouseObj.clientX,\n                        clientY: mouseObj.clientY\n                    }\n                };\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                splitter: {\n                    size: 1\n                },\n                autoResize: true\n            };\n            this.queue = [];\n\n            this.openTimer = null;\n            this.closeTimer = null;\n            this.resizer = null;\n\n            cfg = this.config;\n\n            var onStateChanged = function (opts, that) {\n                    if (opts && opts.onStateChanged) {\n                        opts.onStateChanged.call(that, that);\n                    }\n                    else if (this.onStateChanged) {\n                        this.onStateChanged.call(that, that);\n                    }\n                    return true;\n                },\n                alignLayoutAll = function () {\n                    var i = this.queue.length;\n                    while (i--) {\n                        if (typeof this.queue[i].parentQueIdx === \"undefined\" && this.queue[i].autoResize) {\n                            alignLayout.call(this, i, null, \"windowResize\");\n                        }\n                    }\n                },\n                getDockPanelOuterSize = {\n                    \"width\": function (item, panel) {\n                        return (panel ? panel.__width + ((panel.split) ? item.splitter.size : 0) : 0);\n                    },\n                    \"height\": function (item, panel) {\n                        return (panel ? panel.__height + ((panel.split) ? item.splitter.size : 0) : 0);\n                    }\n                },\n                getPixel = function (size, parentSize) {\n                    if (size == \"*\") {\n                        return;\n                    }\n                    else if (U.right(size, 1) == \"%\") {\n                        return parentSize * U.number(size) / 100;\n                    }\n                    else {\n                        return Number(size);\n                    }\n                },\n                alignLayout = (function () {\n\n                    var beforeSetCSS = {\n                        \"split\": {\n                            \"horizontal\": function (item, panel, panelIndex) {\n                                if (panel.splitter) {\n                                    panel.__height = item.splitter.size;\n                                }\n                                else {\n                                    if (panelIndex == item.splitPanel.length - 1) {\n                                        if (item.splitPanel.asteriskLength == 0) {\n                                            panel.height = \"*\";\n                                            panel.__height = undefined;\n                                            item.splitPanel.asteriskLength++;\n                                        }\n                                        else {\n                                            if (panel.height == \"*\") {\n                                                item.splitPanel.asteriskLength++;\n                                            } else {\n                                                //panel.__height = getPixel(panel.height, item.targetDimension.height);\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (panel.height == \"*\") {\n                                            item.splitPanel.asteriskLength++;\n                                        } else {\n                                            //panel.__height = getPixel(panel.height, item.targetDimension.height);\n                                        }\n                                    }\n                                }\n                            },\n                            \"vertical\": function (item, panel, panelIndex) {\n                                if (panel.splitter) {\n                                    panel.__width = item.splitter.size;\n                                }\n                                else {\n                                    if (panelIndex == item.splitPanel.length - 1) {\n                                        if (item.splitPanel.asteriskLength == 0) {\n                                            panel.width = \"*\";\n                                            panel.__width = undefined;\n                                            item.splitPanel.asteriskLength++;\n                                        } else {\n                                            if (panel.width == \"*\") {\n                                                item.splitPanel.asteriskLength++;\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (panel.width == \"*\") {\n                                            item.splitPanel.asteriskLength++;\n                                        } else {\n                                            //panel.__width = getPixel(panel.width, item.targetDimension.width);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    var setCSS = {\n                        \"top\": function (item, panel) {\n                            panel.$target.css({height: panel.__height || 0});\n                            if (panel.split) {\n                                panel.$splitter.css({height: item.splitter.size, top: (panel.__height || 0)});\n                            }\n                        },\n                        \"bottom\": function (item, panel) {\n                            panel.$target.css({height: panel.__height || 0});\n                            if (panel.split) {\n                                panel.$splitter.css({height: item.splitter.size, bottom: (panel.__height || 0)});\n                            }\n                        },\n                        \"left\": function (item, panel) {\n                            var css = {\n                                width: panel.__width || 0,\n                                height: item.targetDimension.height\n                            };\n\n                            if (item.dockPanel.top) {\n                                css.height -= item.dockPanel.top.__height;\n                                css.top = item.dockPanel.top.__height;\n                                if (item.dockPanel.top.split) {\n                                    css.height -= item.splitter.size;\n                                    css.top += item.splitter.size;\n                                }\n                            }\n                            if (item.dockPanel.bottom) {\n                                css.height -= item.dockPanel.bottom.__height;\n                                if (item.dockPanel.bottom.split) {\n                                    css.height -= item.splitter.size;\n                                }\n                            }\n\n                            panel.$target.css(css);\n\n                            if (panel.split) {\n                                panel.$splitter.css({width: item.splitter.size, height: css.height, top: css.top, left: css.width});\n                            }\n                        },\n                        \"right\": function (item, panel) {\n                            var css = {\n                                width: panel.__width || 0,\n                                height: item.targetDimension.height\n                            };\n\n                            if (item.dockPanel.top) {\n                                css.height -= item.dockPanel.top.__height;\n                                css.top = item.dockPanel.top.__height;\n                                if (item.dockPanel.top.split) {\n                                    css.height -= item.splitter.size;\n                                    css.top += item.splitter.size;\n                                }\n                            }\n                            if (item.dockPanel.bottom) {\n                                css.height -= item.dockPanel.bottom.__height;\n                                if (item.dockPanel.bottom.split) {\n                                    css.height -= item.splitter.size;\n                                }\n                            }\n\n                            panel.$target.css(css);\n\n                            if (panel.split) {\n                                panel.$splitter.css({width: item.splitter.size, height: css.height, top: css.top, right: css.width});\n                            }\n                        },\n                        \"center\": function (item, panel) {\n                            var css = {\n                                width: item.targetDimension.width,\n                                height: item.targetDimension.height\n                            };\n\n                            if (item.dockPanel.top) {\n                                css.height -= item.dockPanel.top.__height || 0;\n                                css.top = item.dockPanel.top.__height || 0;\n                                if (item.dockPanel.top.split) {\n                                    css.height -= item.splitter.size;\n                                    css.top += item.splitter.size;\n                                }\n                            }\n                            if (item.dockPanel.bottom) {\n                                css.height -= item.dockPanel.bottom.__height || 0;\n                                if (item.dockPanel.bottom.split) {\n                                    css.height -= item.splitter.size;\n                                }\n                            }\n                            if (item.dockPanel.left) {\n                                css.width -= item.dockPanel.left.__width || 0;\n                                css.left = item.dockPanel.left.__width || 0;\n                                if (item.dockPanel.left.split) {\n                                    css.width -= item.splitter.size;\n                                    css.left += item.splitter.size;\n                                }\n                            }\n                            if (item.dockPanel.right) {\n                                css.width -= item.dockPanel.right.__width || 0;\n                                if (item.dockPanel.right.split) {\n                                    css.width -= item.splitter.size;\n                                }\n                            }\n\n                            var minWidth = panel.minWidth || 0;\n                            var minHeight = panel.minHeight || 0;\n\n                            // 레이아웃의 최소 너비 높이를 주어 레이아웃 덕패널이 겹치는 일이 없게 합니다\n                            if (css.width < minWidth) {\n                                css.width = minWidth;\n                                item.$target.css({minWidth: minWidth + getDockPanelOuterSize[\"width\"](item.dockPanel.left, item.splitter.size) + getDockPanelOuterSize[\"width\"](item.dockPanel.right, item.splitter.size)});\n                            }\n                            if (css.height < minHeight) {\n                                css.height = minHeight;\n                                item.$target.css({minHeight: minHeight + getDockPanelOuterSize[\"height\"](item.dockPanel.top, item.splitter.size) + getDockPanelOuterSize[\"height\"](item.dockPanel.bottom, item.splitter.size)});\n                            }\n\n                            panel.$target.css(css);\n                        },\n                        \"split\": {\n                            \"horizontal\": function (item, panel, panelIndex, withoutAsteriskSize, windowResize) {\n                                var css = {\n                                    display: \"block\"\n                                };\n                                var prevPosition = (panelIndex) ? Number(item.splitPanel[panelIndex - 1].offsetEnd) : 0;\n                                if (panel.splitter) {\n                                    css.height = item.splitter.size;\n                                }\n                                else {\n                                    if (panel.height == \"*\" && (typeof panel.__height === \"undefined\" || windowResize)) {\n                                        // 남은 전체 공간을 사용\n                                        css.height = panel.__height = (item.targetDimension.height - withoutAsteriskSize) / item.splitPanel.asteriskLength;\n                                    }\n                                    else {\n                                        css.height = panel.__height || 0;\n                                    }\n                                }\n                                css.top = prevPosition;\n                                panel.offsetStart = prevPosition;\n                                panel.offsetEnd = Number(prevPosition) + Number(css.height);\n                                panel.$target.css(css);\n                            },\n                            \"vertical\": function (item, panel, panelIndex, withoutAsteriskSize, windowResize) {\n                                var css = {\n                                    display: \"block\"\n                                };\n                                var prevPosition = (panelIndex) ? Number(item.splitPanel[panelIndex - 1].offsetEnd) : 0;\n\n                                if (panel.splitter) {\n                                    css.width = item.splitter.size;\n                                }\n                                else {\n                                    if (panel.width == \"*\" && (typeof panel.__width === \"undefined\" || windowResize)) {\n                                        // 남은 전체 공간을 사용\n                                        css.width = panel.__width = (item.targetDimension.width - withoutAsteriskSize) / item.splitPanel.asteriskLength;\n                                    }\n                                    else {\n                                        css.width = panel.__width || 0;\n                                    }\n                                }\n                                css.left = prevPosition;\n                                panel.offsetStart = prevPosition;\n                                panel.offsetEnd = Number(prevPosition) + Number(css.width);\n\n                                panel.$target.css(css);\n                            }\n                        }\n                    };\n                    var layoutProcessor = {\n                        \"dock-panel\": function (item) {\n                            for (var panel in item.dockPanel) {\n                                if (item.dockPanel[panel].$target && item.dockPanel[panel].$target.get(0)) {\n                                    if (panel in setCSS) {\n                                        setCSS[panel].call(this, item, item.dockPanel[panel]);\n                                    }\n                                }\n                            }\n                        },\n                        \"split-panel\": function (item, windowResize) {\n                            //console.log(item.splitPanel);\n                            var withoutAsteriskSize;\n                            item.splitPanel.asteriskLength = 0;\n                            item.splitPanel.forEach(function (panel, panelIndex) {\n                                beforeSetCSS[\"split\"][item.orientation].call(this, item, panel, panelIndex);\n                            });\n\n                            if (item.orientation == \"horizontal\") {\n                                withoutAsteriskSize = U.sum(item.splitPanel, function (n) {\n                                    if (n.height != \"*\") return U.number(n.__height);\n                                });\n                            }\n                            else {\n                                withoutAsteriskSize = U.sum(item.splitPanel, function (n) {\n                                    if (n.width != \"*\") return U.number(n.__width);\n                                });\n                            }\n\n                            item.splitPanel.forEach(function (panel, panelIndex) {\n                                setCSS[\"split\"][item.orientation].call(this, item, panel, panelIndex, withoutAsteriskSize, windowResize);\n                            });\n                        }\n                    };\n                    var childResize = function (item, callback, windowResize) {\n                        var i = item.childQueIdxs.length;\n                        while (i--) {\n                            alignLayout.call(this, item.childQueIdxs[i], callback, windowResize);\n                        }\n                    };\n\n                    return function (queIdx, callback, windowResize) {\n                        var item = this.queue[queIdx];\n\n                        // 레이아웃 타겟의 CSS속성을 미리 저장해 둡니다. 왜? 패널별로 크기 계산 할 때 쓰려고\n                        item.targetDimension = {\n                            height: item.$target.innerHeight(),\n                            width: item.$target.innerWidth()\n                        };\n\n                        if (item.layout in layoutProcessor) {\n                            layoutProcessor[item.layout].call(this, item, windowResize);\n                        }\n\n                        if (item.childQueIdxs) childResize.call(this, item, callback, windowResize);\n                        if (item.onResize) {\n                            setTimeout((function () {\n                                this.onResize.call(this, this);\n                            }).bind(item), 1)\n\n                        }\n                        if (callback) {\n                            callback.call(item, item);\n                        }\n                    }\n                })(),\n                resizeSplitter = {\n                    \"on\": function (queIdx, panel, $splitter) {\n                        var item = this.queue[queIdx];\n                        var splitterOffset = $splitter.position();\n                        var splitterBox = {\n                            width: $splitter.width(), height: $splitter.height()\n                        };\n                        var getResizerPosition = {\n                            \"left\": function (e) {\n                                var mouseObj = ('changedTouches' in e.originalEvent && e.changedTouches) ? e.originalEvent.changedTouches[0] : e;\n\n                                panel.__da = mouseObj.clientX - panel.mousePosition.clientX;\n                                var minWidth = panel.minWidth || 0;\n                                var maxWidth = panel.maxWidth || (item.targetDimension.width - getDockPanelOuterSize[\"width\"](item, item.dockPanel.left) - getDockPanelOuterSize[\"width\"](item, item.dockPanel.right));\n\n                                if (panel.__width + panel.__da < minWidth) {\n                                    panel.__da = -panel.__width + minWidth;\n                                }\n                                else if (maxWidth < panel.__width + panel.__da) {\n                                    panel.__da = maxWidth - panel.__width;\n                                }\n                                return {left: panel.$splitter.position().left + panel.__da};\n                            },\n                            \"right\": function (e) {\n                                var mouseObj = ('changedTouches' in e.originalEvent && e.changedTouches) ? e.originalEvent.changedTouches[0] : e;\n\n                                panel.__da = mouseObj.clientX - panel.mousePosition.clientX;\n                                var minWidth = panel.minWidth || 0;\n                                var maxWidth = panel.maxWidth || (item.targetDimension.width - getDockPanelOuterSize[\"width\"](item, item.dockPanel.left) - getDockPanelOuterSize[\"width\"](item, item.dockPanel.right));\n\n                                if (panel.__width - panel.__da < minWidth) {\n                                    panel.__da = panel.__width - minWidth;\n                                }\n                                else if (maxWidth < panel.__width - panel.__da) {\n                                    panel.__da = -maxWidth + panel.__width;\n                                }\n                                return {left: panel.$splitter.position().left + panel.__da};\n                            },\n                            \"top\": function (e) {\n                                var mouseObj = ('changedTouches' in e.originalEvent && e.changedTouches) ? e.originalEvent.changedTouches[0] : e;\n\n                                panel.__da = mouseObj.clientY - panel.mousePosition.clientY;\n                                var minHeight = panel.minHeight || 0;\n                                var maxHeight = panel.maxHeight || (item.targetDimension.height - getDockPanelOuterSize[\"height\"](item, item.dockPanel.top) - getDockPanelOuterSize[\"height\"](item, item.dockPanel.bottom));\n\n                                if (panel.__height + panel.__da < minHeight) {\n                                    panel.__da = -panel.__height + minHeight;\n                                }\n                                else if (maxHeight < panel.__height + panel.__da) {\n                                    panel.__da = maxHeight - panel.__height;\n                                }\n                                return {top: panel.$splitter.position().top + panel.__da};\n                            },\n                            \"bottom\": function (e) {\n                                var mouseObj = ('changedTouches' in e.originalEvent && e.changedTouches) ? e.originalEvent.changedTouches[0] : e;\n\n                                panel.__da = mouseObj.clientY - panel.mousePosition.clientY;\n                                var minHeight = panel.minHeight || 0;\n                                var maxHeight = panel.maxHeight || (item.targetDimension.height - getDockPanelOuterSize[\"height\"](item, item.dockPanel.top) - getDockPanelOuterSize[\"height\"](item, item.dockPanel.bottom));\n\n                                if (panel.__height - panel.__da < minHeight) {\n                                    panel.__da = panel.__height - minHeight;\n                                }\n                                else if (maxHeight < panel.__height - panel.__da) {\n                                    panel.__da = -maxHeight + panel.__height;\n                                }\n                                return {top: panel.$splitter.position().top + panel.__da};\n                            },\n                            \"split\": function (e) {\n                                var mouseObj = ('changedTouches' in e.originalEvent && e.changedTouches) ? e.originalEvent.changedTouches[0] : e;\n\n\n                                if (item.orientation == \"horizontal\") {\n                                    panel.__da = mouseObj.clientY - panel.mousePosition.clientY;\n\n                                    var prevPanel = item.splitPanel[panel.panelIndex - 1];\n                                    var nextPanel = item.splitPanel[panel.panelIndex + 1];\n\n                                    var prePanelMinHeight = prevPanel.minHeight || 0;\n                                    var nextPanelMinHeight = nextPanel.minHeight || 0;\n\n                                    if (panel.offsetStart + panel.__da < prevPanel.offsetStart + prePanelMinHeight) {\n                                        panel.__da = prevPanel.offsetStart - panel.offsetStart + prePanelMinHeight;\n                                    }\n                                    else if (panel.offsetStart + panel.__da > nextPanel.offsetEnd - nextPanelMinHeight) {\n                                        panel.__da = nextPanel.offsetEnd - panel.offsetEnd - nextPanelMinHeight;\n                                    }\n\n                                    return {top: panel.$target.position().top + panel.__da};\n                                }\n                                else {\n                                    /// todo : min & max 범위 정하기\n                                    panel.__da = mouseObj.clientX - panel.mousePosition.clientX;\n\n                                    var prevPanel = item.splitPanel[panel.panelIndex - 1];\n                                    var nextPanel = item.splitPanel[panel.panelIndex + 1];\n                                    var prePanelMinWidth = prevPanel.minWidth || 0;\n                                    var nextPanelMinWidth = nextPanel.minWidth || 0;\n\n                                    if (panel.offsetStart + panel.__da < prevPanel.offsetStart + prePanelMinWidth) {\n                                        panel.__da = prevPanel.offsetStart - panel.offsetStart + prePanelMinWidth;\n                                    }\n                                    else if (panel.offsetStart + panel.__da > nextPanel.offsetEnd - nextPanelMinWidth) {\n                                        panel.__da = nextPanel.offsetEnd - panel.offsetEnd - nextPanelMinWidth;\n                                    }\n                                    return {left: Number(panel.$target.position().left) + Number(panel.__da)};\n                                }\n                            }\n                        };\n                        panel.__da = 0; // 패널의 변화량\n\n                        jQuery(document.body)\n                            .bind(ENM[\"mousemove\"] + \".ax5layout-\" + this.instanceId, function (e) {\n                                if (!self.resizer) {\n\n                                    self.resizer = jQuery('<div class=\"ax5layout-resizer panel-' + (panel.resizerType) + '\" ondragstart=\"return false;\"></div>');\n                                    self.resizer.css({\n                                        left: splitterOffset.left,\n                                        top: splitterOffset.top,\n                                        width: splitterBox.width,\n                                        height: splitterBox.height\n                                    });\n                                    item.$target.append(self.resizer);\n                                }\n                                self.resizer.css(getResizerPosition[panel.resizerType](e));\n                            })\n                            .bind(ENM[\"mouseup\"] + \".ax5layout-\" + this.instanceId, function (e) {\n                                resizeSplitter.off.call(self, queIdx, panel, $splitter);\n                            })\n                            .bind(\"mouseleave.ax5layout-\" + this.instanceId, function (e) {\n                                resizeSplitter.off.call(self, queIdx, panel, $splitter);\n                            });\n\n                        jQuery(document.body)\n                            .attr('unselectable', 'on')\n                            .css('user-select', 'none')\n                            .on('selectstart', false);\n\n                    },\n                    \"off\": function (queIdx, panel, $splitter) {\n                        var item = this.queue[queIdx];\n                        var setPanelSize = {\n                            \"dock-panel\": {\n                                \"left\": function (queIdx, panel) {\n                                    panel.__width += panel.__da;\n                                },\n                                \"right\": function () {\n                                    panel.__width -= panel.__da;\n                                },\n                                \"top\": function () {\n                                    panel.__height += panel.__da;\n                                },\n                                \"bottom\": function () {\n                                    panel.__height -= panel.__da;\n                                }\n                            },\n                            \"split-panel\": {\n                                \"split\": function () {\n                                    if (item.orientation == \"horizontal\") {\n                                        // 앞과 뒤의 높이 조절\n                                        item.splitPanel[panel.panelIndex - 1].__height += panel.__da;\n                                        item.splitPanel[panel.panelIndex + 1].__height -= panel.__da;\n                                    }\n                                    else {\n                                        // 앞과 뒤의 높이 조절\n\n                                        item.splitPanel[panel.panelIndex - 1].__width += panel.__da;\n                                        item.splitPanel[panel.panelIndex + 1].__width -= panel.__da;\n                                    }\n                                }\n                            },\n                            \"tab-panel\": {}\n                        };\n\n                        if (self.resizer) {\n                            self.resizer.remove();\n                            self.resizer = null;\n                            setPanelSize[this.queue[queIdx].layout][panel.resizerType].call(this, queIdx, panel);\n                            alignLayout.call(this, queIdx);\n                        }\n\n                        jQuery(document.body)\n                            .unbind(ENM[\"mousemove\"] + \".ax5layout-\" + this.instanceId)\n                            .unbind(ENM[\"mouseup\"] + \".ax5layout-\" + this.instanceId)\n                            .unbind(\"mouseleave.ax5layout-\" + this.instanceId);\n\n                        jQuery(document.body)\n                            .removeAttr('unselectable')\n                            .css('user-select', 'auto')\n                            .off('selectstart');\n\n                    }\n                },\n                tabControl = {\n                    \"open\": function (queIdx, layout, panelIndex) {\n                        if (layout.activePanelIndex != panelIndex) {\n                            layout.tabPanel[panelIndex].active = true;\n                            layout.tabPanel[layout.activePanelIndex].active = false;\n                            layout.$target.find('[data-tab-panel-label=\"' + panelIndex + '\"]').attr(\"data-tab-active\", \"true\");\n                            layout.$target.find('[data-tab-panel-label=\"' + layout.activePanelIndex + '\"]').removeAttr(\"data-tab-active\");\n                            layout.tabPanel[panelIndex].$target.attr(\"data-tab-active\", \"true\");\n                            layout.tabPanel[layout.activePanelIndex].$target.removeAttr(\"data-tab-active\");\n                            layout.activePanelIndex = panelIndex;\n\n                            if (layout.onOpenTab) {\n                                var that = {\n                                    '$target': layout.$target,\n                                    name: layout.name,\n                                    id: layout.id,\n                                    layout: layout.layout,\n                                    activePanelIndex: layout.activePanelIndex,\n                                    activePanel: layout.tabPanel[layout.activePanelIndex],\n                                    tabPanel: layout.tabPanel\n                                };\n                                layout.onOpenTab.call(that);\n                            }\n                        }\n                    }\n                },\n                getTabLabesTmpl = function () {\n                    return `\n<div data-tab-panel-label-holder=\"{{id}}\">\n    <div data-tab-panel-label-border=\"{{id}}\"></div>\n    <div data-tab-panel-label-table=\"{{id}}\">\n        <div data-tab-panel-aside=\"left\"></div>\n    {{#tabPanel}}\n        <div data-tab-panel-label=\"{{panelIndex}}\" data-tab-active=\"{{active}}\">\n            <div data-tab-label=\"{{panelIndex}}\">{{{label}}}</div>\n        </div>\n    {{/tabPanel}}\n        <div data-tab-panel-aside=\"right\"></div>\n    </div>\n</div>\n`;\n                },\n                bindLayoutTarget = (function () {\n\n                    var applyLayout = {\n                        \"dock-panel\": function (queIdx) {\n                            var item = this.queue[queIdx];\n                            item.dockPanel = {};\n                            item.$target.find('>[data-dock-panel]').each(function () {\n\n                                var panelInfo = {};\n                                (function (data) {\n                                    if (U.isObject(data) && !data.error) {\n                                        panelInfo = jQuery.extend(true, panelInfo, data);\n                                    }\n                                })(U.parseJson(this.getAttribute(\"data-dock-panel\"), true));\n\n                                if ('dock' in panelInfo) {\n                                    panelInfo.$target = jQuery(this);\n                                    panelInfo.$target.addClass(\"dock-panel-\" + panelInfo.dock);\n\n                                    if (panelInfo.split = (panelInfo.split && panelInfo.split.toString() == \"true\")) {\n                                        panelInfo.$splitter = jQuery('<div data-splitter=\"\" class=\"dock-panel-' + panelInfo.dock + '\"></div>');\n                                        panelInfo.$splitter\n                                            .bind(ENM[\"mousedown\"], function (e) {\n                                                panelInfo.mousePosition = getMousePosition(e);\n                                                resizeSplitter.on.call(self, queIdx, panelInfo, panelInfo.$splitter);\n                                            })\n                                            .bind(\"dragstart\", function (e) {\n                                                U.stopEvent(e);\n                                                return false;\n                                            });\n                                        item.$target.append(panelInfo.$splitter);\n                                    }\n\n                                    if (panelInfo.dock == \"top\" || panelInfo.dock == \"bottom\") {\n                                        panelInfo.__height = getPixel(panelInfo.height, item.targetDimension.height);\n                                    }\n                                    else {\n                                        panelInfo.__width = getPixel(panelInfo.width, item.targetDimension.width);\n                                    }\n                                    panelInfo.resizerType = panelInfo.dock;\n                                    item.dockPanel[panelInfo.dock] = panelInfo;\n                                }\n                            });\n\n                        },\n                        \"split-panel\": function (queIdx) {\n                            var item = this.queue[queIdx];\n                            item.splitPanel = [];\n                            item.$target.find('>[data-split-panel], >[data-splitter]').each(function (ELIndex) {\n\n                                var panelInfo = {};\n                                (function (data) {\n                                    if (U.isObject(data) && !data.error) {\n                                        panelInfo = jQuery.extend(true, panelInfo, data);\n                                    }\n                                })(U.parseJson(this.getAttribute(\"data-split-panel\") || this.getAttribute(\"data-splitter\"), true));\n\n                                panelInfo.$target = jQuery(this);\n                                panelInfo.$target\n                                    .addClass(\"split-panel-\" + item.orientation);\n                                panelInfo.panelIndex = ELIndex;\n\n                                if (this.getAttribute(\"data-splitter\")) {\n\n                                    panelInfo.splitter = true;\n                                    panelInfo.$target\n                                        .bind(ENM[\"mousedown\"], function (e) {\n                                            if (panelInfo.panelIndex > 0 && panelInfo.panelIndex < item.splitPanel.length - 1) {\n                                                panelInfo.mousePosition = getMousePosition(e);\n                                                resizeSplitter.on.call(self, queIdx, panelInfo, panelInfo.$target);\n                                            }\n                                        })\n                                        .bind(\"dragstart\", function (e) {\n                                            U.stopEvent(e);\n                                            return false;\n                                        });\n                                    panelInfo.resizerType = \"split\";\n\n                                } else {\n\n                                    if (item.orientation == \"horizontal\") {\n                                        panelInfo.__height = getPixel(panelInfo.height, item.targetDimension.height);\n                                    }\n                                    else {\n                                        item.orientation = \"vertical\";\n                                        panelInfo.__width = getPixel(panelInfo.width, item.targetDimension.width);\n                                    }\n\n                                }\n\n                                item.splitPanel.push(panelInfo);\n                            });\n                        },\n                        \"tab-panel\": function (queIdx) {\n                            var item = this.queue[queIdx];\n\n                            var hasActivePanel = false;\n                            var activePanelIndex = -1;\n                            item.tabPanel = [];\n                            item.$target.find('>[data-tab-panel]').each(function (ELIndex) {\n                                var panelInfo = {};\n                                (function (data) {\n                                    if (U.isObject(data) && !data.error) {\n                                        panelInfo = jQuery.extend(true, panelInfo, data);\n                                    }\n                                })(U.parseJson(this.getAttribute(\"data-tab-panel\"), true));\n\n                                if (hasActivePanel) {\n                                    panelInfo.active = false;\n                                }\n\n                                panelInfo.$target = jQuery(this);\n\n                                if (panelInfo.active && panelInfo.active != \"false\") {\n                                    hasActivePanel = true;\n                                    item.activePanelIndex = ELIndex;\n                                    panelInfo.$target.attr(\"data-tab-active\", \"true\");\n                                }\n\n                                panelInfo.panelIndex = ELIndex;\n                                item.tabPanel.push(panelInfo);\n                            });\n\n                            if (!hasActivePanel) {\n                                item.tabPanel[0].active = true;\n                                item.tabPanel[0].$target.attr(\"data-tab-active\", \"true\");\n                                item.activePanelIndex = 0;\n                            }\n\n                            // make tabLabel\n                            item.$target.append(jQuery(ax5.mustache.render(getTabLabesTmpl.call(this, queIdx), item)));\n                            item.$target.on(\"click\", '[data-tab-panel-label]', function (e) {\n                                var index = this.getAttribute(\"data-tab-panel-label\");\n                                tabControl.open.call(self, queIdx, item, index);\n                            });\n                        }\n                    };\n\n                    return function (queIdx) {\n                        var item = this.queue[queIdx];\n                        var data = {};\n\n                        // 레이아웃 타겟의 CSS속성을 미리 저장해 둡니다. 왜? 패널별로 크기 계산 할 때 쓰려고\n                        item.targetDimension = {\n                            height: item.$target.innerHeight(),\n                            width: item.$target.innerWidth()\n                        };\n\n                        // 부모 컨테이너가 ax5layout인지 판단 필요.\n                        if (item.$target.parents(\"[data-ax5layout]\").get(0)) {\n                            hooksResizeLayout.call(\n                                this,\n                                item.$target.parents(\"[data-ax5layout]\").get(0),\n                                queIdx\n                            );\n                        }\n\n                        if (item.layout in applyLayout) {\n                            applyLayout[item.layout].call(this, queIdx);\n                        }\n                        alignLayout.call(this, queIdx);\n                    }\n                })(),\n                getQueIdx = function (boundID) {\n                    if (!U.isString(boundID)) {\n                        boundID = jQuery(boundID).data(\"data-ax5layout-id\");\n                    }\n                    if (!U.isString(boundID)) {\n                        //console.log(ax5.info.getError(\"ax5layout\", \"402\", \"getQueIdx\"));\n                        return -1;\n                    }\n                    return U.search(this.queue, function () {\n                        return this.id == boundID;\n                    });\n                },\n                hooksResizeLayout = function (boundID, childQueIdx) {\n                    var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                    if (!this.queue[queIdx].childQueIdxs) this.queue[queIdx].childQueIdxs = [];\n                    this.queue[queIdx].childQueIdxs.push(childQueIdx);\n                    this.queue[childQueIdx].parentQueIdx = queIdx;\n                };\n\n            /**\n             * Preferences of layout UI\n             * @method ax5layout.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @param {Number} [config.animateTime=250]\n             * @param {Object} [config.splitter]\n             * @param {Number} [config.splitter.size=4]\n             * @param {Boolean} [config.autoResize=true]\n             * @returns {ax5layout}\n             * @example\n             * ```js\n             * jQuery('[data-ax5layout=\"ax1\"]').ax5layout({\n             *     onResize: function () {\n             *     }\n             * });\n             *\n             * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"resize\", {\n             *     top: {height: 100},\n             *     bottom: 100,\n             *     left: 100,\n             *     right: 100\n             * });\n             * ```\n             */\n            this.init = function () {\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                jQuery(window).bind(\"resize.ax5layout-\" + this.instanceId, (function () {\n                    alignLayoutAll.call(this);\n                }).bind(this));\n            };\n\n            /**\n             * @method ax5layout.bind\n             * @param {Object} item\n             * @param {String} [item.layout]\n             * @param {String} [item.theme]\n             * @param {Element} item.target\n             * @param {Object[]} item.options\n             * @param {Object} [item.splitter]\n             * @param {Number} [item.splitter.size=4]\n             * @param {Boolean} [item.autoResize=true]\n             * @returns {ax5layout}\n             */\n            this.bind = function (item) {\n                var\n                    UIConfig = {},\n                    queIdx;\n\n                item = jQuery.extend(true, UIConfig, cfg, item);\n                if (!item.target) {\n                    console.log(ax5.info.getError(\"ax5layout\", \"401\", \"bind\"));\n                    return this;\n                }\n\n                item.$target = jQuery(item.target);\n\n                if (!item.id) item.id = item.$target.data(\"data-ax5layout-id\");\n                if (!item.id) {\n                    item.id = 'ax5layout-' + ax5.getGuid();\n                    item.$target.data(\"data-ax5layout-id\", item.id);\n                }\n                item.name = item.$target.attr(\"data-ax5layout\");\n                if (item.options) {\n                    item.options = JSON.parse(JSON.stringify(item.options));\n                }\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        item = jQuery.extend(true, item, data);\n                    }\n                })(U.parseJson(item.$target.attr(\"data-config\"), true));\n\n                queIdx = U.search(this.queue, function () {\n                    return this.id == item.id;\n                });\n\n                if (queIdx === -1) {\n                    this.queue.push(item);\n                    bindLayoutTarget.call(this, this.queue.length - 1);\n                }\n                else {\n                    this.queue[queIdx] = jQuery.extend(true, {}, this.queue[queIdx], item);\n                    bindLayoutTarget.call(this, queIdx);\n                }\n\n                UIConfig = null;\n                queIdx = null;\n                return this;\n            };\n\n            /**\n             * @method ax5layout.align\n             * @param boundID\n             * @param {Function} [callback]\n             * @param {String} [windowResize]\n             * @returns {ax5layout}\n             */\n            this.align = function (boundID, windowResize) {\n                var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n\n                if (queIdx === -1) {\n                    \n                    \n                    \n                    var i = this.queue.length;\n                    while (i--) {\n                        alignLayout.call(this, i, null, windowResize);\n                    }\n                } else {\n                    alignLayout.call(this, queIdx, null, windowResize);\n                }\n                return this;\n            };\n\n            /**\n             * @method ax5layout.onResize\n             * @param boundID\n             * @param fn\n             * @returns {ax5layout}\n             */\n            this.onResize = function (boundID, fn) {\n                var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5layout\", \"402\", \"onResize\"));\n                    return;\n                }\n                this.queue[queIdx].onResize = fn;\n                return this;\n            };\n\n            /**\n             * @method ax5layout.resize\n             * @param boundID\n             * @param {Object} resizeOption\n             * @param {Function} [callback]\n             * @returns {ax5layout}\n             */\n            this.resize = (function () {\n\n                var resizeLayoutPanel = {\n                    \"dock-panel\": function (item, resizeOption) {\n                        [\"top\", \"bottom\", \"left\", \"right\"].forEach(function (dock) {\n                            if (resizeOption[dock] && item.dockPanel[dock]) {\n                                if (dock == \"top\" || dock == \"bottom\") {\n                                    item.dockPanel[dock].__height = (U.isObject(resizeOption[dock])) ? resizeOption[dock].height : resizeOption[dock];\n                                }\n                                else if (dock == \"left\" || dock == \"right\") {\n                                    item.dockPanel[dock].__width = (U.isObject(resizeOption[dock])) ? resizeOption[dock].width : resizeOption[dock];\n                                }\n                            }\n                        });\n                    },\n                    \"split-panel\": function () {\n\n                    },\n                    \"tab-panel\": function () {\n\n                    }\n                };\n\n                return function (boundID, resizeOption, callback) {\n                    var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                    if (queIdx === -1) {\n                        var i = this.queue.length;\n                        while (i--) {\n                            resizeLayoutPanel[this.queue[i].layout].call(this, this.queue[i], resizeOption);\n                            alignLayout.call(this, i, callback);\n                        }\n                    } else {\n                        if (this.queue[queIdx]) {\n                            resizeLayoutPanel[this.queue[queIdx].layout].call(this, this.queue[queIdx], resizeOption);\n                            alignLayout.call(this, queIdx, callback);\n                        }\n                    }\n\n                    return this;\n                };\n\n            })();\n\n            this.reset = (function () {\n\n                var resetLayoutPanel = {\n                    \"dock-panel\": function (item) {\n                        [\"top\", \"bottom\", \"left\", \"right\"].forEach(function (dock) {\n                            if (item.dockPanel[dock]) {\n                                if (dock == \"top\" || dock == \"bottom\") {\n                                    item.dockPanel[dock].__height = item.dockPanel[dock].height;\n                                }\n                                else if (dock == \"left\" || dock == \"right\") {\n                                    item.dockPanel[dock].__width = item.dockPanel[dock].width;\n                                }\n                            }\n                        });\n                    },\n                    \"split-panel\": function (item) {\n                        item.splitPanel.forEach(function (panel) {\n                            if (item.orientation == \"vertical\") {\n                                panel.__width = getPixel(panel.width, item.targetDimension.width);\n                            } else if (item.orientation == \"horizontal\") {\n                                panel.__height = getPixel(panel.height, item.targetDimension.height);\n                            }\n                        });\n                    },\n                    \"tab-panel\": function () {\n\n                    }\n                };\n\n                return function (boundID, callback) {\n                    var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                    if (queIdx === -1) {\n\n                    } else {\n                        resetLayoutPanel[this.queue[queIdx].layout].call(this, this.queue[queIdx]);\n                        alignLayout.call(this, queIdx, callback);\n                    }\n\n                    return this;\n                };\n\n            })();\n\n            this.hide = function () {\n\n            };\n\n            /**\n             * @method ax5layout.tabOpen\n             * @param boundID\n             * @param tabIndex\n             * @returns {ax5.ui.ax5layout}\n             */\n            this.tabOpen = (function () {\n                return function (boundID, tabIndex) {\n                    var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                    if (queIdx === -1) {\n                        console.log(ax5.info.getError(\"ax5layout\", \"402\", \"tabOpen\"));\n                        return;\n                    }\n\n                    tabControl.open.call(this, queIdx, this.queue[queIdx], tabIndex);\n                    return this;\n                }\n            })();\n\n            this.getActiveTab = function (boundID) {\n                var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5layout\", \"402\", \"tabOpen\"));\n                    return;\n                }\n\n                if (typeof this.queue[queIdx].activePanelIndex != \"undefined\") {\n                    return this.queue[queIdx].tabPanel[this.queue[queIdx].activePanelIndex];\n                }\n            };\n\n            /// 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5layout;\n    })());\n})();","\n/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\nax5.ui.layout_instance = new ax5.ui.layout();\n\n/**\n * ax5layout jquery extends\n * @namespace jQueryExtends\n */\n\n/**\n * @method jQueryExtends.ax5layout\n * @param {String} methodName\n * @example\n * ```js\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"align\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"resize\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"reset\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"hide\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"onResize\");\n * jQuery('[data-ax5layout=\"ax1\"]').ax5layout(\"tabOpen\", 1);\n * ```\n */\njQuery.fn.ax5layout = (function () {\n    return function (config) {\n        if (ax5.util.isString(arguments[0])) {\n            var methodName = arguments[0];\n\n            switch (methodName) {\n                case \"align\":\n                    return ax5.ui.layout_instance.align(this, arguments[1]);\n                    break;\n                case \"resize\":\n                    return ax5.ui.layout_instance.resize(this, arguments[1], arguments[2]);\n                    break;\n                case \"reset\":\n                    return ax5.ui.layout_instance.reset(this, arguments[1]);\n                    break;\n                case \"hide\":\n                    return ax5.ui.layout_instance.hide(this, arguments[1]);\n                    break;\n                case \"onResize\":\n                    return ax5.ui.layout_instance.onResize(this, arguments[1]);\n                    break;\n                case \"tabOpen\":\n                    return ax5.ui.layout_instance.tabOpen(this, arguments[1]);\n                    break;\n                case \"getActiveTab\":\n                    return ax5.ui.layout_instance.getActiveTab(this, arguments[1]);\n                    break;\n                default:\n                    return this;\n            }\n        }\n        else {\n            if (typeof config == \"undefined\") config = {};\n            jQuery.each(this, function () {\n                var defaultConfig = {\n                    target: this\n                };\n                config = jQuery.extend({}, config, defaultConfig);\n                ax5.ui.layout_instance.bind(config);\n            });\n        }\n        return this;\n    }\n})();"]}