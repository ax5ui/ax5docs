{"version":3,"sources":["ax5docker.js","ax5docker-tmpl.js"],"names":["UI","ax5","ui","U","util","DOCKER","addClass","className","_this","this","self","cfg","instanceId","getGuid","config","theme","animateTime","columnKeys","control","icons","close","more","labelDirection","disableClosePanel","disableDragPanel","resizeDebounceTime","panelDebounceTime","xvar","menu","onResize","panels","panelId","modules","debouncer","resizeDebounceFn","debounce","fn","panelDebounceFn","fireEvent","event","eventProcessor","resize","e","that","resizer","target","resizedDom","prev","next","call","bind","eventName","getPanelId","defaultModule","init","container","state","html","name","active","deactive","destroy","getPanelPath","parent","pIndex","paths","panelPath","push","join","getPanel","_panelPath","path","_path","isArray","concat","split","forEach","n","replace","Function","getPanelParent","_panel","substr","lastIndexOf","setPanel","_value","getMousePosition","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","controlPanel","_control","_callback","moduleState","jQuery","extend","moduleContainer","$element","$item","module","processor","builded","moduleName","$label","$pane","get","clientWidth","scrollWidth","animate","scrollLeft","position","left","removeClass","arrangePanel","remove","panel","controlType","runProcessor","isFunction","after","before","result","repaintPanels","appendProcessor","stack","$parent","myself","$dom","activeIndex","tmpl","id","hasLabelColor","isNothing","color","borderColor","append","P","_pIndex","panelIndex","type","attr","find","flexGrow","resizeHandle","row","column","$root","$target","off","on","removePanel","$","parents","stopEvent","$clickedLabel","pane","hasClass","changeActiveStackPanel","openStackPanelMore","panelTabDragEvent","datas","getAttribute","mousePosition","resizerType","resizerPath","resizerIndex","resizer$dom","resizerParent$dom","resizerPrevGrow","number","css","resizerNextGrow","resizerCanvasWidth","innerWidth","width","resizerCanvasHeight","innerHeight","height","panelResizerEvent","alignStackPane","dragPanel","length","dragger","dragOverVertical","dragOverHorizontal","dragover","dragoverDom","$dragoverDom","box","mouse","removeAttr","offset","halfWidth","draggerProcessor","right","threeQuarterHeight","threeQuarterWidth","top","left-top","right-top","center-top","left-middle","right-middle","center-middle","left-bottom","right-bottom","center-bottom","isDrop","appendType","appendPanel","_resizer","document","body","da_grow","resizerLived","__da","round","flex-grow","$prevPanel","$nextPanel","prevPane","nextPane","p","pl","stackPane","$stackPane","panePath","console","log","menuItems","map","index","label","setConfig","items","onClick","popup","each","$this","panelsDeactive","newObj","_p","_config","onStateChanged","onLoad","onDataChanged","arrow","window","info","getError","setPanels","_panels","addModule","isObject","repaint","addPanel","_addPath","_addType","_panelIndex","addPath","a","b","panelProcessor","_pane","copyPanel","addProcessor","stack-left","splice","stack-right","Number","row-left","parentPath","parentPane","row-right","column-top","column-bottom","callback","_appendPath","_appendType","copiedPanel","addType","removePanelPath","appendPanelIndex","undefined","align","searchPanel","_condition","findPanel","i","l","findResult","isString","activePanel","activePanelPath","main","docker_instance","arguments","apply","docker","stack_panel","data","panel_label","stack-panel","panel-label","tmplName","mustache","render"],"mappings":"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","file":"ax5docker.min.js","sourcesContent":["/*\n * Copyright (c) 2017. tom@axisj.com\n * - github.com/thomasjang\n * - www.axisj.com\n */\n\n(function () {\n\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n\n    let DOCKER;\n\n    UI.addClass({\n            className: \"docker\"\n        }, (function () {\n\n            /**\n             * @class ax5docker\n             * @classdesc\n             * @author tom@axisj.com\n             * @example\n             * ```\n             * var ax5docker = new ax5.ui.ax5docker();\n             * ```\n             */\n            return function () {\n\n                let self = this,\n                    cfg;\n\n                this.instanceId = ax5.getGuid();\n\n                /**\n                 * @member {Object} ax5docker.config\n                 */\n                this.config = {\n                    theme: 'default',\n                    animateTime: 250,\n                    columnKeys: {},\n                    control: {},\n                    icons: {\n                        close: 'X',\n                        more: '...'\n                    },\n                    labelDirection: 'top',\n                    disableClosePanel: false,\n                    disableDragPanel: false,\n                    resizeDebounceTime: 100,\n                    panelDebounceTime: 300,\n                };\n\n                /**\n                 * @member {Object} ax5docker.xvar\n                 */\n                this.xvar = {};\n                /**\n                 * @member {Object} ax5docker.menu\n                 */\n                this.menu = null;\n\n                this.onResize = null;\n\n                // 패널 정보\n                /**\n                 * @member {Array} ax5docker.panels\n                 */\n                this.panels = [];\n                /**\n                 * @member {Number} ax5docker.panelId\n                 */\n                this.panelId = 0;\n\n                // 패널의 컨텐츠 모듈\n                /**\n                 * @member {Object} ax5docker.modules\n                 */\n                this.modules = {};\n\n                cfg = this.config;\n\n                /**\n                 * @private {Object} ax5docker.debouncer\n                 */\n                const debouncer = {\n                    resizeDebounceFn: ax5.util.debounce(function (fn) {\n                        fn();\n                    }, cfg.resizeDebounceTime),\n                    panelDebounceFn: ax5.util.debounce(function (fn) {\n                        fn();\n                    }, cfg.panelDebounceTime)\n                };\n\n                /**\n                 * @private {Function} fireEvent\n                 * @param event\n                 * @returns {ax5docker}\n                 */\n                const fireEvent = (event) => {\n                    const eventProcessor = {\n                        \"resize\"(e){\n                            if (this.onResize) {\n\n\n                                debouncer.resizeDebounceFn((function () {\n                                    let that = {\n                                        self: this,\n                                        resizer: e.target,\n                                        resizedDom: [e.target.prev(), e.target.next()]\n                                    };\n                                    this.onResize.call(that, that);\n                                }).bind(this));\n                            }\n                        }\n                    };\n\n                    if (event.eventName in eventProcessor) {\n                        eventProcessor[event.eventName].call(this, event);\n                    }\n\n                    return this;\n                };\n\n                const getPanelId = () => {\n                    return this.panelId++;\n                };\n\n                /**\n                 * defaultModule은 패널의 모듈이 정의되지 않은 경우를 위해 준비된 오브젝트\n                 */\n                const defaultModule = {\n                    init(container, state){\n                        container[\"$element\"].html(state.name);\n                    },\n                    active(container, state){\n\n                    },\n                    deactive(container, state){\n\n                    },\n                    destroy(container, state){\n\n                    }\n                };\n\n                /**\n                 * 부모패널과 패널인덱스 값으로 패널 패스를 구합니다.\n                 * @param parent\n                 * @param pIndex\n                 * @returns {string}\n                 */\n                const getPanelPath = (parent, pIndex) => {\n                    let paths = [];\n                    if (parent && typeof parent.panelPath !== \"undefined\") {\n                        paths.push(parent.panelPath);\n                    }\n\n                    paths.push('panels[' + (pIndex || 0) + ']');\n                    return paths.join(\".\");\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널을 가져옵니다\n                 * @param _panelPath\n                 * @returns {*}\n                 */\n                const getPanel = (_panelPath) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    try {\n                        return (Function(\"\", \"return this\" + path.join('') + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널을 이용하여 패널의 부모 패널을 가져옵니다\n                 * @param _panel\n                 */\n                const getPanelParent = (_panel) => {\n                    try {\n                        let _path = _panel.panelPath.substr(0, _panel.panelPath.lastIndexOf(\".\"));\n                        return (Function(\"\", \"return this.\" + _path + \";\")).call(this);\n                    } catch (e) {\n                        return;\n                    }\n                };\n\n                /**\n                 * 패널패스를 이용하여 패널오브젝트에 값을 부여합니다.\n                 * @param _panelPath\n                 * @param _value\n                 * @returns {*}\n                 */\n                const setPanel = (_panelPath, _value) => {\n                    let path = [],\n                        _path = (U.isArray(_panelPath)) ? [].concat(_panelPath) : [].concat(_panelPath.split(/[\\.\\[\\]]/g));\n\n                    _path.forEach(function (n) {\n                        if (n !== \"\") path.push(\"[\\\"\" + n.replace(/['\\\"]/g, \"\") + \"\\\"]\");\n                    });\n\n                    return (Function(\"val\", \"return this\" + path.join('') + \" = val;\")).call(this, _value);\n                };\n\n                /**\n                 * get mouse position\n                 * @param e\n                 * @returns {{clientX, clientY}}\n                 */\n                const getMousePosition = (e) => {\n                    let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                    mouseObj = ('changedTouches' in originalEvent && originalEvent.changedTouches) ? originalEvent.changedTouches[0] : originalEvent;\n                    // clientX, Y 쓰면 스크롤에서 문제 발생\n                    return {\n                        clientX: mouseObj.pageX,\n                        clientY: mouseObj.pageY\n                    }\n                };\n\n                /**\n                 * 패널의 모듈이 초기화, 활성화, 비활성, 제거 되는 일들을 제어하는 함수.\n                 * 모든 컨트롤은 실행되기전에 사용자가 정의한 control.before 함수의 결과에 따라 실행 여부를 결정합니다. 사용자가 control.before를 정의하지 않으면 무조건 실행합니다.\n                 * @param {Object} _panel\n                 * @param {String} _control - \"init\",\"active\",\"deactive\",\"destroy\"\n                 */\n                const controlPanel = (_panel, _control, _callback) => {\n                    let moduleState = jQuery.extend(_panel.moduleState, {\n                            name: _panel.name\n                        }),\n                        moduleContainer = {\n                            '$element': _panel.$item\n                        },\n                        module;\n\n                    let processor = {\n                        init: () => {\n                            _panel.builded = true;\n                            module = (_panel.moduleName in this.modules && 'init' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.init(moduleContainer, moduleState);\n                        },\n                        active: () => {\n                            _panel.active = true;\n                            _panel.$label.addClass(\"active\");\n                            _panel.$item.addClass(\"active\");\n\n                            let $pane = _panel.$label.parent();\n                            if ($pane.get(0) && $pane.get(0).clientWidth !== $pane.get(0).scrollWidth) {\n                                $pane.animate({scrollLeft: _panel.$label.position().left}, 300);\n                            }\n\n                            module = (_panel.moduleName in this.modules && 'active' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.active(moduleContainer, moduleState);\n                            $pane = null;\n                        },\n                        deactive: () => {\n                            _panel.active = false;\n                            _panel.$label.removeClass(\"active\");\n                            _panel.$item.removeClass(\"active\");\n                            module = (_panel.moduleName in this.modules && 'deactive' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.deactive(moduleContainer, moduleState);\n                        },\n                        destroy: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                        remove: () => {\n                            module = (_panel.moduleName in this.modules && 'destroy' in this.modules[_panel.moduleName]) ? this.modules[_panel.moduleName] : defaultModule;\n                            module.destroy(moduleContainer, moduleState);\n\n                            // 패널 데이터 제거.\n                            setPanel(_panel.panelPath, null);\n                            // 현재 패널 정보를 검사하여 패널 정보를 재 구성합니다.\n                            arrangePanel();\n                        },\n                    };\n\n                    // 사용자정의 함수 control.before, control.after에 전달할 인자 = that\n                    let that = {\n                        panel: _panel,\n                        controlType: _control\n                    };\n\n                    // 비동기 처리 상황에 대응하기 위해 runProcessor를 별도 처리\n                    let runProcessor = () => {\n                        processor[_control]();\n                        module = null;\n\n                        if (U.isFunction(cfg.control.after)) {\n                            cfg.control.after.call(that, that);\n                        }\n                    };\n\n                    if (processor[_control]) {\n                        if (U.isFunction(cfg.control.before)) {\n                            cfg.control.before.call(that, that, function (result) {\n                                if (typeof result === \"undefined\") result = true;\n                                if (result) runProcessor();\n\n                                if (U.isFunction(_callback)) {\n                                    _callback(result);\n                                }\n\n                            });\n                        }\n                        else {\n                            runProcessor();\n                        }\n                    }\n                };\n\n                /**\n                 * 패널들의 패널 데이터 구조에 맞게 다시 그리기\n                 */\n                const repaintPanels = () => {\n                    const appendProcessor = {\n                        stack($parent, parent, myself, pIndex){\n\n                            let $dom, activeIndex = -1;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n\n                            $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                id: self.instanceId,\n                                name: myself.name,\n                                hasLabelColor: !U.isNothing(myself.color),\n                                color: myself.color,\n                                borderColor: myself.borderColor,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                labelDirection: myself.labelDirection || cfg.labelDirection,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, pIndex) {\n                                    if (P.active) activeIndex = pIndex;\n                                });\n                                if (activeIndex === -1) activeIndex = 0;\n                                myself.panels[activeIndex].active = true;\n\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                            activeIndex = null;\n                        },\n                        panel($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            myself.$label = jQuery(DOCKER.tmpl.get.call(this, \"panel-label\", {\n                                id: self.instanceId,\n                                pIndex: pIndex,\n                                name: myself.name,\n                                hasLabelColor: !U.isNothing(myself.color),\n                                color: myself.color,\n                                borderColor: myself.borderColor,\n                                panelPath: myself.panelPath,\n                                icons: cfg.icons,\n                                disableClosePanel: cfg.disableClosePanel,\n                                disableDragPanel: cfg.disableDragPanel,\n                            }, {}));\n\n                            if (!myself.$item) {\n                                myself.$item = jQuery('<div data-ax5docker-pane-item=\"' + pIndex + '\" data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-pane-id=\"' + getPanelId() + '\" data-ax5docker-path=\"' + myself.panelPath + '\"></div>');\n                            } else {\n                                myself.$item.attr(\"data-ax5docker-path\", myself.panelPath);\n                                myself.$item.attr(\"data-ax5docker-pane-item\", pIndex);\n                            }\n\n                            if (parent && parent.type == \"stack\") {\n                                if (myself.active) {\n                                    if (!myself.builded) controlPanel(myself, \"init\");\n                                    controlPanel(myself, \"active\");\n                                }\n                                $parent.find('[data-ax5docker-pane-tabs=\"' + self.instanceId + '\"]').append(myself.$label);\n                                $parent.find('[data-ax5docker-pane-item-views=\"' + self.instanceId + '\"]').append(myself.$item);\n                            } else {\n                                $dom = jQuery(DOCKER.tmpl.get.call(this, \"stack-panel\", {\n                                    id: self.instanceId,\n                                    name: myself.name,\n                                    hasLabelColor: !U.isNothing(myself.color),\n                                    color: myself.color,\n                                    borderColor: myself.borderColor,\n                                    panelPath: myself.panelPath,\n                                    flexGrow: myself.flexGrow,\n                                    icons: cfg.icons,\n                                    labelDirection: myself.labelDirection || cfg.labelDirection,\n                                    disableClosePanel: cfg.disableClosePanel,\n                                    disableDragPanel: cfg.disableDragPanel,\n                                }, {}));\n\n                                if (!myself.builded) controlPanel(myself, \"init\");\n                                controlPanel(myself, \"active\");\n\n                                $dom.find('[data-ax5docker-pane-tabs=\"' + self.instanceId + '\"]').append(myself.$label);\n                                $dom.find('[data-ax5docker-pane-item-views=\"' + self.instanceId + '\"]').append(myself.$item);\n\n                                $parent.append($dom);\n                            }\n\n                            $dom = null;\n                        },\n                        resizeHandle($parent, parent, myself, pIndex){\n                            let $dom = jQuery('<div data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-resize-handle=\"' + parent.type + \"/\" + parent.panelPath + \"/\" + pIndex + '\"></div>');\n                            $parent.append($dom);\n                            $dom = null;\n                        },\n                        row($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"row\" data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        },\n                        column($parent, parent, myself, pIndex){\n                            let $dom;\n                            myself.panelPath = getPanelPath(parent, pIndex);\n                            if (parent && parent.type == \"stack\") {\n                                throw \"The 'stack' type child nodes are allowed only for the 'panel' type.\";\n                            }\n                            $dom = jQuery('<div data-ax5docker-pane-axis=\"column\" data-ax5docker-id=\"' + self.instanceId + '\" data-ax5docker-path=\"' + myself.panelPath + '\" style=\"flex-grow: ' + (myself.flexGrow || 1) + ';\"></div>');\n                            $parent.append($dom);\n\n                            if (U.isArray(myself.panels)) {\n                                myself.panels.forEach(function (P, _pIndex) {\n                                    if (_pIndex > 0) appendProcessor[\"resizeHandle\"]($dom, myself, P, _pIndex);\n                                    P.panelIndex = _pIndex;\n                                    appendProcessor[P.type]($dom, myself, P, _pIndex);\n                                });\n                            }\n\n                            $dom = null;\n                        }\n                    };\n\n                    let $root = jQuery('<div data-ax5docker-panes=\"' + this.instanceId + '\"></div>');\n                    if (this.panels[0]) appendProcessor[this.panels[0].type]($root, null, this.panels[0], 0);\n                    this.$target.html($root);\n\n                    this.$target\n                        .off(\"click.ax5docker-pane\")\n                        .on(\"click.ax5docker-pane\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-pane-tab] .close-icon', function (e) {\n                            self.removePanel($(this).parents('[data-ax5docker-pane-tab]').attr(\"data-ax5docker-path\"));\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-pane-tab]', function (e) {\n                            // pane, panelIndex 인자 변경.\n                            let $clickedLabel = jQuery(this);\n                            let pane = getPanel($clickedLabel.parents('[data-ax5docker-pane]').attr(\"data-ax5docker-path\"));\n                            let panelIndex = $clickedLabel.attr(\"data-ax5docker-pane-tab\");\n\n                            if (!$clickedLabel.hasClass(\"active\")) {\n                                changeActiveStackPanel(pane, panelIndex);\n                            }\n\n                            $clickedLabel = null;\n                            pane = null;\n                            panelIndex = null;\n                            U.stopEvent(e);\n                        })\n                        .on(\"click.ax5docker-pane\", '[data-ax5docker-pane-tabs-more=\"' + this.instanceId + '\"]', function (e) {\n                            openStackPanelMore($(this).parents('[data-ax5docker-pane]'), e);\n                            U.stopEvent(e);\n                        });\n\n                    this.$target\n                        .off(\"mousedown.ax5docker-pane-resize\")\n                        .off(\"dragstart.ax5docker-pane-resize\")\n                        .on(\"dragstart.ax5docker-pane-resize\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-pane-tab]', function (e) {\n                            if (!cfg.disableDragPanel) {\n                                panelTabDragEvent.on(this);\n                            }\n                        })\n                        .on(\"mousedown.ax5docker-pane-resize\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-resize-handle]', function (e) {\n                            let datas = this.getAttribute(\"data-ax5docker-resize-handle\").split(/\\//g);\n\n                            // panelResizerEvent.init\n                            self.xvar.mousePosition = getMousePosition(e);\n                            self.xvar.resizerType = datas[0];\n                            self.xvar.resizerPath = datas[1];\n                            self.xvar.resizerIndex = datas[2];\n                            // 주변 패널들\n                            self.xvar.resizer$dom = $(this);\n                            self.xvar.resizerParent$dom = self.xvar.resizer$dom.parent();\n                            self.xvar.resizerPrevGrow = U.number(self.xvar.resizer$dom.prev().css(\"flex-grow\"));\n                            self.xvar.resizerNextGrow = U.number(self.xvar.resizer$dom.next().css(\"flex-grow\"));\n\n                            if (self.xvar.resizerType == \"row\") {\n                                //self.xvar.resizerCanvasWidth = self.xvar.resizerParent$dom.innerWidth();\n                                self.xvar.resizerCanvasWidth = self.xvar.resizer$dom.prev().innerWidth() + self.xvar.resizer$dom.next().innerWidth() + self.xvar.resizer$dom.width();\n                            } else {\n                                //self.xvar.resizerCanvasHeight = self.xvar.resizerParent$dom.innerHeight();\n                                self.xvar.resizerCanvasHeight = self.xvar.resizer$dom.prev().innerHeight() + self.xvar.resizer$dom.next().innerHeight() + self.xvar.resizer$dom.height();\n                            }\n\n                            panelResizerEvent.on(this);\n                            U.stopEvent(e);\n                        })\n                        .on(\"dragstart.ax5docker-pane-resize\", '[data-ax5docker-id=\"' + self.instanceId + '\"][data-ax5docker-resize-handle]', function (e) {\n                            U.stopEvent(e);\n                            return false;\n                        });\n\n                    // stackPane tabs 스크롤처리\n                    alignStackPane();\n                    $root = null;\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 패널탭에 dragStart 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelTabDragEvent.on를 작동.\n                 */\n                const panelTabDragEvent = {\n                    \"on\": (dragPanel) => {\n                        if (this.panels[0] && this.panels[0].panels && this.panels[0].panels.length) {\n\n                            this.xvar.dragger = {\n                                dragPanel: dragPanel,\n                                target: null,\n                                dragOverVertical: null,\n                                dragOverHorizontal: null,\n                            };\n\n                            this.$target\n                                .on(\"dragover.ax5docker-\" + this.instanceId, '[data-ax5docker-id=\"' + this.instanceId + '\"][data-ax5docker-path]', function (e) {\n                                    // todo : dragover 구현\n                                    // console.log(\"dargover\", getMousePosition(e));\n                                    // console.log(e.target);\n                                    panelTabDragEvent.dragover(this, e);\n                                    U.stopEvent(e);\n                                })\n                                .on(\"drop.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off(\"drop\");\n                                    U.stopEvent(e);\n                                })\n                                .on(\"dragend.ax5docker-\" + this.instanceId, function (e) {\n                                    panelTabDragEvent.off();\n                                    U.stopEvent(e);\n                                });\n                        }\n                    },\n                    \"dragover\": (dragoverDom, e) => {\n\n                        let $dragoverDom = jQuery(dragoverDom),\n                            box = {},\n                            mouse = getMousePosition(e),\n                            dragOverVertical,\n                            dragOverHorizontal;\n\n                        if (this.xvar.dragger.target == null || this.xvar.dragger.target.get(0) != $dragoverDom.get(0)) {\n                            if (this.xvar.dragger.target) this.xvar.dragger.target.removeAttr(\"data-dropper\");\n\n                            this.xvar.dragger.target = $dragoverDom;\n                            this.xvar.dragger.dragOverVertical = null;\n                            this.xvar.dragger.dragOverHorizontal = null;\n                        }\n\n                        box = $dragoverDom.offset();\n                        box.width = $dragoverDom.width();\n                        box.height = $dragoverDom.height();\n\n                        if ($dragoverDom.attr(\"data-ax5docker-pane-tab\")) {\n                            let halfWidth = box.width / 2;\n                            if (box.left <= mouse.clientX && (box.left + halfWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + halfWidth) <= mouse.clientX && (box.left + halfWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n                            if (this.xvar.dragger.dragOverHorizontal != dragOverHorizontal && typeof dragOverHorizontal != \"undefined\") {\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n                                const draggerProcessor = {\n                                    \"left\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal](this.xvar.dragger.target);\n                                }\n                            }\n                            halfWidth = null;\n                        }\n                        else if ($dragoverDom.attr(\"data-ax5docker-pane-tabs\")) {\n                            //this.xvar.dragger.dragOverVertical = \"center\";\n                            this.xvar.dragger.dragOverHorizontal = \"last-child\";\n                            this.xvar.dragger.target.attr(\"data-dropper\", \"true\");\n                        }\n                        else if ($dragoverDom.attr(\"data-ax5docker-pane-item\")) {\n                            // panel dragover 포지션 구하기\n                            let threeQuarterHeight = box.height / 3;\n                            let threeQuarterWidth = box.width / 3;\n\n                            if (box.top <= mouse.clientY && (box.top + threeQuarterHeight) >= mouse.clientY) {\n                                dragOverVertical = \"top\";\n                            }\n                            else if ((box.top + threeQuarterHeight) <= mouse.clientY && (box.top + threeQuarterHeight * 2) >= mouse.clientY) {\n                                dragOverVertical = \"middle\";\n                            }\n                            else if ((box.top + threeQuarterHeight * 2) <= mouse.clientY && (box.top + threeQuarterHeight * 3) >= mouse.clientY) {\n                                dragOverVertical = \"bottom\";\n                            }\n\n                            if (box.left <= mouse.clientX && (box.left + threeQuarterWidth) >= mouse.clientX) {\n                                dragOverHorizontal = \"left\";\n                            }\n                            else if ((box.left + threeQuarterWidth) <= mouse.clientX && (box.left + threeQuarterWidth * 2) >= mouse.clientX) {\n                                dragOverHorizontal = \"center\";\n                            }\n                            else if ((box.left + threeQuarterWidth * 2) <= mouse.clientX && (box.left + threeQuarterWidth * 3) >= mouse.clientX) {\n                                dragOverHorizontal = \"right\";\n                            }\n\n                            if (this.xvar.dragger.dragOverVertical != dragOverVertical || this.xvar.dragger.dragOverHorizontal != dragOverHorizontal) {\n                                this.xvar.dragger.dragOverVertical = dragOverVertical;\n                                this.xvar.dragger.dragOverHorizontal = dragOverHorizontal;\n\n                                var draggerProcessor = {\n                                    \"left-top\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-top\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-top\"($target){\n                                        $target.attr(\"data-dropper\", \"top\");\n                                    },\n                                    \"left-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-middle\"($target){\n                                        $target.attr(\"data-dropper\", \"center\");\n                                    },\n                                    \"left-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"left\");\n                                    },\n                                    \"right-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"right\");\n                                    },\n                                    \"center-bottom\"($target){\n                                        $target.attr(\"data-dropper\", \"bottom\");\n                                    },\n                                };\n                                if (this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical in draggerProcessor) {\n                                    draggerProcessor[this.xvar.dragger.dragOverHorizontal + \"-\" + this.xvar.dragger.dragOverVertical](this.xvar.dragger.target);\n                                }\n                            }\n\n                            threeQuarterHeight = null;\n                            threeQuarterWidth = null;\n                        }\n\n\n                    },\n                    \"off\": (isDrop) => {\n                        if (isDrop) {\n                            let dragPanel = getPanel(this.xvar.dragger.dragPanel.getAttribute(\"data-ax5docker-path\")),\n                                appendType = [];\n\n                            if (this.xvar.dragger.dragOverHorizontal) appendType.push(this.xvar.dragger.dragOverHorizontal);\n                            if (this.xvar.dragger.dragOverVertical) appendType.push(this.xvar.dragger.dragOverVertical);\n\n                            this.appendPanel(dragPanel, this.xvar.dragger.target.attr(\"data-ax5docker-path\"), appendType);\n\n                            dragPanel = null;\n                            appendType = null;\n                        }\n\n                        alignStackPane();\n\n                        this.$target\n                            .off(\"dragover.ax5docker-\" + this.instanceId)\n                            .off(\"drop.ax5docker-\" + this.instanceId)\n                            .off(\"dragend.ax5docker-\" + this.instanceId);\n\n                        this.xvar.dragger.target.removeAttr(\"data-dropper\");\n                    }\n                };\n\n                /**\n                 * repaintPanels이 작동할 때. 리사이저에 mousedown 이벤트를 연결합니다.\n                 * 발생된 이벤트가 panelResizerEvent.on 을 작동시켜 리사이저를 움직이게 합니다\n                 */\n                const panelResizerEvent = {\n                    \"on\": (_resizer) => {\n\n                        jQuery(document.body)\n                            .on(\"mousemove.ax5docker-\" + this.instanceId, function (e) {\n                                let mouseObj = getMousePosition(e),\n                                    da_grow;\n\n                                if (self.xvar.resizerLived) {\n                                    if (self.xvar.resizerType == \"row\") {\n                                        self.xvar.__da = mouseObj.clientX - self.xvar.mousePosition.clientX;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasWidth, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    } else {\n                                        self.xvar.__da = mouseObj.clientY - self.xvar.mousePosition.clientY;\n                                        da_grow = U.number(self.xvar.__da * 2 / self.xvar.resizerCanvasHeight, {round: 6});\n\n                                        self.xvar.resizer$dom.prev().css({\"flex-grow\": self.xvar.resizerPrevGrow + da_grow});\n                                        self.xvar.resizer$dom.next().css({\"flex-grow\": self.xvar.resizerNextGrow - da_grow});\n                                    }\n\n                                    fireEvent({\n                                        eventName: \"resize\",\n                                        target: self.xvar.resizer$dom\n                                    });\n                                } else {\n                                    self.xvar.resizerLived = true;\n                                }\n\n                                mouseObj = null;\n                                da_grow = null;\n                            })\n                            .on(\"mouseup.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            })\n                            .on(\"mouseleave.ax5docker-\" + this.instanceId, function (e) {\n                                panelResizerEvent.off();\n                                U.stopEvent(e);\n                            });\n\n                        jQuery(document.body)\n                            .attr('unselectable', 'on')\n                            .css('user-select', 'none')\n                            .on('selectstart', false);\n                    },\n                    \"off\": () => {\n                        self.xvar.resizerLived = false;\n\n                        if (typeof this.xvar.__da === \"undefined\") {\n\n                        }\n                        else {\n                            let $prevPanel = self.xvar.resizer$dom.prev(),\n                                $nextPanel = self.xvar.resizer$dom.next(),\n                                prevPane = getPanel($prevPanel.attr(\"data-ax5docker-path\")),\n                                nextPane = getPanel($nextPanel.attr(\"data-ax5docker-path\"));\n\n                            prevPane.flexGrow = U.number($prevPanel.css(\"flex-grow\"));\n                            nextPane.flexGrow = U.number($nextPanel.css(\"flex-grow\"));\n\n                            $prevPanel = null;\n                            $nextPanel = null;\n                            prevPane = null;\n                            nextPane = null;\n                        }\n\n                        alignStackPane();\n\n                        jQuery(document.body)\n                            .off(\"mousemove.ax5docker-\" + this.instanceId)\n                            .off(\"mouseup.ax5docker-\" + this.instanceId)\n                            .off(\"mouseleave.ax5docker-\" + this.instanceId);\n\n                        jQuery(document.body)\n                            .removeAttr('unselectable')\n                            .css('user-select', 'auto')\n                            .off('selectstart');\n                    }\n                };\n\n                /**\n                 * 액티브 패널 변경(stack인 상황에서)\n                 * @param pane\n                 * @param panelIndex\n                 * @returns {boolean}\n                 */\n                const changeActiveStackPanel = (pane, panelIndex) => {\n                    let panel = pane.panels[panelIndex];\n\n                    for (let p = 0, pl = pane.panels.length; p < pl; p++) {\n                        if (pane.panels[p].active) {\n                            controlPanel(pane.panels[p], \"deactive\");\n                        }\n                    }\n\n                    if (!panel.builded) controlPanel(panel, \"init\");\n                    controlPanel(panel, \"active\");\n\n                    pane = null;\n                    panelIndex = null;\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * stackTab의 더보기 아이콘이 클릭되면~~~\n                 * @param stackPane\n                 * @param e\n                 * @returns {ax5docker}\n                 */\n                const openStackPanelMore = (stackPane, e) => {\n                    let $stackPane = jQuery(stackPane),\n                        panePath = $stackPane.attr(\"data-ax5docker-path\"),\n                        pane = getPanel(panePath);\n\n                    if (this.menu) {\n                        let menuItems = U.map(pane.panels, function (index) {\n                            return {\n                                label: this.name,\n                                index: index,\n                                panePath: panePath\n                            }\n                        });\n\n                        this.menu.setConfig({\n                            items: menuItems,\n                            onClick: function () {\n                                //console.log(pane);\n                                changeActiveStackPanel(getPanel(this.panePath), this.index);\n                            }\n                        });\n\n                        this.menu.popup(e);\n                    } else {\n                        console.log(pane.panels);\n                        throw \"'ax5ui-menu' is required to implement the function.\";\n                    }\n\n                    $stackPane = null;\n                    panePath = null;\n                    pane = null;\n                    return this;\n                };\n\n                /**\n                 * stackPane이 리사이즈 되면 탭을 스크롤여부를 판단해야 합니다.\n                 */\n                const alignStackPane = () => {\n                    debouncer.panelDebounceFn((function () {\n                        this.$target.find('[data-ax5docker-pane-tabs=\"' + this.instanceId + '\"]').each(function () {\n                            let $this = jQuery(this).parent();\n                            if (this.scrollWidth > this.clientWidth) {\n                                $this.addClass(\"tabs-scrolled\");\n                            } else {\n                                $this.removeClass(\"tabs-scrolled\");\n                            }\n                            $this = null;\n                        });\n                    }).bind(this));\n                };\n\n                const panelsDeactive = (panels) => {\n                    if (U.isArray(panels)) {\n                        panels.forEach(function (p) {\n                            //p.active = false;\n                            //p.$item.removeClass(\"active\");\n                            controlPanel(p, \"deactive\");\n                        });\n                    } else {\n                        //panels.active = false;\n                        //panels.$item.removeClass(\"active\");\n                        controlPanel(panels, \"deactive\");\n                    }\n                };\n\n                /**\n                 * 패널중에 null이 된 요소를 찾아 panels를 정리 합니다.\n                 * @returns {*}\n                 */\n                const arrangePanel = () => {\n                    const processor = {\n                        stack(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"stack\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        panel(myself){\n                            //console.log(myself);\n                            return myself;\n                        },\n                        row(myself){\n\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"row\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                        column(myself){\n                            if (!U.isArray(myself.panels)) return false;\n\n                            let newObj = {\n                                type: \"column\",\n                                panels: []\n                            };\n\n                            myself.panels.forEach(function (P, _pIndex) {\n                                if (P) {\n                                    let _p = processor[P.type](P);\n                                    if (_p) newObj.panels.push(_p);\n                                    _p = null;\n                                }\n                            });\n\n                            if (newObj.panels.length == 0) {\n                                return null;\n                            } else if (newObj.panels.length < 2) {\n                                newObj = newObj.panels[0];\n                            }\n\n                            return newObj;\n                        },\n                    };\n\n                    if (this.panels[0]) {\n                        this.panels[0] = processor[this.panels[0].type](this.panels[0]);\n                        if (this.panels[0] && this.panels[0].type === \"panel\") {\n                            this.panels[0] = {\n                                type: \"stack\",\n                                panels: [this.panels[0]]\n                            };\n                        }\n                    } else {\n                        this.panels = [];\n                    }\n\n                    repaintPanels();\n                };\n\n                /**\n                 * @method ax5docker.setConfig\n                 * @param {Object} config\n                 * @param {Element} config.target\n                 * @param {Object[]} config.panels\n                 * @param {String} config.panels[].type - panel, stack, row, column\n                 * @param {String} config.panels[].name\n                 * @param {String} [config.panels[].color]\n                 * @param {String} [config.panels[].borderColor]\n                 * @param {String} config.panels[].moduleName\n                 * @param {Object} config.panels[].moduleState\n                 * @param {Object[]} config.panels[].panels\n                 * @param {Object} [config.icons]\n                 * @param {String} [config.icons.close]\n                 * @param {String} [config.icons.more]\n                 * @param {Boolean} [config.disableClosePanel=false]\n                 * @param {Boolean} [config.disableDragPanel=false]\n                 * @param {Object} [config.control]\n                 * @param {Function} [config.control.before]\n                 * @param {Function} [config.control.after]\n                 * @param {Object} [config.menu]\n                 * @param {String} [config.menu.theme=\"default\"]\n                 * @param {String} [config.menu.position=\"absolute\"]\n                 * @param {Object} [config.menu.icons]\n                 * @param {String} [config.menu.icons.arrow]\n                 * @param {Number} [config.resizeDebounceTime=100]\n                 * @param {Number} [config.panelDebounceTime=300]\n                 * @example\n                 * ```js\n                 * var myDocker = new ax5.ui.docker();\n                 * myDocker.setConfig({\n                 *      target: $('[data-ax5docker=\"docker1\"]'),\n                 *      panels: [\n                 *          {\n                 *              type: \"panel\",\n                 *              name: \"panel name\",\n                 *              color: \"#ff3300\",\n                 *              borderColor: \"#000000\",\n                 *              moduleName: \"content\",\n                 *              moduleState:{\n                 *                  data: \"data1\"\n                 *              }\n                 *          }\n                 *      ]\n                 * });\n                 * ```\n                 */\n                this.init = function (_config) {\n                    cfg = jQuery.extend(true, {}, cfg, _config);\n                    if (!cfg.target) {\n                        console.log(ax5.info.getError(\"ax5docker\", \"401\", \"init\"));\n                        return this;\n                    }\n\n                    // 이벤트 정의 영역\n                    this.onResize = cfg.onResize;\n\n                    // memory target\n                    this.$target = jQuery(cfg.target);\n                    // set panels\n                    this.panels = cfg.panels || [];\n                    // event Functions\n                    this.onStateChanged = cfg.onStateChanged;\n                    this.onClick = cfg.onClick;\n                    this.onLoad = cfg.onLoad;\n                    this.onDataChanged = cfg.onDataChanged;\n\n                    if (ax5.ui.menu) {\n                        this.menu = new ax5.ui.menu({\n                            theme: 'default',\n                            position: \"absolute\",\n                            icons: {\n                                'arrow': '▸'\n                            }\n                        });\n                    }\n\n                    jQuery(window).bind(\"resize.ax5docker-\" + this.id, function () {\n                        // stackPane tabs 스크롤처리\n                        alignStackPane();\n                    });\n                };\n\n                /**\n                 * @method ax5docker.setPanels\n                 * @returns {ax5docker}\n                 */\n                this.setPanels = function (_panels) {\n                    // set panels\n                    this.panels = _panels || [];\n\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addModule\n                 * @param modules\n                 * @returns {ax5docker}\n                 */\n                this.addModule = function (modules) {\n                    if (U.isObject(modules)) {\n                        jQuery.extend(true, this.modules, modules);\n                    }\n                    return this;\n                };\n\n                /**\n                 * repaint panels of docker\n                 * @method ax5docker.repaint\n                 * @returns {ax5docker}\n                 */\n                this.repaint = function () {\n                    // 패널 다시 그리기\n                    repaintPanels();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.addPanel\n                 * @param {String} _addPath - Position path to add panel\n                 * @param _addType\n                 * @param _panel\n                 * @param _panelIndex\n                 * @returns {ax5docker}\n                 * @example\n                 * ```js\n                 * myDocker.addPanel('0.1', 'stack', {type:'panel', name:'addPanel', moduleName: 'content'});\n                 *\n                 * ```\n                 */\n                this.addPanel = function (_addPath, _addType, _panel, _panelIndex) {\n                    console.log(_addPath, _addType);\n                    let addPath = \"\";\n                    let pane;\n                    let parent;\n\n                    if (this.panels.length === 0 || !this.panels[0]) {\n                        return this.setPanels([{type: \"stack\", panels: [_panel]}]);\n                    } else {\n                        if (_addPath == \"undefined\") {\n                            addPath = \"0\";\n                        } else {\n                            addPath = _addPath\n                                .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                                .replace(/(\\d+)/g, function (a, b) {\n                                    return \"panels[\" + a + \"]\";\n                                });\n                        }\n                        pane = getPanel(addPath);\n                        parent = getPanelParent(pane);\n                    }\n\n                    if (parent && parent.type == \"stack\") {\n                        // 부모패널로 ~\n                        //console.log(addPath, _addPath);\n                        pane = parent;\n                        addPath = pane.panelPath;\n                    }\n\n\n                    console.log(pane);\n                    console.log(parent);\n                    console.log(addPath);\n\n                    let panelProcessor = {\n                        \"stack\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        if (_panel.active) {\n                                            panelsDeactive(_pane.panels);\n                                        }\n                                        _pane.panels.splice(Number(_panelIndex) + 1, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        },\n                        \"row\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // 처리 할 수 없는 상황 첫번째 자식을 찾아 재 요청\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel, _panelIndex){\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-right\"(_pane, _panel, _panelIndex){\n                                        _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"column-top\"(_pane, _panel, _panelIndex){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel, _panelIndex){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel, _panelIndex);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"column\"(_pane, _addType, _panel, _panelIndex){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        if (_pane.panels[0] && _pane.panels[0].panelPath) {\n                                            this.addPanel(_pane.panels[0].panelPath, _addType, _panel);\n                                        }\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex, 0, _panel);\n                                        arrangePanel();\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        _pane.panels.splice(_panelIndex + 1, 0, _panel);\n                                        arrangePanel();\n                                    }\n                                };\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            addProcessor = null;\n                            copyPanel = null;\n                        },\n                        \"panel\"(_pane, _addType, _panel){\n                            let copyPanel = jQuery.extend({}, _pane),\n                                addProcessor = {\n                                    \"stack\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-left\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n                                        _pane.panels.push(_panel);\n                                        _pane.panels.push(copyPanel);\n                                        arrangePanel();\n                                    },\n                                    \"stack-right\"(_pane, _panel){\n                                        // _pane stack으로 재구성\n                                        _pane = setPanel(addPath, {\n                                            type: \"stack\",\n                                            panels: []\n                                        });\n\n                                        if (_panel.active) {\n                                            panelsDeactive(copyPanel);\n                                        }\n                                        _pane.panels.push(copyPanel);\n                                        _pane.panels.push(_panel);\n                                        arrangePanel();\n                                    },\n                                    \"row-left\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\" || parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"row-right\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"row\" || parentPane.type == \"column\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"row\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-top\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n                                        if (parentPane && parentPane.type == \"column\" || parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(_panel);\n                                            _pane.panels.push(copyPanel);\n                                            arrangePanel();\n                                        }\n                                    },\n                                    \"column-bottom\"(_pane, _panel){\n                                        let parentPath = addPath.substr(0, addPath.lastIndexOf(\".\"));\n                                        let parentPane = getPanel(parentPath);\n\n                                        if (parentPane && parentPane.type == \"column\" || parentPane.type == \"row\") {\n                                            this.addPanel(parentPane.panelPath, _addType, _panel, _pane.panelIndex);\n                                        } else {\n                                            _pane = setPanel(addPath, {\n                                                type: \"column\",\n                                                panels: []\n                                            });\n                                            _pane.panels.push(copyPanel);\n                                            _pane.panels.push(_panel);\n                                            arrangePanel();\n                                        }\n                                    }\n                                };\n\n                            if (_addType in addProcessor) {\n                                addProcessor[_addType].call(this, _pane, _panel);\n                            }\n\n                            copyPanel = null;\n                            addProcessor = null;\n                        }\n                    };\n\n                    if ((pane) ? pane.type : \"stack\" in panelProcessor) {\n                        panelProcessor[(pane) ? pane.type : \"stack\"].call(this, pane, _addType, _panel, _panelIndex);\n                    }\n\n                    return this;\n                };\n\n                /**\n                 * 패널 삭제하기\n                 * @method ax5docker.removePanel\n                 * @param {String} panelPath\n                 * @param {Function} callback\n                 * @returns {ax5docker}\n                 * @example\n                 * ```js\n                 * function removePanel() {\n                 *      var p = myDocker.searchPanel(function (panel) {\n                 *          return (panel.key == \"A\");\n                 *      });\n                 *\n                 *      if (p) {\n                 *          myDocker.removePanel(p.panelPath, function () {\n                 *              removePanel();\n                 *          });\n                 *      }\n                 * }\n                 * removePanel();\n                 * ```\n                 */\n                this.removePanel = function (panelPath, callback) {\n                    let panel = getPanel(panelPath);\n\n                    controlPanel(panel, \"destroy\", callback);\n\n                    panel = null;\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.appendPanel\n                 * @param _panel\n                 * @param _appendPath\n                 * @param _appendType\n                 * @returns {ax5docker}\n                 */\n                this.appendPanel = function (_panel, _appendPath, _appendType) {\n                    console.log(_panel);\n                    let copiedPanel = $.extend({}, _panel, {panelPath: \"\"}),\n                        addType;\n\n                    let removePanelPath = _panel.panelPath;\n                    let appendPanelIndex = U.right(_appendPath, \".\").replace(/\\D/g, \"\");\n\n                    if (_appendType.length == 0) {\n                        return this;\n                    }\n\n                    if (_panel.panelPath === _appendPath) {\n                        let parentPath = _appendPath.substr(0, _appendPath.lastIndexOf(\".\"));\n                        let parentPane = getPanel(parentPath);\n                        if (parentPane.type != \"stack\") {\n                            return this;\n                        }\n                    }\n\n                    if (_appendType.length == 1) { // stack\n                        addType = (_appendType[0] == \"last-child\") ? \"stack\" : \"stack-\" + _appendType[0];\n                        copiedPanel.active = false;\n                        copiedPanel.$item.removeClass(\"active\");\n                        controlPanel(copiedPanel, \"deactive\");\n\n                    } else {\n                        switch (_appendType[0] + \"-\" + _appendType[1]) {\n                            case \"left-top\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-middle\":\n                                addType = \"row-left\";\n                                break;\n                            case \"left-bottom\":\n                                addType = \"row-left\";\n                                break;\n                            case \"center-top\":\n                                addType = \"column-top\";\n                                break;\n                            case \"center-middle\":\n                                addType = \"stack\";\n                                copiedPanel.active = false;\n                                copiedPanel.$item.removeClass(\"active\");\n                                appendPanelIndex = undefined;\n                                controlPanel(copiedPanel, \"deactive\");\n                                break;\n                            case \"center-bottom\":\n                                addType = \"column-bottom\";\n                                break;\n                            case \"right-top\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-middle\":\n                                addType = \"row-right\";\n                                break;\n                            case \"right-bottom\":\n                                addType = \"row-right\";\n                                break;\n                        }\n                    }\n\n                    if (_panel.panelPath === _appendPath) {\n                        // 부모레벨로 이동\n                        _appendPath = U.left(_appendPath, \".\");\n                    }\n                    // todo : deactive call\n\n                    setPanel(removePanelPath, null);\n                    \n                    console.log(_appendPath, addType, copiedPanel, appendPanelIndex);\n                    this.addPanel(_appendPath, addType, copiedPanel, appendPanelIndex);\n\n                    copiedPanel = null;\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.align\n                 * @returns {ax5docker}\n                 */\n                this.align = function () {\n                    alignStackPane();\n                    return this;\n                };\n\n                /**\n                 * @method ax5docker.searchPanel\n                 * @param _condition\n                 * @returns {*}\n                 * @example\n                 * ```js\n                 * var p = myDocker.searchPanel(function (panel) {\n                 *  return (panel.id == \"A\");\n                 * });\n                 * ```\n                 */\n                this.searchPanel = function (_condition) {\n                    if (U.isFunction(_condition)) {\n\n                        const findPanel = function (_panels) {\n                            let i = 0, l = _panels.length, findResult;\n                            for (; i < l; i++) {\n                                if(_panels[i]) {\n                                    if (_panels[i].type === \"panel\") {\n                                        if (_condition.call({\n                                                config: self.config,\n                                                panel: _panels[i]\n                                            }, _panels[i])) {\n                                            return _panels[i];\n                                        }\n                                    } else {\n                                        if (findResult = findPanel(_panels[i].panels)) {\n                                            return findResult;\n                                        }\n                                    }\n                                }\n                            }\n                        };\n\n                        return findPanel(this.panels);\n\n                    } else if (U.isString(_condition)) {\n\n                        return getPanel(_condition);\n\n                    }\n                };\n\n                /**\n                 * @method ax5docker.activePanel\n                 * @param {String} _panelPath\n                 * @param {Function} callback\n                 * @returns {ax5docker}\n                 * @example\n                 * ```js\n                 * myDocker.activePanel(\"0.1\");\n                 * myDocker.activePanel(\"0.0.1\");\n                 * ```\n                 */\n                this.activePanel = function (_panelPath, callback) {\n                    let activePanelPath = \"\";\n                    let pane;\n                    let parent;\n\n                    if (this.panels.length === 0 || !this.panels[0]) {\n                        // 액티브 대상 없음.\n                        return this;\n                    } else {\n                        if (typeof _panelPath == \"undefined\") {\n                            activePanelPath = \"0\";\n                        } else {\n                            activePanelPath = _panelPath\n                                .replace(/[a-zA-Z\\[\\]]+/g, \"\")\n                                .replace(/(\\d+)/g, function (a, b) {\n                                    return \"panels[\" + a + \"]\";\n                                });\n                        }\n                        pane = getPanel(activePanelPath);\n                        parent = getPanelParent(pane);\n                    }\n\n                    changeActiveStackPanel(parent, pane.panelIndex);\n                    return this;\n                };\n\n                // 클래스 생성자\n                this.main = (function () {\n                    UI.docker_instance = UI.docker_instance || [];\n                    UI.docker_instance.push(this);\n\n                    if (arguments && U.isObject(arguments[0])) {\n                        this.setConfig(arguments[0]);\n                    }\n                }).apply(this, arguments);\n\n            };\n        })()\n    );\n\n    DOCKER = ax5.ui.docker;\n})();","// ax5.ui.docker.tmpl\n(function () {\n\n    let DOCKER = ax5.ui.docker;\n\n    let stack_panel = function (columnKeys, data) {\n        if(data.labelDirection === \"bottom\"){\n            return `<div data-ax5docker-pane=\"{{id}}\" data-ax5docker-label-direction=\"{{labelDirection}}\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <div data-ax5docker-pane-item-views=\"{{id}}\"></div>\n    <ul data-ax5docker-pane-tabs=\"{{id}}\" data-ax5docker-id=\"{{id}}\" data-ax5docker-path=\"{{panelPath}}\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"{{id}}\">{{{icons.more}}}</div>\n</div>`;\n        }else{\n            return `<div data-ax5docker-pane=\"{{id}}\" data-ax5docker-label-direction=\"{{labelDirection}}\" data-ax5docker-path=\"{{panelPath}}\" style=\"flex-grow: {{#flexGrow}}{{.}}{{/flexGrow}}{{^flexGrow}}1{{/flexGrow}};\">\n    <ul data-ax5docker-pane-tabs=\"{{id}}\" data-ax5docker-id=\"{{id}}\" data-ax5docker-path=\"{{panelPath}}\"></ul>\n    <div data-ax5docker-pane-tabs-more=\"{{id}}\">{{{icons.more}}}</div>\n    <div data-ax5docker-pane-item-views=\"{{id}}\"></div>\n</div>`;\n        }\n    };\n\n    let panel_label = function () {\n        return `<li data-ax5docker-pane-tab=\"{{pIndex}}\" data-ax5docker-id=\"{{id}}\" data-ax5docker-path=\"{{panelPath}}\" class=\"{{#hasLabelColor}}hasLabelColor{{/hasLabelColor}}\">\n    <div class=\"label-icon\" style=\"{{#color}}background: {{color}};{{/color}}{{#borderColor}}border-color: {{borderColor}};{{/borderColor}}\"></div>\n    <div class=\"title\">{{{name}}}</div>\n    {{^disableClosePanel}}<div class=\"close-icon\">{{{icons.close}}}</div>{{/disableClosePanel}}\n</li><li class=\"pane-tab-margin\"></li>`;\n    };\n\n    DOCKER.tmpl = {\n        \"stack-panel\": stack_panel,\n        \"panel-label\": panel_label,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DOCKER.tmpl[tmplName].call(this, columnKeys, data), data);\n        }\n    };\n\n})();"]}