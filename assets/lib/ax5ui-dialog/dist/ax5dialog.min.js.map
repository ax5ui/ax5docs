{"version":3,"sources":["ax5dialog.js","ax5dialog-tmpl.js"],"names":["UI","ax5","ui","U","util","DIALOG","addClass","className","ax5dialog","self","this","cfg","instanceId","getGuid","config","id","clickEventName","theme","width","title","msg","lang","ok","cancel","animateTime","autoCloseTime","activeDialog","autoCloseTimer","onStateChanged","opts","that","call","getContent","dialogId","data","replace","input","btns","_crlf","additionalContent","isFunction","tmpl","get","open","callback","pos","box","jQuery","document","body","append","css","height","position","top","window","left","zIndex","dialogType","find","focus","on","e","btnOnClick","event","bind","onKeyup","align","state","setTimeout","close","dialogConfig","innerHeight","innerWidth","target","k","emptyKey","srcElement","findParentNode","getAttribute","key","value","btnTarget","oi","val","onClick","doNotCallback","keyCode","info","eventKeys","ESC","RETURN","init","alert","tryCount","isString","console","log","getError","Number","extend","label","confirm","prompt","_option","clearTimeout","unbind","remove","main","dialog_instance","push","arguments","isObject","setConfig","apply","dialog","dialogDisplay","columnKeys","tmplName","mustache","render"],"mappings":"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","file":"ax5dialog.min.js","sourcesContent":["// ax5.ui.dialog\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let DIALOG;\n\n    UI.addClass({\n        className: \"dialog\"\n    }, (function () {\n        /**\n         * @class ax5dialog\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * var dialog = new ax5.ui.dialog();\n         * var mask = new ax5.ui.mask();\n         * dialog.setConfig({\n         *     zIndex: 5000,\n         *     onStateChanged: function () {\n         *         if (this.state === \"open\") {\n         *             mask.open();\n         *         }\n         *         else if (this.state === \"close\") {\n         *             mask.close();\n         *         }\n         *     }\n         * });\n         *\n         * dialog.alert({\n         *     theme: 'default',\n         *     title: 'Alert default',\n         *     msg: theme + ' color'\n         * }, function () {\n         *     console.log(this);\n         * });\n         * ```\n         */\n        let ax5dialog = function () {\n            let self = this, cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                id: 'ax5-dialog-' + this.instanceId,\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                width: 300,\n                title: '',\n                msg: '',\n                lang: {\n                    \"ok\": \"ok\", \"cancel\": \"cancel\"\n                },\n                animateTime: 150,\n                autoCloseTime: 0\n            };\n            this.activeDialog = null;\n            this.autoCloseTimer = null;\n            cfg = this.config;\n\n            const onStateChanged = function (opts, that) {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            };\n            /**\n             * @private ax5dialog.getContent\n             * @param {String} dialogId\n             * @param {Object} opts\n             * @returns dialogDisplay\n             */\n            const getContent = function (dialogId, opts) {\n\n                let data = {\n                    dialogId: dialogId,\n                    title: (opts.title || cfg.title || \"\"),\n                    msg: (opts.msg || cfg.msg || \"\").replace(/\\n/g, \"<br/>\"),\n                    input: opts.input,\n                    btns: opts.btns,\n                    '_crlf': function () {\n                        return this.replace(/\\n/g, \"<br/>\");\n                    },\n                    additionalContent: (function (additionalContent) {\n                        if (U.isFunction(additionalContent)) {\n                            return additionalContent.call(opts);\n                        }\n                        else {\n                             return additionalContent;\n                        }\n                    })(opts.additionalContent)\n                };\n\n                try {\n                    return DIALOG.tmpl.get.call(this, \"dialogDisplay\", data);\n                }\n                finally {\n                    data = null;\n                }\n            };\n            /**\n             * @private ax5dialog.open\n             * @param {Object} opts\n             * @param callback\n             */\n            const open = function (opts, callback) {\n                let pos = {}, box;\n\n                opts.id = (opts.id || cfg.id);\n\n                box = {\n                    width: opts.width\n                };\n                jQuery(document.body).append(getContent.call(this, opts.id, opts));\n\n                this.activeDialog = jQuery('#' + opts.id);\n                this.activeDialog.css({width: box.width});\n\n                // dialog 높이 구하기 - 너비가 정해지면 높이가 변경 될 것.\n                opts.height = box.height = this.activeDialog.height();\n\n                //- position 정렬\n                if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n                    pos.top = jQuery(window).height() / 2 - box.height / 2;\n                    pos.left = jQuery(window).width() / 2 - box.width / 2;\n                }\n                else {\n                    pos.left = opts.position.left || 0;\n                    pos.top = opts.position.top || 0;\n                }\n                if (cfg.zIndex) {\n                    pos[\"z-index\"] = cfg.zIndex;\n                }\n                this.activeDialog.css(pos);\n\n                // bind button event\n                if (opts.dialogType === \"prompt\") {\n                    this.activeDialog.find(\"[data-dialog-prompt]\").get(0).focus();\n                }\n                else {\n                    this.activeDialog.find(\"[data-dialog-btn]\").get(0).focus();\n                }\n\n                this.activeDialog.find(\"[data-dialog-btn]\").on(cfg.clickEventName, (function (e) {\n                    btnOnClick.call(this, e || window.event, opts, callback);\n                }).bind(this));\n\n                // bind key event\n                jQuery(window).bind(\"keydown.ax5dialog\", (function (e) {\n                    onKeyup.call(this, e || window.event, opts, callback);\n                }).bind(this));\n\n                jQuery(window).bind(\"resize.ax5dialog\", (function (e) {\n                    align.call(this, e || window.event);\n                }).bind(this));\n\n                onStateChanged.call(this, opts, {\n                    self: this,\n                    state: \"open\"\n                });\n\n                if(opts.autoCloseTime) {\n                    this.autoCloseTimer = setTimeout(function () {\n                        self.close();\n                    }, opts.autoCloseTime);\n                }\n\n                pos = null;\n                box = null;\n            };\n            const align = function (e) {\n                if (!this.activeDialog) return this;\n                let opts = self.dialogConfig,\n                    box = {\n                        width: opts.width,\n                        height: opts.height\n                    };\n\n                //- position 정렬\n                if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n                    box.top = window.innerHeight / 2 - box.height / 2;\n                    box.left = window.innerWidth / 2 - box.width / 2;\n                }\n                else {\n                    box.left = opts.position.left || 0;\n                    box.top = opts.position.top || 0;\n                }\n                if (box.left < 0) box.left = 0;\n                if (box.top < 0) box.top = 0;\n\n                this.activeDialog.css(box);\n\n                opts = null;\n                box = null;\n\n                return this;\n            };\n            const btnOnClick = function (e, opts, callback, target, k) {\n                let that,\n                    emptyKey = null;\n\n                if (e.srcElement) e.target = e.srcElement;\n\n                target = U.findParentNode(e.target, function (target) {\n                    if (target.getAttribute(\"data-dialog-btn\")) {\n                        return true;\n                    }\n                });\n\n                if (target) {\n                    k = target.getAttribute(\"data-dialog-btn\");\n\n                    that = {\n                        self: this,\n                        key: k, value: opts.btns[k],\n                        dialogId: opts.id,\n                        btnTarget: target\n                    };\n                    if (opts.dialogType === \"prompt\") {\n                        for (let oi in opts.input) {\n                            that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                            if (that[oi] == \"\" || that[oi] == null) {\n                                emptyKey = oi;\n                                break;\n                            }\n                        }\n                    }\n                    if (opts.btns[k].onClick) {\n                        opts.btns[k].onClick.call(that, k);\n                    }\n                    else if (opts.dialogType === \"alert\") {\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                    else if (opts.dialogType === \"confirm\") {\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                    else if (opts.dialogType === \"prompt\") {\n                        if (k === 'ok') {\n                            if (emptyKey) {\n                                this.activeDialog.find('[data-dialog-prompt=\"' + emptyKey + '\"]').get(0).focus();\n                                return false;\n                            }\n                        }\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                }\n\n                that = null;\n                opts = null;\n                callback = null;\n                target = null;\n                k = null;\n            };\n            const onKeyup = function (e, opts, callback, target, k) {\n                let that,\n                    emptyKey = null;\n\n                if (e.keyCode == ax5.info.eventKeys.ESC) {\n                    this.close();\n                }\n                if (opts.dialogType === \"prompt\") {\n                    if (e.keyCode == ax5.info.eventKeys.RETURN) {\n                        that = {\n                            self: this,\n                            key: k, value: opts.btns[k],\n                            dialogId: opts.id,\n                            btnTarget: target\n                        };\n\n                        for (let oi in opts.input) {\n                            that[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                            if (that[oi] == \"\" || that[oi] == null) {\n                                emptyKey = oi;\n                                break;\n                            }\n                        }\n                        if (emptyKey) {\n                            that = null;\n                            emptyKey = null;\n                            return false;\n                        }\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                }\n\n                that = null;\n                emptyKey = null;\n                opts = null;\n                callback = null;\n                target = null;\n                k = null;\n            };\n\n            /**\n             * Preferences of dialog UI\n             * @method ax5dialog.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged] - `onStateChanged` function can be defined in setConfig method or new ax5.ui.dialog initialization method. However, you can us to define an\n             * event function after initialization, if necessary\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * var dialog = new ax5.ui.dialog();\n             * dialog.setConfig({\n             *      title: \"app dialog title\",\n             *      zIndex: 5000,\n             *      onStateChanged: function () {\n             *          if (this.state === \"open\") {\n             *              mask.open();\n             *          }\n             *          else if (this.state === \"close\") {\n             *              mask.close();\n             *          }\n             *      }\n             * });\n             * ```\n             */\n            //== class body start\n            this.init = function () {\n                this.onStateChanged = cfg.onStateChanged;\n                // this.onLoad = cfg.onLoad;\n\n            };\n\n            /**\n             * open the dialog of alert type\n             * @method ax5dialog.alert\n             * @param {Object|String} config - dialog 속성을 json으로 정의하거나 msg만 전달\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged]\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @param {Function|String} [config.additionalContent]\n             * @param {Function} [callback] - 사용자 확인 이벤트시 호출될 callback 함수\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.alert({\n             *  title: 'app title',\n             *  msg: 'alert'\n             * }, function(){});\n             * ```\n             */\n            this.alert = function (opts, callback, tryCount) {\n                if (U.isString(opts)) {\n                    opts = {\n                        title: cfg.title,\n                        msg: opts\n                    }\n                }\n\n                if (this.activeDialog) {\n                    // try one more\n                    if (!tryCount) {\n                        setTimeout((function () {\n                            this.alert(opts, callback, 1);\n                        }).bind(this), Number(cfg.animateTime) + 100);\n                    } else {\n                        console.log(ax5.info.getError(\"ax5dialog\", \"501\", \"alert\"));\n                    }\n                    return this;\n                }\n\n                self.dialogConfig = {};\n                jQuery.extend(true, self.dialogConfig, cfg, opts);\n                opts = self.dialogConfig;\n\n\n                opts.dialogType = \"alert\";\n                opts.theme = (opts.theme || cfg.theme || \"\");\n                opts.callback = callback;\n\n                if (typeof opts.btns === \"undefined\") {\n                    opts.btns = {\n                        ok: {label: cfg.lang[\"ok\"], theme: opts.theme}\n                    };\n                }\n                open.call(this, opts, callback);\n\n                return this;\n            };\n\n            /**\n             * open the dialog of confirm type\n             * @method ax5dialog.confirm\n             * @param {Object|String} config - dialog 속성을 json으로 정의하거나 msg만 전달\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged]\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @param {Function|String} [config.additionalContent]\n             * @param {Function} [callback] - 사용자 확인 이벤트시 호출될 callback 함수\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.confirm({\n             *      title: 'app title',\n             *      msg: 'confirm',\n             *      additionalContent: function () {\n             *          return \"<div style='border:1px solid #ccc;border-radius: 5px;background: #eee;padding: 10px;'>추가정보</div>\";\n             *      }\n             * }, function(){});\n             * ```\n             */\n            this.confirm = function (opts, callback, tryCount) {\n                if (U.isString(opts)) {\n                    opts = {\n                        title: cfg.title,\n                        msg: opts\n                    }\n                }\n\n                if (this.activeDialog) {\n                    // try one more\n                    if (!tryCount) {\n                        setTimeout((function () {\n                            this.confirm(opts, callback, 1);\n                        }).bind(this), Number(cfg.animateTime) + 100);\n                    } else {\n                        console.log(ax5.info.getError(\"ax5dialog\", \"501\", \"confirm\"));\n                    }\n                    return this;\n                }\n\n                self.dialogConfig = {};\n                jQuery.extend(true, self.dialogConfig, cfg, opts);\n                opts = self.dialogConfig;\n\n                opts.dialogType = \"confirm\";\n                opts.theme = (opts.theme || cfg.theme || \"\");\n                opts.callback = callback;\n\n                if (typeof opts.btns === \"undefined\") {\n                    opts.btns = {\n                        ok: {label: cfg.lang[\"ok\"], theme: opts.theme},\n                        cancel: {label: cfg.lang[\"cancel\"]}\n                    };\n                }\n                open.call(this, opts, callback);\n\n                return this;\n            };\n\n            /**\n             * open the dialog of prompt type\n             * @method ax5dialog.prompt\n             * @param {Object|String} config - dialog 속성을 json으로 정의하거나 msg만 전달\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged]\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @param {Function|String} [config.additionalContent]\n             * @param {Function} [callback] - 사용자 확인 이벤트시 호출될 callback 함수\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.prompt({\n             *  title: 'app title',\n             *  msg: 'alert'\n             * }, function(){});\n             * ```\n             */\n            this.prompt = function (opts, callback, tryCount) {\n                if (U.isString(opts)) {\n                    opts = {\n                        title: cfg.title,\n                        msg: opts\n                    }\n                }\n\n                if (this.activeDialog) {\n                    // try one more\n                    if (!tryCount) {\n                        setTimeout((function () {\n                            this.prompt(opts, callback, 1);\n                        }).bind(this), Number(cfg.animateTime) + 100);\n                    } else {\n                        console.log(ax5.info.getError(\"ax5dialog\", \"501\", \"prompt\"));\n                    }\n                    return this;\n                }\n\n                self.dialogConfig = {};\n                jQuery.extend(true, self.dialogConfig, cfg, opts);\n                opts = self.dialogConfig;\n                opts.dialogType = \"prompt\";\n                opts.theme = (opts.theme || cfg.theme || \"\");\n                opts.callback = callback;\n\n                if (typeof opts.input === \"undefined\") {\n                    opts.input = {\n                        value: {label: \"\"}\n                    };\n                }\n                if (typeof opts.btns === \"undefined\") {\n                    opts.btns = {\n                        ok: {label: cfg.lang[\"ok\"], theme: opts.theme},\n                        cancel: {label: cfg.lang[\"cancel\"]}\n                    };\n                }\n                open.call(this, opts, callback);\n\n                return this;\n            };\n\n            /**\n             * close the dialog\n             * @method ax5dialog.close\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.close();\n             * ```\n             */\n            this.close = function (_option) {\n                let opts, that;\n\n                if (this.activeDialog) {\n                    if(this.autoCloseTimer) clearTimeout(this.autoCloseTimer);\n\n                    opts = self.dialogConfig;\n                    this.activeDialog.addClass(\"destroy\");\n                    jQuery(window).unbind(\"keydown.ax5dialog\");\n                    jQuery(window).unbind(\"resize.ax5dialog\");\n\n                    setTimeout((function () {\n                        if (this.activeDialog) {\n                            this.activeDialog.remove();\n                            this.activeDialog = null;\n                        }\n\n                        that = {\n                            self: this,\n                            state: \"close\",\n                            dialogId: opts.id\n                        };\n\n                        if (opts.callback && (!_option || !_option.doNotCallback)) {\n                            opts.callback.call(that);\n                        }\n\n                        if (opts && opts.onStateChanged) {\n                            opts.onStateChanged.call(that, that);\n                        }\n                        else if (this.onStateChanged) {\n                            this.onStateChanged.call(that, that);\n                        }\n\n                        opts = null;\n                        that = null;\n                    }).bind(this), cfg.animateTime);\n                }\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.dialog_instance = UI.dialog_instance || [];\n                UI.dialog_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n        return ax5dialog;\n    })());\n\n    DIALOG = ax5.ui.dialog;\n})();\n","// ax5.ui.dialog.tmpl\n(function () {\n\n    var DIALOG = ax5.ui.dialog;\n\n    var dialogDisplay = function(columnKeys) {\n        return ` \n        <div id=\"{{dialogId}}\" data-dialog-els=\"root\" class=\"ax5-ui-dialog {{theme}}\">\n            <div class=\"ax-dialog-header\" data-dialog-els=\"header\">\n                {{{title}}}\n            </div>\n            <div class=\"ax-dialog-body\" data-dialog-els=\"body\">\n                <div class=\"ax-dialog-msg\">{{{msg}}}</div>\n                \n                {{#input}}\n                <div class=\"ax-dialog-prompt\">\n                    {{#@each}}\n                    <div class=\"form-group\">\n                    {{#@value.label}}\n                    <label>{{#_crlf}}{{{.}}}{{/_crlf}}</label>\n                    {{/@value.label}}\n                    <input type=\"{{@value.type}}\" placeholder=\"{{@value.placeholder}}\" class=\"form-control {{@value.theme}}\" data-dialog-prompt=\"{{@key}}\" style=\"width:100%;\" value=\"{{@value.value}}\" />\n                    {{#@value.help}}\n                    <p class=\"help-block\">{{#_crlf}}{{.}}{{/_crlf}}</p>\n                    {{/@value.help}}\n                    </div>\n                    {{/@each}}\n                </div>\n                {{/input}}\n                \n                <div class=\"ax-dialog-buttons\" data-dialog-els=\"buttons\">\n                    <div class=\"ax-button-wrap\">\n                    {{#btns}}\n                        {{#@each}}\n                        <button type=\"button\" data-dialog-btn=\"{{@key}}\" class=\"btn btn-{{@value.theme}}\">{{@value.label}}</button>\n                        {{/@each}}\n                    {{/btns}}\n                    </div>\n                </div>\n                \n                {{#additionalContent}}\n                <div data-dialog-els=\"additional-content\">{{{.}}}</div>\n                {{/additionalContent}}\n            </div>\n        </div>  \n        `;\n    };\n\n    DIALOG.tmpl = {\n        \"dialogDisplay\": dialogDisplay,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DIALOG.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}