{"version":3,"sources":["ax5dialog.js","ax5dialog-tmpl.js"],"names":["UI","ax5","ui","U","util","DIALOG","addClass","className","ax5dialog","self","this","cfg","instanceId","getGuid","config","id","clickEventName","theme","width","title","msg","lang","ok","cancel","animateTime","autoCloseTime","activeDialog","autoCloseTimer","queue","onStateChanged","opts","that","call","getContent","dialogId","data","replace","input","btns","_crlf","additionalContent","isFunction","tmpl","get","open","callback","pos","box","jQuery","document","body","append","dialogConfig","css","height","position","top","window","left","zIndex","dialogType","find","focus","on","e","btnOnClick","event","bind","onKeyup","align","state","setTimeout","close","innerHeight","innerWidth","target","k","emptyKey","srcElement","findParentNode","getAttribute","key","value","btnTarget","oi","val","required","onClick","doNotCallback","keyCode","info","eventKeys","ESC","RETURN","init","alert","tryCount","isString","extend","label","push","confirm","prompt","_option","clearTimeout","unbind","remove","length","shift","main","dialog_instance","arguments","isObject","setConfig","apply","dialog","dialogDisplay","columnKeys","tmplName","mustache","render"],"mappings":"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","file":"ax5dialog.min.js","sourcesContent":["// ax5.ui.dialog\n(function () {\n\n    let UI = ax5.ui;\n    let U = ax5.util;\n    let DIALOG;\n\n    UI.addClass({\n        className: \"dialog\"\n    }, (function () {\n        /**\n         * @class ax5dialog\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * var dialog = new ax5.ui.dialog();\n         * var mask = new ax5.ui.mask();\n         * dialog.setConfig({\n         *     zIndex: 5000,\n         *     onStateChanged: function () {\n         *         if (this.state === \"open\") {\n         *             mask.open();\n         *         }\n         *         else if (this.state === \"close\") {\n         *             mask.close();\n         *         }\n         *     }\n         * });\n         *\n         * dialog.alert({\n         *     theme: 'default',\n         *     title: 'Alert default',\n         *     msg: theme + ' color'\n         * }, function () {\n         *     console.log(this);\n         * });\n         * ```\n         */\n        let ax5dialog = function () {\n            let self = this, cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                id: 'ax5-dialog-' + this.instanceId,\n                clickEventName: \"click\", //(('ontouchstart' in document.documentElement) ? \"touchend\" : \"click\"),\n                theme: 'default',\n                width: 300,\n                title: '',\n                msg: '',\n                lang: {\n                    \"ok\": \"ok\", \"cancel\": \"cancel\"\n                },\n                animateTime: 150,\n                autoCloseTime: 0\n            };\n            this.activeDialog = null;\n            this.autoCloseTimer = null;\n            this.queue = [];\n\n            cfg = this.config;\n\n            const onStateChanged = function (opts, that) {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n                return true;\n            };\n            /**\n             * @private ax5dialog.getContent\n             * @param {String} dialogId\n             * @param {Object} opts\n             * @returns dialogDisplay\n             */\n            const getContent = function (dialogId, opts) {\n\n                let data = {\n                    dialogId: dialogId,\n                    title: (opts.title || cfg.title || \"\"),\n                    msg: (opts.msg || cfg.msg || \"\").replace(/\\n/g, \"<br/>\"),\n                    input: opts.input,\n                    btns: opts.btns,\n                    '_crlf': function () {\n                        return this.replace(/\\n/g, \"<br/>\");\n                    },\n                    additionalContent: (function (additionalContent) {\n                        if (U.isFunction(additionalContent)) {\n                            return additionalContent.call(opts);\n                        }\n                        else {\n                            return additionalContent;\n                        }\n                    })(opts.additionalContent)\n                };\n\n                try {\n                    return DIALOG.tmpl.get.call(this, \"dialogDisplay\", data);\n                }\n                finally {\n                    data = null;\n                }\n            };\n            /**\n             * @private ax5dialog.open\n             * @param {Object} opts\n             * @param callback\n             */\n            const open = function (opts, callback) {\n                let pos = {}, box;\n\n                opts.id = (opts.id || cfg.id);\n\n                box = {\n                    width: opts.width\n                };\n                jQuery(document.body).append(getContent.call(this, opts.id, opts));\n\n                this.dialogConfig = opts;\n                this.activeDialog = jQuery('#' + opts.id);\n                this.activeDialog.css({width: box.width});\n\n                if (typeof callback === \"undefined\") {\n                    callback = opts.callback;\n                }\n\n                // dialog 높이 구하기 - 너비가 정해지면 높이가 변경 될 것.\n                opts.height = box.height = this.activeDialog.height();\n\n                //- position 정렬\n                if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n                    pos.top = jQuery(window).height() / 2 - box.height / 2;\n                    pos.left = jQuery(window).width() / 2 - box.width / 2;\n                }\n                else {\n                    pos.left = opts.position.left || 0;\n                    pos.top = opts.position.top || 0;\n                }\n                if (cfg.zIndex) {\n                    pos[\"z-index\"] = cfg.zIndex;\n                }\n                this.activeDialog.css(pos);\n\n                // bind button event\n                if (opts.dialogType === \"prompt\") {\n                    this.activeDialog.find(\"[data-dialog-prompt]\").get(0).focus();\n                }\n                else {\n                    this.activeDialog.find(\"[data-dialog-btn]\").get(0).focus();\n                }\n\n                this.activeDialog.find(\"[data-dialog-btn]\").on(cfg.clickEventName, (function (e) {\n                    btnOnClick.call(this, e || window.event, opts, callback);\n                }).bind(this));\n\n                // bind key event\n                jQuery(window).bind(\"keydown.ax5dialog\", (function (e) {\n                    onKeyup.call(this, e || window.event, opts, callback);\n                }).bind(this));\n\n                jQuery(window).bind(\"resize.ax5dialog\", (function (e) {\n                    align.call(this, e || window.event);\n                }).bind(this));\n\n                onStateChanged.call(this, opts, {\n                    self: this,\n                    state: \"open\"\n                });\n\n                if (opts.autoCloseTime) {\n                    this.autoCloseTimer = setTimeout(function () {\n                        self.close();\n                    }, opts.autoCloseTime);\n                }\n\n                pos = null;\n                box = null;\n            };\n            const align = function (e) {\n                if (!this.activeDialog) return this;\n                let opts = self.dialogConfig,\n                    box = {\n                        width: opts.width,\n                        height: opts.height\n                    };\n\n                //- position 정렬\n                if (typeof opts.position === \"undefined\" || opts.position === \"center\") {\n                    box.top = window.innerHeight / 2 - box.height / 2;\n                    box.left = window.innerWidth / 2 - box.width / 2;\n                }\n                else {\n                    box.left = opts.position.left || 0;\n                    box.top = opts.position.top || 0;\n                }\n                if (box.left < 0) box.left = 0;\n                if (box.top < 0) box.top = 0;\n\n                this.activeDialog.css(box);\n\n                opts = null;\n                box = null;\n\n                return this;\n            };\n            const btnOnClick = function (e, opts, callback, target, k) {\n                let that,\n                    emptyKey = null;\n\n                if (e.srcElement) e.target = e.srcElement;\n\n                target = U.findParentNode(e.target, function (target) {\n                    if (target.getAttribute(\"data-dialog-btn\")) {\n                        return true;\n                    }\n                });\n\n                if (target) {\n                    k = target.getAttribute(\"data-dialog-btn\");\n\n                    that = {\n                        self: this,\n                        key: k, value: opts.btns[k],\n                        dialogId: opts.id,\n                        btnTarget: target\n                    };\n                    if (opts.dialogType === \"prompt\") {\n                        that.input = {};\n                        for (let oi in opts.input) {\n                            that.input[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                            if (opts.input[oi].required && (that.input[oi] == \"\" || that.input[oi] == null)) {\n                                emptyKey = oi;\n                                break;\n                            }\n                        }\n                    }\n                    if (opts.btns[k].onClick) {\n                        opts.btns[k].onClick.call(that, k);\n                    }\n                    else if (opts.dialogType === \"alert\") {\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                    else if (opts.dialogType === \"confirm\") {\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                    else if (opts.dialogType === \"prompt\") {\n                        if (k === 'ok') {\n                            if (emptyKey) {\n                                this.activeDialog.find('[data-dialog-prompt=\"' + emptyKey + '\"]').get(0).focus();\n                                return false;\n                            }\n                        }\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                }\n\n                that = null;\n                opts = null;\n                callback = null;\n                target = null;\n                k = null;\n            };\n            const onKeyup = function (e, opts, callback, target, k) {\n                let that,\n                    emptyKey = null;\n\n                if (e.keyCode == ax5.info.eventKeys.ESC) {\n                    this.close();\n                }\n                if (opts.dialogType === \"prompt\") {\n                    if (e.keyCode == ax5.info.eventKeys.RETURN) {\n                        that = {\n                            self: this,\n                            key: k, value: opts.btns[k],\n                            dialogId: opts.id,\n                            btnTarget: target\n                        };\n                        that.input = {};\n\n                        for (let oi in opts.input) {\n                            that.input[oi] = this.activeDialog.find('[data-dialog-prompt=' + oi + ']').val();\n                            if (opts.input[oi].required && (that.input[oi] == \"\" || that.input[oi] == null)) {\n                                emptyKey = oi;\n                                break;\n                            }\n                        }\n                        if (emptyKey) {\n                            that = null;\n                            emptyKey = null;\n                            return false;\n                        }\n                        if (callback) callback.call(that, k);\n                        this.close({doNotCallback: true});\n                    }\n                }\n\n                that = null;\n                emptyKey = null;\n                opts = null;\n                callback = null;\n                target = null;\n                k = null;\n            };\n\n            /**\n             * Preferences of dialog UI\n             * @method ax5dialog.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged] - `onStateChanged` function can be defined in setConfig method or new ax5.ui.dialog initialization method. However, you can us to define an\n             * event function after initialization, if necessary\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * var dialog = new ax5.ui.dialog();\n             * dialog.setConfig({\n             *      title: \"app dialog title\",\n             *      zIndex: 5000,\n             *      onStateChanged: function () {\n             *          if (this.state === \"open\") {\n             *              mask.open();\n             *          }\n             *          else if (this.state === \"close\") {\n             *              mask.close();\n             *          }\n             *      }\n             * });\n             * ```\n             */\n            //== class body start\n            this.init = function () {\n                this.onStateChanged = cfg.onStateChanged;\n                // this.onLoad = cfg.onLoad;\n\n            };\n\n            /**\n             * open the dialog of alert type\n             * @method ax5dialog.alert\n             * @param {Object|String} config - dialog 속성을 json으로 정의하거나 msg만 전달\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged]\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @param {Function|String} [config.additionalContent]\n             * @param {Function} [callback] - 사용자 확인 이벤트시 호출될 callback 함수\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.alert({\n             *  title: 'app title',\n             *  msg: 'alert'\n             * }, function(){});\n             * ```\n             */\n            this.alert = function (opts, callback, tryCount) {\n                if (U.isString(opts)) {\n                    opts = {\n                        title: cfg.title,\n                        msg: opts\n                    }\n                }\n\n                opts = jQuery.extend(true, {}, cfg, opts);\n                opts.dialogType = \"alert\";\n                opts.theme = (opts.theme || cfg.theme || \"\");\n                opts.callback = callback;\n\n                if (typeof opts.btns === \"undefined\") {\n                    opts.btns = {\n                        ok: {label: cfg.lang[\"ok\"], theme: opts.theme}\n                    };\n                }\n\n                if (this.activeDialog) {\n                    this.queue.push(opts);\n                } else {\n                    open.call(this, opts, callback);\n                }\n                return this;\n            };\n\n            /**\n             * open the dialog of confirm type\n             * @method ax5dialog.confirm\n             * @param {Object|String} config - dialog 속성을 json으로 정의하거나 msg만 전달\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged]\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @param {Function|String} [config.additionalContent]\n             * @param {Function} [callback] - 사용자 확인 이벤트시 호출될 callback 함수\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.confirm({\n             *      title: 'app title',\n             *      msg: 'confirm',\n             *      additionalContent: function () {\n             *          return \"<div style='border:1px solid #ccc;border-radius: 5px;background: #eee;padding: 10px;'>추가정보</div>\";\n             *      }\n             * }, function(){});\n             * ```\n             */\n            this.confirm = function (opts, callback, tryCount) {\n                if (U.isString(opts)) {\n                    opts = {\n                        title: cfg.title,\n                        msg: opts\n                    }\n                }\n\n                opts = jQuery.extend(true, {}, cfg, opts);\n                opts.dialogType = \"confirm\";\n                opts.theme = (opts.theme || cfg.theme || \"\");\n                opts.callback = callback;\n\n                if (typeof opts.btns === \"undefined\") {\n                    opts.btns = {\n                        ok: {label: cfg.lang[\"ok\"], theme: opts.theme},\n                        cancel: {label: cfg.lang[\"cancel\"]}\n                    };\n                }\n\n                if (this.activeDialog) {\n                    this.queue.push(opts);\n                } else {\n                    open.call(this, opts, callback);\n                }\n\n                return this;\n            };\n\n            /**\n             * open the dialog of prompt type\n             * @method ax5dialog.prompt\n             * @param {Object|String} config - dialog 속성을 json으로 정의하거나 msg만 전달\n             * @param {String} [config.theme=\"default\"]\n             * @param {Number} [config.width=300]\n             * @param {String} [config.title=\"\"]\n             * @param {Number} [config.zIndex]\n             * @param {Function} [config.onStateChanged]\n             * @param {Object} [config.lang]\n             * @param {String} [config.lang.ok=\"ok\"]\n             * @param {String} [config.lang.cancel=\"cancel\"]\n             * @param {Number} [config.animateTime=150]\n             * @param {Number} [config.autoCloseTime=0] - 0보다 크면 autoCloseTime 프레임후에 dialog auto close\n             * @param {Function|String} [config.additionalContent]\n             * @param {Function} [callback] - 사용자 확인 이벤트시 호출될 callback 함수\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.prompt({\n             *  title: 'app title',\n             *  msg: 'alert'\n             * }, function(){});\n             * ```\n             */\n            this.prompt = function (opts, callback, tryCount) {\n                if (U.isString(opts)) {\n                    opts = {\n                        title: cfg.title,\n                        msg: opts\n                    }\n                }\n\n                opts = jQuery.extend(true, {}, cfg, opts);\n                opts.dialogType = \"prompt\";\n                opts.theme = (opts.theme || cfg.theme || \"\");\n                opts.callback = callback;\n\n                if (typeof opts.input === \"undefined\") {\n                    opts.input = {\n                        value: {label: \"\"}\n                    };\n                }\n                if (typeof opts.btns === \"undefined\") {\n                    opts.btns = {\n                        ok: {label: cfg.lang[\"ok\"], theme: opts.theme},\n                        cancel: {label: cfg.lang[\"cancel\"]}\n                    };\n                }\n\n                if (this.activeDialog) {\n                    this.queue.push(opts);\n                } else {\n                    open.call(this, opts, callback);\n                }\n\n                return this;\n            };\n\n            /**\n             * close the dialog\n             * @method ax5dialog.close\n             * @returns {ax5dialog}\n             * @example\n             * ```\n             * myDialog.close();\n             * ```\n             */\n            this.close = function (_option) {\n                let opts, that;\n\n                if (this.activeDialog) {\n                    if (this.autoCloseTimer) clearTimeout(this.autoCloseTimer);\n\n                    opts = self.dialogConfig;\n\n                    this.activeDialog.addClass(\"destroy\");\n                    jQuery(window).unbind(\"keydown.ax5dialog\");\n                    jQuery(window).unbind(\"resize.ax5dialog\");\n\n                    setTimeout((function () {\n                        if (this.activeDialog) {\n                            this.activeDialog.remove();\n                            this.activeDialog = null;\n                        }\n\n                        that = {\n                            self: this,\n                            state: \"close\",\n                            dialogId: opts.id\n                        };\n\n                        if (opts.callback && (!_option || !_option.doNotCallback)) {\n                            opts.callback.call(that);\n                        }\n\n                        if (opts && opts.onStateChanged) {\n                            opts.onStateChanged.call(that, that);\n                        }\n                        else if (this.onStateChanged) {\n                            this.onStateChanged.call(that, that);\n                        }\n\n                        if (this.queue && this.queue.length) {\n                            open.call(this, this.queue.shift());\n                        }\n\n                        opts = null;\n                        that = null;\n                    }).bind(this), cfg.animateTime);\n                }\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.dialog_instance = UI.dialog_instance || [];\n                UI.dialog_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n        return ax5dialog;\n    })());\n\n    DIALOG = ax5.ui.dialog;\n})();\n","// ax5.ui.dialog.tmpl\n(function () {\n\n    var DIALOG = ax5.ui.dialog;\n\n    var dialogDisplay = function(columnKeys) {\n        return ` \n        <div id=\"{{dialogId}}\" data-dialog-els=\"root\" class=\"ax5-ui-dialog {{theme}}\">\n            <div class=\"ax-dialog-header\" data-dialog-els=\"header\">\n                {{{title}}}\n            </div>\n            <div class=\"ax-dialog-body\" data-dialog-els=\"body\">\n                <div class=\"ax-dialog-msg\">{{{msg}}}</div>\n                \n                {{#input}}\n                <div class=\"ax-dialog-prompt\">\n                    {{#@each}}\n                    <div class=\"form-group\">\n                    {{#@value.label}}\n                    <label>{{#_crlf}}{{{.}}}{{/_crlf}}</label>\n                    {{/@value.label}}\n                    <input type=\"{{@value.type}}\" placeholder=\"{{@value.placeholder}}\" class=\"form-control {{@value.theme}}\" data-dialog-prompt=\"{{@key}}\" style=\"width:100%;\" value=\"{{@value.value}}\" />\n                    {{#@value.help}}\n                    <p class=\"help-block\">{{#_crlf}}{{.}}{{/_crlf}}</p>\n                    {{/@value.help}}\n                    </div>\n                    {{/@each}}\n                </div>\n                {{/input}}\n                \n                <div class=\"ax-dialog-buttons\" data-dialog-els=\"buttons\">\n                    <div class=\"ax-button-wrap\">\n                    {{#btns}}\n                        {{#@each}}\n                        <button type=\"button\" data-dialog-btn=\"{{@key}}\" class=\"btn btn-{{@value.theme}}\">{{@value.label}}</button>\n                        {{/@each}}\n                    {{/btns}}\n                    </div>\n                </div>\n                \n                {{#additionalContent}}\n                <div data-dialog-els=\"additional-content\">{{{.}}}</div>\n                {{/additionalContent}}\n            </div>\n        </div>  \n        `;\n    };\n\n    DIALOG.tmpl = {\n        \"dialogDisplay\": dialogDisplay,\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(DIALOG.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}