{"version":3,"sources":["ax5palette.js","ax5palette-tmpl.js"],"names":["UI","ax5","ui","U","util","PALETTE","addClass","className","_this","this","self","cfg","instanceId","getGuid","target","config","clickEventName","theme","animateTime","colors","preview","width","height","cellWidth","label","slider","trackHeight","amount","handleWidth","handleHeight","list","value","controls","columnKeys","xvar","getMousePosition","e","mouseObj","originalEvent","changedTouches","clientX","pageX","clientY","pageY","bindHandle","item","originalTrackWidth","$track","trackWidth","handleLeft","_amount","$handle","css","left","$item","off","on","_originalHandleClientX","_originalHandleLeft","position","handleMoveEvent","onClick","call","_selectedColor","toUpperCase","updatePreviewColor","color","$preview","background-color","$label","html","onUpdateColor","amountToColor","processor","black","_color","lighten","darken","getHexValue","white","normal","_uniqColor","jQuery","document","body","da","newHandleLeft","stopEvent","attr","resizerLived","removeAttr","repaint","$target","innerWidth","innerHeight","tmpl","get","$","root","find","forEach","c","r","g","b","_color0value","_color1value","_color2value","handleTop","each","idx","getAttribute","extend","_index","push","init","onStateChanged","console","log","info","getError","setTimeout","main","palette_instance","arguments","isObject","setConfig","apply","palette","tmpl_frame","tmpl_colors","frame","tmplName","data","mustache","render"],"mappings":"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","file":"ax5palette.min.js","sourcesContent":["// ax5.ui.palette\n(function () {\n\n    const UI = ax5.ui;\n    const U = ax5.util;\n    let PALETTE;\n\n    UI.addClass({\n        className: \"palette\"\n    }, (function () {\n\n        /**\n         * @class ax5palette\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * ```\n         */\n        return function () {\n            let self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.target = null;\n            this.config = {\n                clickEventName: \"click\",\n                theme: 'default',\n                animateTime: 100,\n                colors: {\n                    preview: {\n                        width: 24,\n                        height: 24,\n                        cellWidth: 30\n                    },\n                    label: {\n                       width: 80\n                    },\n                    slider: {\n                        trackHeight: 8,\n                        amount: 32,\n                        handleWidth: 18,\n                        handleHeight: 18,\n                    },\n                    list: [\n                        {label: \"red\", value: \"#ff0000\"},\n                        {label: \"orange\", value: \"#ff9802\"},\n                        {label: \"yellow\", value: \"#ffff00\"},\n                        {label: \"green\", value: \"#00ff36\"},\n                        {label: \"blue\", value: \"#0000ff\"},\n                        {label: \"purple\", value: \"#ba00ff\"},\n                        //{label: \"skyblue\", value: \"#84e4ff\"},\n                        //{label: \"pink\", value: \"#ff77c4\"},\n                        {label: \"black\", value: \"#000000\"},\n                        {label: \"white\", value: \"#ffffff\"},\n                    ],\n                },\n                controls: {\n                    height: 0,\n                },\n                columnKeys: {}\n            };\n            this.xvar = {};\n            this.colors = [];\n\n            cfg = this.config;\n\n            const onStateChanged = (opts, that) => {\n                if (opts && opts.onStateChanged) {\n                    opts.onStateChanged.call(that, that);\n                }\n                else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                that = null;\n            };\n\n            /**\n             * get mouse position\n             * @param e\n             * @returns {{clientX, clientY}}\n             */\n            const getMousePosition = (e) => {\n                let mouseObj, originalEvent = (e.originalEvent) ? e.originalEvent : e;\n                mouseObj = ('changedTouches' in originalEvent && originalEvent.changedTouches) ? originalEvent.changedTouches[0] : originalEvent;\n                // clientX, Y 쓰면 스크롤에서 문제 발생\n                return {\n                    clientX: mouseObj.pageX,\n                    clientY: mouseObj.pageY\n                }\n            };\n\n            const bindHandle = (item) => {\n                item.originalTrackWidth = item.$track.width();\n                item.trackWidth = item.originalTrackWidth - (cfg.colors.slider.handleWidth / 5);\n                let handleLeft = (item._amount * (item.trackWidth / 2) / cfg.colors.slider.amount) + (item.trackWidth / 2);\n                item.$handle.css({left: handleLeft});\n                item.$item\n                    .off(\"mousedown\")\n                    .on(\"mousedown\", '[data-panel=\"color-handle\"]', function (e) {\n                        let mouseObj = getMousePosition(e);\n                        item._originalHandleClientX = mouseObj.clientX;\n                        item._originalHandleLeft = item.$handle.position().left;\n                        handleMoveEvent.on(item);\n                    })\n                    .off(\"click\")\n                    .on(\"click\", '[data-panel=\"color-label\"], [data-panel=\"color-preview\"]', function (e) {\n                        //jQuery(this).parent().attr();\n                        if(self.onClick){\n                            self.onClick.call(item, '#' + item._selectedColor.toUpperCase());\n                        }\n                    });\n            };\n\n            const updatePreviewColor = (item, color) => {\n                //console.log(color);\n                item.$preview\n                    .css({\"background-color\": '#' + color});\n                item.$label.html('#' + color.toUpperCase());\n                item._selectedColor = color;\n\n                if(self.onUpdateColor){\n                    self.onUpdateColor.call(item, '#' + item._selectedColor.toUpperCase());\n                }\n            };\n\n            const amountToColor = (item, amount) => {\n                let processor = {\n                    \"black\"(_color, _amount){\n                        return _color.lighten(cfg.colors.slider.amount / 2).darken(_amount).getHexValue();\n                    },\n                    \"white\"(_color, _amount){\n                        return _color.darken(cfg.colors.slider.amount / 2).darken(_amount).getHexValue();\n                    },\n                    \"normal\"(_color, _amount){\n                        return _color.darken(_amount).getHexValue();\n                    }\n                };\n\n                if (item._uniqColor in processor) {\n                    return processor[item._uniqColor](item._color, amount);\n                } else {\n                    return processor[\"normal\"](item._color, amount);\n                }\n            };\n\n            const colorToAmount = (item, color) => {\n                /// todo : 색상에 가까운 색 표현.\n                let processor = {\n                    \"black\"(_color, _diffColor){\n                        //return _color.lighten(cfg.colors.slider.amount / 2).darken(_amount).getHexValue();\n                    },\n                    \"white\"(_color, _diffColor){\n                        //return _color.darken(cfg.colors.slider.amount / 2).darken(_amount).getHexValue();\n                    },\n                    \"normal\"(_color, _diffColor){\n                        //return _color.darken(_amount).getHexValue();\n                    }\n                };\n\n                if (item._uniqColor in processor) {\n                    return processor[item._uniqColor](item._color, color);\n                } else {\n                    return processor[\"normal\"](item._color, color);\n                }\n            };\n\n            const handleMoveEvent = {\n                \"on\": (item) => {\n                    jQuery(document.body)\n                        .on(\"mousemove.ax5palette-\" + this.instanceId, function (e) {\n                            let mouseObj = getMousePosition(e),\n                                da = mouseObj.clientX - item._originalHandleClientX,\n                                newHandleLeft = item._originalHandleLeft + da,\n                                amount;\n\n                            newHandleLeft = newHandleLeft < 0 ? 0 : newHandleLeft > item.trackWidth ? item.trackWidth : newHandleLeft;\n                            item.$handle.css({left: newHandleLeft});\n                            amount = cfg.colors.slider.amount * (newHandleLeft - (item.originalTrackWidth / 2)) / (item.trackWidth / 2);\n\n                            updatePreviewColor(item, amountToColor(item, amount));\n                            \n                            mouseObj = null;\n                            da = null;\n                        })\n                        .on(\"mouseup.ax5palette-\" + this.instanceId, function (e) {\n                            handleMoveEvent.off();\n                            U.stopEvent(e);\n                        })\n                        .on(\"mouseleave.ax5palette-\" + this.instanceId, function (e) {\n                            handleMoveEvent.off();\n                            U.stopEvent(e);\n                        });\n\n                    jQuery(document.body)\n                        .attr('unselectable', 'on')\n                        .css('user-select', 'none')\n                        .on('selectstart', false);\n                },\n                \"off\": () => {\n                    self.xvar.resizerLived = false;\n\n                    jQuery(document.body)\n                        .off(\"mousemove.ax5palette-\" + this.instanceId)\n                        .off(\"mouseup.ax5palette-\" + this.instanceId)\n                        .off(\"mouseleave.ax5palette-\" + this.instanceId);\n\n                    jQuery(document.body)\n                        .removeAttr('unselectable')\n                        .css('user-select', 'auto')\n                        .off('selectstart');\n                }\n            };\n\n            const repaint = () => {\n                let box = {\n                    width: this.$target.innerWidth(),\n                    height: this.$target.innerHeight(),\n                };\n\n                // 패널 프레임 초기화\n                this.$target.html(PALETTE.tmpl.get(\"frame\", {}, cfg.columnKeys));\n\n                // 각 패널들을 캐싱~\n                this.$ = {\n                    \"root\": this.$target.find('[data-ax5palette-container=\"root\"]'),\n                    \"colors\": this.$target.find('[data-ax5palette-container=\"colors\"]'),\n                    \"controls\": this.$target.find('[data-ax5palette-container=\"controls\"]'),\n                };\n\n                //this.$[\"colors\"].css({height: box.height - cfg.controls.height});\n                //this.xvar.colorHeight = (box.height - cfg.controls.height) / cfg.colors.length;\n\n                this.$[\"controls\"].css({height: cfg.controls.height});\n\n                /// colors.list 색상 범위 결정\n                cfg.colors.list.forEach(function (c) {\n                    c._color = U.color(c.value);\n                    c._selectedColor = c._color.getHexValue();\n                    if (c._color.r == 0 && c._color.g == 0 && c._color.b == 0) {\n                        c._amount = cfg.colors.slider.amount;\n                        c._uniqColor = \"black\";\n                        c._color0value = \"#\" + c._color.lighten(cfg.colors.slider.amount).getHexValue();\n                        c._color1value = \"#\" + c._color.lighten(cfg.colors.slider.amount / 2).getHexValue();\n                        c._color2value = \"#\" + c._color.getHexValue();\n                    } else if (c._color.r == 255 && c._color.g == 255 && c._color.b == 255) {\n                        c._amount = -cfg.colors.slider.amount;\n                        c._uniqColor = \"white\";\n                        c._color0value = \"#\" + c._color.getHexValue();\n                        c._color1value = \"#\" + c._color.darken(cfg.colors.slider.amount / 2).getHexValue();\n                        c._color2value = \"#\" + c._color.darken(cfg.colors.slider.amount).getHexValue();\n                    } else {\n                        c._amount = 0;\n                        c._color0value = \"#\" + c._color.lighten(cfg.colors.slider.amount).getHexValue();\n                        c._color1value = \"#\" + c._color.getHexValue();\n                        c._color2value = \"#\" + c._color.darken(cfg.colors.slider.amount).getHexValue();\n                    }\n                });\n\n                cfg.colors.slider.handleLeft = -cfg.colors.slider.handleWidth / 2;\n                cfg.colors.slider.handleTop = -cfg.colors.slider.handleHeight / 2;\n\n                // 팔렛트 컬러 패널 초기화\n                this.$[\"colors\"].html(PALETTE.tmpl.get(\"colors\", cfg, cfg.columnKeys));\n\n                this.$[\"colors\"].find('[data-ax5palette-color-index]').each(function () {\n                    let idx = this.getAttribute(\"data-ax5palette-color-index\");\n                    let color = cfg.colors.list[idx];\n                    let item = jQuery.extend({}, color);\n                    item._index = idx;\n                    item.$item = jQuery(this);\n                    item.$preview = item.$item.find('[data-panel=\"color\"]');\n                    item.$label = item.$item.find('[data-panel=\"color-label\"]');\n                    item.$track = item.$item.find('[data-panel=\"color-track\"]');\n                    item.$handle = item.$item.find('[data-panel=\"color-handle\"]');\n                    bindHandle(item);\n                    /////\n                    self.colors.push(item);\n                });\n\n                //console.log(box);\n            };\n\n            /**\n             * Preferences of palette UI\n             * @method ax5palette.setConfig\n             * @param {Object} config\n             * @param {Element} config.target\n             * @param {Object} [config.colors]\n             * @param {Object} [config.colors.preview]\n             * @param {Number} [config.colors.preview.width=24]\n             * @param {Number} [config.colors.preview.height=24]\n             * @param {Number} [config.colors.preview.cellWidth=30]\n             * @param {Object} [config.colors.label]\n             * @param {Number} [config.colors.label.width=80]\n             * @param {Object} [config.colors.slider]\n             * @param {Number} [config.colors.slider.trackHeight=8]\n             * @param {Number} [config.colors.slider.amount=32]\n             * @param {Number} [config.colors.slider.handleWidth=18]\n             * @param {Number} [config.colors.slider.handleHeight=18]\n             * @param {Object[]} [config.colors.list=[red,orange,yellow,green,blue,purple,black,white]]\n             * @param {String} config.colors.list[].label\n             * @param {String} config.colors.list[].value\n             * @param {Object} [config.controls]\n             * @param {Number} [config.controls.height=0]\n             * @returns {ax5palette}\n             * @example\n             * ```js\n             * myPalette = new ax5.ui.palette({\n             *  target: $('[data-ax5palette=\"01\"]'),\n             *  onClick: function (hexColor) {\n             *      alert(hexColor);\n             *  }\n             * });\n             *\n             * myPalette = new ax5.ui.palette({\n             *  target: $('[data-ax5palette=\"01\"]'),\n             *  colors: {\n             *      list: [\n             *          {label: \"red\", value: \"#ff0000\"},\n             *          {label: \"orange\", value: \"#ff9802\"},\n             *          {label: \"yellow\", value: \"#ffff00\"},\n             *          {label: \"skyblue\", value: \"#84e4ff\"},\n             *          {label: \"white\", value: \"#ffffff\"}\n             *      ]\n             *  }\n             *  onClick: function (hexColor) {\n             *  }\n             * });\n             * ```\n             */\n            //== class body start\n            this.init = function () {\n                // after setConfig();\n                this.onStateChanged = cfg.onStateChanged;\n                this.onClick = cfg.onClick;\n                this.onUpdateColor = cfg.onUpdateColor;\n\n                if (!cfg.target) {\n                    console.log(ax5.info.getError(\"ax5palette\", \"401\", \"setConfig\"));\n                }\n                this.$target = jQuery(cfg.target);\n\n                setTimeout(function () {\n                    repaint(); // 팔렛트 그리기.\n                });\n            };\n\n            this.repaint = function () {\n                repaint();\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n\n                UI.palette_instance = UI.palette_instance || [];\n                UI.palette_instance.push(this);\n\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n            }).apply(this, arguments);\n        };\n    })());\n\n    PALETTE = ax5.ui.palette;\n})();","// ax5.ui.calendar.tmpl\n(function () {\n\n    const PALETTE = ax5.ui.palette;\n\n    const tmpl_frame = function (columnKeys) {\n        return `\n<div data-ax5palette-container=\"root\">\n    <div data-ax5palette-container=\"colors\"></div>\n    <div data-ax5palette-container=\"controls\"></div>\n</div>\n`;\n    };\n\n    const tmpl_colors = function (columnKeys) {\n        return `\n{{#colors}}\n{{#list}}\n<div data-ax5palette-color=\"{{label}}\" data-ax5palette-color-index=\"{{@i}}\">\n    <div data-panel=\"color-preview\" style=\"padding:{{preview.cellPadding}}px;width:{{preview.cellWidth}}px;\">\n        <div data-panel=\"color-box\" style=\"width:{{preview.width}}px;height:{{preview.height}}px;\"><div data-panel=\"color\" style=\"background-color:{{value}};\"></div></div>\n    </div>\n    <div data-panel=\"color-label\" style=\"width:{{label.width}}px;\">{{label}}</div>\n    <div data-panel=\"color-slider\">\n        <div data-panel=\"color-track\" style=\"height:{{slider.trackHeight}}px;background: linear-gradient(90deg, {{_color0value}}, {{_color1value}}, {{_color2value}}); \">\n            <div data-panel=\"color-handle\">\n                <div data-panel=\"color-handle-after\" style=\"width:{{slider.handleWidth}}px;height:{{slider.handleWidth}}px;left:{{slider.handleLeft}}px;top:{{slider.handleLeft}}px;\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n{{/list}}\n{{/colors}}\n`;\n    };\n\n\n    PALETTE.tmpl = {\n        \"frame\": tmpl_frame,\n        \"colors\": tmpl_colors,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(PALETTE.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n\n})();"]}