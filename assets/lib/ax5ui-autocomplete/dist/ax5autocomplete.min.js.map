{"version":3,"sources":["ax5autocomplete.min.js","ax5autocomplete.js","ax5autocomplete-tmpl.js"],"names":["AUTOCOMPLETE","UI","ax5","ui","U","util","addClass","className","version","ax5autocomplete","cfg","self","this","instanceId","getGuid","config","theme","animateTime","removeIcon","lang","noSelected","noOptions","loading","columnKeys","optionValue","optionText","optionSelected","queue","activeautocompleteOptionGroup","activeautocompleteQueueIndex","openTimer","closeTimer","waitOptionsCallback","keyUpTimer","$window","jQuery","window","ctrlKeys","18","17","46","40","35","187","36","45","37","189","34","33","39","16","9","38","91","onStateChanged","item","that","call","state","onChange","alignAutocompleteDisplay","w","i","length","$display","Math","max","$select","outerWidth","number","minWidth","css","min-width","reset","find","line-height","height","multiple","displayTableHeightAdjust","$target","displayTableHeight","$displayTable","outerHeight","abs","alignAutocompleteOptionGroup","append","pickerDirection","pos","positionMargin","dim","pickerDim","document","body","offset","width","winWidth","winHeight","direction","top","newTop","left","onBodyClick","e","target","clickEl","findParentNode","getAttribute","get","setSelected","id","optionIndex","index","undefined","close","getLabel","queIdx","data","size","options","selected","hasSelected","tmpl","syncLabel","concat","forEach","n","nindex","html","printLabel","$displayLabel","remove","$displayLabelInput","before","focusLabel","disabled","trigger","focus","clearLabel","val","blurLabel","onSearch","searchWord","regExp","replace","waitOptions","O","optionsMap","_O","_OIndex","isArray","focusWord","setTimeout","bind","collect_options","l","text","toLowerCase","@findex","optionsSort","sort","search","push","a","b","focusMove","focusClear","removeClass","removeAttr","optionFocusIndex","findex","_focusIndex","_prevFocusIndex","focusOptionEl","optionGroupScrollContainer","optionSelectedIndex","optionItemLength","hide","focusOptionElHeight","optionGroupScrollContainerHeight","innerHeight","optionGroupScrollContainerScrollTop","scrollTop","focusOptionElTop","position","getQueIdx","boundID","isString","console","log","info","getError","getSelected","_item","o","clearSelected","optgroup","nn","processor","selectedIndex","value","setValueType","removeSelectedIndex","addOptions","newSelectedArray","@index","pushOk","arr","values","isNumber","key","appendOk","clear","attr","_option","noStateChange","init","bindAutocompleteTarget","debouncedFocusWord","debounce","autocompleteEvent","click","removeIndex","splice","stopEvent","keyUp","which","eventKeys","ESC","TAB","open","BACKSPACE","pop","keyDown","RETURN","inputValue","DOWN","UP","blur","selectChange","name","tabIndex","label","formSize","unbind","off","on","autocompleteConfig","extend","isObject","error","parseJson","tryCount","focusTop","selectedOptionEl","clearTimeout","stop","animate","event","setValue","_boundID","_value","_values","map","setText","_text","getSelectedOption","deepCopy","enable","disable","align","main","arguments","setConfig","apply","autocomplete","autocomplete_instance","fn","methodName","each","defaultConfig","optionGroup","autocompleteDisplay","formSelect","formSelectOptions","tmplName","mustache","render"],"mappings":"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","file":"ax5autocomplete.min.js","sourcesContent":["\"use strict\";\n\n// ax5.ui.autocomplete\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var AUTOCOMPLETE;\n\n    UI.addClass({\n        className: \"autocomplete\",\n        version: \"${VERSION}\"\n    }, function () {\n        /**\n         * @class ax5autocomplete\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * var options = [];\n         * options.push({value: \"1\", text: \"string\"});\n         * options.push({value: \"2\", text: \"number\"});\n         * options.push({value: \"3\", text: \"substr\"});\n         * options.push({value: \"4\", text: \"substring\"});\n         * options.push({value: \"5\", text: \"search\"});\n         * options.push({value: \"6\", text: \"parseInt\"});\n         * options.push({value: \"7\", text: \"toFixed\"});\n         * options.push({value: \"8\", text: \"min\"});\n         * options.push({value: \"9\", text: \"max\"});\n         * options.push({value: \"10\", text: \"장기영\"});\n         * options.push({value: \"11\", text: \"장서우\"});\n         * options.push({value: \"12\", text: \"이영희\"});\n         * options.push({value: \"13\", text: \"황인서\"});\n         * options.push({value: \"14\", text: \"황세진\"});\n         * options.push({value: \"15\", text: \"이서연\"});\n         * options.push({value: \"16\", text: \"액시스제이\"});\n         * options.push({value: \"17\", text: \"ax5\"});\n         * options.push({value: \"18\", text: \"ax5grid\"});\n         * options.push({value: \"19\", text: \"ax5combobox\"});\n         * options.push({value: \"20\", text: \"ax5autocomplete\"});\n         * options.push({value: \"21\", text: \"ax5binder\"});\n         * options.push({value: \"22\", text: \"ax5select\"});\n         * options.push({value: \"23\", text: \"ax5mask\"});\n         * options.push({value: \"24\", text: \"ax5toast\"});\n         * options.push({value: \"25\", text: \"ax5dialog\"});\n         * options.push({value: \"26\", text: \"ax5modal\"});\n          * var myUI = new ax5.ui.autocomplete({\n         *      theme: \"danger\",\n         *      removeIcon: '<i class=\"fa fa-times\" aria-hidden=\"true\"></i>'\n         * });\n         * ```\n         */\n        var ax5autocomplete = function ax5autocomplete() {\n            var self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                removeIcon: 'X',\n                lang: {\n                    noSelected: '',\n                    noOptions: 'no options',\n                    loading: 'Now Processing'\n                },\n                columnKeys: {\n                    optionValue: 'value',\n                    optionText: 'text',\n                    optionSelected: 'selected'\n                }\n            };\n\n            this.queue = [];\n            this.activeautocompleteOptionGroup = null;\n            this.activeautocompleteQueueIndex = -1;\n            this.openTimer = null;\n            this.closeTimer = null;\n            this.waitOptionsCallback = null;\n            this.keyUpTimer = null;\n\n            cfg = this.config;\n\n            var $window = jQuery(window);\n            var ctrlKeys = {\n                \"18\": \"KEY_ALT\",\n                //\"8\": \"KEY_BACKSPACE\",\n                \"17\": \"KEY_CONTROL\",\n                \"46\": \"KEY_DELETE\",\n                \"40\": \"KEY_DOWN\",\n                \"35\": \"KEY_END\",\n                \"187\": \"KEY_EQUAL\",\n                //\"27\": \"KEY_ESC\",\n                \"36\": \"KEY_HOME\",\n                \"45\": \"KEY_INSERT\",\n                \"37\": \"KEY_LEFT\",\n                \"189\": \"KEY_MINUS\",\n                \"34\": \"KEY_PAGEDOWN\",\n                \"33\": \"KEY_PAGEUP\",\n                // \"190\": \"KEY_PERIOD\",\n                //\"13\": \"KEY_RETURN\",\n                \"39\": \"KEY_RIGHT\",\n                \"16\": \"KEY_SHIFT\",\n                // \"32\": \"KEY_SPACE\",\n                \"9\": \"KEY_TAB\",\n                \"38\": \"KEY_UP\",\n                \"91\": \"KEY_WINDOW\"\n                //\"107\" : \"NUMPAD_ADD\",\n                //\"194\" : \"NUMPAD_COMMA\",\n                //\"110\" : \"NUMPAD_DECIMAL\",\n                //\"111\" : \"NUMPAD_DIVIDE\",\n                //\"12\" : \"NUMPAD_EQUAL\",\n                //\"106\" : \"NUMPAD_MULTIPLY\",\n                //\"109\" : \"NUMPAD_SUBTRACT\"\n            },\n                onStateChanged = function onStateChanged(item, that) {\n                if (item && item.onStateChanged) {\n                    item.onStateChanged.call(that, that);\n                } else if (this.onStateChanged) {\n                    this.onStateChanged.call(that, that);\n                }\n\n                if (that.state == \"changeValue\") {\n                    if (item && item.onChange) {\n                        item.onChange.call(that, that);\n                    } else if (this.onChange) {\n                        this.onChange.call(that, that);\n                    }\n                }\n\n                item = null;\n                that = null;\n                return true;\n            },\n                alignAutocompleteDisplay = function alignAutocompleteDisplay() {\n                var i = this.queue.length,\n                    w;\n\n                while (i--) {\n                    var item = this.queue[i];\n                    if (item.$display) {\n                        w = Math.max(item.$select.outerWidth(), U.number(item.minWidth));\n                        item.$display.css({\n                            \"min-width\": w\n                        });\n                        if (item.reset) {\n                            item.$display.find(\".addon-icon-reset\").css({\n                                \"line-height\": this.queue[i].$display.height() + \"px\"\n                            });\n                        }\n\n                        // 높이조절 처리\n                        if (item.multiple) {\n                            var displayTableHeightAdjust = function () {\n                                return U.number(item.$display.css(\"border-top-width\")) + U.number(item.$display.css(\"border-bottom-width\"));\n                            }.call(this);\n                            item.$target.height('');\n                            item.$display.height('');\n\n                            var displayTableHeight = item.$displayTable.outerHeight();\n                            if (Math.abs(displayTableHeight - item.$target.height()) > displayTableHeightAdjust) {\n                                item.$target.css({ height: displayTableHeight + displayTableHeightAdjust + 4 });\n                                item.$display.css({ height: displayTableHeight + displayTableHeightAdjust + 4 });\n                            }\n                        }\n                    }\n                }\n\n                i = null;\n                w = null;\n                return this;\n            },\n                alignAutocompleteOptionGroup = function alignAutocompleteOptionGroup(append) {\n                if (append && !this.activeautocompleteOptionGroup) return this;\n\n                var item = this.queue[this.activeautocompleteQueueIndex],\n                    pos = {},\n                    positionMargin = 0,\n                    dim = {},\n                    pickerDim = {},\n                    pickerDirection;\n\n                if (!item) return this;\n                if (append) jQuery(document.body).append(this.activeautocompleteOptionGroup);\n\n                pos = item.$target.offset();\n                dim = {\n                    width: item.$target.outerWidth(),\n                    height: item.$target.outerHeight()\n                };\n                pickerDim = {\n                    winWidth: Math.max($window.width(), jQuery(document.body).width()),\n                    winHeight: Math.max($window.height(), jQuery(document.body).height()),\n                    width: this.activeautocompleteOptionGroup.outerWidth(),\n                    height: this.activeautocompleteOptionGroup.outerHeight()\n                };\n\n                // picker css(width, left, top) & direction 결정\n                if (!item.direction || item.direction === \"\" || item.direction === \"auto\") {\n                    // set direction\n                    pickerDirection = \"top\";\n\n                    if (pos.top - pickerDim.height - positionMargin < 0) {\n                        pickerDirection = \"top\";\n                    } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                        pickerDirection = \"bottom\";\n                    }\n                } else {\n                    pickerDirection = item.direction;\n                }\n\n                if (append) {\n                    this.activeautocompleteOptionGroup.addClass(\"direction-\" + pickerDirection);\n                }\n                this.activeautocompleteOptionGroup.css(function () {\n                    if (pickerDirection == \"top\") {\n                        if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n\n                            var newTop = pos.top + pickerDim.height;\n                            if (newTop + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                                newTop = 0;\n                            }\n                            if (newTop < 0) {\n                                newTop = 0;\n                            }\n\n                            return {\n                                left: pos.left,\n                                top: newTop,\n                                width: dim.width\n                            };\n                        }\n                        return {\n                            left: pos.left,\n                            top: pos.top + dim.height + 1,\n                            width: dim.width\n                        };\n                    } else if (pickerDirection == \"bottom\") {\n                        return {\n                            left: pos.left,\n                            top: pos.top - pickerDim.height - 1,\n                            width: dim.width\n                        };\n                    }\n                }.call(this));\n            },\n                onBodyClick = function onBodyClick(e, target) {\n                if (!this.activeautocompleteOptionGroup) return this;\n\n                var item = this.queue[this.activeautocompleteQueueIndex],\n                    clickEl = \"display\";\n\n                target = U.findParentNode(e.target, function (target) {\n                    if (target.getAttribute(\"data-option-value\")) {\n                        clickEl = \"optionItem\";\n                        return true;\n                    } else if (item.$target.get(0) == target) {\n                        clickEl = \"display\";\n                        return true;\n                    }\n                });\n\n                if (!target) {\n                    this.close();\n                    return this;\n                } else if (clickEl === \"optionItem\") {\n                    setSelected.call(this, item.id, {\n                        optionIndex: {\n                            index: target.getAttribute(\"data-option-index\")\n                        }\n                    }, undefined, \"optionItemClick\");\n                    alignAutocompleteDisplay.call(this);\n                    alignAutocompleteOptionGroup.call(this);\n                    if (!item.multiple) {\n                        this.close();\n                    }\n                } else {}\n\n                return this;\n            },\n                getLabel = function getLabel(queIdx) {\n                var item = this.queue[queIdx];\n\n                // 템플릿에 전달 해야할 데이터 선언\n                var data = {};\n                data.id = item.id;\n                data.theme = item.theme;\n                data.size = \"ax5autocomplete-option-group-\" + item.size;\n                data.multiple = item.multiple;\n                data.lang = item.lang;\n                data.options = item.options;\n                data.selected = item.selected;\n                data.hasSelected = data.selected && data.selected.length > 0;\n                data.removeIcon = item.removeIcon;\n\n                return AUTOCOMPLETE.tmpl.get.call(this, \"label\", data, item.columnKeys);\n            },\n                syncLabel = function syncLabel(queIdx) {\n                var item = this.queue[queIdx];\n\n                if (!item.multiple && item.selected && item.selected.length > 0) {\n                    item.selected = [].concat(item.selected[item.selected.length - 1]);\n                }\n\n                item.selected.forEach(function (n, nindex) {\n                    n[\"@index\"] = nindex;\n                });\n\n                item.$select.html(AUTOCOMPLETE.tmpl.get.call(this, \"formSelectOptions\", {\n                    selected: item.selected\n                }, item.columnKeys));\n            },\n                printLabel = function printLabel(queIdx) {\n                var item = this.queue[queIdx];\n\n                item.$displayLabel.find('[data-ax5autocomplete-selected-label]').remove();\n                item.$displayLabelInput.before(getLabel.call(this, queIdx));\n            },\n                focusLabel = function focusLabel(queIdx) {\n                if (this.queue[queIdx].disabled) return this;\n\n                this.queue[queIdx].$displayLabel.trigger(\"focus\");\n                this.queue[queIdx].$displayLabelInput.focus();\n            },\n                clearLabel = function clearLabel(queIdx) {\n                this.queue[queIdx].$displayLabelInput.val('');\n            },\n                blurLabel = function blurLabel(queIdx) {\n                this.queue[queIdx].$displayLabel.trigger(\"blur\");\n            },\n                onSearch = function onSearch(queIdx, searchWord) {\n                if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.\n                var regExp = /[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n                searchWord = searchWord.replace(regExp, \"\");\n\n                this.queue[queIdx].waitOptions = true;\n                this.queue[queIdx].onSearch.call({\n                    self: this,\n                    item: this.queue[queIdx],\n                    searchWord: searchWord\n                }, function (O) {\n\n                    var data = {};\n                    var item = this.queue[this.activeautocompleteQueueIndex];\n                    if (!item) return false;\n\n                    /// 현재 selected 검증후 처리\n                    (function (item, O) {\n                        var optionsMap = {};\n                        O.options.forEach(function (_O, _OIndex) {\n                            _O[\"@index\"] = _OIndex;\n                            _O[\"@findex\"] = _OIndex;\n                            optionsMap[_O[item.columnKeys.optionValue]] = _O;\n                        });\n                        if (U.isArray(item.selected)) {\n                            item.selected.forEach(function (_O) {\n                                if (optionsMap[_O[item.columnKeys.optionValue]]) {\n                                    O.options[optionsMap[_O[item.columnKeys.optionValue]][\"@index\"]][item.columnKeys.optionSelected] = true;\n                                }\n                            });\n                        }\n                    })(item, O);\n\n                    item.options = O.options;\n\n                    alignAutocompleteDisplay.call(this);\n\n                    /// 템플릿에 전달할 오브젝트 선언\n                    data.id = item.id;\n                    data.theme = item.theme;\n                    data.size = \"ax5autocomplete-option-group-\" + item.size;\n                    data.multiple = item.multiple;\n                    data.lang = item.lang;\n                    data.options = item.options;\n                    this.activeautocompleteOptionGroup.find('[data-els=\"content\"]').html(jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"options\", data, item.columnKeys)));\n\n                    focusWord.call(this, this.activeautocompleteQueueIndex, searchWord);\n                    alignAutocompleteOptionGroup.call(this);\n\n                    setTimeout(function () {\n                        alignAutocompleteOptionGroup.call(this);\n                    }.bind(this));\n                }.bind(this));\n            },\n                focusWord = function focusWord(queIdx, searchWord) {\n                if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.\n                var collect_options = [],\n                    i = -1,\n                    l = this.queue[queIdx].options.length - 1,\n                    n;\n                if (searchWord != \"\") {\n                    while (l - i++) {\n                        n = this.queue[queIdx].options[i];\n\n                        if (('' + n.text).toLowerCase() == searchWord.toLowerCase()) {\n                            collect_options = [{ '@findex': n['@findex'], optionsSort: 0 }];\n                            break;\n                        } else {\n                            var sort = ('' + n.text).toLowerCase().search(searchWord.toLowerCase());\n                            if (sort > -1) {\n                                collect_options.push({ '@findex': n['@findex'], optionsSort: sort });\n                                if (collect_options.length > 2) break;\n                            }\n                            sort = null;\n                        }\n                    }\n                    collect_options.sort(function (a, b) {\n                        return a.optionsSort - b.optionsSort;\n                    });\n                }\n\n                if (collect_options && collect_options.length > 0) {\n                    focusMove.call(this, queIdx, undefined, collect_options[0]['@findex']);\n                } else {\n                    focusClear.call(this, queIdx);\n                }\n            },\n                focusClear = function focusClear(queIdx) {\n                if (this.activeautocompleteOptionGroup) {\n                    this.activeautocompleteOptionGroup.find('[data-option-focus-index]').removeClass(\"hover\").removeAttr(\"data-option-selected\");\n                }\n\n                this.queue[queIdx].optionFocusIndex = -1;\n            },\n                focusMove = function focusMove(queIdx, direction, findex) {\n                var _focusIndex, _prevFocusIndex, focusOptionEl, optionGroupScrollContainer;\n                var item = this.queue[queIdx];\n\n                if (this.activeautocompleteOptionGroup && item.options && item.options.length > 0) {\n\n                    if (typeof findex !== \"undefined\") {\n                        _focusIndex = findex;\n                    } else {\n                        _prevFocusIndex = item.optionFocusIndex == -1 ? item.optionSelectedIndex || -1 : item.optionFocusIndex;\n                        if (_prevFocusIndex == -1) {\n                            _focusIndex = 0;\n                            //_focusIndex = (direction > 0) ? 0 : item.optionItemLength - 1; // 맨 끝으로 보낼것인가 말 것인가.\n                        } else {\n                            _focusIndex = _prevFocusIndex + direction;\n                            if (_focusIndex < 0) _focusIndex = 0;else if (_focusIndex > item.optionItemLength - 1) _focusIndex = item.optionItemLength - 1;\n                        }\n                    }\n\n                    item.optionFocusIndex = _focusIndex;\n\n                    // 포커스 인덱스가 hide아이템을 만나면 hide 아이템이 안나올 때까지 루프를 순회 합니다.\n                    if (item.options[_focusIndex] && item.options[_focusIndex].hide) {\n                        // 옵션이 없는 값이 선택된 경우\n                        if (typeof direction === \"undefined\") {\n                            return this;\n                        } else {\n                            var isStrop = false;\n                            while (item.options[_focusIndex].hide) {\n                                _focusIndex = _focusIndex + direction;\n                                if (_focusIndex < 0) {\n                                    _focusIndex = 0;\n                                    break;\n                                } else if (_focusIndex > item.optionItemLength - 1) {\n                                    _focusIndex = item.optionItemLength - 1;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (typeof _focusIndex !== \"undefined\") {\n                        this.activeautocompleteOptionGroup.find('[data-option-focus-index]').removeClass(\"hover\");\n\n                        focusOptionEl = this.activeautocompleteOptionGroup.find('[data-option-focus-index=\"' + _focusIndex + '\"]').addClass(\"hover\");\n\n                        optionGroupScrollContainer = this.activeautocompleteOptionGroup.find('[data-els=\"content\"]');\n\n                        if (focusOptionEl.get(0)) {\n                            var focusOptionElHeight = focusOptionEl.outerHeight(),\n                                optionGroupScrollContainerHeight = optionGroupScrollContainer.innerHeight(),\n                                optionGroupScrollContainerScrollTop = optionGroupScrollContainer.scrollTop(),\n                                focusOptionElTop = focusOptionEl.position().top + optionGroupScrollContainer.scrollTop();\n\n                            if (optionGroupScrollContainerHeight + optionGroupScrollContainerScrollTop < focusOptionElTop + focusOptionElHeight) {\n                                optionGroupScrollContainer.scrollTop(focusOptionElTop + focusOptionElHeight - optionGroupScrollContainerHeight);\n                            } else if (optionGroupScrollContainerScrollTop > focusOptionElTop) {\n                                optionGroupScrollContainer.scrollTop(focusOptionElTop);\n                            }\n                            // optionGroup scroll check\n\n                            if (typeof direction !== \"undefined\") {\n                                item.$displayLabelInput.val(item.options[_focusIndex].text);\n                            }\n                        }\n                    }\n                }\n            },\n                getQueIdx = function getQueIdx(boundID) {\n                if (boundID instanceof jQuery) {\n                    boundID = boundID.data(\"data-ax5autocomplete-id\");\n                } else if (!U.isString(boundID)) {\n                    boundID = jQuery(boundID).data(\"data-ax5autocomplete-id\");\n                }\n                if (!U.isString(boundID)) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"getQueIdx\"));\n                    return;\n                }\n                return U.search(this.queue, function () {\n                    return this.id == boundID;\n                });\n            },\n                getSelected = function getSelected(_item, o, selected) {\n                if (typeof selected === \"undefined\") {\n                    return _item.multiple ? !o : true;\n                } else {\n                    return selected;\n                }\n            },\n                clearSelected = function clearSelected(queIdx) {\n                this.queue[queIdx].options.forEach(function (n) {\n                    if (n.optgroup) {\n                        n.options.forEach(function (nn) {\n                            nn.selected = false;\n                        });\n                    } else {\n                        n.selected = false;\n                    }\n                });\n\n                this.queue[queIdx].selected = [];\n                this.queue[queIdx].$select.html(AUTOCOMPLETE.tmpl.get.call(this, \"formSelectOptions\", {\n                    selected: this.queue[queIdx].selected\n                }, this.queue[queIdx].columnKeys));\n            },\n                setSelected = function () {\n                var processor = {\n                    'selectedIndex': function selectedIndex(queIdx, value, selected, setValueType) {},\n                    'removeSelectedIndex': function removeSelectedIndex(queIdx, value, selected, setValueType) {\n                        var item = this.queue[queIdx],\n                            addOptions = {};\n                        var newSelectedArray = [],\n                            optionIndex = 0;\n                        for (var i = 0; i < item.selected.length; i++) {\n                            if (item.selected[i]['@index'] != value.removeSelectedIndex.index) {\n                                addOptions = { '@index': optionIndex, '@findex': optionIndex };\n                                addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];\n                                addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];\n                                newSelectedArray.push(addOptions);\n                                optionIndex++;\n                            }\n                        }\n                        item.selected = newSelectedArray;\n                    },\n                    'optionIndex': function optionIndex(queIdx, value, selected, setValueType) {\n                        var item = this.queue[queIdx],\n                            addOptions = {};\n                        var optionIndex = item.selected.length;\n                        var pushOk = true;\n\n                        addOptions = {\n                            '@index': optionIndex, '@findex': optionIndex\n                        };\n                        addOptions[item.columnKeys.optionValue] = item.options[value.optionIndex.index][item.columnKeys.optionValue];\n                        addOptions[item.columnKeys.optionText] = item.options[value.optionIndex.index][item.columnKeys.optionText];\n\n                        for (var i = 0; i < item.selected.length; i++) {\n                            if (item.selected[i][item.columnKeys.optionValue] == addOptions[item.columnKeys.optionValue]) {\n                                pushOk = false;\n                            }\n                        }\n                        if (pushOk) item.selected.push(addOptions);\n                    },\n                    'arr': function arr(queIdx, values, selected, setValueType) {\n                        values.forEach(function (value) {\n                            if (U.isString(value) || U.isNumber(value)) {\n                                processor.text.call(self, queIdx, value, selected, \"justSetValue\");\n                            } else {\n                                for (var key in processor) {\n                                    if (value[key]) {\n                                        processor[key].call(self, queIdx, value, selected, \"justSetValue\");\n                                        break;\n                                    }\n                                }\n                            }\n                        });\n                    },\n                    'value': function value(queIdx, _value2, selected, setValueType) {\n                        var item = this.queue[queIdx];\n                        var addOptions;\n                        var optionIndex = U.search(item.options, function () {\n                            return this[item.columnKeys.optionValue] == _value2.value[item.columnKeys.optionValue];\n                        });\n\n                        if (optionIndex > -1) {\n                            item.options[optionIndex][item.columnKeys.optionSelected] = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);\n\n                            if (item.options[optionIndex][item.columnKeys.optionSelected]) {\n                                var appendOk = true;\n                                for (var i = 0; i < item.selected.length; i++) {\n                                    if (item.selected[i][cfg.columnKeys.optionValue] == item.options[optionIndex][cfg.columnKeys.optionValue]) {\n                                        appendOk = false;\n                                        break;\n                                    }\n                                }\n                                if (appendOk) {\n                                    addOptions = {};\n                                    addOptions[item.columnKeys.optionValue] = item.options[optionIndex][item.columnKeys.optionValue];\n                                    addOptions[item.columnKeys.optionText] = item.options[optionIndex][item.columnKeys.optionText];\n                                    item.selected.push(addOptions);\n                                }\n                            } else {\n                                var newSelectedArray = [];\n                                for (var i = 0; i < item.selected.length; i++) {\n                                    if (item.selected[i][cfg.columnKeys.optionValue] == item.options[optionIndex][cfg.columnKeys.optionValue]) {} else {\n                                        addOptions = {};\n                                        addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];\n                                        addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];\n                                        newSelectedArray.push(addOptions);\n                                    }\n                                }\n                                item.selected = newSelectedArray;\n                            }\n                        } else {\n                            // 새로운 값 추가\n                            var appendOk = true;\n                            for (var i = 0; i < item.selected.length; i++) {\n                                if (item.selected[i][cfg.columnKeys.optionValue] == _value2.value[cfg.columnKeys.optionValue]) {\n                                    appendOk = false;\n                                    break;\n                                }\n                            }\n\n                            if (appendOk) {\n                                addOptions = {};\n                                addOptions[item.columnKeys.optionValue] = _value2.value[cfg.columnKeys.optionValue];\n                                addOptions[item.columnKeys.optionText] = _value2.value[cfg.columnKeys.optionText];\n                                item.selected.push(addOptions);\n                            }\n                        }\n                    },\n                    'text': function text(queIdx, value, selected, setValueType) {\n                        var item = this.queue[queIdx];\n                        var addOptions;\n                        var optionIndex = U.search(item.options, function () {\n                            return this[item.columnKeys.optionText] == value;\n                        });\n\n                        if (optionIndex > -1) {\n                            item.options[optionIndex][item.columnKeys.optionSelected] = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);\n\n                            if (item.options[optionIndex][item.columnKeys.optionSelected]) {\n                                var appendOk = true;\n                                for (var i = 0; i < item.selected.length; i++) {\n                                    if (item.selected[i][cfg.columnKeys.optionText] == item.options[optionIndex][cfg.columnKeys.optionText]) {\n                                        appendOk = false;\n                                        break;\n                                    }\n                                }\n                                if (appendOk) {\n                                    addOptions = {};\n                                    addOptions[item.columnKeys.optionValue] = item.options[optionIndex][item.columnKeys.optionValue];\n                                    addOptions[item.columnKeys.optionText] = item.options[optionIndex][item.columnKeys.optionText];\n                                    item.selected.push(addOptions);\n                                }\n                            } else {\n                                var newSelectedArray = [];\n                                for (var i = 0; i < item.selected.length; i++) {\n                                    if (item.selected[i][cfg.columnKeys.optionText] == item.options[optionIndex][cfg.columnKeys.optionText]) {} else {\n                                        addOptions = {};\n                                        addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];\n                                        addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];\n                                        newSelectedArray.push(addOptions);\n                                    }\n                                }\n                                item.selected = newSelectedArray;\n                            }\n                        } else {\n                            // 새로운 값 추가\n                            var appendOk = true;\n                            for (var i = 0; i < item.selected.length; i++) {\n                                if (item.selected[i][cfg.columnKeys.optionText] == value) {\n                                    appendOk = false;\n                                    break;\n                                }\n                            }\n\n                            if (appendOk) {\n                                addOptions = {};\n                                addOptions[item.columnKeys.optionValue] = value;\n                                addOptions[item.columnKeys.optionText] = value;\n                                item.selected.push(addOptions);\n                            }\n                        }\n                    },\n                    'clear': function clear(queIdx) {\n                        clearSelected.call(this, queIdx);\n                        focusClear.call(this, queIdx);\n\n                        if (this.activeautocompleteOptionGroup) {\n                            this.activeautocompleteOptionGroup.find('[data-option-index]').attr(\"data-option-Selected\", \"false\");\n                        }\n                        this.queue[queIdx].optionSelectedIndex = -1;\n                    }\n                };\n                return function (boundID, value, selected, _option) {\n\n                    var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                    if (queIdx === -1) {\n                        console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                        return;\n                    }\n\n                    if (typeof value == \"undefined\") {\n                        throw \"error not found value\";\n                    } else if (U.isArray(value)) {\n                        processor.clear.call(this, queIdx);\n                        processor.arr.call(this, queIdx, this.queue[queIdx].multiple || value.length == 0 ? value : [value[value.length - 1]], selected);\n                    } else if (U.isString(value) || U.isNumber(value)) {\n                        if (typeof value !== \"undefined\" && value !== null && !this.queue[queIdx].multiple) {\n                            clearSelected.call(this, queIdx);\n                        }\n                        processor.text.call(this, queIdx, value, selected);\n                    } else {\n                        if (value === null) {\n                            processor.clear.call(this, queIdx);\n                        } else {\n                            if (!this.queue[queIdx].multiple) {\n                                clearSelected.call(this, queIdx);\n                            }\n                            for (var key in processor) {\n                                if (value[key]) {\n                                    processor[key].call(this, queIdx, value, selected);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    syncLabel.call(this, queIdx);\n                    printLabel.call(this, queIdx);\n                    focusLabel.call(this, queIdx);\n                    alignAutocompleteOptionGroup.call(this);\n\n                    if (typeof value !== \"undefined\") {\n                        if (_option && !_option.noStateChange) {\n                            onStateChanged.call(this, this.queue[queIdx], {\n                                self: this,\n                                item: this.queue[queIdx],\n                                state: \"changeValue\",\n                                value: this.queue[queIdx].selected\n                            });\n                        }\n                    }\n\n                    boundID = null;\n                    return this;\n                };\n            }();\n\n            /// private end\n\n            /**\n             * Preferences of autocomplete UI\n             * @method ax5autocomplete.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @returns {ax5autocomplete}\n             * @example\n             * ```\n             * ```\n             */\n            this.init = function () {\n                this.onStateChanged = cfg.onStateChanged;\n                this.onChange = cfg.onChange;\n                jQuery(window).bind(\"resize.ax5autocomplete-display-\" + this.instanceId, function () {\n                    alignAutocompleteDisplay.call(this);\n                }.bind(this));\n            };\n\n            /**\n             * bind autocomplete\n             * @method ax5autocomplete.bind\n             * @param {Object} item\n             * @param {String} [item.id]\n             * @param {String} [item.theme]\n             * @param {Boolean} [item.multiple]\n             * @param {Element} item.target\n             * @returns {ax5autocomplete}\n             */\n            this.bind = function (item) {\n                var bindAutocompleteTarget = function () {\n                    var debouncedFocusWord = U.debounce(function (queIdx) {\n                        if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.\n                        onSearch.call(self, queIdx, this.queue[queIdx].$displayLabelInput.val());\n                    }, 150);\n\n                    var blurLabel = function blurLabel(queIdx) {\n                        clearLabel.call(this, queIdx);\n                    };\n\n                    var autocompleteEvent = {\n                        'click': function click(queIdx, e) {\n                            var clickEl;\n                            var target = U.findParentNode(e.target, function (target) {\n                                if (target.getAttribute(\"data-ax5autocomplete-remove\")) {\n                                    clickEl = \"optionItemRemove\";\n                                    return true;\n                                } else if (target.getAttribute(\"data-selected-clear\")) {\n                                    clickEl = \"clear\";\n                                    return true;\n                                }\n                            });\n\n                            if (target) {\n                                if (clickEl === \"optionItemRemove\") {\n                                    var removeIndex = target.getAttribute(\"data-ax5autocomplete-remove-index\");\n                                    this.queue[queIdx].selected.splice(removeIndex, 1);\n                                    syncLabel.call(this, queIdx);\n                                    printLabel.call(this, queIdx);\n                                    focusLabel.call(this, queIdx);\n                                    alignAutocompleteDisplay.call(this);\n                                    alignAutocompleteOptionGroup.call(this);\n                                    U.stopEvent(e);\n                                    return this;\n                                } else if (clickEl === \"clear\") {\n                                    setSelected.call(this, queIdx, { clear: true });\n                                    alignAutocompleteDisplay.call(this);\n                                    alignAutocompleteOptionGroup.call(this);\n                                }\n                            } else {\n                                if (self.activeautocompleteQueueIndex == queIdx) {\n                                    if (this.queue[queIdx].optionFocusIndex == -1) {\n                                        // 아이템에 포커스가 활성화 된 후, 마우스 이벤트 이면 무시\n                                        self.close();\n                                    }\n                                } else {\n                                    focusLabel.call(this, queIdx);\n                                }\n                            }\n                        },\n                        'keyUp': function keyUp(queIdx, e) {\n                            /// 약속된 키 이벤트가 발생하면 stopEvent를 통해 keyUp 이벤트가 발생되지 않도록 막아주는 센스\n                            if (e.which == ax5.info.eventKeys.ESC && self.activeautocompleteQueueIndex === -1) {\n                                // ESC키를 누르고 옵션그룹이 열려있지 않은 경우\n                                U.stopEvent(e);\n                                return this;\n                            }\n                            if (e.which == ax5.info.eventKeys.TAB) {\n                                // nothing\n\n                                this.close();\n                                return this;\n                            }\n                            if (self.activeautocompleteQueueIndex != queIdx) {\n                                // 닫힌 상태 인경우\n                                self.open(queIdx); // open and align\n                            }\n                            if (ctrlKeys[e.which]) {\n                                U.stopEvent(e);\n                            } else {\n                                // backspace 감지 하여 input 값이 없으면 스탑이벤트 처리 할 것\n                                if (e.which == ax5.info.eventKeys.BACKSPACE && this.queue[queIdx].$displayLabelInput.val() == \"\") {\n                                    // 마지막 아이템을 제거.\n                                    this.queue[queIdx].selected.pop();\n                                    syncLabel.call(this, queIdx);\n                                    printLabel.call(this, queIdx);\n                                    focusLabel.call(this, queIdx);\n                                    alignAutocompleteDisplay.call(this);\n                                    alignAutocompleteOptionGroup.call(this);\n                                    U.stopEvent(e);\n                                } else {\n                                    debouncedFocusWord.call(this, queIdx);\n                                }\n                            }\n                        },\n                        'keyDown': function keyDown(queIdx, e) {\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                clearLabel.call(this, queIdx);\n                                this.close();\n                                U.stopEvent(e);\n                            } else if (e.which == ax5.info.eventKeys.RETURN) {\n                                var inputValue = this.queue[queIdx].$displayLabelInput.val();\n                                if (item.optionFocusIndex > -1) {\n                                    setSelected.call(this, item.id, {\n                                        optionIndex: {\n                                            index: item.optionFocusIndex\n                                        }\n                                    }, undefined, \"optionItemClick\");\n                                } else if (inputValue != \"\") {\n                                    setSelected.call(this, queIdx, inputValue, true);\n                                }\n                                clearLabel.call(this, queIdx);\n                                alignAutocompleteDisplay.call(this);\n                                this.close();\n\n                                U.stopEvent(e);\n                            } else if (e.which == ax5.info.eventKeys.DOWN) {\n                                focusMove.call(this, queIdx, 1);\n                                U.stopEvent(e);\n                            } else if (e.which == ax5.info.eventKeys.UP) {\n                                focusMove.call(this, queIdx, -1);\n                                U.stopEvent(e);\n                            }\n                        },\n                        'focus': function focus(queIdx, e) {\n                            // console.log(e);\n\n                        },\n                        'blur': function blur(queIdx, e) {\n                            blurLabel.call(this, queIdx);\n                            U.stopEvent(e);\n                        },\n                        'selectChange': function selectChange(queIdx, e) {\n                            setSelected.call(this, queIdx, { value: this.queue[queIdx].$select.val() }, true);\n                        }\n                    };\n\n                    return function (queIdx) {\n                        var item = this.queue[queIdx];\n                        var data = {};\n\n                        if (!item.$display) {\n                            /// 템플릿에 전달할 오브젝트 선언\n                            data.instanceId = this.instanceId;\n                            data.id = item.id;\n                            data.name = item.name;\n                            data.theme = item.theme;\n                            data.tabIndex = item.tabIndex;\n                            data.multiple = item.multiple;\n                            data.reset = item.reset;\n\n                            data.label = getLabel.call(this, queIdx);\n                            data.formSize = function () {\n                                return item.size ? \"input-\" + item.size : \"\";\n                            }();\n\n                            item.$display = jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"autocompleteDisplay\", data, item.columnKeys));\n                            item.$displayTable = item.$display.find('[data-els=\"display-table\"]');\n                            item.$displayLabel = item.$display.find('[data-ax5autocomplete-display=\"label\"]');\n                            item.$displayLabelInput = item.$display.find('[data-ax5autocomplete-display=\"input\"]');\n\n                            if (item.$target.find(\"select\").get(0)) {\n                                item.$select = item.$target.find(\"select\");\n                                item.$select.attr(\"tabindex\", \"-1\").attr(\"class\", \"form-control \" + data.formSize);\n\n                                if (data.name) {\n                                    item.$select.attr(\"name\", \"name\");\n                                }\n                                item.$select.attr(\"multiple\", \"multiple\");\n                            } else {\n                                item.$select = jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"formSelect\", data, item.columnKeys));\n                                item.$target.append(item.$select);\n                            }\n\n                            item.$target.append(item.$display);\n                        } else {\n                            printLabel.call(this, queIdx);\n                        }\n\n                        alignAutocompleteDisplay.call(this);\n\n                        item.$display.unbind('click.ax5autocomplete').bind('click.ax5autocomplete', autocompleteEvent.click.bind(this, queIdx));\n\n                        // autocomplete 태그에 대한 이벤트 감시\n\n                        item.$displayLabelInput.off(\"focus.ax5autocomplete\").on(\"focus.ax5autocomplete\", autocompleteEvent.focus.bind(this, queIdx)).off(\"blur.ax5autocomplete\").on(\"blur.ax5autocomplete\", autocompleteEvent.blur.bind(this, queIdx)).off(\"keydown.ax5autocomplete\").on(\"keydown.ax5autocomplete\", autocompleteEvent.keyUp.bind(this, queIdx)).off(\"keyup.ax5autocomplete\").on(\"keyup.ax5autocomplete\", autocompleteEvent.keyDown.bind(this, queIdx));\n\n                        // select 태그에 대한 change 이벤트 감시\n\n                        item.$select.unbind('change.ax5autocomplete').bind('change.ax5autocomplete', autocompleteEvent.selectChange.bind(this, queIdx));\n\n                        data = null;\n                        item = null;\n                        queIdx = null;\n                        return this;\n                    };\n                }();\n\n                var autocompleteConfig = {},\n                    queIdx;\n\n                item = jQuery.extend(true, autocompleteConfig, cfg, item);\n                if (!item.target) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"401\", \"bind\"));\n                    return this;\n                }\n\n                item.$target = jQuery(item.target);\n\n                if (!item.id) item.id = item.$target.data(\"data-ax5autocomplete-id\");\n                if (!item.id) {\n                    item.id = 'ax5autocomplete-' + ax5.getGuid();\n                    item.$target.data(\"data-ax5autocomplete-id\", item.id);\n                }\n                item.name = item.$target.attr(\"data-ax5autocomplete\");\n\n                item.options = [];\n                item.selected = [];\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        item = jQuery.extend(true, item, data);\n                    }\n                })(U.parseJson(item.$target.attr(\"data-ax5autocomplete-config\"), true));\n\n                queIdx = U.search(this.queue, function () {\n                    return this.id == item.id;\n                });\n\n                if (queIdx === -1) {\n                    this.queue.push(item);\n                    bindAutocompleteTarget.call(this, this.queue.length - 1);\n                } else {\n                    this.queue[queIdx] = jQuery.extend(true, {}, this.queue[queIdx], item);\n                    bindAutocompleteTarget.call(this, queIdx);\n                }\n\n                autocompleteConfig = null;\n                queIdx = null;\n                return this;\n            };\n\n            /**\n             * open the optionBox of autocomplete\n             * @method ax5autocomplete.open\n             * @param {(String|Number|Element)} boundID\n             * @param {Number} [tryCount]\n             * @returns {ax5autocomplete}\n             */\n            this.open = function () {\n\n                return function (boundID, tryCount) {\n                    this.waitOptionsCallback = null;\n\n                    /**\n                     * open autocomplete from the outside\n                     */\n                    var queIdx = U.isNumber(boundID) ? boundID : getQueIdx.call(this, boundID);\n                    var item = this.queue[queIdx];\n                    var data = {},\n                        focusTop,\n                        selectedOptionEl;\n\n                    if (item.$display.attr(\"disabled\")) return this;\n\n                    if (this.openTimer) clearTimeout(this.openTimer);\n                    if (this.activeautocompleteOptionGroup) {\n                        if (this.activeautocompleteQueueIndex == queIdx) {\n                            return this;\n                        }\n\n                        if (tryCount > 2) return this;\n                        this.close();\n                        this.openTimer = setTimeout(function () {\n                            this.open(queIdx, (tryCount || 0) + 1);\n                        }.bind(this), cfg.animateTime);\n\n                        return this;\n                    }\n\n                    item.optionFocusIndex = -1; // optionGroup이 열리면 포커스 인덱스 초기화 -1로\n                    if (item.selected && item.selected.length > 0) {\n                        item.optionSelectedIndex = item.selected[0][\"@findex\"];\n                    }\n\n                    /// 템플릿에 전달할 오브젝트 선언\n                    data.id = item.id;\n                    data.theme = item.theme;\n                    data.size = \"ax5autocomplete-option-group-\" + item.size;\n                    data.multiple = item.multiple;\n\n                    data.lang = item.lang;\n                    item.$display.attr(\"data-autocomplete-option-group-opened\", \"true\");\n\n                    data.waitOptions = true;\n                    data.options = [];\n\n                    this.activeautocompleteOptionGroup = jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"optionGroup\", data, item.columnKeys));\n                    this.activeautocompleteOptionGroup.find('[data-els=\"content\"]').html(jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"options\", data, item.columnKeys)));\n                    this.activeautocompleteQueueIndex = queIdx;\n\n                    alignAutocompleteOptionGroup.call(this, \"append\"); // alignAutocompleteOptionGroup 에서 body append\n                    jQuery(window).bind(\"resize.ax5autocomplete-\" + this.instanceId, function () {\n                        alignAutocompleteOptionGroup.call(this);\n                    }.bind(this));\n\n                    if (item.selected && item.selected.length > 0) {\n                        selectedOptionEl = this.activeautocompleteOptionGroup.find('[data-option-index=\"' + item.selected[0][\"@index\"] + '\"]');\n                        if (selectedOptionEl.get(0)) {\n                            focusTop = selectedOptionEl.position().top - this.activeautocompleteOptionGroup.height() / 3;\n                            this.activeautocompleteOptionGroup.find('[data-els=\"content\"]').stop().animate({ scrollTop: focusTop }, item.animateTime, 'swing', function () {});\n                        }\n                    }\n\n                    jQuery(window).bind(\"click.ax5autocomplete-\" + this.instanceId, function (e) {\n                        e = e || window.event;\n                        onBodyClick.call(this, e);\n                        U.stopEvent(e);\n                    }.bind(this));\n\n                    onStateChanged.call(this, item, {\n                        self: this,\n                        state: \"open\",\n                        item: item\n                    });\n\n                    data = null;\n                    focusTop = null;\n                    selectedOptionEl = null;\n                    return this;\n                };\n            }();\n\n            /**\n             * @method ax5autocomplete.setValue\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @param {(String|Array)} _value\n             * @return {ax5autocomplete}\n             * @example\n             * ```js\n             * myAutocomplete.setValue($('[data-ax5autocomplete=\"autocomplete1\"]'), {value:\"test\", text:\"test\"});\n             * myAutocomplete.setValue($('[data-ax5autocomplete=\"autocomplete1\"]'), [{value:\"test1\", text:\"test1\"}, {value:\"test2\", text:\"test2\"}]);\n             * myAutocomplete.setValue($('[data-ax5autocomplete=\"autocomplete1\"]'), null);\n             * ```\n             */\n            this.setValue = function (_boundID, _value) {\n                var queIdx = U.isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n\n                clearSelected.call(this, queIdx);\n\n                if (U.isArray(_value)) {\n                    var _values = U.map(_value, function () {\n                        return { value: this };\n                    });\n                    setSelected.call(this, queIdx, _values, true, { noStateChange: true });\n                } else if (U.isObject(_value)) {\n                    setSelected.call(this, queIdx, { value: _value }, true, { noStateChange: true });\n                } else {\n                    printLabel.call(this, queIdx);\n                }\n\n                blurLabel.call(this, queIdx);\n                alignAutocompleteDisplay.call(this);\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.setText\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @param {(String|Array)} _text\n             * @returns {ax5autocomplete}\n             * @example\n             * ```js\n             * myAutocomplete.setText($('[data-ax5autocomplete=\"autocomplete1\"]'), \"string\");\n             * myAutocomplete.setText($('[data-ax5autocomplete=\"autocomplete1\"]'), [\"substring\", \"search\"]);\n             * ```\n             */\n            this.setText = function (_boundID, _text) {\n                var queIdx = U.isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n                this.queue[queIdx].selected = [];\n                clearSelected.call(this, queIdx);\n                setSelected.call(this, queIdx, _text, true, { noStateChange: true });\n                blurLabel.call(this, queIdx);\n                alignAutocompleteDisplay.call(this);\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.getSelectedOption\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {Array}\n             */\n            this.getSelectedOption = function (_boundID) {\n                var queIdx = U.isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n                return U.deepCopy(this.queue[queIdx].selected);\n            };\n\n            /**\n             * @method ax5autocomplete.close\n             * @returns {ax5autocomplete}\n             */\n            this.close = function (item) {\n                if (this.closeTimer) clearTimeout(this.closeTimer);\n                if (!this.activeautocompleteOptionGroup) return this;\n\n                item = this.queue[this.activeautocompleteQueueIndex];\n                item.optionFocusIndex = -1;\n                item.$display.removeAttr(\"data-autocomplete-option-group-opened\").trigger(\"focus\");\n\n                this.activeautocompleteOptionGroup.addClass(\"destroy\");\n\n                jQuery(window).unbind(\"resize.ax5autocomplete-\" + this.instanceId).unbind(\"click.ax5autocomplete-\" + this.instanceId).unbind(\"keyup.ax5autocomplete-\" + this.instanceId);\n\n                this.closeTimer = setTimeout(function () {\n                    if (this.activeautocompleteOptionGroup) this.activeautocompleteOptionGroup.remove();\n                    this.activeautocompleteOptionGroup = null;\n                    this.activeautocompleteQueueIndex = -1;\n\n                    onStateChanged.call(this, item, {\n                        self: this,\n                        state: \"close\"\n                    });\n                }.bind(this), cfg.animateTime);\n                this.waitOptionsCallback = null;\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.blur\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {ax5autocomplete}\n             */\n            this.blur = function (_boundID) {\n                var queIdx = U.isNumber(_boundID) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n\n                blurLabel.call(this, queIdx);\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.enable\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {ax5autocomplete}\n             */\n            this.enable = function (_boundID) {\n                var queIdx = getQueIdx.call(this, _boundID);\n\n                if (typeof queIdx !== \"undefined\") {\n                    this.queue[queIdx].disable = false;\n                    if (this.queue[queIdx].$display[0]) {\n                        this.queue[queIdx].$display.removeAttr(\"disabled\");\n                        this.queue[queIdx].$displayLabelInput.removeAttr(\"disabled\");\n                    }\n                    if (this.queue[queIdx].$select[0]) {\n                        this.queue[queIdx].$select.removeAttr(\"disabled\");\n                    }\n\n                    onStateChanged.call(this, this.queue[queIdx], {\n                        self: this,\n                        state: \"enable\"\n                    });\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.disable\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {ax5autocomplete}\n             */\n            this.disable = function (_boundID) {\n                var queIdx = getQueIdx.call(this, _boundID);\n\n                if (typeof queIdx !== \"undefined\") {\n                    this.queue[queIdx].disable = true;\n                    if (this.queue[queIdx].$display[0]) {\n                        this.queue[queIdx].$display.attr(\"disabled\", \"disabled\");\n                        this.queue[queIdx].$displayLabelInput.attr(\"disabled\", \"disabled\");\n                    }\n                    if (this.queue[queIdx].$select[0]) {\n                        this.queue[queIdx].$select.attr(\"disabled\", \"disabled\");\n                    }\n\n                    onStateChanged.call(this, this.queue[queIdx], {\n                        self: this,\n                        state: \"disable\"\n                    });\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.align\n             */\n            this.align = function () {\n                alignAutocompleteDisplay.call(this);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                } else {\n                    this.init();\n                }\n            }.apply(this, arguments);\n        };\n        return ax5autocomplete;\n    }());\n\n    AUTOCOMPLETE = ax5.ui.autocomplete;\n})();\n\n/**\n * autocomplete jquery extends\n * @namespace jQueryExtends\n */\n\n/**\n * @method jQueryExtends.ax5autocomplete\n * @param {String} methodName\n * @param [arguments]\n * @param [arguments]\n * @example\n * ```html\n * <div data-ax5autocomplete=\"ax1\" data-ax5autocomplete-config='{\n *  multiple: true,\n *  editable: true,\n *  size: \"\",\n *  theme:\"\"\n *  }'></div>\n * <script>\n * jQuery('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete();\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"getSelectedOption\");\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"setValue\", {value:\"test\", text:\"test\"});\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"enable\");\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"disable\");\n * </script>\n * ```\n */\nax5.ui.autocomplete_instance = new ax5.ui.autocomplete();\njQuery.fn.ax5autocomplete = function () {\n    return function (config) {\n        if (ax5.util.isString(arguments[0])) {\n            var methodName = arguments[0];\n\n            switch (methodName) {\n                case \"open\":\n                    return ax5.ui.autocomplete_instance.open(this);\n                    break;\n                case \"close\":\n                    return ax5.ui.autocomplete_instance.close(this);\n                    break;\n                case \"setValue\":\n                    return ax5.ui.autocomplete_instance.setValue(this, arguments[1], arguments[2], arguments[3], arguments[4] || \"justSetValue\");\n                    break;\n                case \"setText\":\n                    return ax5.ui.autocomplete_instance.setText(this, arguments[1], arguments[2], arguments[3], arguments[4] || \"justSetValue\");\n                    break;\n                case \"getSelectedOption\":\n                    return ax5.ui.autocomplete_instance.getSelectedOption(this);\n                    break;\n                case \"enable\":\n                    return ax5.ui.autocomplete_instance.enable(this);\n                    break;\n                case \"disable\":\n                    return ax5.ui.autocomplete_instance.disable(this);\n                    break;\n                case \"blur\":\n                    return ax5.ui.autocomplete_instance.blur(this);\n                default:\n                    return this;\n            }\n        } else {\n            if (typeof config == \"undefined\") config = {};\n            jQuery.each(this, function () {\n                var defaultConfig = {\n                    target: this\n                };\n                config = jQuery.extend({}, config, defaultConfig);\n                ax5.ui.autocomplete_instance.bind(config);\n            });\n        }\n        return this;\n    };\n}();\n\n// todo : editable 지원.\n// 아이템 박스 안에서 제거 할때 디스플레이 정렬\n// ax5.ui.autocomplete.tmpl\n(function () {\n    var AUTOCOMPLETE = ax5.ui.autocomplete;\n    var U = ax5.util;\n\n    var optionGroup = function optionGroup(columnKeys) {\n        return \"\\n<div class=\\\"ax5autocomplete-option-group {{theme}} {{size}}\\\" data-ax5autocomplete-option-group=\\\"{{id}}\\\">\\n    <div class=\\\"ax-autocomplete-body\\\">\\n        <div class=\\\"ax-autocomplete-option-group-content\\\" data-els=\\\"content\\\"></div>\\n    </div>\\n    <div class=\\\"ax-autocomplete-arrow\\\"></div> \\n</div>\\n\";\n    };\n\n    var autocompleteDisplay = function autocompleteDisplay(columnKeys) {\n        return \" \\n<input tabindex=\\\"-1\\\" type=\\\"text\\\" data-input-dummy=\\\"\\\" style=\\\"display: none;\\\" />\\n<div class=\\\"form-control {{formSize}} ax5autocomplete-display {{theme}}\\\" \\ndata-ax5autocomplete-display=\\\"{{id}}\\\" data-ax5autocomplete-instance=\\\"{{instanceId}}\\\">\\n    <div class=\\\"ax5autocomplete-display-table\\\" data-els=\\\"display-table\\\">\\n        <div data-ax5autocomplete-display=\\\"label-holder\\\"> \\n        <a {{^tabIndex}}{{/tabIndex}}{{#tabIndex}}tabindex=\\\"{{tabIndex}}\\\" {{/tabIndex}}\\n        data-ax5autocomplete-display=\\\"label\\\"\\n        spellcheck=\\\"false\\\"><input type=\\\"text\\\"data-ax5autocomplete-display=\\\"input\\\" style=\\\"border:0px none;background: transparent;\\\" /></a>\\n        </div>\\n        <div data-ax5autocomplete-display=\\\"addon\\\"> \\n            {{#multiple}}{{#reset}}\\n            <span class=\\\"addon-icon-reset\\\" data-selected-clear=\\\"true\\\">{{{.}}}</span>\\n            {{/reset}}{{/multiple}}\\n        </div>\\n    </div>\\n</a>\\n\";\n    };\n\n    var formSelect = function formSelect(columnKeys) {\n        return \"\\n<select tabindex=\\\"-1\\\" class=\\\"form-control {{formSize}}\\\" name=\\\"{{name}}\\\" multiple=\\\"multiple\\\"></select>\\n\";\n    };\n\n    var formSelectOptions = function formSelectOptions(columnKeys) {\n        return \"\\n{{#selected}}\\n<option value=\\\"{{\" + columnKeys.optionValue + \"}}\\\" selected=\\\"true\\\">{{\" + columnKeys.optionText + \"}}</option>\\n{{/selected}}\\n\";\n    };\n\n    var options = function options(columnKeys) {\n        return \"\\n{{#waitOptions}}\\n    <div class=\\\"ax-autocomplete-option-item\\\">\\n            <div class=\\\"ax-autocomplete-option-item-holder\\\">\\n                <span class=\\\"ax-autocomplete-option-item-cell ax-autocomplete-option-item-label\\\">\\n                    {{{lang.loading}}}\\n                </span>\\n            </div>\\n        </div>\\n{{/waitOptions}}\\n{{^waitOptions}}\\n    {{#options}}\\n        {{^hide}}\\n        <div class=\\\"ax-autocomplete-option-item\\\" data-option-focus-index=\\\"{{@findex}}\\\" data-option-index=\\\"{{@index}}\\\" data-option-value=\\\"{{\" + columnKeys.optionValue + \"}}\\\" {{#\" + columnKeys.optionSelected + \"}}data-option-selected=\\\"true\\\"{{/\" + columnKeys.optionSelected + \"}}>\\n            <div class=\\\"ax-autocomplete-option-item-holder\\\">\\n                <span class=\\\"ax-autocomplete-option-item-cell ax-autocomplete-option-item-label\\\">{{\" + columnKeys.optionText + \"}}</span>\\n            </div>\\n        </div>\\n        {{/hide}}\\n    {{/options}}\\n    {{^options}}\\n        <div class=\\\"ax-autocomplete-option-item\\\">\\n            <div class=\\\"ax-autocomplete-option-item-holder\\\">\\n                <span class=\\\"ax-autocomplete-option-item-cell ax-autocomplete-option-item-label\\\">\\n                    {{{lang.noOptions}}}\\n                </span>\\n            </div>\\n        </div>\\n    {{/options}}\\n{{/waitOptions}}\\n\";\n    };\n\n    var label = function label(columnKeys) {\n        return \"{{#selected}}<div tabindex=\\\"-1\\\" data-ax5autocomplete-selected-label=\\\"{{@i}}\\\" data-ax5autocomplete-selected-text=\\\"{{text}}\\\"><div data-ax5autocomplete-remove=\\\"true\\\" data-ax5autocomplete-remove-index=\\\"{{@i}}\\\">{{{removeIcon}}}</div><span>{{text}}</span></div>{{/selected}}\";\n    };\n\n    AUTOCOMPLETE.tmpl = {\n        \"autocompleteDisplay\": autocompleteDisplay,\n        \"formSelect\": formSelect,\n        \"formSelectOptions\": formSelectOptions,\n        \"optionGroup\": optionGroup,\n        \"options\": options,\n        \"label\": label,\n\n        get: function get(tmplName, data, columnKeys) {\n            return ax5.mustache.render(AUTOCOMPLETE.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();","// ax5.ui.autocomplete\n(function () {\n\n    var UI = ax5.ui;\n    var U = ax5.util;\n    var AUTOCOMPLETE;\n\n    UI.addClass({\n        className: \"autocomplete\",\n        version: \"${VERSION}\"\n    }, (function () {\n        /**\n         * @class ax5autocomplete\n         * @classdesc\n         * @author tom@axisj.com\n         * @example\n         * ```js\n         * var options = [];\n         * options.push({value: \"1\", text: \"string\"});\n         * options.push({value: \"2\", text: \"number\"});\n         * options.push({value: \"3\", text: \"substr\"});\n         * options.push({value: \"4\", text: \"substring\"});\n         * options.push({value: \"5\", text: \"search\"});\n         * options.push({value: \"6\", text: \"parseInt\"});\n         * options.push({value: \"7\", text: \"toFixed\"});\n         * options.push({value: \"8\", text: \"min\"});\n         * options.push({value: \"9\", text: \"max\"});\n         * options.push({value: \"10\", text: \"장기영\"});\n         * options.push({value: \"11\", text: \"장서우\"});\n         * options.push({value: \"12\", text: \"이영희\"});\n         * options.push({value: \"13\", text: \"황인서\"});\n         * options.push({value: \"14\", text: \"황세진\"});\n         * options.push({value: \"15\", text: \"이서연\"});\n         * options.push({value: \"16\", text: \"액시스제이\"});\n         * options.push({value: \"17\", text: \"ax5\"});\n         * options.push({value: \"18\", text: \"ax5grid\"});\n         * options.push({value: \"19\", text: \"ax5combobox\"});\n         * options.push({value: \"20\", text: \"ax5autocomplete\"});\n         * options.push({value: \"21\", text: \"ax5binder\"});\n         * options.push({value: \"22\", text: \"ax5select\"});\n         * options.push({value: \"23\", text: \"ax5mask\"});\n         * options.push({value: \"24\", text: \"ax5toast\"});\n         * options.push({value: \"25\", text: \"ax5dialog\"});\n         * options.push({value: \"26\", text: \"ax5modal\"});\n\n         * var myUI = new ax5.ui.autocomplete({\n         *      theme: \"danger\",\n         *      removeIcon: '<i class=\"fa fa-times\" aria-hidden=\"true\"></i>'\n         * });\n         * ```\n         */\n        var ax5autocomplete = function () {\n            var\n                self = this,\n                cfg;\n\n            this.instanceId = ax5.getGuid();\n            this.config = {\n                theme: 'default',\n                animateTime: 250,\n                removeIcon: 'X',\n                lang: {\n                    noSelected: '',\n                    noOptions: 'no options',\n                    loading: 'Now Processing'\n                },\n                columnKeys: {\n                    optionValue: 'value',\n                    optionText: 'text',\n                    optionSelected: 'selected'\n                }\n            };\n\n            this.queue = [];\n            this.activeautocompleteOptionGroup = null;\n            this.activeautocompleteQueueIndex = -1;\n            this.openTimer = null;\n            this.closeTimer = null;\n            this.waitOptionsCallback = null;\n            this.keyUpTimer = null;\n\n            cfg = this.config;\n\n            var $window = jQuery(window);\n            var\n                ctrlKeys = {\n                    \"18\": \"KEY_ALT\",\n                    //\"8\": \"KEY_BACKSPACE\",\n                    \"17\": \"KEY_CONTROL\",\n                    \"46\": \"KEY_DELETE\",\n                    \"40\": \"KEY_DOWN\",\n                    \"35\": \"KEY_END\",\n                    \"187\": \"KEY_EQUAL\",\n                    //\"27\": \"KEY_ESC\",\n                    \"36\": \"KEY_HOME\",\n                    \"45\": \"KEY_INSERT\",\n                    \"37\": \"KEY_LEFT\",\n                    \"189\": \"KEY_MINUS\",\n                    \"34\": \"KEY_PAGEDOWN\",\n                    \"33\": \"KEY_PAGEUP\",\n                    // \"190\": \"KEY_PERIOD\",\n                    //\"13\": \"KEY_RETURN\",\n                    \"39\": \"KEY_RIGHT\",\n                    \"16\": \"KEY_SHIFT\",\n                    // \"32\": \"KEY_SPACE\",\n                    \"9\": \"KEY_TAB\",\n                    \"38\": \"KEY_UP\",\n                    \"91\": \"KEY_WINDOW\"\n                    //\"107\" : \"NUMPAD_ADD\",\n                    //\"194\" : \"NUMPAD_COMMA\",\n                    //\"110\" : \"NUMPAD_DECIMAL\",\n                    //\"111\" : \"NUMPAD_DIVIDE\",\n                    //\"12\" : \"NUMPAD_EQUAL\",\n                    //\"106\" : \"NUMPAD_MULTIPLY\",\n                    //\"109\" : \"NUMPAD_SUBTRACT\"\n                },\n                onStateChanged = function (item, that) {\n                    if (item && item.onStateChanged) {\n                        item.onStateChanged.call(that, that);\n                    }\n                    else if (this.onStateChanged) {\n                        this.onStateChanged.call(that, that);\n                    }\n\n                    if (that.state == \"changeValue\") {\n                        if (item && item.onChange) {\n                            item.onChange.call(that, that);\n                        }\n                        else if (this.onChange) {\n                            this.onChange.call(that, that);\n                        }\n                    }\n\n                    item = null;\n                    that = null;\n                    return true;\n                },\n                alignAutocompleteDisplay = function () {\n                    var i = this.queue.length, w;\n\n                    while (i--) {\n                        var item = this.queue[i];\n                        if (item.$display) {\n                            w = Math.max(item.$select.outerWidth(), U.number(item.minWidth));\n                            item.$display.css({\n                                \"min-width\": w\n                            });\n                            if (item.reset) {\n                                item.$display.find(\".addon-icon-reset\").css({\n                                    \"line-height\": this.queue[i].$display.height() + \"px\"\n                                });\n                            }\n\n                            // 높이조절 처리\n                            if (item.multiple) {\n                                var displayTableHeightAdjust = (function () {\n                                    return U.number(item.$display.css(\"border-top-width\")) + U.number(item.$display.css(\"border-bottom-width\"));\n                                }).call(this);\n                                item.$target.height('');\n                                item.$display.height('');\n\n                                var displayTableHeight = item.$displayTable.outerHeight();\n                                if (Math.abs(displayTableHeight - item.$target.height()) > displayTableHeightAdjust) {\n                                    item.$target.css({height: displayTableHeight + displayTableHeightAdjust + 4});\n                                    item.$display.css({height: displayTableHeight + displayTableHeightAdjust + 4});\n                                }\n                            }\n                        }\n                    }\n\n                    i = null;\n                    w = null;\n                    return this;\n                },\n                alignAutocompleteOptionGroup = function (append) {\n                    if (append && !this.activeautocompleteOptionGroup) return this;\n\n                    var item = this.queue[this.activeautocompleteQueueIndex],\n                        pos = {}, positionMargin = 0,\n                        dim = {}, pickerDim = {},\n                        pickerDirection;\n\n                    if (!item) return this;\n                    if (append) jQuery(document.body).append(this.activeautocompleteOptionGroup);\n\n                    pos = item.$target.offset();\n                    dim = {\n                        width: item.$target.outerWidth(),\n                        height: item.$target.outerHeight()\n                    };\n                    pickerDim = {\n                        winWidth: Math.max($window.width(), jQuery(document.body).width()),\n                        winHeight: Math.max($window.height(), jQuery(document.body).height()),\n                        width: this.activeautocompleteOptionGroup.outerWidth(),\n                        height: this.activeautocompleteOptionGroup.outerHeight()\n                    };\n\n                    // picker css(width, left, top) & direction 결정\n                    if (!item.direction || item.direction === \"\" || item.direction === \"auto\") {\n                        // set direction\n                        pickerDirection = \"top\";\n\n                        if (pos.top - pickerDim.height - positionMargin < 0) {\n                            pickerDirection = \"top\";\n                        } else if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                            pickerDirection = \"bottom\";\n                        }\n                    } else {\n                        pickerDirection = item.direction;\n                    }\n\n                    if (append) {\n                        this.activeautocompleteOptionGroup\n                            .addClass(\"direction-\" + pickerDirection);\n                    }\n                    this.activeautocompleteOptionGroup\n                        .css((function () {\n                            if (pickerDirection == \"top\") {\n                                if (pos.top + dim.height + pickerDim.height + positionMargin > pickerDim.winHeight) {\n\n                                    var newTop = pos.top + pickerDim.height;\n                                    if (newTop + pickerDim.height + positionMargin > pickerDim.winHeight) {\n                                        newTop = 0;\n                                    }\n                                    if (newTop < 0) {\n                                        newTop = 0;\n                                    }\n\n                                    return {\n                                        left: pos.left,\n                                        top: newTop,\n                                        width: dim.width\n                                    }\n                                }\n                                return {\n                                    left: pos.left,\n                                    top: pos.top + dim.height + 1,\n                                    width: dim.width\n                                }\n                            }\n                            else if (pickerDirection == \"bottom\") {\n                                return {\n                                    left: pos.left,\n                                    top: pos.top - pickerDim.height - 1,\n                                    width: dim.width\n                                }\n                            }\n                        }).call(this));\n                },\n                onBodyClick = function (e, target) {\n                    if (!this.activeautocompleteOptionGroup) return this;\n\n                    var\n                        item = this.queue[this.activeautocompleteQueueIndex],\n                        clickEl = \"display\"\n                        ;\n\n                    target = U.findParentNode(e.target, function (target) {\n                        if (target.getAttribute(\"data-option-value\")) {\n                            clickEl = \"optionItem\";\n                            return true;\n                        }\n                        else if (item.$target.get(0) == target) {\n                            clickEl = \"display\";\n                            return true;\n                        }\n                    });\n\n                    if (!target) {\n                        this.close();\n                        return this;\n                    }\n                    else if (clickEl === \"optionItem\") {\n                        setSelected.call(this, item.id, {\n                            optionIndex: {\n                                index: target.getAttribute(\"data-option-index\")\n                            }\n                        }, undefined, \"optionItemClick\");\n                        alignAutocompleteDisplay.call(this);\n                        alignAutocompleteOptionGroup.call(this);\n                        if (!item.multiple) {\n                            this.close();\n                        }\n                    }\n                    else {\n\n                    }\n\n                    return this;\n                },\n\n                getLabel = function (queIdx) {\n                    var item = this.queue[queIdx];\n\n                    // 템플릿에 전달 해야할 데이터 선언\n                    var data = {};\n                    data.id = item.id;\n                    data.theme = item.theme;\n                    data.size = \"ax5autocomplete-option-group-\" + item.size;\n                    data.multiple = item.multiple;\n                    data.lang = item.lang;\n                    data.options = item.options;\n                    data.selected = item.selected;\n                    data.hasSelected = (data.selected && data.selected.length > 0);\n                    data.removeIcon = item.removeIcon;\n\n                    return AUTOCOMPLETE.tmpl.get.call(this, \"label\", data, item.columnKeys);\n                },\n                syncLabel = function (queIdx) {\n                    var item = this.queue[queIdx];\n\n                    if (!item.multiple && item.selected && item.selected.length > 0) {\n                        item.selected = [].concat(item.selected[item.selected.length - 1]);\n                    }\n\n                    item.selected.forEach(function (n, nindex) {\n                        n[\"@index\"] = nindex;\n                    });\n\n                    item.$select.html(AUTOCOMPLETE.tmpl.get.call(this, \"formSelectOptions\", {\n                        selected: item.selected\n                    }, item.columnKeys));\n                },\n                printLabel = function (queIdx) {\n                    var item = this.queue[queIdx];\n\n                    item.$displayLabel.find('[data-ax5autocomplete-selected-label]').remove();\n                    item.$displayLabelInput.before(getLabel.call(this, queIdx));\n                },\n                focusLabel = function (queIdx) {\n                    if (this.queue[queIdx].disabled) return this;\n\n                    this.queue[queIdx].$displayLabel.trigger(\"focus\");\n                    this.queue[queIdx].$displayLabelInput.focus();\n                },\n                clearLabel = function (queIdx) {\n                    this.queue[queIdx].$displayLabelInput.val('');\n                },\n                blurLabel = function (queIdx) {\n                    this.queue[queIdx].$displayLabel.trigger(\"blur\");\n                },\n                onSearch = function (queIdx, searchWord) {\n                    if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.\n                    var regExp = /[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n                    searchWord = searchWord.replace(regExp, \"\");\n\n                    this.queue[queIdx].waitOptions = true;\n                    this.queue[queIdx].onSearch.call({\n                        self: this,\n                        item: this.queue[queIdx],\n                        searchWord: searchWord\n                    }, (function (O) {\n\n                        var data = {};\n                        var item = this.queue[this.activeautocompleteQueueIndex];\n                        if (!item) return false;\n\n                        /// 현재 selected 검증후 처리\n                        (function (item, O) {\n                            var optionsMap = {};\n                            O.options.forEach(function (_O, _OIndex) {\n                                _O[\"@index\"] = _OIndex;\n                                _O[\"@findex\"] = _OIndex;\n                                optionsMap[_O[item.columnKeys.optionValue]] = _O;\n                            });\n                            if (U.isArray(item.selected)) {\n                                item.selected.forEach(function (_O) {\n                                    if (optionsMap[_O[item.columnKeys.optionValue]]) {\n                                        O.options[optionsMap[_O[item.columnKeys.optionValue]][\"@index\"]][item.columnKeys.optionSelected] = true;\n                                    }\n                                });\n                            }\n                        })(item, O);\n\n                        item.options = O.options;\n\n                        alignAutocompleteDisplay.call(this);\n\n                        /// 템플릿에 전달할 오브젝트 선언\n                        data.id = item.id;\n                        data.theme = item.theme;\n                        data.size = \"ax5autocomplete-option-group-\" + item.size;\n                        data.multiple = item.multiple;\n                        data.lang = item.lang;\n                        data.options = item.options;\n                        this.activeautocompleteOptionGroup.find('[data-els=\"content\"]').html(jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"options\", data, item.columnKeys)));\n\n                        focusWord.call(this, this.activeautocompleteQueueIndex, searchWord);\n                        alignAutocompleteOptionGroup.call(this);\n\n                        setTimeout((function () {\n                            alignAutocompleteOptionGroup.call(this);\n                        }).bind(this));\n\n\n                    }).bind(this));\n                },\n                focusWord = function (queIdx, searchWord) {\n                    if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.\n                    var collect_options = [], i = -1, l = this.queue[queIdx].options.length - 1, n;\n                    if (searchWord != \"\") {\n                        while (l - i++) {\n                            n = this.queue[queIdx].options[i];\n\n                            if (('' + n.text).toLowerCase() == searchWord.toLowerCase()) {\n                                collect_options = [{'@findex': n['@findex'], optionsSort: 0}];\n                                break;\n                            } else {\n                                var sort = ('' + n.text).toLowerCase().search(searchWord.toLowerCase());\n                                if (sort > -1) {\n                                    collect_options.push({'@findex': n['@findex'], optionsSort: sort});\n                                    if (collect_options.length > 2) break;\n                                }\n                                sort = null;\n                            }\n                        }\n                        collect_options.sort(function (a, b) {\n                            return a.optionsSort - b.optionsSort;\n                        });\n                    }\n\n                    if (collect_options && collect_options.length > 0) {\n                        focusMove.call(this, queIdx, undefined, collect_options[0]['@findex']);\n                    } else {\n                        focusClear.call(this, queIdx);\n                    }\n                },\n                focusClear = function (queIdx) {\n                    if (this.activeautocompleteOptionGroup) {\n                        this.activeautocompleteOptionGroup\n                            .find('[data-option-focus-index]')\n                            .removeClass(\"hover\")\n                            .removeAttr(\"data-option-selected\");\n                    }\n\n                    this.queue[queIdx].optionFocusIndex = -1;\n                },\n                focusMove = function (queIdx, direction, findex) {\n                    var _focusIndex,\n                        _prevFocusIndex,\n                        focusOptionEl,\n                        optionGroupScrollContainer;\n                    var item = this.queue[queIdx];\n\n                    if (this.activeautocompleteOptionGroup && item.options && item.options.length > 0) {\n\n                        if (typeof findex !== \"undefined\") {\n                            _focusIndex = findex\n                        }\n                        else {\n                            _prevFocusIndex = (item.optionFocusIndex == -1) ? item.optionSelectedIndex || -1 : item.optionFocusIndex;\n                            if (_prevFocusIndex == -1) {\n                                _focusIndex = 0;\n                                //_focusIndex = (direction > 0) ? 0 : item.optionItemLength - 1; // 맨 끝으로 보낼것인가 말 것인가.\n                            }\n                            else {\n                                _focusIndex = _prevFocusIndex + direction;\n                                if (_focusIndex < 0) _focusIndex = 0;\n                                else if (_focusIndex > item.optionItemLength - 1) _focusIndex = item.optionItemLength - 1;\n                            }\n                        }\n\n                        item.optionFocusIndex = _focusIndex;\n\n                        // 포커스 인덱스가 hide아이템을 만나면 hide 아이템이 안나올 때까지 루프를 순회 합니다.\n                        if (item.options[_focusIndex] && item.options[_focusIndex].hide) { // 옵션이 없는 값이 선택된 경우\n                            if (typeof direction === \"undefined\") {\n                                return this;\n                            }\n                            else {\n                                var isStrop = false;\n                                while (item.options[_focusIndex].hide) {\n                                    _focusIndex = _focusIndex + direction;\n                                    if (_focusIndex < 0) {\n                                        _focusIndex = 0;\n                                        break;\n                                    }\n                                    else if (_focusIndex > item.optionItemLength - 1) {\n                                        _focusIndex = item.optionItemLength - 1;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n\n                        if (typeof _focusIndex !== \"undefined\") {\n                            this.activeautocompleteOptionGroup\n                                .find('[data-option-focus-index]')\n                                .removeClass(\"hover\");\n\n                            focusOptionEl = this.activeautocompleteOptionGroup\n                                .find('[data-option-focus-index=\"' + _focusIndex + '\"]')\n                                .addClass(\"hover\");\n\n                            optionGroupScrollContainer = this.activeautocompleteOptionGroup.find('[data-els=\"content\"]');\n\n                            if (focusOptionEl.get(0)) {\n                                let focusOptionElHeight = focusOptionEl.outerHeight(),\n                                    optionGroupScrollContainerHeight = optionGroupScrollContainer.innerHeight(),\n                                    optionGroupScrollContainerScrollTop = optionGroupScrollContainer.scrollTop(),\n                                    focusOptionElTop = focusOptionEl.position().top + optionGroupScrollContainer.scrollTop();\n\n                                if (optionGroupScrollContainerHeight + optionGroupScrollContainerScrollTop < focusOptionElTop + focusOptionElHeight) {\n                                    optionGroupScrollContainer.scrollTop(focusOptionElTop + focusOptionElHeight - optionGroupScrollContainerHeight);\n                                }\n                                else if (optionGroupScrollContainerScrollTop > focusOptionElTop) {\n                                    optionGroupScrollContainer.scrollTop(focusOptionElTop);\n                                }\n                                // optionGroup scroll check\n\n                                if (typeof direction !== \"undefined\") {\n                                    item.$displayLabelInput.val(item.options[_focusIndex].text);\n                                }\n                            }\n                        }\n                    }\n                },\n                getQueIdx = function (boundID) {\n                    if (boundID instanceof jQuery) {\n                        boundID = boundID.data(\"data-ax5autocomplete-id\");\n                    } else if (!U.isString(boundID)) {\n                        boundID = jQuery(boundID).data(\"data-ax5autocomplete-id\");\n                    }\n                    if (!U.isString(boundID)) {\n                        console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"getQueIdx\"));\n                        return;\n                    }\n                    return U.search(this.queue, function () {\n                        return this.id == boundID;\n                    });\n                },\n                getSelected = function (_item, o, selected) {\n                    if (typeof selected === \"undefined\") {\n                        return (_item.multiple) ? !o : true;\n                    } else {\n                        return selected;\n                    }\n                },\n                clearSelected = function (queIdx) {\n                    this.queue[queIdx].options.forEach(function (n) {\n                        if (n.optgroup) {\n                            n.options.forEach(function (nn) {\n                                nn.selected = false;\n                            });\n                        }\n                        else {\n                            n.selected = false;\n                        }\n                    });\n\n                    this.queue[queIdx].selected = [];\n                    this.queue[queIdx].$select.html(AUTOCOMPLETE.tmpl.get.call(this, \"formSelectOptions\", {\n                        selected: this.queue[queIdx].selected\n                    }, this.queue[queIdx].columnKeys));\n                },\n                setSelected = (function () {\n                    var processor = {\n                        'selectedIndex': function (queIdx, value, selected, setValueType) {\n\n                        },\n                        'removeSelectedIndex': function (queIdx, value, selected, setValueType) {\n                            var item = this.queue[queIdx], addOptions = {};\n                            var newSelectedArray = [], optionIndex = 0;\n                            for (var i = 0; i < item.selected.length; i++) {\n                                if (item.selected[i]['@index'] != value.removeSelectedIndex.index) {\n                                    addOptions = {'@index': optionIndex, '@findex': optionIndex};\n                                    addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];\n                                    addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];\n                                    newSelectedArray.push(addOptions);\n                                    optionIndex++;\n                                }\n                            }\n                            item.selected = newSelectedArray;\n                        },\n                        'optionIndex': function (queIdx, value, selected, setValueType) {\n                            var item = this.queue[queIdx], addOptions = {};\n                            var optionIndex = item.selected.length;\n                            var pushOk = true;\n\n                            addOptions = {\n                                '@index': optionIndex, '@findex': optionIndex\n                            };\n                            addOptions[item.columnKeys.optionValue] = item.options[value.optionIndex.index][item.columnKeys.optionValue];\n                            addOptions[item.columnKeys.optionText] = item.options[value.optionIndex.index][item.columnKeys.optionText];\n\n                            for (var i = 0; i < item.selected.length; i++) {\n                                if (item.selected[i][item.columnKeys.optionValue] == addOptions[item.columnKeys.optionValue]) {\n                                    pushOk = false;\n                                }\n                            }\n                            if (pushOk) item.selected.push(addOptions);\n                        },\n                        'arr': function (queIdx, values, selected, setValueType) {\n                            values.forEach(function (value) {\n                                if (U.isString(value) || U.isNumber(value)) {\n                                    processor.text.call(self, queIdx, value, selected, \"justSetValue\");\n                                }\n                                else {\n                                    for (var key in processor) {\n                                        if (value[key]) {\n                                            processor[key].call(self, queIdx, value, selected, \"justSetValue\");\n                                            break;\n                                        }\n                                    }\n                                }\n                            });\n                        },\n                        'value': function (queIdx, value, selected, setValueType) {\n                            var item = this.queue[queIdx];\n                            var addOptions;\n                            var optionIndex = U.search(item.options, function () {\n                                return this[item.columnKeys.optionValue] == value.value[item.columnKeys.optionValue];\n                            });\n\n                            if (optionIndex > -1) {\n                                item.options[optionIndex][item.columnKeys.optionSelected]\n                                    = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);\n\n                                if (item.options[optionIndex][item.columnKeys.optionSelected]) {\n                                    var appendOk = true;\n                                    for (var i = 0; i < item.selected.length; i++) {\n                                        if (item.selected[i][cfg.columnKeys.optionValue] == item.options[optionIndex][cfg.columnKeys.optionValue]) {\n                                            appendOk = false;\n                                            break;\n                                        }\n                                    }\n                                    if (appendOk) {\n                                        addOptions = {};\n                                        addOptions[item.columnKeys.optionValue] = item.options[optionIndex][item.columnKeys.optionValue];\n                                        addOptions[item.columnKeys.optionText] = item.options[optionIndex][item.columnKeys.optionText];\n                                        item.selected.push(addOptions);\n                                    }\n                                }\n                                else {\n                                    var newSelectedArray = [];\n                                    for (var i = 0; i < item.selected.length; i++) {\n                                        if (item.selected[i][cfg.columnKeys.optionValue] == item.options[optionIndex][cfg.columnKeys.optionValue]) {\n\n                                        }\n                                        else {\n                                            addOptions = {};\n                                            addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];\n                                            addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];\n                                            newSelectedArray.push(addOptions);\n                                        }\n                                    }\n                                    item.selected = newSelectedArray;\n                                }\n\n                            }\n                            else {\n                                // 새로운 값 추가\n                                var appendOk = true;\n                                for (var i = 0; i < item.selected.length; i++) {\n                                    if (item.selected[i][cfg.columnKeys.optionValue] == value.value[cfg.columnKeys.optionValue]) {\n                                        appendOk = false;\n                                        break;\n                                    }\n                                }\n\n                                if (appendOk) {\n                                    addOptions = {};\n                                    addOptions[item.columnKeys.optionValue] = value.value[cfg.columnKeys.optionValue];\n                                    addOptions[item.columnKeys.optionText] = value.value[cfg.columnKeys.optionText];\n                                    item.selected.push(addOptions);\n                                }\n                            }\n                        },\n                        'text': function (queIdx, value, selected, setValueType) {\n                            var item = this.queue[queIdx];\n                            var addOptions;\n                            var optionIndex = U.search(item.options, function () {\n                                return this[item.columnKeys.optionText] == value;\n                            });\n\n                            if (optionIndex > -1) {\n                                item.options[optionIndex][item.columnKeys.optionSelected]\n                                    = getSelected(item, item.options[optionIndex][item.columnKeys.optionSelected], selected);\n\n                                if (item.options[optionIndex][item.columnKeys.optionSelected]) {\n                                    var appendOk = true;\n                                    for (var i = 0; i < item.selected.length; i++) {\n                                        if (item.selected[i][cfg.columnKeys.optionText] == item.options[optionIndex][cfg.columnKeys.optionText]) {\n                                            appendOk = false;\n                                            break;\n                                        }\n                                    }\n                                    if (appendOk) {\n                                        addOptions = {};\n                                        addOptions[item.columnKeys.optionValue] = item.options[optionIndex][item.columnKeys.optionValue];\n                                        addOptions[item.columnKeys.optionText] = item.options[optionIndex][item.columnKeys.optionText];\n                                        item.selected.push(addOptions);\n                                    }\n                                }\n                                else {\n                                    var newSelectedArray = [];\n                                    for (var i = 0; i < item.selected.length; i++) {\n                                        if (item.selected[i][cfg.columnKeys.optionText] == item.options[optionIndex][cfg.columnKeys.optionText]) {\n\n                                        }\n                                        else {\n                                            addOptions = {};\n                                            addOptions[item.columnKeys.optionValue] = item.selected[i][item.columnKeys.optionValue];\n                                            addOptions[item.columnKeys.optionText] = item.selected[i][item.columnKeys.optionText];\n                                            newSelectedArray.push(addOptions);\n                                        }\n                                    }\n                                    item.selected = newSelectedArray;\n                                }\n                            }\n                            else {\n                                // 새로운 값 추가\n                                var appendOk = true;\n                                for (var i = 0; i < item.selected.length; i++) {\n                                    if (item.selected[i][cfg.columnKeys.optionText] == value) {\n                                        appendOk = false;\n                                        break;\n                                    }\n                                }\n\n                                if (appendOk) {\n                                    addOptions = {};\n                                    addOptions[item.columnKeys.optionValue] = value;\n                                    addOptions[item.columnKeys.optionText] = value;\n                                    item.selected.push(addOptions);\n                                }\n                            }\n                        },\n                        'clear': function (queIdx) {\n                            clearSelected.call(this, queIdx);\n                            focusClear.call(this, queIdx);\n\n                            if (this.activeautocompleteOptionGroup) {\n                                this.activeautocompleteOptionGroup\n                                    .find('[data-option-index]')\n                                    .attr(\"data-option-Selected\", \"false\");\n                            }\n                            this.queue[queIdx].optionSelectedIndex = -1;\n                        }\n                    };\n                    return function (boundID, value, selected, _option) {\n\n                        var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                        if (queIdx === -1) {\n                            console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                            return;\n                        }\n\n                        if (typeof value == \"undefined\") {\n                            throw \"error not found value\";\n                        }\n                        else if (U.isArray(value)) {\n                            processor.clear.call(this, queIdx);\n                            processor.arr.call(this, queIdx, (this.queue[queIdx].multiple || value.length == 0) ? value : [value[value.length - 1]], selected);\n                        }\n                        else if (U.isString(value) || U.isNumber(value)) {\n                            if (typeof value !== \"undefined\" && value !== null && !this.queue[queIdx].multiple) {\n                                clearSelected.call(this, queIdx);\n                            }\n                            processor.text.call(this, queIdx, value, selected);\n                        }\n                        else {\n                            if (value === null) {\n                                processor.clear.call(this, queIdx);\n                            }\n                            else {\n                                if (!this.queue[queIdx].multiple) {\n                                    clearSelected.call(this, queIdx);\n                                }\n                                for (var key in processor) {\n                                    if (value[key]) {\n                                        processor[key].call(this, queIdx, value, selected);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n\n                        syncLabel.call(this, queIdx);\n                        printLabel.call(this, queIdx);\n                        focusLabel.call(this, queIdx);\n                        alignAutocompleteOptionGroup.call(this);\n\n                        if (typeof value !== \"undefined\") {\n                            if (_option && !_option.noStateChange) {\n                                onStateChanged.call(this, this.queue[queIdx], {\n                                    self: this,\n                                    item: this.queue[queIdx],\n                                    state: \"changeValue\",\n                                    value: this.queue[queIdx].selected\n                                });\n                            }\n                        }\n\n                        boundID = null;\n                        return this;\n                    };\n                })();\n\n            /// private end\n\n            /**\n             * Preferences of autocomplete UI\n             * @method ax5autocomplete.setConfig\n             * @param {Object} config - 클래스 속성값\n             * @returns {ax5autocomplete}\n             * @example\n             * ```\n             * ```\n             */\n            this.init = function () {\n                this.onStateChanged = cfg.onStateChanged;\n                this.onChange = cfg.onChange;\n                jQuery(window).bind(\"resize.ax5autocomplete-display-\" + this.instanceId, (function () {\n                    alignAutocompleteDisplay.call(this);\n                }).bind(this));\n            };\n\n            /**\n             * bind autocomplete\n             * @method ax5autocomplete.bind\n             * @param {Object} item\n             * @param {String} [item.id]\n             * @param {String} [item.theme]\n             * @param {Boolean} [item.multiple]\n             * @param {Element} item.target\n             * @returns {ax5autocomplete}\n             */\n            this.bind = function (item) {\n                var bindAutocompleteTarget = (function () {\n                    var debouncedFocusWord = U.debounce(function (queIdx) {\n                        if (this.activeautocompleteQueueIndex == -1) return this; // 옵션박스가 닫힌상태이면 진행안함.\n                        onSearch.call(self, queIdx, this.queue[queIdx].$displayLabelInput.val());\n                    }, 150);\n\n                    var blurLabel = function (queIdx) {\n                        clearLabel.call(this, queIdx);\n                    };\n\n                    var autocompleteEvent = {\n                        'click': function (queIdx, e) {\n                            var clickEl;\n                            var target = U.findParentNode(e.target, function (target) {\n                                if (target.getAttribute(\"data-ax5autocomplete-remove\")) {\n                                    clickEl = \"optionItemRemove\";\n                                    return true;\n                                }\n                                else if (target.getAttribute(\"data-selected-clear\")) {\n                                    clickEl = \"clear\";\n                                    return true;\n                                }\n                            });\n\n                            if (target) {\n                                if (clickEl === \"optionItemRemove\") {\n                                    var removeIndex = target.getAttribute(\"data-ax5autocomplete-remove-index\");\n                                    this.queue[queIdx].selected.splice(removeIndex, 1);\n                                    syncLabel.call(this, queIdx);\n                                    printLabel.call(this, queIdx);\n                                    focusLabel.call(this, queIdx);\n                                    alignAutocompleteDisplay.call(this);\n                                    alignAutocompleteOptionGroup.call(this);\n                                    U.stopEvent(e);\n                                    return this;\n                                } else if (clickEl === \"clear\") {\n                                    setSelected.call(this, queIdx, {clear: true});\n                                    alignAutocompleteDisplay.call(this);\n                                    alignAutocompleteOptionGroup.call(this);\n                                }\n                            }\n                            else {\n                                if (self.activeautocompleteQueueIndex == queIdx) {\n                                    if (this.queue[queIdx].optionFocusIndex == -1) { // 아이템에 포커스가 활성화 된 후, 마우스 이벤트 이면 무시\n                                        self.close();\n                                    }\n                                }\n                                else {\n                                    focusLabel.call(this, queIdx);\n                                }\n                            }\n                        },\n                        'keyUp': function (queIdx, e) {\n                            /// 약속된 키 이벤트가 발생하면 stopEvent를 통해 keyUp 이벤트가 발생되지 않도록 막아주는 센스\n                            if (e.which == ax5.info.eventKeys.ESC && self.activeautocompleteQueueIndex === -1) { // ESC키를 누르고 옵션그룹이 열려있지 않은 경우\n                                U.stopEvent(e);\n                                return this;\n                            }\n                            if (e.which == ax5.info.eventKeys.TAB) {\n                                // nothing\n\n                                this.close();\n                                return this;\n                            }\n                            if (self.activeautocompleteQueueIndex != queIdx) { // 닫힌 상태 인경우\n                                self.open(queIdx); // open and align\n                            }\n                            if (ctrlKeys[e.which]) {\n                                U.stopEvent(e);\n                            }\n                            else {\n                                // backspace 감지 하여 input 값이 없으면 스탑이벤트 처리 할 것\n                                if (e.which == ax5.info.eventKeys.BACKSPACE && this.queue[queIdx].$displayLabelInput.val() == \"\") {\n                                    // 마지막 아이템을 제거.\n                                    this.queue[queIdx].selected.pop();\n                                    syncLabel.call(this, queIdx);\n                                    printLabel.call(this, queIdx);\n                                    focusLabel.call(this, queIdx);\n                                    alignAutocompleteDisplay.call(this);\n                                    alignAutocompleteOptionGroup.call(this);\n                                    U.stopEvent(e);\n                                } else {\n                                    debouncedFocusWord.call(this, queIdx);\n                                }\n                            }\n                        },\n                        'keyDown': function (queIdx, e) {\n                            if (e.which == ax5.info.eventKeys.ESC) {\n                                clearLabel.call(this, queIdx);\n                                this.close();\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.RETURN) {\n                                var inputValue = this.queue[queIdx].$displayLabelInput.val();\n                                if(item.optionFocusIndex > -1) {\n                                    setSelected.call(this, item.id, {\n                                        optionIndex: {\n                                            index: item.optionFocusIndex\n                                        }\n                                    }, undefined, \"optionItemClick\");\n                                }else if(inputValue != \"\"){\n                                    setSelected.call(this, queIdx, inputValue, true);\n                                }\n                                clearLabel.call(this, queIdx);\n                                alignAutocompleteDisplay.call(this);\n                                this.close();\n\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.DOWN) {\n                                focusMove.call(this, queIdx, 1);\n                                U.stopEvent(e);\n                            }\n                            else if (e.which == ax5.info.eventKeys.UP) {\n                                focusMove.call(this, queIdx, -1);\n                                U.stopEvent(e);\n                            }\n                        },\n                        'focus': function (queIdx, e) {\n                            // console.log(e);\n\n                        },\n                        'blur': function (queIdx, e) {\n                            blurLabel.call(this, queIdx);\n                            U.stopEvent(e);\n                        },\n                        'selectChange': function (queIdx, e) {\n                            setSelected.call(this, queIdx, {value: this.queue[queIdx].$select.val()}, true);\n                        }\n                    };\n\n                    return function (queIdx) {\n                        var item = this.queue[queIdx];\n                        var data = {};\n\n                        if (!item.$display) {\n                            /// 템플릿에 전달할 오브젝트 선언\n                            data.instanceId = this.instanceId;\n                            data.id = item.id;\n                            data.name = item.name;\n                            data.theme = item.theme;\n                            data.tabIndex = item.tabIndex;\n                            data.multiple = item.multiple;\n                            data.reset = item.reset;\n\n                            data.label = getLabel.call(this, queIdx);\n                            data.formSize = (function () {\n                                return (item.size) ? \"input-\" + item.size : \"\";\n                            })();\n\n                            item.$display = jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"autocompleteDisplay\", data, item.columnKeys));\n                            item.$displayTable = item.$display.find('[data-els=\"display-table\"]');\n                            item.$displayLabel = item.$display.find('[data-ax5autocomplete-display=\"label\"]');\n                            item.$displayLabelInput = item.$display.find('[data-ax5autocomplete-display=\"input\"]');\n\n                            if (item.$target.find(\"select\").get(0)) {\n                                item.$select = item.$target.find(\"select\");\n                                item.$select\n                                    .attr(\"tabindex\", \"-1\")\n                                    .attr(\"class\", \"form-control \" + data.formSize);\n\n                                if (data.name) {\n                                    item.$select.attr(\"name\", \"name\");\n                                }\n                                item.$select.attr(\"multiple\", \"multiple\");\n                            }\n                            else {\n                                item.$select = jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"formSelect\", data, item.columnKeys));\n                                item.$target.append(item.$select);\n                            }\n\n                            item.$target.append(item.$display);\n\n                        }\n                        else {\n                            printLabel.call(this, queIdx);\n                        }\n\n                        alignAutocompleteDisplay.call(this);\n\n                        item.$display\n                            .unbind('click.ax5autocomplete')\n                            .bind('click.ax5autocomplete', autocompleteEvent.click.bind(this, queIdx));\n\n                        // autocomplete 태그에 대한 이벤트 감시\n\n                        item.$displayLabelInput\n                            .off(\"focus.ax5autocomplete\")\n                            .on(\"focus.ax5autocomplete\", autocompleteEvent.focus.bind(this, queIdx))\n                            .off(\"blur.ax5autocomplete\")\n                            .on(\"blur.ax5autocomplete\", autocompleteEvent.blur.bind(this, queIdx))\n                            .off(\"keydown.ax5autocomplete\")\n                            .on(\"keydown.ax5autocomplete\", autocompleteEvent.keyUp.bind(this, queIdx))\n                            .off(\"keyup.ax5autocomplete\")\n                            .on(\"keyup.ax5autocomplete\", autocompleteEvent.keyDown.bind(this, queIdx));\n\n                        // select 태그에 대한 change 이벤트 감시\n\n                        item.$select\n                            .unbind('change.ax5autocomplete')\n                            .bind('change.ax5autocomplete', autocompleteEvent.selectChange.bind(this, queIdx));\n\n                        data = null;\n                        item = null;\n                        queIdx = null;\n                        return this;\n                    };\n                })();\n\n                var\n                    autocompleteConfig = {},\n                    queIdx;\n\n                item = jQuery.extend(true, autocompleteConfig, cfg, item);\n                if (!item.target) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"401\", \"bind\"));\n                    return this;\n                }\n\n                item.$target = jQuery(item.target);\n\n                if (!item.id) item.id = item.$target.data(\"data-ax5autocomplete-id\");\n                if (!item.id) {\n                    item.id = 'ax5autocomplete-' + ax5.getGuid();\n                    item.$target.data(\"data-ax5autocomplete-id\", item.id);\n                }\n                item.name = item.$target.attr(\"data-ax5autocomplete\");\n\n                item.options = [];\n                item.selected = [];\n\n                // target attribute data\n                (function (data) {\n                    if (U.isObject(data) && !data.error) {\n                        item = jQuery.extend(true, item, data);\n                    }\n                })(U.parseJson(item.$target.attr(\"data-ax5autocomplete-config\"), true));\n\n                queIdx = U.search(this.queue, function () {\n                    return this.id == item.id;\n                });\n\n                if (queIdx === -1) {\n                    this.queue.push(item);\n                    bindAutocompleteTarget.call(this, this.queue.length - 1);\n                }\n                else {\n                    this.queue[queIdx] = jQuery.extend(true, {}, this.queue[queIdx], item);\n                    bindAutocompleteTarget.call(this, queIdx);\n                }\n\n                autocompleteConfig = null;\n                queIdx = null;\n                return this;\n            };\n\n            /**\n             * open the optionBox of autocomplete\n             * @method ax5autocomplete.open\n             * @param {(String|Number|Element)} boundID\n             * @param {Number} [tryCount]\n             * @returns {ax5autocomplete}\n             */\n            this.open = (function () {\n\n                return function (boundID, tryCount) {\n                    this.waitOptionsCallback = null;\n\n                    /**\n                     * open autocomplete from the outside\n                     */\n                    var queIdx = (U.isNumber(boundID)) ? boundID : getQueIdx.call(this, boundID);\n                    var item = this.queue[queIdx];\n                    var data = {}, focusTop, selectedOptionEl;\n\n                    if (item.$display.attr(\"disabled\")) return this;\n\n                    if (this.openTimer) clearTimeout(this.openTimer);\n                    if (this.activeautocompleteOptionGroup) {\n                        if (this.activeautocompleteQueueIndex == queIdx) {\n                            return this;\n                        }\n\n                        if (tryCount > 2) return this;\n                        this.close();\n                        this.openTimer = setTimeout((function () {\n                            this.open(queIdx, (tryCount || 0) + 1);\n                        }).bind(this), cfg.animateTime);\n\n                        return this;\n                    }\n\n                    item.optionFocusIndex = -1; // optionGroup이 열리면 포커스 인덱스 초기화 -1로\n                    if (item.selected && item.selected.length > 0) {\n                        item.optionSelectedIndex = item.selected[0][\"@findex\"];\n                    }\n\n                    /// 템플릿에 전달할 오브젝트 선언\n                    data.id = item.id;\n                    data.theme = item.theme;\n                    data.size = \"ax5autocomplete-option-group-\" + item.size;\n                    data.multiple = item.multiple;\n\n                    data.lang = item.lang;\n                    item.$display.attr(\"data-autocomplete-option-group-opened\", \"true\");\n\n                    data.waitOptions = true;\n                    data.options = [];\n\n                    this.activeautocompleteOptionGroup = jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"optionGroup\", data, item.columnKeys));\n                    this.activeautocompleteOptionGroup.find('[data-els=\"content\"]').html(jQuery(AUTOCOMPLETE.tmpl.get.call(this, \"options\", data, item.columnKeys)));\n                    this.activeautocompleteQueueIndex = queIdx;\n\n                    alignAutocompleteOptionGroup.call(this, \"append\"); // alignAutocompleteOptionGroup 에서 body append\n                    jQuery(window).bind(\"resize.ax5autocomplete-\" + this.instanceId, (function () {\n                        alignAutocompleteOptionGroup.call(this);\n                    }).bind(this));\n\n\n                    if (item.selected && item.selected.length > 0) {\n                        selectedOptionEl = this.activeautocompleteOptionGroup.find('[data-option-index=\"' + item.selected[0][\"@index\"] + '\"]');\n                        if (selectedOptionEl.get(0)) {\n                            focusTop = selectedOptionEl.position().top - this.activeautocompleteOptionGroup.height() / 3;\n                            this.activeautocompleteOptionGroup.find('[data-els=\"content\"]')\n                                .stop().animate({scrollTop: focusTop}, item.animateTime, 'swing', function () {\n                            });\n                        }\n                    }\n\n                    jQuery(window).bind(\"click.ax5autocomplete-\" + this.instanceId, (function (e) {\n                        e = e || window.event;\n                        onBodyClick.call(this, e);\n                        U.stopEvent(e);\n                    }).bind(this));\n\n                    onStateChanged.call(this, item, {\n                        self: this,\n                        state: \"open\",\n                        item: item\n                    });\n\n                    data = null;\n                    focusTop = null;\n                    selectedOptionEl = null;\n                    return this;\n                }\n            })();\n\n            /**\n             * @method ax5autocomplete.setValue\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @param {(String|Array)} _value\n             * @return {ax5autocomplete}\n             * @example\n             * ```js\n             * myAutocomplete.setValue($('[data-ax5autocomplete=\"autocomplete1\"]'), {value:\"test\", text:\"test\"});\n             * myAutocomplete.setValue($('[data-ax5autocomplete=\"autocomplete1\"]'), [{value:\"test1\", text:\"test1\"}, {value:\"test2\", text:\"test2\"}]);\n             * myAutocomplete.setValue($('[data-ax5autocomplete=\"autocomplete1\"]'), null);\n             * ```\n             */\n            this.setValue = function (_boundID, _value) {\n                var queIdx = (U.isNumber(_boundID)) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n\n                clearSelected.call(this, queIdx);\n\n                if (U.isArray(_value)) {\n                    var _values = U.map(_value, function () {\n                        return {value: this};\n                    });\n                    setSelected.call(this, queIdx, _values, true, {noStateChange: true});\n                }\n                else if (U.isObject(_value)) {\n                    setSelected.call(this, queIdx, {value: _value}, true, {noStateChange: true});\n                } else {\n                    printLabel.call(this, queIdx);\n                }\n\n                blurLabel.call(this, queIdx);\n                alignAutocompleteDisplay.call(this);\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.setText\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @param {(String|Array)} _text\n             * @returns {ax5autocomplete}\n             * @example\n             * ```js\n             * myAutocomplete.setText($('[data-ax5autocomplete=\"autocomplete1\"]'), \"string\");\n             * myAutocomplete.setText($('[data-ax5autocomplete=\"autocomplete1\"]'), [\"substring\", \"search\"]);\n             * ```\n             */\n            this.setText = function (_boundID, _text) {\n                var queIdx = (U.isNumber(_boundID)) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n                this.queue[queIdx].selected = [];\n                clearSelected.call(this, queIdx);\n                setSelected.call(this, queIdx, _text, true, {noStateChange: true});\n                blurLabel.call(this, queIdx);\n                alignAutocompleteDisplay.call(this);\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.getSelectedOption\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {Array}\n             */\n            this.getSelectedOption = function (_boundID) {\n                var queIdx = (U.isNumber(_boundID)) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n                return U.deepCopy(this.queue[queIdx].selected);\n            };\n\n            /**\n             * @method ax5autocomplete.close\n             * @returns {ax5autocomplete}\n             */\n            this.close = function (item) {\n                if (this.closeTimer) clearTimeout(this.closeTimer);\n                if (!this.activeautocompleteOptionGroup) return this;\n\n                item = this.queue[this.activeautocompleteQueueIndex];\n                item.optionFocusIndex = -1;\n                item.$display.removeAttr(\"data-autocomplete-option-group-opened\").trigger(\"focus\");\n\n                this.activeautocompleteOptionGroup.addClass(\"destroy\");\n\n                jQuery(window)\n                    .unbind(\"resize.ax5autocomplete-\" + this.instanceId)\n                    .unbind(\"click.ax5autocomplete-\" + this.instanceId)\n                    .unbind(\"keyup.ax5autocomplete-\" + this.instanceId);\n\n                this.closeTimer = setTimeout((function () {\n                    if (this.activeautocompleteOptionGroup) this.activeautocompleteOptionGroup.remove();\n                    this.activeautocompleteOptionGroup = null;\n                    this.activeautocompleteQueueIndex = -1;\n\n                    onStateChanged.call(this, item, {\n                        self: this,\n                        state: \"close\"\n                    });\n\n                }).bind(this), cfg.animateTime);\n                this.waitOptionsCallback = null;\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.blur\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {ax5autocomplete}\n             */\n            this.blur = function (_boundID) {\n                var queIdx = (U.isNumber(_boundID)) ? _boundID : getQueIdx.call(this, _boundID);\n                if (queIdx === -1) {\n                    console.log(ax5.info.getError(\"ax5autocomplete\", \"402\", \"val\"));\n                    return;\n                }\n\n                blurLabel.call(this, queIdx);\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.enable\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {ax5autocomplete}\n             */\n            this.enable = function (_boundID) {\n                var queIdx = getQueIdx.call(this, _boundID);\n\n                if (typeof queIdx !== \"undefined\") {\n                    this.queue[queIdx].disable = false;\n                    if (this.queue[queIdx].$display[0]) {\n                        this.queue[queIdx].$display.removeAttr(\"disabled\");\n                        this.queue[queIdx].$displayLabelInput.removeAttr(\"disabled\");\n                    }\n                    if (this.queue[queIdx].$select[0]) {\n                        this.queue[queIdx].$select.removeAttr(\"disabled\");\n\n                    }\n\n                    onStateChanged.call(this, this.queue[queIdx], {\n                        self: this,\n                        state: \"enable\"\n                    });\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.disable\n             * @param {(jQueryObject|Element|Number)} _boundID\n             * @returns {ax5autocomplete}\n             */\n            this.disable = function (_boundID) {\n                var queIdx = getQueIdx.call(this, _boundID);\n\n                if (typeof queIdx !== \"undefined\") {\n                    this.queue[queIdx].disable = true;\n                    if (this.queue[queIdx].$display[0]) {\n                        this.queue[queIdx].$display.attr(\"disabled\", \"disabled\");\n                        this.queue[queIdx].$displayLabelInput.attr(\"disabled\", \"disabled\");\n                    }\n                    if (this.queue[queIdx].$select[0]) {\n                        this.queue[queIdx].$select.attr(\"disabled\", \"disabled\");\n                    }\n\n                    onStateChanged.call(this, this.queue[queIdx], {\n                        self: this,\n                        state: \"disable\"\n                    });\n                }\n\n                return this;\n            };\n\n            /**\n             * @method ax5autocomplete.align\n             */\n            this.align = function () {\n                alignAutocompleteDisplay.call(this);\n                return this;\n            };\n\n            // 클래스 생성자\n            this.main = (function () {\n                if (arguments && U.isObject(arguments[0])) {\n                    this.setConfig(arguments[0]);\n                }\n                else {\n                    this.init();\n                }\n            }).apply(this, arguments);\n        };\n        return ax5autocomplete;\n    })());\n\n    AUTOCOMPLETE = ax5.ui.autocomplete;\n})();\n\n/**\n * autocomplete jquery extends\n * @namespace jQueryExtends\n */\n\n/**\n * @method jQueryExtends.ax5autocomplete\n * @param {String} methodName\n * @param [arguments]\n * @param [arguments]\n * @example\n * ```html\n * <div data-ax5autocomplete=\"ax1\" data-ax5autocomplete-config='{\n *  multiple: true,\n *  editable: true,\n *  size: \"\",\n *  theme:\"\"\n *  }'></div>\n * <script>\n * jQuery('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete();\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"getSelectedOption\");\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"setValue\", {value:\"test\", text:\"test\"});\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"enable\");\n * $('[data-ax5autocomplete=\"ax1\"]').ax5autocomplete(\"disable\");\n * </script>\n * ```\n */\nax5.ui.autocomplete_instance = new ax5.ui.autocomplete();\njQuery.fn.ax5autocomplete = (function () {\n    return function (config) {\n        if (ax5.util.isString(arguments[0])) {\n            var methodName = arguments[0];\n\n            switch (methodName) {\n                case \"open\":\n                    return ax5.ui.autocomplete_instance.open(this);\n                    break;\n                case \"close\":\n                    return ax5.ui.autocomplete_instance.close(this);\n                    break;\n                case \"setValue\":\n                    return ax5.ui.autocomplete_instance.setValue(this, arguments[1], arguments[2], arguments[3], arguments[4] || \"justSetValue\");\n                    break;\n                case \"setText\":\n                    return ax5.ui.autocomplete_instance.setText(this, arguments[1], arguments[2], arguments[3], arguments[4] || \"justSetValue\");\n                    break;\n                case \"getSelectedOption\":\n                    return ax5.ui.autocomplete_instance.getSelectedOption(this);\n                    break;\n                case \"enable\":\n                    return ax5.ui.autocomplete_instance.enable(this);\n                    break;\n                case \"disable\":\n                    return ax5.ui.autocomplete_instance.disable(this);\n                    break;\n                case \"blur\":\n                    return ax5.ui.autocomplete_instance.blur(this);\n                default:\n                    return this;\n            }\n        }\n        else {\n            if (typeof config == \"undefined\") config = {};\n            jQuery.each(this, function () {\n                var defaultConfig = {\n                    target: this\n                };\n                config = jQuery.extend({}, config, defaultConfig);\n                ax5.ui.autocomplete_instance.bind(config);\n            });\n        }\n        return this;\n    }\n})();\n\n\n// todo : editable 지원.\n// 아이템 박스 안에서 제거 할때 디스플레이 정렬","// ax5.ui.autocomplete.tmpl\n(function () {\n    var AUTOCOMPLETE = ax5.ui.autocomplete;\n    var U = ax5.util;\n\n    var optionGroup = function (columnKeys) {\n        return `\n<div class=\"ax5autocomplete-option-group {{theme}} {{size}}\" data-ax5autocomplete-option-group=\"{{id}}\">\n    <div class=\"ax-autocomplete-body\">\n        <div class=\"ax-autocomplete-option-group-content\" data-els=\"content\"></div>\n    </div>\n    <div class=\"ax-autocomplete-arrow\"></div> \n</div>\n`;\n    };\n\n    var autocompleteDisplay = function (columnKeys) {\n        return ` \n<input tabindex=\"-1\" type=\"text\" data-input-dummy=\"\" style=\"display: none;\" />\n<div class=\"form-control {{formSize}} ax5autocomplete-display {{theme}}\" \ndata-ax5autocomplete-display=\"{{id}}\" data-ax5autocomplete-instance=\"{{instanceId}}\">\n    <div class=\"ax5autocomplete-display-table\" data-els=\"display-table\">\n        <div data-ax5autocomplete-display=\"label-holder\"> \n        <a {{^tabIndex}}{{/tabIndex}}{{#tabIndex}}tabindex=\"{{tabIndex}}\" {{/tabIndex}}\n        data-ax5autocomplete-display=\"label\"\n        spellcheck=\"false\"><input type=\"text\"data-ax5autocomplete-display=\"input\" style=\"border:0px none;background: transparent;\" /></a>\n        </div>\n        <div data-ax5autocomplete-display=\"addon\"> \n            {{#multiple}}{{#reset}}\n            <span class=\"addon-icon-reset\" data-selected-clear=\"true\">{{{.}}}</span>\n            {{/reset}}{{/multiple}}\n        </div>\n    </div>\n</a>\n`;\n    };\n\n    var formSelect = function (columnKeys) {\n        return `\n<select tabindex=\"-1\" class=\"form-control {{formSize}}\" name=\"{{name}}\" multiple=\"multiple\"></select>\n`;\n    };\n\n    var formSelectOptions = function (columnKeys) {\n        return `\n{{#selected}}\n<option value=\"{{${columnKeys.optionValue}}}\" selected=\"true\">{{${columnKeys.optionText}}}</option>\n{{/selected}}\n`;\n    };\n\n\n    var options = function (columnKeys) {\n        return `\n{{#waitOptions}}\n    <div class=\"ax-autocomplete-option-item\">\n            <div class=\"ax-autocomplete-option-item-holder\">\n                <span class=\"ax-autocomplete-option-item-cell ax-autocomplete-option-item-label\">\n                    {{{lang.loading}}}\n                </span>\n            </div>\n        </div>\n{{/waitOptions}}\n{{^waitOptions}}\n    {{#options}}\n        {{^hide}}\n        <div class=\"ax-autocomplete-option-item\" data-option-focus-index=\"{{@findex}}\" data-option-index=\"{{@index}}\" data-option-value=\"{{${columnKeys.optionValue}}}\" {{#${columnKeys.optionSelected}}}data-option-selected=\"true\"{{/${columnKeys.optionSelected}}}>\n            <div class=\"ax-autocomplete-option-item-holder\">\n                <span class=\"ax-autocomplete-option-item-cell ax-autocomplete-option-item-label\">{{${columnKeys.optionText}}}</span>\n            </div>\n        </div>\n        {{/hide}}\n    {{/options}}\n    {{^options}}\n        <div class=\"ax-autocomplete-option-item\">\n            <div class=\"ax-autocomplete-option-item-holder\">\n                <span class=\"ax-autocomplete-option-item-cell ax-autocomplete-option-item-label\">\n                    {{{lang.noOptions}}}\n                </span>\n            </div>\n        </div>\n    {{/options}}\n{{/waitOptions}}\n`;\n    };\n\n    var label = function (columnKeys) {\n        return `{{#selected}}<div tabindex=\"-1\" data-ax5autocomplete-selected-label=\"{{@i}}\" data-ax5autocomplete-selected-text=\"{{text}}\"><div data-ax5autocomplete-remove=\"true\" data-ax5autocomplete-remove-index=\"{{@i}}\">{{{removeIcon}}}</div><span>{{text}}</span></div>{{/selected}}`;\n    };\n\n    AUTOCOMPLETE.tmpl = {\n        \"autocompleteDisplay\": autocompleteDisplay,\n        \"formSelect\": formSelect,\n        \"formSelectOptions\": formSelectOptions,\n        \"optionGroup\": optionGroup,\n        \"options\": options,\n        \"label\": label,\n\n        get: function (tmplName, data, columnKeys) {\n            return ax5.mustache.render(AUTOCOMPLETE.tmpl[tmplName].call(this, columnKeys), data);\n        }\n    };\n})();"]}